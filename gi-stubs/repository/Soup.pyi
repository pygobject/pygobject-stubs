COOKIE_MAX_AGE_ONE_DAY = ...
COOKIE_MAX_AGE_ONE_HOUR: int = ...
COOKIE_MAX_AGE_ONE_WEEK = ...
COOKIE_MAX_AGE_ONE_YEAR = ...
FORM_MIME_TYPE_MULTIPART: str = ...
FORM_MIME_TYPE_URLENCODED: str = ...
HSTS_POLICY_MAX_AGE_PAST = ...
HTTP_URI_FLAGS: int = ...
MAJOR_VERSION: int = ...
MICRO_VERSION: int = ...
MINOR_VERSION = ...
VERSION_MIN_REQUIRED: int = ...
_namespace: str = ...
_version: str = ...

def check_version(*args, **kwargs): ...
def cookie_parse(*args, **kwargs): ...
def cookies_from_request(*args, **kwargs): ...
def cookies_from_response(*args, **kwargs): ...
def cookies_to_cookie_header(*args, **kwargs): ...
def cookies_to_request(*args, **kwargs): ...
def cookies_to_response(*args, **kwargs): ...
def date_time_new_from_http_string(*args, **kwargs): ...
def date_time_to_string(*args, **kwargs): ...
def form_decode(*args, **kwargs): ...
def form_decode_multipart(*args, **kwargs): ...
def form_encode_datalist(*args, **kwargs): ...
def form_encode_hash(*args, **kwargs): ...
def get_major_version(*args, **kwargs): ...
def get_micro_version(*args, **kwargs): ...
def get_minor_version(*args, **kwargs): ...
def header_contains(*args, **kwargs): ...
def header_free_param_list(*args, **kwargs): ...
def header_g_string_append_param(*args, **kwargs): ...
def header_g_string_append_param_quoted(*args, **kwargs): ...
def header_parse_list(*args, **kwargs): ...
def header_parse_param_list(*args, **kwargs): ...
def header_parse_param_list_strict(*args, **kwargs): ...
def header_parse_quality_list(*args, **kwargs): ...
def header_parse_semi_param_list(*args, **kwargs): ...
def header_parse_semi_param_list_strict(*args, **kwargs): ...
def headers_parse(*args, **kwargs): ...
def headers_parse_request(*args, **kwargs): ...
def headers_parse_response(*args, **kwargs): ...
def headers_parse_status_line(*args, **kwargs): ...
def message_headers_iter_init(*args, **kwargs): ...
def session_error_quark(*args, **kwargs): ...
def status_get_phrase(*args, **kwargs): ...
def tld_domain_is_public_suffix(*args, **kwargs): ...
def tld_error_quark(*args, **kwargs): ...
def tld_get_base_domain(*args, **kwargs): ...
def uri_decode_data_uri(*args, **kwargs): ...
def uri_equal(*args, **kwargs): ...
def websocket_client_prepare_handshake(*args, **kwargs): ...
def websocket_client_verify_handshake(*args, **kwargs): ...
def websocket_error_quark(*args, **kwargs): ...
def websocket_server_check_handshake(*args, **kwargs): ...
def websocket_server_process_handshake(*args, **kwargs): ...

class Auth:
    parent_instance = ...

    def authenticate(*args, **kwargs): ...
    def can_authenticate(*args, **kwargs): ...
    def cancel(*args, **kwargs): ...
    def get_authority(*args, **kwargs): ...
    def get_authorization(*args, **kwargs): ...
    def get_info(*args, **kwargs): ...
    def get_protection_space(*args, **kwargs): ...
    def get_realm(*args, **kwargs): ...
    def get_scheme_name(*args, **kwargs): ...
    def is_authenticated(*args, **kwargs): ...
    def is_cancelled(*args, **kwargs): ...
    def is_for_proxy(*args, **kwargs): ...
    def is_ready(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def update(*args, **kwargs): ...
    def do_authenticate(self, *args, **kwargs): ...
    def do_can_authenticate(self, *args, **kwargs): ...
    def do_get_authorization(self, *args, **kwargs): ...
    def do_get_protection_space(self, *args, **kwargs): ...
    def do_is_authenticated(self, *args, **kwargs): ...
    def do_is_ready(self, *args, **kwargs): ...
    def do_update(self, *args, **kwargs): ...

class AuthBasic: ...
class AuthDigest: ...

class AuthDomain:
    parent_instance = ...

    def accepts(*args, **kwargs): ...
    def add_path(*args, **kwargs): ...
    def challenge(*args, **kwargs): ...
    def check_password(*args, **kwargs): ...
    def covers(*args, **kwargs): ...
    def get_realm(*args, **kwargs): ...
    def remove_path(*args, **kwargs): ...
    def set_filter(*args, **kwargs): ...
    def set_generic_auth_callback(*args, **kwargs): ...
    def do_accepts(self, *args, **kwargs): ...
    def do_challenge(self, *args, **kwargs): ...
    def do_check_password(self, *args, **kwargs): ...

class AuthDomainBasic:
    def set_auth_callback(*args, **kwargs): ...

class AuthDomainDigest:
    def encode_password(*args, **kwargs): ...
    def set_auth_callback(*args, **kwargs): ...

class AuthManager:
    def clear_cached_credentials(*args, **kwargs): ...
    def use_auth(*args, **kwargs): ...

class AuthNTLM: ...

class AuthNegotiate:
    def supported(*args, **kwargs): ...

class Cache:
    parent_instance = ...

    def clear(*args, **kwargs): ...
    def dump(*args, **kwargs): ...
    def flush(*args, **kwargs): ...
    def get_max_size(*args, **kwargs): ...
    def load(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_max_size(*args, **kwargs): ...
    def do_get_cacheability(self, *args, **kwargs): ...

class ContentDecoder: ...

class ContentSniffer:
    def new(*args, **kwargs): ...
    def sniff(*args, **kwargs): ...

class Cookie:
    def applies_to_uri(*args, **kwargs): ...
    def domain_matches(*args, **kwargs): ...
    def equal(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def get_domain(*args, **kwargs): ...
    def get_expires(*args, **kwargs): ...
    def get_http_only(*args, **kwargs): ...
    def get_name(*args, **kwargs): ...
    def get_path(*args, **kwargs): ...
    def get_same_site_policy(*args, **kwargs): ...
    def get_secure(*args, **kwargs): ...
    def get_value(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def parse(*args, **kwargs): ...
    def set_domain(*args, **kwargs): ...
    def set_expires(*args, **kwargs): ...
    def set_http_only(*args, **kwargs): ...
    def set_max_age(*args, **kwargs): ...
    def set_name(*args, **kwargs): ...
    def set_path(*args, **kwargs): ...
    def set_same_site_policy(*args, **kwargs): ...
    def set_secure(*args, **kwargs): ...
    def set_value(*args, **kwargs): ...
    def to_cookie_header(*args, **kwargs): ...
    def to_set_cookie_header(*args, **kwargs): ...

class CookieJar:
    parent_instance = ...

    def add_cookie(*args, **kwargs): ...
    def add_cookie_full(*args, **kwargs): ...
    def add_cookie_with_first_party(*args, **kwargs): ...
    def all_cookies(*args, **kwargs): ...
    def delete_cookie(*args, **kwargs): ...
    def get_accept_policy(*args, **kwargs): ...
    def get_cookie_list(*args, **kwargs): ...
    def get_cookie_list_with_same_site_info(*args, **kwargs): ...
    def get_cookies(*args, **kwargs): ...
    def is_persistent(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_accept_policy(*args, **kwargs): ...
    def set_cookie(*args, **kwargs): ...
    def set_cookie_with_first_party(*args, **kwargs): ...
    def do_changed(self, *args, **kwargs): ...
    def do_is_persistent(self, *args, **kwargs): ...
    def do_save(self, *args, **kwargs): ...

class CookieJarDB: ...
class CookieJarText: ...

class HSTSEnforcer:
    parent_instance = ...

    def get_domains(*args, **kwargs): ...
    def get_policies(*args, **kwargs): ...
    def has_valid_policy(*args, **kwargs): ...
    def is_persistent(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_policy(*args, **kwargs): ...
    def set_session_policy(*args, **kwargs): ...
    def do_changed(self, *args, **kwargs): ...
    def do_has_valid_policy(self, *args, **kwargs): ...
    def do_is_persistent(self, *args, **kwargs): ...

class HSTSEnforcerDB: ...

class HSTSPolicy:
    def equal(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def get_domain(*args, **kwargs): ...
    def get_expires(*args, **kwargs): ...
    def get_max_age(*args, **kwargs): ...
    def includes_subdomains(*args, **kwargs): ...
    def is_expired(*args, **kwargs): ...
    def is_session_policy(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_from_response(*args, **kwargs): ...
    def new_full(*args, **kwargs): ...
    def new_session_policy(*args, **kwargs): ...

class Logger:
    def get_max_body_size(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_max_body_size(*args, **kwargs): ...
    def set_printer(*args, **kwargs): ...
    def set_request_filter(*args, **kwargs): ...
    def set_response_filter(*args, **kwargs): ...

class Message:
    def add_flags(*args, **kwargs): ...
    def disable_feature(*args, **kwargs): ...
    def get_connection_id(*args, **kwargs): ...
    def get_first_party(*args, **kwargs): ...
    def get_flags(*args, **kwargs): ...
    def get_http_version(*args, **kwargs): ...
    def get_is_options_ping(*args, **kwargs): ...
    def get_is_top_level_navigation(*args, **kwargs): ...
    def get_method(*args, **kwargs): ...
    def get_metrics(*args, **kwargs): ...
    def get_priority(*args, **kwargs): ...
    def get_reason_phrase(*args, **kwargs): ...
    def get_remote_address(*args, **kwargs): ...
    def get_request_headers(*args, **kwargs): ...
    def get_response_headers(*args, **kwargs): ...
    def get_site_for_cookies(*args, **kwargs): ...
    def get_status(*args, **kwargs): ...
    def get_tls_ciphersuite_name(*args, **kwargs): ...
    def get_tls_peer_certificate(*args, **kwargs): ...
    def get_tls_peer_certificate_errors(*args, **kwargs): ...
    def get_tls_protocol_version(*args, **kwargs): ...
    def get_uri(*args, **kwargs): ...
    def is_feature_disabled(*args, **kwargs): ...
    def is_keepalive(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_from_encoded_form(*args, **kwargs): ...
    def new_from_multipart(*args, **kwargs): ...
    def new_from_uri(*args, **kwargs): ...
    def new_options_ping(*args, **kwargs): ...
    def query_flags(*args, **kwargs): ...
    def remove_flags(*args, **kwargs): ...
    def set_first_party(*args, **kwargs): ...
    def set_flags(*args, **kwargs): ...
    def set_is_options_ping(*args, **kwargs): ...
    def set_is_top_level_navigation(*args, **kwargs): ...
    def set_method(*args, **kwargs): ...
    def set_priority(*args, **kwargs): ...
    def set_request_body(*args, **kwargs): ...
    def set_request_body_from_bytes(*args, **kwargs): ...
    def set_site_for_cookies(*args, **kwargs): ...
    def set_tls_client_certificate(*args, **kwargs): ...
    def set_uri(*args, **kwargs): ...
    def tls_client_certificate_password_request_complete(*args, **kwargs): ...

class MessageBody:
    data = ...
    length = ...

    def append(*args, **kwargs): ...
    def append_bytes(*args, **kwargs): ...
    def complete(*args, **kwargs): ...
    def flatten(*args, **kwargs): ...
    def get_accumulate(*args, **kwargs): ...
    def get_chunk(*args, **kwargs): ...
    def got_chunk(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def set_accumulate(*args, **kwargs): ...
    def truncate(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def wrote_chunk(*args, **kwargs): ...

class MessageHeaders:
    def append(*args, **kwargs): ...
    def clean_connection_headers(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def foreach(*args, **kwargs): ...
    def free_ranges(*args, **kwargs): ...
    def get_content_disposition(*args, **kwargs): ...
    def get_content_length(*args, **kwargs): ...
    def get_content_range(*args, **kwargs): ...
    def get_content_type(*args, **kwargs): ...
    def get_encoding(*args, **kwargs): ...
    def get_expectations(*args, **kwargs): ...
    def get_headers_type(*args, **kwargs): ...
    def get_list(*args, **kwargs): ...
    def get_one(*args, **kwargs): ...
    def get_ranges(*args, **kwargs): ...
    def header_contains(*args, **kwargs): ...
    def header_equals(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def set_content_disposition(*args, **kwargs): ...
    def set_content_length(*args, **kwargs): ...
    def set_content_range(*args, **kwargs): ...
    def set_content_type(*args, **kwargs): ...
    def set_encoding(*args, **kwargs): ...
    def set_expectations(*args, **kwargs): ...
    def set_range(*args, **kwargs): ...
    def set_ranges(*args, **kwargs): ...
    def unref(*args, **kwargs): ...

class MessageHeadersIter:
    dummy = ...

    def init(*args, **kwargs): ...
    def next(*args, **kwargs): ...

class MessageMetrics:
    def free(*args, **kwargs): ...
    def get_connect_end(*args, **kwargs): ...
    def get_connect_start(*args, **kwargs): ...
    def get_dns_end(*args, **kwargs): ...
    def get_dns_start(*args, **kwargs): ...
    def get_fetch_start(*args, **kwargs): ...
    def get_request_body_bytes_sent(*args, **kwargs): ...
    def get_request_body_size(*args, **kwargs): ...
    def get_request_header_bytes_sent(*args, **kwargs): ...
    def get_request_start(*args, **kwargs): ...
    def get_response_body_bytes_received(*args, **kwargs): ...
    def get_response_body_size(*args, **kwargs): ...
    def get_response_end(*args, **kwargs): ...
    def get_response_header_bytes_received(*args, **kwargs): ...
    def get_response_start(*args, **kwargs): ...
    def get_tls_start(*args, **kwargs): ...

class Multipart:
    def append_form_file(*args, **kwargs): ...
    def append_form_string(*args, **kwargs): ...
    def append_part(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def get_length(*args, **kwargs): ...
    def get_part(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_from_message(*args, **kwargs): ...
    def to_message(*args, **kwargs): ...

class MultipartInputStream:
    def get_headers(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def next_part(*args, **kwargs): ...
    def next_part_async(*args, **kwargs): ...
    def next_part_finish(*args, **kwargs): ...

class Range:
    end = ...
    start = ...

class Server:
    parent_instance = ...

    def accept_iostream(*args, **kwargs): ...
    def add_auth_domain(*args, **kwargs): ...
    def add_early_handler(*args, **kwargs): ...
    def add_handler(*args, **kwargs): ...
    def add_websocket_extension(*args, **kwargs): ...
    def add_websocket_handler(*args, **kwargs): ...
    def get_listeners(*args, **kwargs): ...
    def get_tls_auth_mode(*args, **kwargs): ...
    def get_tls_certificate(*args, **kwargs): ...
    def get_tls_database(*args, **kwargs): ...
    def get_uris(*args, **kwargs): ...
    def is_https(*args, **kwargs): ...
    def listen(*args, **kwargs): ...
    def listen_all(*args, **kwargs): ...
    def listen_local(*args, **kwargs): ...
    def listen_socket(*args, **kwargs): ...
    def pause_message(*args, **kwargs): ...
    def remove_auth_domain(*args, **kwargs): ...
    def remove_handler(*args, **kwargs): ...
    def remove_websocket_extension(*args, **kwargs): ...
    def set_tls_auth_mode(*args, **kwargs): ...
    def set_tls_certificate(*args, **kwargs): ...
    def set_tls_database(*args, **kwargs): ...
    def unpause_message(*args, **kwargs): ...
    def do_request_aborted(self, *args, **kwargs): ...
    def do_request_finished(self, *args, **kwargs): ...
    def do_request_read(self, *args, **kwargs): ...
    def do_request_started(self, *args, **kwargs): ...

class ServerMessage:
    def get_http_version(*args, **kwargs): ...
    def get_local_address(*args, **kwargs): ...
    def get_method(*args, **kwargs): ...
    def get_reason_phrase(*args, **kwargs): ...
    def get_remote_address(*args, **kwargs): ...
    def get_remote_host(*args, **kwargs): ...
    def get_request_body(*args, **kwargs): ...
    def get_request_headers(*args, **kwargs): ...
    def get_response_body(*args, **kwargs): ...
    def get_response_headers(*args, **kwargs): ...
    def get_socket(*args, **kwargs): ...
    def get_status(*args, **kwargs): ...
    def get_uri(*args, **kwargs): ...
    def is_options_ping(*args, **kwargs): ...
    def set_http_version(*args, **kwargs): ...
    def set_redirect(*args, **kwargs): ...
    def set_response(*args, **kwargs): ...
    def set_status(*args, **kwargs): ...
    def steal_connection(*args, **kwargs): ...

class Session:
    parent_instance = ...

    def abort(*args, **kwargs): ...
    def add_feature(*args, **kwargs): ...
    def add_feature_by_type(*args, **kwargs): ...
    def get_accept_language(*args, **kwargs): ...
    def get_accept_language_auto(*args, **kwargs): ...
    def get_async_result_message(*args, **kwargs): ...
    def get_feature(*args, **kwargs): ...
    def get_feature_for_message(*args, **kwargs): ...
    def get_idle_timeout(*args, **kwargs): ...
    def get_local_address(*args, **kwargs): ...
    def get_max_conns(*args, **kwargs): ...
    def get_max_conns_per_host(*args, **kwargs): ...
    def get_proxy_resolver(*args, **kwargs): ...
    def get_remote_connectable(*args, **kwargs): ...
    def get_timeout(*args, **kwargs): ...
    def get_tls_database(*args, **kwargs): ...
    def get_tls_interaction(*args, **kwargs): ...
    def get_user_agent(*args, **kwargs): ...
    def has_feature(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def preconnect_async(*args, **kwargs): ...
    def preconnect_finish(*args, **kwargs): ...
    def remove_feature(*args, **kwargs): ...
    def remove_feature_by_type(*args, **kwargs): ...
    def send(*args, **kwargs): ...
    def send_and_read(*args, **kwargs): ...
    def send_and_read_async(*args, **kwargs): ...
    def send_and_read_finish(*args, **kwargs): ...
    def send_async(*args, **kwargs): ...
    def send_finish(*args, **kwargs): ...
    def set_accept_language(*args, **kwargs): ...
    def set_accept_language_auto(*args, **kwargs): ...
    def set_idle_timeout(*args, **kwargs): ...
    def set_proxy_resolver(*args, **kwargs): ...
    def set_timeout(*args, **kwargs): ...
    def set_tls_database(*args, **kwargs): ...
    def set_tls_interaction(*args, **kwargs): ...
    def set_user_agent(*args, **kwargs): ...
    def websocket_connect_async(*args, **kwargs): ...
    def websocket_connect_finish(*args, **kwargs): ...
    def do_request_queued(self, *args, **kwargs): ...
    def do_request_unqueued(self, *args, **kwargs): ...

class SessionFeature: ...
class SessionFeatureInterface: ...

class WebsocketConnection:
    def close(*args, **kwargs): ...
    def get_close_code(*args, **kwargs): ...
    def get_close_data(*args, **kwargs): ...
    def get_connection_type(*args, **kwargs): ...
    def get_extensions(*args, **kwargs): ...
    def get_io_stream(*args, **kwargs): ...
    def get_keepalive_interval(*args, **kwargs): ...
    def get_max_incoming_payload_size(*args, **kwargs): ...
    def get_origin(*args, **kwargs): ...
    def get_protocol(*args, **kwargs): ...
    def get_state(*args, **kwargs): ...
    def get_uri(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def send_binary(*args, **kwargs): ...
    def send_message(*args, **kwargs): ...
    def send_text(*args, **kwargs): ...
    def set_keepalive_interval(*args, **kwargs): ...
    def set_max_incoming_payload_size(*args, **kwargs): ...

class WebsocketExtension:
    parent_instance = ...

    def configure(*args, **kwargs): ...
    def get_request_params(*args, **kwargs): ...
    def get_response_params(*args, **kwargs): ...
    def process_incoming_message(*args, **kwargs): ...
    def process_outgoing_message(*args, **kwargs): ...
    def do_configure(self, *args, **kwargs): ...
    def do_get_request_params(self, *args, **kwargs): ...
    def do_get_response_params(self, *args, **kwargs): ...
    def do_process_incoming_message(self, *args, **kwargs): ...
    def do_process_outgoing_message(self, *args, **kwargs): ...

class WebsocketExtensionDeflate: ...
class WebsocketExtensionManager: ...

class Cacheability(GObject.GFlags):
    CACHEABLE = ...
    INVALIDATES = ...
    UNCACHEABLE = ...
    VALIDATES = ...

class Expectation(GObject.GFlags):
    CONTINUE = ...
    UNRECOGNIZED = ...

class MessageFlags(GObject.GFlags):
    COLLECT_METRICS = ...
    DO_NOT_USE_AUTH_CACHE = ...
    IDEMPOTENT = ...
    NEW_CONNECTION = ...
    NO_REDIRECT = ...

class ServerListenOptions(GObject.GFlags):
    HTTPS = ...
    IPV4_ONLY = ...
    IPV6_ONLY = ...

class CacheType(GObject.GEnum):
    SHARED = ...
    SINGLE_USER = ...

class CookieJarAcceptPolicy(GObject.GEnum):
    ALWAYS = ...
    GRANDFATHERED_THIRD_PARTY = ...
    NEVER = ...
    NO_THIRD_PARTY = ...

class DateFormat(GObject.GEnum):
    COOKIE = ...
    HTTP = ...

class Encoding(GObject.GEnum):
    BYTERANGES = ...
    CHUNKED = ...
    CONTENT_LENGTH = ...
    EOF = ...
    NONE = ...
    UNRECOGNIZED = ...

class HTTPVersion(GObject.GEnum):
    HTTP_1_0 = ...
    HTTP_1_1 = ...
    HTTP_2_0 = ...

class LoggerLogLevel(GObject.GEnum):
    BODY = ...
    HEADERS = ...
    MINIMAL = ...
    NONE = ...

class MemoryUse(GObject.GEnum):
    COPY = ...
    STATIC = ...
    TAKE = ...

class MessageHeadersType(GObject.GEnum):
    MULTIPART = ...
    REQUEST = ...
    RESPONSE = ...

class MessagePriority(GObject.GEnum):
    HIGH = ...
    LOW = ...
    NORMAL = ...
    VERY_HIGH = ...
    VERY_LOW = ...

class SameSitePolicy(GObject.GEnum):
    LAX = ...
    NONE = ...
    STRICT = ...

class SessionError(GObject.GEnum):
    ENCODING = ...
    MESSAGE_ALREADY_IN_QUEUE = ...
    PARSING = ...
    REDIRECT_BAD_URI = ...
    REDIRECT_NO_LOCATION = ...
    TOO_MANY_REDIRECTS = ...
    TOO_MANY_RESTARTS = ...
    quark = ...

class Status(GObject.GEnum):
    ACCEPTED = ...
    BAD_GATEWAY = ...
    BAD_REQUEST = ...
    CONFLICT = ...
    CONTINUE = ...
    CREATED = ...
    EXPECTATION_FAILED = ...
    FAILED_DEPENDENCY = ...
    FORBIDDEN = ...
    FOUND = ...
    GATEWAY_TIMEOUT = ...
    GONE = ...
    HTTP_VERSION_NOT_SUPPORTED = ...
    INSUFFICIENT_STORAGE = ...
    INTERNAL_SERVER_ERROR = ...
    INVALID_RANGE = ...
    LENGTH_REQUIRED = ...
    LOCKED = ...
    METHOD_NOT_ALLOWED = ...
    MISDIRECTED_REQUEST = ...
    MOVED_PERMANENTLY = ...
    MOVED_TEMPORARILY = ...
    MULTIPLE_CHOICES = ...
    MULTI_STATUS = ...
    NONE = ...
    NON_AUTHORITATIVE = ...
    NOT_ACCEPTABLE = ...
    NOT_APPEARING_IN_THIS_PROTOCOL = ...
    NOT_EXTENDED = ...
    NOT_FOUND = ...
    NOT_IMPLEMENTED = ...
    NOT_MODIFIED = ...
    NO_CONTENT = ...
    OK = ...
    PARTIAL_CONTENT = ...
    PAYMENT_REQUIRED = ...
    PERMANENT_REDIRECT = ...
    PRECONDITION_FAILED = ...
    PROCESSING = ...
    PROXY_AUTHENTICATION_REQUIRED = ...
    PROXY_UNAUTHORIZED = ...
    REQUESTED_RANGE_NOT_SATISFIABLE = ...
    REQUEST_ENTITY_TOO_LARGE = ...
    REQUEST_TIMEOUT = ...
    REQUEST_URI_TOO_LONG = ...
    RESET_CONTENT = ...
    SEE_OTHER = ...
    SERVICE_UNAVAILABLE = ...
    SWITCHING_PROTOCOLS = ...
    TEMPORARY_REDIRECT = ...
    UNAUTHORIZED = ...
    UNPROCESSABLE_ENTITY = ...
    UNSUPPORTED_MEDIA_TYPE = ...
    USE_PROXY = ...
    get_phrase = ...

class TLDError(GObject.GEnum):
    INVALID_HOSTNAME = ...
    IS_IP_ADDRESS = ...
    NOT_ENOUGH_DOMAINS = ...
    NO_BASE_DOMAIN = ...
    NO_PSL_DATA = ...
    quark = ...

class URIComponent(GObject.GEnum):
    AUTH_PARAMS = ...
    FRAGMENT = ...
    HOST = ...
    NONE = ...
    PASSWORD = ...
    PATH = ...
    PORT = ...
    QUERY = ...
    SCHEME = ...
    USER = ...

class WebsocketCloseCode(GObject.GEnum):
    ABNORMAL = ...
    BAD_DATA = ...
    GOING_AWAY = ...
    NORMAL = ...
    NO_EXTENSION = ...
    NO_STATUS = ...
    POLICY_VIOLATION = ...
    PROTOCOL_ERROR = ...
    SERVER_ERROR = ...
    TLS_HANDSHAKE = ...
    TOO_BIG = ...
    UNSUPPORTED_DATA = ...

class WebsocketConnectionType(GObject.GEnum):
    CLIENT = ...
    SERVER = ...
    UNKNOWN = ...

class WebsocketDataType(GObject.GEnum):
    BINARY = ...
    TEXT = ...

class WebsocketError(GObject.GEnum):
    BAD_HANDSHAKE = ...
    BAD_ORIGIN = ...
    FAILED = ...
    NOT_WEBSOCKET = ...
    quark = ...

class WebsocketState(GObject.GEnum):
    CLOSED = ...
    CLOSING = ...
    OPEN = ...
