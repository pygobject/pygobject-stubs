from typing import Any, Callable, Optional, Union, overload

from gi.repository import GObject

ANALYZER_ANALYZING: int = ...
ASCII_DTOSTR_BUF_SIZE: int = ...
BIG_ENDIAN: int = ...
CSET_A_2_Z: str = ...
CSET_DIGITS: str = ...
CSET_a_2_z: str = ...
DATALIST_FLAGS_MASK: int = ...
DATE_BAD_DAY: int = ...
DATE_BAD_JULIAN: int = ...
DATE_BAD_YEAR: int = ...
DIR_SEPARATOR: int = ...
DIR_SEPARATOR_S: str = ...
E: float = ...
GINT16_FORMAT: str = ...
GINT16_MODIFIER: str = ...
GINT32_FORMAT: str = ...
GINT32_MODIFIER: str = ...
GINT64_FORMAT: str = ...
GINT64_MODIFIER: str = ...
GINTPTR_FORMAT: str = ...
GINTPTR_MODIFIER: str = ...
GNUC_FUNCTION: str = ...
GNUC_PRETTY_FUNCTION: str = ...
GSIZE_FORMAT: str = ...
GSIZE_MODIFIER: str = ...
GSSIZE_FORMAT: str = ...
GSSIZE_MODIFIER: str = ...
GUINT16_FORMAT: str = ...
GUINT32_FORMAT: str = ...
GUINT64_FORMAT: str = ...
GUINTPTR_FORMAT: str = ...
HAVE_GINT64: int = ...
HAVE_GNUC_VARARGS: int = ...
HAVE_GNUC_VISIBILITY: int = ...
HAVE_GROWING_STACK: int = ...
HAVE_ISO_VARARGS: int = ...
HOOK_FLAG_USER_SHIFT: int = ...
IEEE754_DOUBLE_BIAS: int = ...
IEEE754_FLOAT_BIAS: int = ...
IO_ERR: IOCondition = ...
IO_FLAG_APPEND: IOFlags = ...
IO_FLAG_GET_MASK: IOFlags = ...
IO_FLAG_IS_READABLE: IOFlags = ...
IO_FLAG_IS_SEEKABLE: IOFlags = ...
IO_FLAG_IS_WRITEABLE: IOFlags = ...
IO_FLAG_MASK: IOFlags = ...
IO_FLAG_NONBLOCK: IOFlags = ...
IO_FLAG_SET_MASK: IOFlags = ...
IO_HUP: IOCondition = ...
IO_IN: IOCondition = ...
IO_NVAL: IOCondition = ...
IO_OUT: IOCondition = ...
IO_PRI: IOCondition = ...
IO_STATUS_AGAIN: IOStatus = ...
IO_STATUS_EOF: IOStatus = ...
IO_STATUS_ERROR: IOStatus = ...
IO_STATUS_NORMAL: IOStatus = ...
KEY_FILE_DESKTOP_GROUP: str = ...
KEY_FILE_DESKTOP_KEY_ACTIONS: str = ...
KEY_FILE_DESKTOP_KEY_CATEGORIES: str = ...
KEY_FILE_DESKTOP_KEY_COMMENT: str = ...
KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE: str = ...
KEY_FILE_DESKTOP_KEY_EXEC: str = ...
KEY_FILE_DESKTOP_KEY_GENERIC_NAME: str = ...
KEY_FILE_DESKTOP_KEY_HIDDEN: str = ...
KEY_FILE_DESKTOP_KEY_ICON: str = ...
KEY_FILE_DESKTOP_KEY_MIME_TYPE: str = ...
KEY_FILE_DESKTOP_KEY_NAME: str = ...
KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN: str = ...
KEY_FILE_DESKTOP_KEY_NO_DISPLAY: str = ...
KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN: str = ...
KEY_FILE_DESKTOP_KEY_PATH: str = ...
KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY: str = ...
KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS: str = ...
KEY_FILE_DESKTOP_KEY_TERMINAL: str = ...
KEY_FILE_DESKTOP_KEY_TRY_EXEC: str = ...
KEY_FILE_DESKTOP_KEY_TYPE: str = ...
KEY_FILE_DESKTOP_KEY_URL: str = ...
KEY_FILE_DESKTOP_KEY_VERSION: str = ...
KEY_FILE_DESKTOP_TYPE_APPLICATION: str = ...
KEY_FILE_DESKTOP_TYPE_DIRECTORY: str = ...
KEY_FILE_DESKTOP_TYPE_LINK: str = ...
LITTLE_ENDIAN: int = ...
LN10: float = ...
LN2: float = ...
LOG_2_BASE_10: float = ...
LOG_DOMAIN: int = ...
LOG_FATAL_MASK: int = ...
LOG_LEVEL_USER_SHIFT: int = ...
MAJOR_VERSION: int = ...
MAXDOUBLE: float = ...
MAXFLOAT: float = ...
MAXINT: int = ...
MAXINT16: int = ...
MAXINT32: int = ...
MAXINT64: int = ...
MAXINT8: int = ...
MAXLONG: int = ...
MAXOFFSET: int = ...
MAXSHORT: int = ...
MAXSIZE: int = ...
MAXSSIZE: int = ...
MAXUINT: int = ...
MAXUINT16: int = ...
MAXUINT32: int = ...
MAXUINT64: int = ...
MAXUINT8: int = ...
MAXULONG: int = ...
MAXUSHORT: int = ...
MICRO_VERSION: int = ...
MINDOUBLE: float = ...
MINFLOAT: float = ...
MININT: int = ...
MININT16: int = ...
MININT32: int = ...
MININT64: int = ...
MININT8: int = ...
MINLONG: int = ...
MINOFFSET: int = ...
MINOR_VERSION: int = ...
MINSHORT: int = ...
MINSSIZE: int = ...
MODULE_SUFFIX: str = ...
OPTION_ERROR_BAD_VALUE: OptionError = ...
OPTION_ERROR_FAILED: OptionError = ...
OPTION_ERROR_UNKNOWN_OPTION: OptionError = ...
OPTION_FLAG_FILENAME: OptionFlags = ...
OPTION_FLAG_HIDDEN: OptionFlags = ...
OPTION_FLAG_IN_MAIN: OptionFlags = ...
OPTION_FLAG_NOALIAS: OptionFlags = ...
OPTION_FLAG_NO_ARG: OptionFlags = ...
OPTION_FLAG_OPTIONAL_ARG: OptionFlags = ...
OPTION_FLAG_REVERSE: OptionFlags = ...
OPTION_REMAINING: str = ...
PDP_ENDIAN: int = ...
PI: float = ...
PID_FORMAT: str = ...
PI_2: float = ...
PI_4: float = ...
POLLFD_FORMAT: str = ...
PRIORITY_DEFAULT: int = ...
PRIORITY_DEFAULT_IDLE: int = ...
PRIORITY_HIGH: int = ...
PRIORITY_HIGH_IDLE: int = ...
PRIORITY_LOW: int = ...
SEARCHPATH_SEPARATOR: int = ...
SEARCHPATH_SEPARATOR_S: str = ...
SIZEOF_LONG: int = ...
SIZEOF_SIZE_T: int = ...
SIZEOF_SSIZE_T: int = ...
SIZEOF_VOID_P: int = ...
SOURCE_CONTINUE: bool = ...
SOURCE_REMOVE: int = ...
SPAWN_CHILD_INHERITS_STDIN: SpawnFlags = ...
SPAWN_DO_NOT_REAP_CHILD: SpawnFlags = ...
SPAWN_FILE_AND_ARGV_ZERO: SpawnFlags = ...
SPAWN_LEAVE_DESCRIPTORS_OPEN: SpawnFlags = ...
SPAWN_SEARCH_PATH: SpawnFlags = ...
SPAWN_STDERR_TO_DEV_NULL: SpawnFlags = ...
SPAWN_STDOUT_TO_DEV_NULL: SpawnFlags = ...
SQRT2: float = ...
STR_DELIMITERS: str = ...
SYSDEF_AF_INET: int = ...
SYSDEF_AF_INET6: int = ...
SYSDEF_AF_UNIX: int = ...
SYSDEF_MSG_DONTROUTE: int = ...
SYSDEF_MSG_OOB: int = ...
SYSDEF_MSG_PEEK: int = ...
TEST_OPTION_ISOLATE_DIRS: str = ...
TIME_SPAN_DAY: int = ...
TIME_SPAN_HOUR: int = ...
TIME_SPAN_MILLISECOND: int = ...
TIME_SPAN_MINUTE: int = ...
TIME_SPAN_SECOND: int = ...
UNICHAR_MAX_DECOMPOSITION_LENGTH: int = ...
URI_RESERVED_CHARS_GENERIC_DELIMITERS: str = ...
URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS: str = ...
USEC_PER_SEC: int = ...
USER_DIRECTORY_DESKTOP: UserDirectory = ...
USER_DIRECTORY_DOCUMENTS: UserDirectory = ...
USER_DIRECTORY_DOWNLOAD: UserDirectory = ...
USER_DIRECTORY_MUSIC: UserDirectory = ...
USER_DIRECTORY_PICTURES: UserDirectory = ...
USER_DIRECTORY_PUBLIC_SHARE: UserDirectory = ...
USER_DIRECTORY_TEMPLATES: UserDirectory = ...
USER_DIRECTORY_VIDEOS: UserDirectory = ...
VA_COPY_AS_ARRAY: int = ...
VERSION_MIN_REQUIRED: int = ...
WIN32_MSG_HANDLE: int = ...
glib_version: tuple[int, int, int] = ...
pyglib_version: tuple[int, int, int, int, int] = ...

def access(*args, **kwargs): ...
def ascii_digit_value(*args, **kwargs): ...
def ascii_dtostr(*args, **kwargs): ...
def ascii_formatd(*args, **kwargs): ...
def ascii_strcasecmp(*args, **kwargs): ...
def ascii_strdown(*args, **kwargs): ...
def ascii_string_to_signed(*args, **kwargs): ...
def ascii_string_to_unsigned(*args, **kwargs): ...
def ascii_strncasecmp(*args, **kwargs): ...
def ascii_strtod(*args, **kwargs): ...
def ascii_strtoll(*args, **kwargs): ...
def ascii_strtoull(*args, **kwargs): ...
def ascii_strup(*args, **kwargs): ...
def ascii_tolower(*args, **kwargs): ...
def ascii_toupper(*args, **kwargs): ...
def ascii_xdigit_value(*args, **kwargs): ...
def assert_warning(*args, **kwargs): ...
def assertion_message(*args, **kwargs): ...
def assertion_message_cmpstr(*args, **kwargs): ...
def assertion_message_cmpstrv(*args, **kwargs): ...
def assertion_message_error(*args, **kwargs): ...
def atexit(*args, **kwargs): ...
def atomic_int_add(*args, **kwargs): ...
def atomic_int_and(*args, **kwargs): ...
def atomic_int_compare_and_exchange(*args, **kwargs): ...
def atomic_int_dec_and_test(*args, **kwargs): ...
def atomic_int_exchange_and_add(*args, **kwargs): ...
def atomic_int_get(*args, **kwargs): ...
def atomic_int_inc(*args, **kwargs): ...
def atomic_int_or(*args, **kwargs): ...
def atomic_int_set(*args, **kwargs): ...
def atomic_int_xor(*args, **kwargs): ...
def atomic_pointer_add(*args, **kwargs): ...
def atomic_pointer_and(*args, **kwargs): ...
def atomic_pointer_compare_and_exchange(*args, **kwargs): ...
def atomic_pointer_get(*args, **kwargs): ...
def atomic_pointer_or(*args, **kwargs): ...
def atomic_pointer_set(*args, **kwargs): ...
def atomic_pointer_xor(*args, **kwargs): ...
def atomic_rc_box_acquire(*args, **kwargs): ...
def atomic_rc_box_alloc(*args, **kwargs): ...
def atomic_rc_box_alloc0(*args, **kwargs): ...
def atomic_rc_box_dup(*args, **kwargs): ...
def atomic_rc_box_get_size(*args, **kwargs): ...
def atomic_rc_box_release(*args, **kwargs): ...
def atomic_rc_box_release_full(*args, **kwargs): ...
def atomic_ref_count_compare(*args, **kwargs): ...
def atomic_ref_count_dec(*args, **kwargs): ...
def atomic_ref_count_inc(*args, **kwargs): ...
def atomic_ref_count_init(*args, **kwargs): ...
def base64_decode(*args, **kwargs): ...
def base64_decode_inplace(*args, **kwargs): ...
def base64_encode(*args, **kwargs): ...
def base64_encode_close(*args, **kwargs): ...
def base64_encode_step(*args, **kwargs): ...
def basename(*args, **kwargs): ...
def bit_lock(*args, **kwargs): ...
def bit_nth_lsf(*args, **kwargs): ...
def bit_nth_msf(*args, **kwargs): ...
def bit_storage(*args, **kwargs): ...
def bit_trylock(*args, **kwargs): ...
def bit_unlock(*args, **kwargs): ...
def bookmark_file_error_quark(*args, **kwargs): ...
def build_filenamev(*args, **kwargs): ...
def build_pathv(*args, **kwargs): ...
def byte_array_free(*args, **kwargs): ...
def byte_array_free_to_bytes(*args, **kwargs): ...
def byte_array_new(*args, **kwargs): ...
def byte_array_new_take(*args, **kwargs): ...
def byte_array_steal(*args, **kwargs): ...
def byte_array_unref(*args, **kwargs): ...
def canonicalize_filename(*args, **kwargs): ...
def chdir(*args, **kwargs): ...
def check_version(*args, **kwargs): ...
def checksum_type_get_length(*args, **kwargs): ...
def child_watch_add(*args, **kwargs): ...
def child_watch_source_new(*args, **kwargs): ...
def clear_error(*args, **kwargs): ...
def close(*args, **kwargs): ...
def compute_checksum_for_bytes(*args, **kwargs): ...
def compute_checksum_for_data(*args, **kwargs): ...
def compute_checksum_for_string(*args, **kwargs): ...
def compute_hmac_for_bytes(*args, **kwargs): ...
def compute_hmac_for_data(*args, **kwargs): ...
def compute_hmac_for_string(*args, **kwargs): ...
def convert(*args, **kwargs): ...
def convert_error_quark(*args, **kwargs): ...
def convert_with_fallback(*args, **kwargs): ...
def datalist_foreach(*args, **kwargs): ...
def datalist_get_data(*args, **kwargs): ...
def datalist_get_flags(*args, **kwargs): ...
def datalist_id_get_data(*args, **kwargs): ...
def datalist_set_flags(*args, **kwargs): ...
def datalist_unset_flags(*args, **kwargs): ...
def dataset_destroy(*args, **kwargs): ...
def dataset_foreach(*args, **kwargs): ...
def dataset_id_get_data(*args, **kwargs): ...
def date_get_days_in_month(*args, **kwargs): ...
def date_get_monday_weeks_in_year(*args, **kwargs): ...
def date_get_sunday_weeks_in_year(*args, **kwargs): ...
def date_is_leap_year(*args, **kwargs): ...
def date_strftime(*args, **kwargs): ...
def date_valid_day(*args, **kwargs): ...
def date_valid_dmy(*args, **kwargs): ...
def date_valid_julian(*args, **kwargs): ...
def date_valid_month(*args, **kwargs): ...
def date_valid_weekday(*args, **kwargs): ...
def date_valid_year(*args, **kwargs): ...
def dcgettext(*args, **kwargs): ...
def dgettext(*args, **kwargs): ...
def dir_make_tmp(*args, **kwargs): ...
def direct_equal(*args, **kwargs): ...
def direct_hash(*args, **kwargs): ...
def dngettext(*args, **kwargs): ...
def double_equal(*args, **kwargs): ...
def double_hash(*args, **kwargs): ...
def dpgettext(*args, **kwargs): ...
def dpgettext2(*args, **kwargs): ...
def environ_getenv(*args, **kwargs): ...
def environ_setenv(*args, **kwargs): ...
def environ_unsetenv(*args, **kwargs): ...
def file_error_from_errno(*args, **kwargs): ...
def file_error_quark(*args, **kwargs): ...
def file_get_contents(*args, **kwargs): ...
def file_open_tmp(*args, **kwargs): ...
def file_read_link(*args, **kwargs): ...
def file_set_contents(*args, **kwargs): ...
def file_set_contents_full(*args, **kwargs): ...
def file_test(*args, **kwargs): ...
def filename_display_basename(*args, **kwargs): ...
def filename_display_name(*args, **kwargs): ...
def filename_from_uri(*args, **kwargs): ...
def filename_from_utf8(*args, **kwargs): ...
def filename_to_uri(*args, **kwargs): ...
def filename_to_utf8(*args, **kwargs): ...
def find_program_in_path(*args, **kwargs): ...
def format_size(*args, **kwargs): ...
def format_size_for_display(*args, **kwargs): ...
def format_size_full(size: int, flags: FormatSizeFlags) -> str: ...
def free(*args, **kwargs): ...
def get_application_name() -> Optional[str]: ...
def get_charset(*args, **kwargs): ...
def get_codeset(*args, **kwargs): ...
def get_console_charset(*args, **kwargs): ...
def get_current_dir(*args, **kwargs): ...
def get_current_time(*args, **kwargs): ...
def get_environ(*args, **kwargs): ...
def get_filename_charsets(*args, **kwargs): ...
def get_home_dir(*args, **kwargs): ...
def get_host_name(*args, **kwargs): ...
def get_language_names(*args, **kwargs): ...
def get_language_names_with_category(*args, **kwargs): ...
def get_locale_variants(*args, **kwargs): ...
def get_monotonic_time(*args, **kwargs): ...
def get_num_processors(*args, **kwargs): ...
def get_os_info(*args, **kwargs): ...
def get_prgname(*args, **kwargs): ...
def get_real_name(*args, **kwargs): ...
def get_real_time(*args, **kwargs): ...
def get_system_config_dirs(*args, **kwargs): ...
def get_system_data_dirs() -> list[str]: ...
def get_tmp_dir(*args, **kwargs): ...
def get_user_cache_dir() -> str: ...
def get_user_config_dir() -> str: ...
def get_user_data_dir() -> str: ...
def get_user_name(*args, **kwargs): ...
def get_user_runtime_dir(*args, **kwargs): ...
def get_user_special_dir(*args, **kwargs): ...
def getenv(*args, **kwargs): ...
def hash_table_add(*args, **kwargs): ...
def hash_table_contains(*args, **kwargs): ...
def hash_table_destroy(*args, **kwargs): ...
def hash_table_insert(*args, **kwargs): ...
def hash_table_lookup(*args, **kwargs): ...
def hash_table_lookup_extended(*args, **kwargs): ...
def hash_table_remove(*args, **kwargs): ...
def hash_table_remove_all(*args, **kwargs): ...
def hash_table_replace(*args, **kwargs): ...
def hash_table_size(*args, **kwargs): ...
def hash_table_steal(*args, **kwargs): ...
def hash_table_steal_all(*args, **kwargs): ...
def hash_table_steal_extended(*args, **kwargs): ...
def hash_table_unref(*args, **kwargs): ...
def hook_destroy(*args, **kwargs): ...
def hook_destroy_link(*args, **kwargs): ...
def hook_free(*args, **kwargs): ...
def hook_insert_before(*args, **kwargs): ...
def hook_prepend(*args, **kwargs): ...
def hook_unref(*args, **kwargs): ...
def hostname_is_ascii_encoded(*args, **kwargs): ...
def hostname_is_ip_address(*args, **kwargs): ...
def hostname_is_non_ascii(*args, **kwargs): ...
def hostname_to_ascii(*args, **kwargs): ...
def hostname_to_unicode(*args, **kwargs): ...
def idle_add(func: Callable[..., Any], *args: Any) -> int: ...
def idle_remove_by_data(*args, **kwargs): ...
def idle_source_new(*args, **kwargs): ...
def int64_equal(*args, **kwargs): ...
def int64_hash(*args, **kwargs): ...
def int_equal(*args, **kwargs): ...
def int_hash(*args, **kwargs): ...
def intern_static_string(*args, **kwargs): ...
def intern_string(*args, **kwargs): ...
def io_add_watch(*args, **kwargs): ...
def io_channel_error_from_errno(*args, **kwargs): ...
def io_channel_error_quark(*args, **kwargs): ...
def io_create_watch(*args, **kwargs): ...
def key_file_error_quark(*args, **kwargs): ...
def listenv(*args, **kwargs): ...
def locale_from_utf8(*args, **kwargs): ...
def locale_to_utf8(*args, **kwargs): ...
def log_default_handler(*args, **kwargs): ...
def log_remove_handler(*args, **kwargs): ...
def log_set_always_fatal(*args, **kwargs): ...
def log_set_fatal_mask(*args, **kwargs): ...
def log_set_handler(*args, **kwargs): ...
def log_set_writer_func(*args, **kwargs): ...
def log_structured_array(*args, **kwargs): ...
def log_variant(*args, **kwargs): ...
def log_writer_default(*args, **kwargs): ...
def log_writer_default_set_use_stderr(*args, **kwargs): ...
def log_writer_default_would_drop(*args, **kwargs): ...
def log_writer_format_fields(*args, **kwargs): ...
def log_writer_is_journald(*args, **kwargs): ...
def log_writer_journald(*args, **kwargs): ...
def log_writer_standard_streams(*args, **kwargs): ...
def log_writer_supports_color(*args, **kwargs): ...
def main_context_default(*args, **kwargs): ...
def main_context_get_thread_default(*args, **kwargs): ...
def main_context_ref_thread_default(*args, **kwargs): ...
def main_current_source(*args, **kwargs): ...
def main_depth(*args, **kwargs): ...
def malloc(*args, **kwargs): ...
def malloc0(*args, **kwargs): ...
def malloc0_n(*args, **kwargs): ...
def malloc_n(*args, **kwargs): ...
def markup_error_quark(*args, **kwargs): ...
def markup_escape_text(str: Union[str, bytes], length: int = ...) -> str: ...
def mem_is_system_malloc(*args, **kwargs): ...
def mem_profile(*args, **kwargs): ...
def mem_set_vtable(*args, **kwargs): ...
def memdup(*args, **kwargs): ...
def memdup2(*args, **kwargs): ...
def mkdir_with_parents(pathname: str, mode: int) -> int: ...
def nullify_pointer(*args, **kwargs): ...
def number_parser_error_quark(*args, **kwargs): ...
def on_error_query(*args, **kwargs): ...
def on_error_stack_trace(*args, **kwargs): ...
def once_init_enter(*args, **kwargs): ...
def once_init_leave(*args, **kwargs): ...
def option_error_quark(*args, **kwargs): ...
def parse_debug_string(*args, **kwargs): ...
def path_get_basename(*args, **kwargs): ...
def path_get_dirname(*args, **kwargs): ...
def path_is_absolute(*args, **kwargs): ...
def path_skip_root(*args, **kwargs): ...
def pattern_match(*args, **kwargs): ...
def pattern_match_simple(*args, **kwargs): ...
def pattern_match_string(*args, **kwargs): ...
def pointer_bit_lock(*args, **kwargs): ...
def pointer_bit_trylock(*args, **kwargs): ...
def pointer_bit_unlock(*args, **kwargs): ...
def poll(*args, **kwargs): ...
def propagate_error(*args, **kwargs): ...
def quark_from_static_string(*args, **kwargs): ...
def quark_from_string(*args, **kwargs): ...
def quark_to_string(*args, **kwargs): ...
def quark_try_string(string: Optional[str]) -> int: ...
def random_double(*args, **kwargs): ...
def random_double_range(*args, **kwargs): ...
def random_int(*args, **kwargs): ...
def random_int_range(*args, **kwargs): ...
def random_set_seed(*args, **kwargs): ...
def rc_box_acquire(*args, **kwargs): ...
def rc_box_alloc(*args, **kwargs): ...
def rc_box_alloc0(*args, **kwargs): ...
def rc_box_dup(*args, **kwargs): ...
def rc_box_get_size(*args, **kwargs): ...
def rc_box_release(*args, **kwargs): ...
def rc_box_release_full(*args, **kwargs): ...
def realloc(*args, **kwargs): ...
def realloc_n(*args, **kwargs): ...
def ref_count_compare(*args, **kwargs): ...
def ref_count_dec(*args, **kwargs): ...
def ref_count_inc(*args, **kwargs): ...
def ref_count_init(*args, **kwargs): ...
def ref_string_acquire(*args, **kwargs): ...
def ref_string_length(*args, **kwargs): ...
def ref_string_new(*args, **kwargs): ...
def ref_string_new_intern(*args, **kwargs): ...
def ref_string_new_len(*args, **kwargs): ...
def ref_string_release(*args, **kwargs): ...
def regex_check_replacement(*args, **kwargs): ...
def regex_error_quark(*args, **kwargs): ...
def regex_escape_nul(*args, **kwargs): ...
def regex_escape_string(*args, **kwargs): ...
def regex_match_simple(*args, **kwargs): ...
def regex_split_simple(*args, **kwargs): ...
def reload_user_special_dirs_cache(*args, **kwargs): ...
def rmdir(*args, **kwargs): ...
def sequence_get(*args, **kwargs): ...
def sequence_insert_before(*args, **kwargs): ...
def sequence_move(*args, **kwargs): ...
def sequence_move_range(*args, **kwargs): ...
def sequence_range_get_midpoint(*args, **kwargs): ...
def sequence_remove(*args, **kwargs): ...
def sequence_remove_range(*args, **kwargs): ...
def sequence_set(*args, **kwargs): ...
def sequence_swap(*args, **kwargs): ...
def set_application_name(name: str) -> None: ...
def set_error_literal(*args, **kwargs): ...
def set_prgname(name: str) -> None: ...
def setenv(variable: str, value: str, overwrite: bool) -> bool: ...
def shell_error_quark(*args, **kwargs): ...
def shell_parse_argv(*args, **kwargs): ...
def shell_quote(*args, **kwargs): ...
def shell_unquote(*args, **kwargs): ...
def slice_alloc(*args, **kwargs): ...
def slice_alloc0(*args, **kwargs): ...
def slice_copy(*args, **kwargs): ...
def slice_free1(*args, **kwargs): ...
def slice_free_chain_with_offset(*args, **kwargs): ...
def slice_get_config(*args, **kwargs): ...
def slice_get_config_state(*args, **kwargs): ...
def slice_set_config(*args, **kwargs): ...
def source_remove(id: int) -> bool: ...
def source_remove_by_funcs_user_data(*args, **kwargs): ...
def source_remove_by_user_data(*args, **kwargs): ...
def source_set_name_by_id(*args, **kwargs): ...
def spaced_primes_closest(*args, **kwargs): ...
def spawn_async(*args, **kwargs): ...
def spawn_async_with_fds(*args, **kwargs): ...
def spawn_async_with_pipes(*args, **kwargs): ...
def spawn_async_with_pipes_and_fds(*args, **kwargs): ...
def spawn_check_exit_status(*args, **kwargs): ...
def spawn_close_pid(*args, **kwargs): ...
def spawn_command_line_async(*args, **kwargs): ...
def spawn_command_line_sync(*args, **kwargs): ...
def spawn_error_quark(*args, **kwargs): ...
def spawn_exit_error_quark(*args, **kwargs): ...
def spawn_sync(*args, **kwargs): ...
def stpcpy(*args, **kwargs): ...
def str_equal(*args, **kwargs): ...
def str_has_prefix(*args, **kwargs): ...
def str_has_suffix(*args, **kwargs): ...
def str_hash(*args, **kwargs): ...
def str_is_ascii(*args, **kwargs): ...
def str_match_string(*args, **kwargs): ...
def str_to_ascii(*args, **kwargs): ...
def str_tokenize_and_fold(*args, **kwargs): ...
def strcanon(*args, **kwargs): ...
def strcasecmp(*args, **kwargs): ...
def strchomp(*args, **kwargs): ...
def strchug(*args, **kwargs): ...
def strcmp0(*args, **kwargs): ...
def strcompress(*args, **kwargs): ...
def strdelimit(*args, **kwargs): ...
def strdown(*args, **kwargs): ...
def strdup(*args, **kwargs): ...
def strerror(*args, **kwargs): ...
def strescape(*args, **kwargs): ...
def strfreev(*args, **kwargs): ...
def string_new(*args, **kwargs): ...
def string_new_len(*args, **kwargs): ...
def string_sized_new(*args, **kwargs): ...
def strip_context(*args, **kwargs): ...
def strjoinv(*args, **kwargs): ...
def strlcat(*args, **kwargs): ...
def strlcpy(*args, **kwargs): ...
def strncasecmp(*args, **kwargs): ...
def strndup(*args, **kwargs): ...
def strnfill(*args, **kwargs): ...
def strreverse(*args, **kwargs): ...
def strrstr(*args, **kwargs): ...
def strrstr_len(*args, **kwargs): ...
def strsignal(*args, **kwargs): ...
def strstr_len(*args, **kwargs): ...
def strtod(*args, **kwargs): ...
def strup(*args, **kwargs): ...
def strv_contains(*args, **kwargs): ...
def strv_equal(*args, **kwargs): ...
def strv_get_type(*args, **kwargs): ...
def strv_length(*args, **kwargs): ...
def test_add_data_func(*args, **kwargs): ...
def test_add_data_func_full(*args, **kwargs): ...
def test_add_func(*args, **kwargs): ...
def test_assert_expected_messages_internal(*args, **kwargs): ...
def test_bug(*args, **kwargs): ...
def test_bug_base(*args, **kwargs): ...
def test_expect_message(*args, **kwargs): ...
def test_fail(*args, **kwargs): ...
def test_failed(*args, **kwargs): ...
def test_get_dir(*args, **kwargs): ...
def test_get_path(*args, **kwargs): ...
def test_incomplete(*args, **kwargs): ...
def test_log_type_name(*args, **kwargs): ...
def test_queue_destroy(*args, **kwargs): ...
def test_queue_free(*args, **kwargs): ...
def test_rand_double(*args, **kwargs): ...
def test_rand_double_range(*args, **kwargs): ...
def test_rand_int(*args, **kwargs): ...
def test_rand_int_range(*args, **kwargs): ...
def test_run(*args, **kwargs): ...
def test_run_suite(*args, **kwargs): ...
def test_set_nonfatal_assertions(*args, **kwargs): ...
def test_skip(*args, **kwargs): ...
def test_subprocess(*args, **kwargs): ...
def test_summary(*args, **kwargs): ...
def test_timer_elapsed(*args, **kwargs): ...
def test_timer_last(*args, **kwargs): ...
def test_timer_start(*args, **kwargs): ...
def test_trap_assertions(*args, **kwargs): ...
def test_trap_fork(*args, **kwargs): ...
def test_trap_has_passed(*args, **kwargs): ...
def test_trap_reached_timeout(*args, **kwargs): ...
def test_trap_subprocess(*args, **kwargs): ...
def thread_error_quark(*args, **kwargs): ...
def thread_exit(*args, **kwargs): ...
def thread_pool_get_max_idle_time(*args, **kwargs): ...
def thread_pool_get_max_unused_threads(*args, **kwargs): ...
def thread_pool_get_num_unused_threads(*args, **kwargs): ...
def thread_pool_set_max_idle_time(*args, **kwargs): ...
def thread_pool_set_max_unused_threads(*args, **kwargs): ...
def thread_pool_stop_unused_threads(*args, **kwargs): ...
def thread_self(*args, **kwargs): ...
def thread_yield(*args, **kwargs): ...
def threads_init(*args, **kwargs): ...
def time_val_from_iso8601(*args, **kwargs): ...
def timeout_add(mseconds: int, func: Callable[..., Any], *args: Any) -> int: ...
def timeout_add_seconds(seconds: int, func: Callable[..., Any], *args: Any) -> int: ...
def timeout_source_new(*args, **kwargs): ...
def timeout_source_new_seconds(*args, **kwargs): ...
def trash_stack_height(*args, **kwargs): ...
def trash_stack_peek(*args, **kwargs): ...
def trash_stack_pop(*args, **kwargs): ...
def trash_stack_push(*args, **kwargs): ...
def try_malloc(*args, **kwargs): ...
def try_malloc0(*args, **kwargs): ...
def try_malloc0_n(*args, **kwargs): ...
def try_malloc_n(*args, **kwargs): ...
def try_realloc(*args, **kwargs): ...
def try_realloc_n(*args, **kwargs): ...
def ucs4_to_utf16(*args, **kwargs): ...
def ucs4_to_utf8(*args, **kwargs): ...
def unichar_break_type(*args, **kwargs): ...
def unichar_combining_class(*args, **kwargs): ...
def unichar_compose(*args, **kwargs): ...
def unichar_decompose(*args, **kwargs): ...
def unichar_digit_value(*args, **kwargs): ...
def unichar_fully_decompose(*args, **kwargs): ...
def unichar_get_mirror_char(*args, **kwargs): ...
def unichar_get_script(*args, **kwargs): ...
def unichar_isalnum(*args, **kwargs): ...
def unichar_isalpha(*args, **kwargs): ...
def unichar_iscntrl(*args, **kwargs): ...
def unichar_isdefined(*args, **kwargs): ...
def unichar_isdigit(*args, **kwargs): ...
def unichar_isgraph(*args, **kwargs): ...
def unichar_islower(*args, **kwargs): ...
def unichar_ismark(*args, **kwargs): ...
def unichar_isprint(*args, **kwargs): ...
def unichar_ispunct(*args, **kwargs): ...
def unichar_isspace(*args, **kwargs): ...
def unichar_istitle(*args, **kwargs): ...
def unichar_isupper(*args, **kwargs): ...
def unichar_iswide(*args, **kwargs): ...
def unichar_iswide_cjk(*args, **kwargs): ...
def unichar_isxdigit(*args, **kwargs): ...
def unichar_iszerowidth(*args, **kwargs): ...
def unichar_to_utf8(*args, **kwargs): ...
def unichar_tolower(*args, **kwargs): ...
def unichar_totitle(*args, **kwargs): ...
def unichar_toupper(*args, **kwargs): ...
def unichar_type(*args, **kwargs): ...
def unichar_validate(*args, **kwargs): ...
def unichar_xdigit_value(*args, **kwargs): ...
def unicode_canonical_decomposition(*args, **kwargs): ...
def unicode_canonical_ordering(*args, **kwargs): ...
def unicode_script_from_iso15924(*args, **kwargs): ...
def unicode_script_to_iso15924(*args, **kwargs): ...
def unix_error_quark(*args, **kwargs): ...
def unix_fd_add_full(*args, **kwargs): ...
def unix_fd_source_new(*args, **kwargs): ...
def unix_get_passwd_entry(*args, **kwargs): ...
def unix_open_pipe(*args, **kwargs): ...
def unix_set_fd_nonblocking(*args, **kwargs): ...
def unix_signal_add(*args, **kwargs): ...
def unix_signal_add_full(*args, **kwargs): ...
def unix_signal_source_new(*args, **kwargs): ...
def unlink(*args, **kwargs): ...
def unsetenv(*args, **kwargs): ...
def uri_build(*args, **kwargs): ...
def uri_build_with_user(*args, **kwargs): ...
def uri_error_quark(*args, **kwargs): ...
def uri_escape_bytes(*args, **kwargs): ...
def uri_escape_string(*args, **kwargs): ...
def uri_is_valid(*args, **kwargs): ...
def uri_join(*args, **kwargs): ...
def uri_join_with_user(*args, **kwargs): ...
def uri_list_extract_uris(*args, **kwargs): ...
def uri_parse(*args, **kwargs): ...
def uri_parse_params(*args, **kwargs): ...
def uri_parse_scheme(*args, **kwargs): ...
def uri_peek_scheme(*args, **kwargs): ...
def uri_resolve_relative(*args, **kwargs): ...
def uri_split(*args, **kwargs): ...
def uri_split_network(*args, **kwargs): ...
def uri_split_with_user(*args, **kwargs): ...
def uri_unescape_bytes(*args, **kwargs): ...
def uri_unescape_segment(*args, **kwargs): ...
def uri_unescape_string(*args, **kwargs): ...
def usleep(*args, **kwargs): ...
def utf16_to_ucs4(*args, **kwargs): ...
def utf16_to_utf8(*args, **kwargs): ...
def utf8_casefold(*args, **kwargs): ...
def utf8_collate(*args, **kwargs): ...
def utf8_collate_key(*args, **kwargs): ...
def utf8_collate_key_for_filename(*args, **kwargs): ...
def utf8_find_next_char(*args, **kwargs): ...
def utf8_find_prev_char(*args, **kwargs): ...
def utf8_get_char(*args, **kwargs): ...
def utf8_get_char_validated(*args, **kwargs): ...
def utf8_make_valid(*args, **kwargs): ...
def utf8_normalize(*args, **kwargs): ...
def utf8_offset_to_pointer(*args, **kwargs): ...
def utf8_pointer_to_offset(*args, **kwargs): ...
def utf8_prev_char(*args, **kwargs): ...
def utf8_strchr(*args, **kwargs): ...
def utf8_strdown(*args, **kwargs): ...
def utf8_strlen(*args, **kwargs): ...
def utf8_strncpy(*args, **kwargs): ...
def utf8_strrchr(*args, **kwargs): ...
def utf8_strreverse(*args, **kwargs): ...
def utf8_strup(*args, **kwargs): ...
def utf8_substring(*args, **kwargs): ...
def utf8_to_ucs4(*args, **kwargs): ...
def utf8_to_ucs4_fast(*args, **kwargs): ...
def utf8_to_utf16(*args, **kwargs): ...
def utf8_validate(*args, **kwargs): ...
def utf8_validate_len(*args, **kwargs): ...
def uuid_string_is_valid(*args, **kwargs): ...
def uuid_string_random(*args, **kwargs): ...
def variant_get_gtype(*args, **kwargs): ...
def variant_is_object_path(*args, **kwargs): ...
def variant_is_signature(*args, **kwargs): ...
def variant_parse(*args, **kwargs): ...
def variant_parse_error_print_context(*args, **kwargs): ...
def variant_parse_error_quark(*args, **kwargs): ...
def variant_parser_get_error_quark(*args, **kwargs): ...
def variant_type_checked_(*args, **kwargs): ...
def variant_type_string_get_depth_(*args, **kwargs): ...
def variant_type_string_is_valid(*args, **kwargs): ...
def variant_type_string_scan(*args, **kwargs): ...

class Array:
    data = ...
    len = ...

    def copy(self, *args, **kwargs): ...

class AsyncQueue:
    def length(*args, **kwargs): ...
    def length_unlocked(*args, **kwargs): ...
    def lock(*args, **kwargs): ...
    def pop(*args, **kwargs): ...
    def pop_unlocked(*args, **kwargs): ...
    def push(*args, **kwargs): ...
    def push_front(*args, **kwargs): ...
    def push_front_unlocked(*args, **kwargs): ...
    def push_unlocked(*args, **kwargs): ...
    def ref_unlocked(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def remove_unlocked(*args, **kwargs): ...
    def timed_pop(*args, **kwargs): ...
    def timed_pop_unlocked(*args, **kwargs): ...
    def timeout_pop(*args, **kwargs): ...
    def timeout_pop_unlocked(*args, **kwargs): ...
    def try_pop(*args, **kwargs): ...
    def try_pop_unlocked(*args, **kwargs): ...
    def unlock(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def unref_and_unlock(*args, **kwargs): ...

class BookmarkFile:
    def add_application(*args, **kwargs): ...
    def add_group(*args, **kwargs): ...
    def error_quark(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def get_added(*args, **kwargs): ...
    def get_added_date_time(*args, **kwargs): ...
    def get_app_info(*args, **kwargs): ...
    def get_application_info(*args, **kwargs): ...
    def get_applications(*args, **kwargs): ...
    def get_description(*args, **kwargs): ...
    def get_groups(*args, **kwargs): ...
    def get_icon(*args, **kwargs): ...
    def get_is_private(*args, **kwargs): ...
    def get_mime_type(*args, **kwargs): ...
    def get_modified(*args, **kwargs): ...
    def get_modified_date_time(*args, **kwargs): ...
    def get_size(*args, **kwargs): ...
    def get_title(*args, **kwargs): ...
    def get_uris(*args, **kwargs): ...
    def get_visited(*args, **kwargs): ...
    def get_visited_date_time(*args, **kwargs): ...
    def has_application(*args, **kwargs): ...
    def has_group(*args, **kwargs): ...
    def has_item(*args, **kwargs): ...
    def load_from_data(*args, **kwargs): ...
    def load_from_data_dirs(*args, **kwargs): ...
    def load_from_file(*args, **kwargs): ...
    def move_item(*args, **kwargs): ...
    def remove_application(*args, **kwargs): ...
    def remove_group(*args, **kwargs): ...
    def remove_item(*args, **kwargs): ...
    def set_added(*args, **kwargs): ...
    def set_added_date_time(*args, **kwargs): ...
    def set_app_info(*args, **kwargs): ...
    def set_application_info(*args, **kwargs): ...
    def set_description(*args, **kwargs): ...
    def set_groups(*args, **kwargs): ...
    def set_icon(*args, **kwargs): ...
    def set_is_private(*args, **kwargs): ...
    def set_mime_type(*args, **kwargs): ...
    def set_modified(*args, **kwargs): ...
    def set_modified_date_time(*args, **kwargs): ...
    def set_title(*args, **kwargs): ...
    def set_visited(*args, **kwargs): ...
    def set_visited_date_time(*args, **kwargs): ...
    def to_data(*args, **kwargs): ...
    def to_file(*args, **kwargs): ...

class ByteArray:
    data = ...
    len = ...

    def free(*args, **kwargs): ...
    @classmethod
    def free_to_bytes(cls, array: ByteArray) -> Bytes: ...
    def new(*args, **kwargs): ...
    def new_take(*args, **kwargs): ...
    def steal(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class Bytes:
    def compare(*args, **kwargs): ...
    def equal(*args, **kwargs): ...
    def get_data(self) -> bytes: ...
    def get_size(*args, **kwargs): ...
    def hash(*args, **kwargs): ...
    @classmethod
    def new(cls, data: Optional[bytes]) -> Bytes: ...
    def new_from_bytes(*args, **kwargs): ...
    def new_take(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def unref_to_array(*args, **kwargs): ...
    def unref_to_data(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class Checksum:
    def copy(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def get_string(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def type_get_length(*args, **kwargs): ...
    def update(*args, **kwargs): ...

class Cond:
    i = ...
    p = ...

    def broadcast(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def init(*args, **kwargs): ...
    def signal(*args, **kwargs): ...
    def wait(*args, **kwargs): ...
    def wait_until(*args, **kwargs): ...

class Data:
    pass

class Date:
    day = ...
    dmy = ...
    julian = ...
    julian_days = ...
    month = ...
    year = ...

    def add_days(*args, **kwargs): ...
    def add_months(*args, **kwargs): ...
    def add_years(*args, **kwargs): ...
    def clamp(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def compare(*args, **kwargs): ...
    def copy(*args, **kwargs): ...
    def days_between(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def get_day(*args, **kwargs): ...
    def get_day_of_year(*args, **kwargs): ...
    def get_days_in_month(*args, **kwargs): ...
    def get_iso8601_week_of_year(*args, **kwargs): ...
    def get_julian(*args, **kwargs): ...
    def get_monday_week_of_year(*args, **kwargs): ...
    def get_monday_weeks_in_year(*args, **kwargs): ...
    def get_month(*args, **kwargs): ...
    def get_sunday_week_of_year(*args, **kwargs): ...
    def get_sunday_weeks_in_year(*args, **kwargs): ...
    def get_weekday(*args, **kwargs): ...
    def get_year(*args, **kwargs): ...
    def is_first_of_month(*args, **kwargs): ...
    def is_last_of_month(*args, **kwargs): ...
    def is_leap_year(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_dmy(*args, **kwargs): ...
    def new_julian(*args, **kwargs): ...
    def order(*args, **kwargs): ...
    def set_day(*args, **kwargs): ...
    def set_dmy(*args, **kwargs): ...
    def set_julian(*args, **kwargs): ...
    def set_month(*args, **kwargs): ...
    def set_parse(*args, **kwargs): ...
    def set_time(*args, **kwargs): ...
    def set_time_t(*args, **kwargs): ...
    def set_time_val(*args, **kwargs): ...
    def set_year(*args, **kwargs): ...
    def strftime(*args, **kwargs): ...
    def subtract_days(*args, **kwargs): ...
    def subtract_months(*args, **kwargs): ...
    def subtract_years(*args, **kwargs): ...
    def to_struct_tm(*args, **kwargs): ...
    def valid(*args, **kwargs): ...
    def valid_day(*args, **kwargs): ...
    def valid_dmy(*args, **kwargs): ...
    def valid_julian(*args, **kwargs): ...
    def valid_month(*args, **kwargs): ...
    def valid_weekday(*args, **kwargs): ...
    def valid_year(*args, **kwargs): ...

class DateTime:
    def add(*args, **kwargs): ...
    def add_days(*args, **kwargs): ...
    def add_full(*args, **kwargs): ...
    def add_hours(*args, **kwargs): ...
    def add_minutes(*args, **kwargs): ...
    def add_months(*args, **kwargs): ...
    def add_seconds(*args, **kwargs): ...
    def add_weeks(*args, **kwargs): ...
    def add_years(*args, **kwargs): ...
    def compare(*args, **kwargs): ...
    def difference(*args, **kwargs): ...
    def equal(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def format_iso8601(*args, **kwargs): ...
    def get_day_of_month(*args, **kwargs): ...
    def get_day_of_week(*args, **kwargs): ...
    def get_day_of_year(*args, **kwargs): ...
    def get_hour(*args, **kwargs): ...
    def get_microsecond(*args, **kwargs): ...
    def get_minute(*args, **kwargs): ...
    def get_month(*args, **kwargs): ...
    def get_second(*args, **kwargs): ...
    def get_seconds(*args, **kwargs): ...
    def get_timezone(*args, **kwargs): ...
    def get_timezone_abbreviation(*args, **kwargs): ...
    def get_utc_offset(*args, **kwargs): ...
    def get_week_numbering_year(*args, **kwargs): ...
    def get_week_of_year(*args, **kwargs): ...
    def get_year(*args, **kwargs): ...
    def get_ymd(*args, **kwargs): ...
    def hash(*args, **kwargs): ...
    def is_daylight_savings(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_from_iso8601(*args, **kwargs): ...
    def new_from_timeval_local(*args, **kwargs): ...
    def new_from_timeval_utc(*args, **kwargs): ...
    def new_from_unix_local(*args, **kwargs): ...
    def new_from_unix_utc(*args, **kwargs): ...
    def new_local(*args, **kwargs): ...
    def new_now(*args, **kwargs): ...
    def new_now_local(*args, **kwargs): ...
    def new_now_utc(*args, **kwargs): ...
    def new_utc(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def to_local(*args, **kwargs): ...
    def to_timeval(*args, **kwargs): ...
    def to_timezone(*args, **kwargs): ...
    def to_unix(*args, **kwargs): ...
    def to_utc(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class DebugKey:
    key = ...
    value = ...

class Dir:
    def close(*args, **kwargs): ...
    def make_tmp(*args, **kwargs): ...
    def read_name(*args, **kwargs): ...
    def rewind(*args, **kwargs): ...

class DoubleIEEE754:
    v_double = ...

class Error(Exception):
    args: Any
    code: GObject.GEnum
    domain: int
    message: str

    def copy(*args, **kwargs): ...
    def matches(self, domain: int, code: GObject.GEnum) -> bool: ...
    def new_literal(*args, **kwargs): ...
    def with_traceback(self, *args, **kwargs): ...

class FloatIEEE754:
    v_float = ...

class GError:
    args = ...

    def copy(*args, **kwargs): ...
    def matches(*args, **kwargs): ...
    def new_literal(*args, **kwargs): ...
    def with_traceback(self, *args, **kwargs): ...

class HashTable:
    def add(*args, **kwargs): ...
    def contains(*args, **kwargs): ...
    def destroy(*args, **kwargs): ...
    def insert(*args, **kwargs): ...
    def lookup(*args, **kwargs): ...
    def lookup_extended(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def remove_all(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def steal(*args, **kwargs): ...
    def steal_all(*args, **kwargs): ...
    def steal_extended(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class HashTableIter:
    dummy1 = ...
    dummy2 = ...
    dummy3 = ...
    dummy4 = ...
    dummy5 = ...
    dummy6 = ...

    def init(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def steal(*args, **kwargs): ...

class Hmac:
    def get_digest(*args, **kwargs): ...
    def get_string(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def update(*args, **kwargs): ...

class Hook:
    data = ...
    flags = ...
    func = ...
    hook_id = ...
    next = ...
    prev = ...
    ref_count = ...

    def compare_ids(*args, **kwargs): ...
    def destroy(*args, **kwargs): ...
    def destroy_link(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def insert_before(*args, **kwargs): ...
    def prepend(*args, **kwargs): ...
    def unref(*args, **kwargs): ...

class HookList:
    dummy = ...
    dummy3 = ...
    finalize_hook = ...
    hook_size = ...
    hooks = ...
    is_setup = ...
    seq_id = ...

    def clear(*args, **kwargs): ...
    def init(*args, **kwargs): ...
    def invoke(*args, **kwargs): ...
    def invoke_check(*args, **kwargs): ...

class IOChannel:
    _whence_map = ...
    buf_size = ...
    close_on_unref = ...
    do_encode = ...
    encoded_read_buf = ...
    encoding = ...
    funcs = ...
    is_readable = ...
    is_seekable = ...
    is_writeable = ...
    line_term = ...
    line_term_len = ...
    partial_write_buf = ...
    read_buf = ...
    read_cd = ...
    ref_count = ...
    reserved1 = ...
    reserved2 = ...
    use_buffer = ...
    write_buf = ...
    write_cd = ...

    def add_watch(*args, **kwargs): ...
    def close(*args, **kwargs): ...
    def error_from_errno(*args, **kwargs): ...
    def error_quark(*args, **kwargs): ...
    def flush(*args, **kwargs): ...
    def get_buffer_condition(*args, **kwargs): ...
    def get_buffer_size(*args, **kwargs): ...
    def get_buffered(*args, **kwargs): ...
    def get_close_on_unref(*args, **kwargs): ...
    def get_encoding(*args, **kwargs): ...
    def get_flags(*args, **kwargs): ...
    def get_line_term(*args, **kwargs): ...
    def init(*args, **kwargs): ...
    def new_file(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def read(*args, **kwargs): ...
    def read_chars(*args, **kwargs): ...
    def read_line(*args, **kwargs): ...
    def read_line_string(*args, **kwargs): ...
    def read_to_end(*args, **kwargs): ...
    def read_unichar(*args, **kwargs): ...
    def readline(*args, **kwargs): ...
    def readlines(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def seek(*args, **kwargs): ...
    def seek_position(*args, **kwargs): ...
    def set_buffer_size(*args, **kwargs): ...
    def set_buffered(*args, **kwargs): ...
    def set_close_on_unref(*args, **kwargs): ...
    def set_encoding(*args, **kwargs): ...
    def set_flags(*args, **kwargs): ...
    def set_line_term(*args, **kwargs): ...
    def shutdown(*args, **kwargs): ...
    def unix_get_fd(*args, **kwargs): ...
    def unix_new(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def write(*args, **kwargs): ...
    def write_chars(*args, **kwargs): ...
    def write_unichar(*args, **kwargs): ...
    def writelines(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class IOFuncs:
    io_close = ...
    io_create_watch = ...
    io_free = ...
    io_get_flags = ...
    io_read = ...
    io_seek = ...
    io_set_flags = ...
    io_write = ...

class Idle:
    callback_data = ...
    callback_funcs = ...
    can_recurse = ...
    context = ...
    flags = ...
    name = ...
    next = ...
    poll_fds = ...
    prev = ...
    priority = ...
    priv = ...
    ref_count = ...
    source_funcs = ...
    source_id = ...

    def add_child_source(*args, **kwargs): ...
    def add_poll(*args, **kwargs): ...
    def add_unix_fd(*args, **kwargs): ...
    def attach(*args, **kwargs): ...
    def destroy(*args, **kwargs): ...
    def get_can_recurse(*args, **kwargs): ...
    def get_context(*args, **kwargs): ...
    def get_current_time(*args, **kwargs): ...
    def get_id(*args, **kwargs): ...
    def get_name(*args, **kwargs): ...
    def get_priority(*args, **kwargs): ...
    def get_ready_time(*args, **kwargs): ...
    def get_time(*args, **kwargs): ...
    def is_destroyed(*args, **kwargs): ...
    def modify_unix_fd(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def query_unix_fd(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def remove_by_funcs_user_data(*args, **kwargs): ...
    def remove_by_user_data(*args, **kwargs): ...
    def remove_child_source(*args, **kwargs): ...
    def remove_poll(*args, **kwargs): ...
    def remove_unix_fd(*args, **kwargs): ...
    def set_callback(*args, **kwargs): ...
    def set_callback_indirect(*args, **kwargs): ...
    def set_can_recurse(*args, **kwargs): ...
    def set_funcs(*args, **kwargs): ...
    def set_name(*args, **kwargs): ...
    def set_name_by_id(*args, **kwargs): ...
    def set_priority(*args, **kwargs): ...
    def set_ready_time(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class KeyFile:
    def error_quark(*args, **kwargs): ...
    def get_boolean(*args, **kwargs): ...
    def get_boolean_list(*args, **kwargs): ...
    def get_comment(*args, **kwargs): ...
    def get_double(*args, **kwargs): ...
    def get_double_list(*args, **kwargs): ...
    def get_groups(*args, **kwargs): ...
    def get_int64(*args, **kwargs): ...
    def get_integer(*args, **kwargs): ...
    def get_integer_list(*args, **kwargs): ...
    def get_keys(*args, **kwargs): ...
    def get_locale_for_key(*args, **kwargs): ...
    def get_locale_string(*args, **kwargs): ...
    def get_locale_string_list(*args, **kwargs): ...
    def get_start_group(*args, **kwargs): ...
    def get_string(*args, **kwargs): ...
    def get_string_list(*args, **kwargs): ...
    def get_uint64(*args, **kwargs): ...
    def get_value(*args, **kwargs): ...
    def has_group(*args, **kwargs): ...
    def load_from_bytes(*args, **kwargs): ...
    def load_from_data(*args, **kwargs): ...
    def load_from_data_dirs(*args, **kwargs): ...
    def load_from_dirs(*args, **kwargs): ...
    def load_from_file(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def remove_comment(*args, **kwargs): ...
    def remove_group(*args, **kwargs): ...
    def remove_key(*args, **kwargs): ...
    def save_to_file(*args, **kwargs): ...
    def set_boolean(*args, **kwargs): ...
    def set_boolean_list(*args, **kwargs): ...
    def set_comment(*args, **kwargs): ...
    def set_double(*args, **kwargs): ...
    def set_double_list(*args, **kwargs): ...
    def set_int64(*args, **kwargs): ...
    def set_integer(*args, **kwargs): ...
    def set_integer_list(*args, **kwargs): ...
    def set_list_separator(*args, **kwargs): ...
    def set_locale_string(*args, **kwargs): ...
    def set_locale_string_list(*args, **kwargs): ...
    def set_string(*args, **kwargs): ...
    def set_string_list(*args, **kwargs): ...
    def set_uint64(*args, **kwargs): ...
    def set_value(*args, **kwargs): ...
    def to_data(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class List:
    data = ...
    next = ...
    prev = ...

class LogField:
    key = ...
    length = ...
    value = ...

class MainContext:
    def acquire(*args, **kwargs): ...
    def add_poll(*args, **kwargs): ...
    def check(*args, **kwargs): ...
    def default(*args, **kwargs): ...
    def dispatch(*args, **kwargs): ...
    def find_source_by_funcs_user_data(*args, **kwargs): ...
    def find_source_by_id(*args, **kwargs): ...
    def find_source_by_user_data(*args, **kwargs): ...
    def get_thread_default(*args, **kwargs): ...
    def invoke_full(*args, **kwargs): ...
    def is_owner(*args, **kwargs): ...
    def iteration(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def pending(*args, **kwargs): ...
    def pop_thread_default(*args, **kwargs): ...
    def prepare(*args, **kwargs): ...
    def push_thread_default(*args, **kwargs): ...
    def query(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def ref_thread_default(*args, **kwargs): ...
    def release(*args, **kwargs): ...
    def remove_poll(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def wait(*args, **kwargs): ...
    def wakeup(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class MainLoop:
    def get_context(*args, **kwargs): ...
    def is_running(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def quit(self) -> None: ...
    def ref(*args, **kwargs): ...
    def run(self) -> None: ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class MappedFile:
    def free(*args, **kwargs): ...
    def get_bytes(*args, **kwargs): ...
    def get_contents(*args, **kwargs): ...
    def get_length(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_from_fd(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class MarkupParseContext:
    def end_parse(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def get_element(*args, **kwargs): ...
    def get_position(*args, **kwargs): ...
    def get_user_data(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def parse(*args, **kwargs): ...
    def pop(*args, **kwargs): ...
    def push(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class MarkupParser:
    end_element = ...
    error = ...
    passthrough = ...
    start_element = ...
    text = ...

class MatchInfo:
    def expand_references(*args, **kwargs): ...
    def fetch(*args, **kwargs): ...
    def fetch_all(*args, **kwargs): ...
    def fetch_named(*args, **kwargs): ...
    def fetch_named_pos(*args, **kwargs): ...
    def fetch_pos(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def get_match_count(*args, **kwargs): ...
    def get_regex(*args, **kwargs): ...
    def get_string(*args, **kwargs): ...
    def is_partial_match(*args, **kwargs): ...
    def matches(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class MemVTable:
    calloc = ...
    free = ...
    malloc = ...
    realloc = ...
    try_malloc = ...
    try_realloc = ...

class Mutex:
    i = ...
    p = ...

    def clear(*args, **kwargs): ...
    def init(*args, **kwargs): ...
    def lock(*args, **kwargs): ...
    def trylock(*args, **kwargs): ...
    def unlock(*args, **kwargs): ...

class Node:
    children = ...
    data = ...
    next = ...
    parent = ...
    prev = ...

    def child_index(*args, **kwargs): ...
    def child_position(*args, **kwargs): ...
    def depth(*args, **kwargs): ...
    def destroy(*args, **kwargs): ...
    def is_ancestor(*args, **kwargs): ...
    def max_height(*args, **kwargs): ...
    def n_children(*args, **kwargs): ...
    def n_nodes(*args, **kwargs): ...
    def reverse_children(*args, **kwargs): ...
    def unlink(*args, **kwargs): ...

class Once:
    retval = ...
    status = ...

    def init_enter(*args, **kwargs): ...
    def init_leave(*args, **kwargs): ...

class OptionContext:
    def add_group(self, *args, **kwargs): ...
    def get_help_enabled(self, *args, **kwargs): ...
    def get_ignore_unknown_options(self, *args, **kwargs): ...
    def get_main_group(self, *args, **kwargs): ...
    def parse(self, *args, **kwargs): ...
    def set_help_enabled(self, *args, **kwargs): ...
    def set_ignore_unknown_options(self, *args, **kwargs): ...
    def set_main_group(self, *args, **kwargs): ...

class OptionEntry:
    arg: OptionArg
    arg_data: object
    arg_description: str
    description: str
    flags: int
    long_name: str
    short_name: int

class OptionGroup:
    def add_entries(self, *args, **kwargs): ...
    def set_translation_domain(self, *args, **kwargs): ...

class PatternSpec:
    def equal(*args, **kwargs): ...
    def free(*args, **kwargs): ...

class Pid:
    denominator = ...
    imag = ...
    numerator = ...
    real = ...

    def from_bytes(*args, **kwargs): ...
    def as_integer_ratio(self, *args, **kwargs): ...
    def bit_length(self, *args, **kwargs): ...
    def close(self, *args, **kwargs): ...
    def conjugate(self, *args, **kwargs): ...
    def to_bytes(self, *args, **kwargs): ...

class PollFD:
    events = ...
    fd = ...
    revents = ...

    def copy(self, *args, **kwargs): ...

class Private:
    future = ...
    notify = ...
    p = ...

    def get(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def set(*args, **kwargs): ...

class PtrArray:
    len = ...
    pdata = ...

    def copy(self, *args, **kwargs): ...

class Queue:
    head = ...
    length = ...
    tail = ...

    def clear(*args, **kwargs): ...
    def clear_full(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def free_full(*args, **kwargs): ...
    def get_length(*args, **kwargs): ...
    def index(*args, **kwargs): ...
    def init(*args, **kwargs): ...
    def is_empty(*args, **kwargs): ...
    def peek_head(*args, **kwargs): ...
    def peek_nth(*args, **kwargs): ...
    def peek_tail(*args, **kwargs): ...
    def pop_head(*args, **kwargs): ...
    def pop_nth(*args, **kwargs): ...
    def pop_tail(*args, **kwargs): ...
    def push_head(*args, **kwargs): ...
    def push_nth(*args, **kwargs): ...
    def push_tail(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def remove_all(*args, **kwargs): ...
    def reverse(*args, **kwargs): ...

class RWLock:
    i = ...
    p = ...

    def clear(*args, **kwargs): ...
    def init(*args, **kwargs): ...
    def reader_lock(*args, **kwargs): ...
    def reader_trylock(*args, **kwargs): ...
    def reader_unlock(*args, **kwargs): ...
    def writer_lock(*args, **kwargs): ...
    def writer_trylock(*args, **kwargs): ...
    def writer_unlock(*args, **kwargs): ...

class Rand:
    def double(*args, **kwargs): ...
    def double_range(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def int(*args, **kwargs): ...
    def int_range(*args, **kwargs): ...
    def set_seed(*args, **kwargs): ...
    def set_seed_array(*args, **kwargs): ...

class RecMutex:
    i = ...
    p = ...

    def clear(*args, **kwargs): ...
    def init(*args, **kwargs): ...
    def lock(*args, **kwargs): ...
    def trylock(*args, **kwargs): ...
    def unlock(*args, **kwargs): ...

class Regex:
    def check_replacement(*args, **kwargs): ...
    def error_quark(*args, **kwargs): ...
    def escape_nul(*args, **kwargs): ...
    def escape_string(*args, **kwargs): ...
    def get_capture_count(*args, **kwargs): ...
    def get_compile_flags(*args, **kwargs): ...
    def get_has_cr_or_lf(*args, **kwargs): ...
    def get_match_flags(*args, **kwargs): ...
    def get_max_backref(*args, **kwargs): ...
    def get_max_lookbehind(*args, **kwargs): ...
    def get_pattern(*args, **kwargs): ...
    def get_string_number(*args, **kwargs): ...
    def match(*args, **kwargs): ...
    def match_all(*args, **kwargs): ...
    def match_all_full(*args, **kwargs): ...
    def match_full(*args, **kwargs): ...
    def match_simple(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def replace_literal(*args, **kwargs): ...
    def split(*args, **kwargs): ...
    def split_full(*args, **kwargs): ...
    def split_simple(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class SList:
    data = ...
    next = ...

class Scanner:
    buffer = ...
    config = ...
    input_fd = ...
    input_name = ...
    line = ...
    max_parse_errors = ...
    msg_handler = ...
    next_line = ...
    next_position = ...
    next_token = ...
    next_value = ...
    parse_errors = ...
    position = ...
    qdata = ...
    scope_id = ...
    symbol_table = ...
    text = ...
    text_end = ...
    token = ...
    user_data = ...
    value = ...

    def cur_line(*args, **kwargs): ...
    def cur_position(*args, **kwargs): ...
    def cur_token(*args, **kwargs): ...
    def destroy(*args, **kwargs): ...
    def eof(*args, **kwargs): ...
    def get_next_token(*args, **kwargs): ...
    def input_file(*args, **kwargs): ...
    def input_text(*args, **kwargs): ...
    def lookup_symbol(*args, **kwargs): ...
    def peek_next_token(*args, **kwargs): ...
    def scope_add_symbol(*args, **kwargs): ...
    def scope_lookup_symbol(*args, **kwargs): ...
    def scope_remove_symbol(*args, **kwargs): ...
    def set_scope(*args, **kwargs): ...
    def sync_file_offset(*args, **kwargs): ...
    def unexp_token(*args, **kwargs): ...

class ScannerConfig:
    case_sensitive = ...
    char_2_token = ...
    cpair_comment_single = ...
    cset_identifier_first = ...
    cset_identifier_nth = ...
    cset_skip_characters = ...
    identifier_2_string = ...
    int_2_float = ...
    numbers_2_int = ...
    padding_dummy = ...
    scan_binary = ...
    scan_comment_multi = ...
    scan_float = ...
    scan_hex = ...
    scan_hex_dollar = ...
    scan_identifier = ...
    scan_identifier_1char = ...
    scan_identifier_NULL = ...
    scan_octal = ...
    scan_string_dq = ...
    scan_string_sq = ...
    scan_symbols = ...
    scope_0_fallback = ...
    skip_comment_multi = ...
    skip_comment_single = ...
    store_int64 = ...
    symbol_2_token = ...

class Sequence:
    def append(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def get(*args, **kwargs): ...
    def get_begin_iter(*args, **kwargs): ...
    def get_end_iter(*args, **kwargs): ...
    def get_iter_at_pos(*args, **kwargs): ...
    def get_length(*args, **kwargs): ...
    def insert_before(*args, **kwargs): ...
    def is_empty(*args, **kwargs): ...
    def move(*args, **kwargs): ...
    def move_range(*args, **kwargs): ...
    def prepend(*args, **kwargs): ...
    def range_get_midpoint(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def remove_range(*args, **kwargs): ...
    def set(*args, **kwargs): ...
    def swap(*args, **kwargs): ...

class SequenceIter:
    def compare(*args, **kwargs): ...
    def get_position(*args, **kwargs): ...
    def get_sequence(*args, **kwargs): ...
    def is_begin(*args, **kwargs): ...
    def is_end(*args, **kwargs): ...
    def move(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def prev(*args, **kwargs): ...

class Source:
    callback_data = ...
    callback_funcs = ...
    can_recurse = ...
    context = ...
    flags = ...
    name = ...
    next = ...
    poll_fds = ...
    prev = ...
    priority = ...
    priv = ...
    ref_count = ...
    source_funcs = ...
    source_id = ...

    def add_child_source(*args, **kwargs): ...
    def add_poll(*args, **kwargs): ...
    def add_unix_fd(*args, **kwargs): ...
    def attach(*args, **kwargs): ...
    def destroy(*args, **kwargs): ...
    def get_can_recurse(*args, **kwargs): ...
    def get_context(*args, **kwargs): ...
    def get_current_time(*args, **kwargs): ...
    def get_id(*args, **kwargs): ...
    def get_name(*args, **kwargs): ...
    def get_priority(*args, **kwargs): ...
    def get_ready_time(*args, **kwargs): ...
    def get_time(*args, **kwargs): ...
    def is_destroyed(*args, **kwargs): ...
    def modify_unix_fd(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def query_unix_fd(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def remove_by_funcs_user_data(*args, **kwargs): ...
    def remove_by_user_data(*args, **kwargs): ...
    def remove_child_source(*args, **kwargs): ...
    def remove_poll(*args, **kwargs): ...
    def remove_unix_fd(*args, **kwargs): ...
    def set_callback(*args, **kwargs): ...
    def set_callback_indirect(*args, **kwargs): ...
    def set_can_recurse(*args, **kwargs): ...
    def set_funcs(*args, **kwargs): ...
    def set_name(*args, **kwargs): ...
    def set_name_by_id(*args, **kwargs): ...
    def set_priority(*args, **kwargs): ...
    def set_ready_time(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class SourceCallbackFuncs:
    get = ...
    ref = ...
    unref = ...

class SourceFuncs:
    check = ...
    closure_callback = ...
    closure_marshal = ...
    dispatch = ...
    finalize = ...
    prepare = ...

class SourcePrivate:
    pass

class StatBuf:
    pass

class String:
    allocated_len = ...
    len = ...
    str = ...

    def append(*args, **kwargs): ...
    def append_c(*args, **kwargs): ...
    def append_len(*args, **kwargs): ...
    def append_unichar(*args, **kwargs): ...
    def append_uri_escaped(*args, **kwargs): ...
    def ascii_down(*args, **kwargs): ...
    def ascii_up(*args, **kwargs): ...
    def assign(*args, **kwargs): ...
    def down(*args, **kwargs): ...
    def equal(*args, **kwargs): ...
    def erase(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def free_to_bytes(*args, **kwargs): ...
    def hash(*args, **kwargs): ...
    def insert(*args, **kwargs): ...
    def insert_c(*args, **kwargs): ...
    def insert_len(*args, **kwargs): ...
    def insert_unichar(*args, **kwargs): ...
    def overwrite(*args, **kwargs): ...
    def overwrite_len(*args, **kwargs): ...
    def prepend(*args, **kwargs): ...
    def prepend_c(*args, **kwargs): ...
    def prepend_len(*args, **kwargs): ...
    def prepend_unichar(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def set_size(*args, **kwargs): ...
    def truncate(*args, **kwargs): ...
    def up(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class StringChunk:
    def clear(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def insert(*args, **kwargs): ...
    def insert_const(*args, **kwargs): ...
    def insert_len(*args, **kwargs): ...

class StrvBuilder:
    def add(*args, **kwargs): ...
    def end(*args, **kwargs): ...
    def unref(*args, **kwargs): ...

class TestCase:
    pass

class TestConfig:
    test_initialized = ...
    test_perf = ...
    test_quick = ...
    test_quiet = ...
    test_undefined = ...
    test_verbose = ...

class TestLogBuffer:
    data = ...
    msgs = ...

    def free(*args, **kwargs): ...
    def push(*args, **kwargs): ...

class TestLogMsg:
    log_type = ...
    n_nums = ...
    n_strings = ...
    nums = ...
    strings = ...

    def free(*args, **kwargs): ...

class TestSuite:
    def add(*args, **kwargs): ...
    def add_suite(*args, **kwargs): ...

class Thread:
    def error_quark(*args, **kwargs): ...
    def exit(*args, **kwargs): ...
    def join(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def self(*args, **kwargs): ...
    def try_new(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def yield_(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class ThreadPool:
    exclusive = ...
    func = ...
    user_data = ...

    def free(*args, **kwargs): ...
    def get_max_idle_time(*args, **kwargs): ...
    def get_max_threads(*args, **kwargs): ...
    def get_max_unused_threads(*args, **kwargs): ...
    def get_num_threads(*args, **kwargs): ...
    def get_num_unused_threads(*args, **kwargs): ...
    def move_to_front(*args, **kwargs): ...
    def push(*args, **kwargs): ...
    def set_max_idle_time(*args, **kwargs): ...
    def set_max_threads(*args, **kwargs): ...
    def set_max_unused_threads(*args, **kwargs): ...
    def stop_unused_threads(*args, **kwargs): ...
    def unprocessed(*args, **kwargs): ...

class TimeVal:
    tv_sec = ...
    tv_usec = ...

    def add(*args, **kwargs): ...
    def from_iso8601(*args, **kwargs): ...
    def to_iso8601(*args, **kwargs): ...

class TimeZone:
    def adjust_time(*args, **kwargs): ...
    def find_interval(*args, **kwargs): ...
    def get_abbreviation(*args, **kwargs): ...
    def get_identifier(*args, **kwargs): ...
    def get_offset(*args, **kwargs): ...
    def is_dst(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_identifier(*args, **kwargs): ...
    def new_local(*args, **kwargs): ...
    def new_offset(*args, **kwargs): ...
    def new_utc(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class Timeout:
    callback_data = ...
    callback_funcs = ...
    can_recurse = ...
    context = ...
    flags = ...
    name = ...
    next = ...
    poll_fds = ...
    prev = ...
    priority = ...
    priv = ...
    ref_count = ...
    source_funcs = ...
    source_id = ...

    def add_child_source(*args, **kwargs): ...
    def add_poll(*args, **kwargs): ...
    def add_unix_fd(*args, **kwargs): ...
    def attach(*args, **kwargs): ...
    def destroy(*args, **kwargs): ...
    def get_can_recurse(*args, **kwargs): ...
    def get_context(*args, **kwargs): ...
    def get_current_time(*args, **kwargs): ...
    def get_id(*args, **kwargs): ...
    def get_name(*args, **kwargs): ...
    def get_priority(*args, **kwargs): ...
    def get_ready_time(*args, **kwargs): ...
    def get_time(*args, **kwargs): ...
    def is_destroyed(*args, **kwargs): ...
    def modify_unix_fd(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def query_unix_fd(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def remove_by_funcs_user_data(*args, **kwargs): ...
    def remove_by_user_data(*args, **kwargs): ...
    def remove_child_source(*args, **kwargs): ...
    def remove_poll(*args, **kwargs): ...
    def remove_unix_fd(*args, **kwargs): ...
    def set_callback(*args, **kwargs): ...
    def set_callback_indirect(*args, **kwargs): ...
    def set_can_recurse(*args, **kwargs): ...
    def set_funcs(*args, **kwargs): ...
    def set_name(*args, **kwargs): ...
    def set_name_by_id(*args, **kwargs): ...
    def set_priority(*args, **kwargs): ...
    def set_ready_time(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class Timer:
    def continue_(*args, **kwargs): ...
    def destroy(*args, **kwargs): ...
    def elapsed(*args, **kwargs): ...
    def is_active(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def start(*args, **kwargs): ...
    def stop(*args, **kwargs): ...

class TokenValue:
    v_binary = ...
    v_char = ...
    v_comment = ...
    v_error = ...
    v_float = ...
    v_hex = ...
    v_identifier = ...
    v_int = ...
    v_int64 = ...
    v_octal = ...
    v_string = ...
    v_symbol = ...

class TrashStack:
    next = ...

    def height(*args, **kwargs): ...
    def peek(*args, **kwargs): ...
    def pop(*args, **kwargs): ...
    def push(*args, **kwargs): ...

class Tree:
    def destroy(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def insert(*args, **kwargs): ...
    def insert_node(*args, **kwargs): ...
    def lookup(*args, **kwargs): ...
    def lookup_extended(*args, **kwargs): ...
    def lookup_node(*args, **kwargs): ...
    def lower_bound(*args, **kwargs): ...
    def new_full(*args, **kwargs): ...
    def nnodes(*args, **kwargs): ...
    def node_first(*args, **kwargs): ...
    def node_last(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def replace_node(*args, **kwargs): ...
    def steal(*args, **kwargs): ...
    def unref(*args, **kwargs): ...
    def upper_bound(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class TreeNode:
    def key(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def previous(*args, **kwargs): ...
    def value(*args, **kwargs): ...

class Uri:
    def build(*args, **kwargs): ...
    def build_with_user(*args, **kwargs): ...
    def error_quark(*args, **kwargs): ...
    def escape_bytes(*args, **kwargs): ...
    @classmethod
    def escape_string(
        cls, unescaped: str, reserved_chars_allowed: Optional[str], allow_utf8: bool
    ) -> str: ...
    def get_auth_params(*args, **kwargs): ...
    def get_flags(*args, **kwargs): ...
    def get_fragment(*args, **kwargs): ...
    def get_host(*args, **kwargs): ...
    def get_password(*args, **kwargs): ...
    def get_path(*args, **kwargs): ...
    def get_port(*args, **kwargs): ...
    def get_query(*args, **kwargs): ...
    def get_scheme(*args, **kwargs): ...
    def get_user(*args, **kwargs): ...
    def get_userinfo(*args, **kwargs): ...
    def is_valid(*args, **kwargs): ...
    def join(*args, **kwargs): ...
    def join_with_user(*args, **kwargs): ...
    def list_extract_uris(*args, **kwargs): ...
    def parse(*args, **kwargs): ...
    def parse_params(*args, **kwargs): ...
    def parse_relative(*args, **kwargs): ...
    def parse_scheme(*args, **kwargs): ...
    def peek_scheme(*args, **kwargs): ...
    def resolve_relative(*args, **kwargs): ...
    def split(*args, **kwargs): ...
    def split_network(*args, **kwargs): ...
    def split_with_user(*args, **kwargs): ...
    def to_string(*args, **kwargs): ...
    def to_string_partial(*args, **kwargs): ...
    def unescape_bytes(*args, **kwargs): ...
    def unescape_segment(*args, **kwargs): ...
    def unescape_string(*args, **kwargs): ...
    def copy(self, *args, **kwargs): ...

class UriParamsIter:
    dummy0 = ...
    dummy1 = ...
    dummy2 = ...
    dummy3 = ...

    def init(*args, **kwargs): ...
    def next(*args, **kwargs): ...

class Variant:
    def __init__(self, format_string: str, value: Any) -> None: ...
    def byteswap(*args, **kwargs): ...
    def check_format_string(*args, **kwargs): ...
    def classify(*args, **kwargs): ...
    def compare(*args, **kwargs): ...
    def dup_bytestring(*args, **kwargs): ...
    def dup_bytestring_array(*args, **kwargs): ...
    def dup_objv(*args, **kwargs): ...
    def dup_string(*args, **kwargs): ...
    def dup_strv(*args, **kwargs): ...
    def equal(*args, **kwargs): ...
    def get_boolean(self) -> bool: ...
    def get_byte(*args, **kwargs): ...
    def get_bytestring(*args, **kwargs): ...
    def get_bytestring_array(*args, **kwargs): ...
    def get_child_value(self, index_: int) -> Variant: ...
    def get_data(*args, **kwargs): ...
    def get_data_as_bytes(*args, **kwargs): ...
    def get_double(*args, **kwargs): ...
    def get_handle(*args, **kwargs): ...
    def get_int16(*args, **kwargs): ...
    def get_int32(*args, **kwargs): ...
    def get_int64(*args, **kwargs): ...
    def get_maybe(*args, **kwargs): ...
    def get_normal_form(*args, **kwargs): ...
    def get_objv(*args, **kwargs): ...
    def get_size(*args, **kwargs): ...
    def get_string(self) -> str: ...
    def get_strv(self) -> list[str]: ...
    def get_type(*args, **kwargs): ...
    def get_type_string(*args, **kwargs): ...
    def get_uint16(*args, **kwargs): ...
    def get_uint32(self) -> int: ...
    def get_uint64(*args, **kwargs): ...
    def get_variant(*args, **kwargs): ...
    def hash(*args, **kwargs): ...
    def is_container(*args, **kwargs): ...
    def is_floating(*args, **kwargs): ...
    def is_normal_form(*args, **kwargs): ...
    def is_object_path(*args, **kwargs): ...
    def is_of_type(*args, **kwargs): ...
    def is_signature(*args, **kwargs): ...
    def keys(*args, **kwargs): ...
    def lookup_value(*args, **kwargs): ...
    def n_children(*args, **kwargs): ...
    def new_array(*args, **kwargs): ...
    @classmethod
    def new_boolean(cls, value: bool) -> Variant: ...
    def new_byte(*args, **kwargs): ...
    def new_bytestring(*args, **kwargs): ...
    def new_bytestring_array(*args, **kwargs): ...
    def new_dict_entry(*args, **kwargs): ...
    def new_double(*args, **kwargs): ...
    def new_fixed_array(*args, **kwargs): ...
    @classmethod
    def new_from_bytes(
        cls, type: VariantType, bytes: Bytes, trusted: bool
    ) -> Variant: ...
    @classmethod
    def new_from_data(
        cls,
        type: VariantType,
        data: bytes,
        trusted: bool,
        notify: Callable[..., Any],
        user_data: Optional[Any] = ...,
    ) -> Variant: ...
    def new_handle(*args, **kwargs): ...
    def new_int16(*args, **kwargs): ...
    def new_int32(*args, **kwargs): ...
    def new_int64(*args, **kwargs): ...
    def new_maybe(*args, **kwargs): ...
    def new_object_path(*args, **kwargs): ...
    def new_objv(*args, **kwargs): ...
    def new_signature(*args, **kwargs): ...
    @classmethod
    def new_string(cls, string: str) -> Variant: ...
    @classmethod
    def new_strv(cls, strv: list[str]) -> Variant: ...
    @classmethod
    def new_tuple(cls, children: Variant) -> Variant: ...
    def new_uint16(*args, **kwargs): ...
    def new_uint32(*args, **kwargs): ...
    def new_uint64(*args, **kwargs): ...
    def new_variant(*args, **kwargs): ...
    def parse(*args, **kwargs): ...
    def parse_error_print_context(*args, **kwargs): ...
    def parse_error_quark(*args, **kwargs): ...
    def parser_get_error_quark(*args, **kwargs): ...
    def print_(*args, **kwargs): ...
    def ref(*args, **kwargs): ...
    def ref_sink(*args, **kwargs): ...
    def store(*args, **kwargs): ...
    def take_ref(*args, **kwargs): ...
    def unpack(self) -> Any: ...
    def unref(*args, **kwargs): ...
    def split_signature(self, *args, **kwargs): ...
    def __getitem__(self, key: Any) -> Any: ...
    def __len__(self) -> int: ...

class VariantBuilder:
    def __init__(self, type: VariantType) -> None: ...
    def add_value(self, variant: Variant) -> None: ...
    def close(self) -> None: ...
    def end(self) -> Variant: ...
    @classmethod
    def new(cls, type: VariantType) -> VariantBuilder: ...
    def open(self, type: VariantType) -> None: ...
    def ref(self) -> VariantBuilder: ...
    def unref(self) -> None: ...
    def copy(self, *args, **kwargs): ...

class VariantDict:
    def clear(self) -> None: ...
    def contains(self, key: str) -> bool: ...
    def end(self) -> Variant: ...
    def insert_value(self, key: str, value: Variant) -> None: ...
    def lookup_value(
        self, key: str, expected_type: Optional[VariantType] = ...
    ) -> Optional[Variant]: ...
    @classmethod
    def new(cls, from_asv: Optional[Variant]) -> VariantDict: ...
    def ref(self) -> VariantDict: ...
    def remove(self, key: str) -> bool: ...
    def unref(self) -> None: ...
    def copy(self, *args, **kwargs): ...

class VariantType:
    def __init__(self, string: str) -> None: ...
    def checked_(*args, **kwargs): ...
    def copy(*args, **kwargs): ...
    def dup_string(*args, **kwargs): ...
    def element(*args, **kwargs): ...
    def equal(*args, **kwargs): ...
    def first(*args, **kwargs): ...
    def free(*args, **kwargs): ...
    def get_string_length(*args, **kwargs): ...
    def hash(*args, **kwargs): ...
    def is_array(*args, **kwargs): ...
    def is_basic(*args, **kwargs): ...
    def is_container(*args, **kwargs): ...
    def is_definite(*args, **kwargs): ...
    def is_dict_entry(*args, **kwargs): ...
    def is_maybe(*args, **kwargs): ...
    def is_subtype_of(*args, **kwargs): ...
    def is_tuple(*args, **kwargs): ...
    def is_variant(*args, **kwargs): ...
    def key(*args, **kwargs): ...
    def n_items(*args, **kwargs): ...
    @classmethod
    def new(cls, type_string: str) -> VariantType: ...
    def new_array(*args, **kwargs): ...
    def new_dict_entry(*args, **kwargs): ...
    def new_maybe(*args, **kwargs): ...
    def new_tuple(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def string_get_depth_(*args, **kwargs): ...
    def string_is_valid(*args, **kwargs): ...
    def string_scan(*args, **kwargs): ...
    def value(*args, **kwargs): ...

class AsciiType(GObject.GFlags):
    ALNUM = ...
    ALPHA = ...
    CNTRL = ...
    DIGIT = ...
    GRAPH = ...
    LOWER = ...
    PRINT = ...
    PUNCT = ...
    SPACE = ...
    UPPER = ...
    XDIGIT = ...

class FileSetContentsFlags(GObject.GFlags):
    NONE = ...
    CONSISTENT = ...
    DURABLE = ...
    ONLY_EXISTING = ...

class FileTest(GObject.GFlags):
    IS_REGULAR = ...
    IS_SYMLINK = ...
    IS_DIR = ...
    IS_EXECUTABLE = ...
    EXISTS = ...

class FormatSizeFlags(GObject.GFlags):
    DEFAULT = ...
    LONG_FORMAT = ...
    IEC_UNITS = ...
    BITS = ...

class HookFlagMask(GObject.GFlags):
    ACTIVE = ...
    IN_CALL = ...
    MASK = ...

class IOCondition(GObject.GFlags):
    IN = ...
    OUT = ...
    PRI = ...
    ERR = ...
    HUP = ...
    NVAL = ...

class IOFlags(GObject.GFlags):
    APPEND = ...
    NONBLOCK = ...
    IS_READABLE = ...
    IS_WRITABLE = ...
    IS_WRITEABLE = ...
    IS_SEEKABLE = ...
    MASK = ...
    GET_MASK = ...
    SET_MASK = ...

class KeyFileFlags(GObject.GFlags):
    NONE = ...
    KEEP_COMMENTS = ...
    KEEP_TRANSLATIONS = ...

class LogLevelFlags(GObject.GFlags):
    FLAG_RECURSION = ...
    FLAG_FATAL = ...
    LEVEL_ERROR = ...
    LEVEL_CRITICAL = ...
    LEVEL_WARNING = ...
    LEVEL_MESSAGE = ...
    LEVEL_INFO = ...
    LEVEL_DEBUG = ...
    LEVEL_MASK = ...

class MarkupCollectType(GObject.GFlags):
    INVALID = ...
    STRING = ...
    STRDUP = ...
    BOOLEAN = ...
    TRISTATE = ...
    OPTIONAL = ...

class MarkupParseFlags(GObject.GFlags):
    DO_NOT_USE_THIS_UNSUPPORTED_FLAG = ...
    TREAT_CDATA_AS_TEXT = ...
    PREFIX_ERROR_POSITION = ...
    IGNORE_QUALIFIED = ...

class OptionFlags(GObject.GFlags):
    NONE = ...
    HIDDEN = ...
    IN_MAIN = ...
    REVERSE = ...
    NO_ARG = ...
    FILENAME = ...
    OPTIONAL_ARG = ...
    NOALIAS = ...

class RegexCompileFlags(GObject.GFlags):
    CASELESS = ...
    MULTILINE = ...
    DOTALL = ...
    EXTENDED = ...
    ANCHORED = ...
    DOLLAR_ENDONLY = ...
    UNGREEDY = ...
    RAW = ...
    NO_AUTO_CAPTURE = ...
    OPTIMIZE = ...
    FIRSTLINE = ...
    DUPNAMES = ...
    NEWLINE_CR = ...
    NEWLINE_LF = ...
    NEWLINE_CRLF = ...
    NEWLINE_ANYCRLF = ...
    BSR_ANYCRLF = ...
    JAVASCRIPT_COMPAT = ...

class RegexMatchFlags(GObject.GFlags):
    ANCHORED = ...
    NOTBOL = ...
    NOTEOL = ...
    NOTEMPTY = ...
    PARTIAL = ...
    NEWLINE_CR = ...
    NEWLINE_LF = ...
    NEWLINE_CRLF = ...
    NEWLINE_ANY = ...
    NEWLINE_ANYCRLF = ...
    BSR_ANYCRLF = ...
    BSR_ANY = ...
    PARTIAL_SOFT = ...
    PARTIAL_HARD = ...
    NOTEMPTY_ATSTART = ...

class SpawnFlags(GObject.GFlags):
    DEFAULT = ...
    LEAVE_DESCRIPTORS_OPEN = ...
    DO_NOT_REAP_CHILD = ...
    SEARCH_PATH = ...
    STDOUT_TO_DEV_NULL = ...
    STDERR_TO_DEV_NULL = ...
    CHILD_INHERITS_STDIN = ...
    FILE_AND_ARGV_ZERO = ...
    SEARCH_PATH_FROM_ENVP = ...
    CLOEXEC_PIPES = ...

class TestSubprocessFlags(GObject.GFlags):
    STDIN = ...
    STDOUT = ...
    STDERR = ...

class TestTrapFlags(GObject.GFlags):
    SILENCE_STDOUT = ...
    SILENCE_STDERR = ...
    INHERIT_STDIN = ...

class TraverseFlags(GObject.GFlags):
    LEAVES = ...
    NON_LEAVES = ...
    ALL = ...
    MASK = ...
    LEAFS = ...
    NON_LEAFS = ...

class UriFlags(GObject.GFlags):
    NONE = ...
    PARSE_RELAXED = ...
    HAS_PASSWORD = ...
    HAS_AUTH_PARAMS = ...
    ENCODED = ...
    NON_DNS = ...
    ENCODED_QUERY = ...
    ENCODED_PATH = ...
    ENCODED_FRAGMENT = ...
    SCHEME_NORMALIZE = ...

class UriHideFlags(GObject.GFlags):
    NONE = ...
    USERINFO = ...
    PASSWORD = ...
    AUTH_PARAMS = ...
    QUERY = ...
    FRAGMENT = ...

class UriParamsFlags(GObject.GFlags):
    NONE = ...
    CASE_INSENSITIVE = ...
    WWW_FORM = ...
    PARSE_RELAXED = ...

class BookmarkFileError(GObject.GEnum):
    INVALID_URI = ...
    INVALID_VALUE = ...
    APP_NOT_REGISTERED = ...
    URI_NOT_FOUND = ...
    READ = ...
    UNKNOWN_ENCODING = ...
    WRITE = ...
    FILE_NOT_FOUND = ...

class ChecksumType(GObject.GEnum):
    MD5 = ...
    SHA1 = ...
    SHA256 = ...
    SHA512 = ...
    SHA384 = ...

class ConvertError(GObject.GEnum):
    NO_CONVERSION = ...
    ILLEGAL_SEQUENCE = ...
    FAILED = ...
    PARTIAL_INPUT = ...
    BAD_URI = ...
    NOT_ABSOLUTE_PATH = ...
    NO_MEMORY = ...
    EMBEDDED_NUL = ...

class DateDMY(GObject.GEnum):
    DAY = ...
    MONTH = ...
    YEAR = ...

class DateMonth(GObject.GEnum):
    BAD_MONTH = ...
    JANUARY = ...
    FEBRUARY = ...
    MARCH = ...
    APRIL = ...
    MAY = ...
    JUNE = ...
    JULY = ...
    AUGUST = ...
    SEPTEMBER = ...
    OCTOBER = ...
    NOVEMBER = ...
    DECEMBER = ...

class DateWeekday(GObject.GEnum):
    BAD_WEEKDAY = ...
    MONDAY = ...
    TUESDAY = ...
    WEDNESDAY = ...
    THURSDAY = ...
    FRIDAY = ...
    SATURDAY = ...
    SUNDAY = ...

class ErrorType(GObject.GEnum):
    UNKNOWN = ...
    UNEXP_EOF = ...
    UNEXP_EOF_IN_STRING = ...
    UNEXP_EOF_IN_COMMENT = ...
    NON_DIGIT_IN_CONST = ...
    DIGIT_RADIX = ...
    FLOAT_RADIX = ...
    FLOAT_MALFORMED = ...

class FileError(GObject.GEnum):
    EXIST = ...
    ISDIR = ...
    ACCES = ...
    NAMETOOLONG = ...
    NOENT = ...
    NOTDIR = ...
    NXIO = ...
    NODEV = ...
    ROFS = ...
    TXTBSY = ...
    FAULT = ...
    LOOP = ...
    NOSPC = ...
    NOMEM = ...
    MFILE = ...
    NFILE = ...
    BADF = ...
    INVAL = ...
    PIPE = ...
    AGAIN = ...
    INTR = ...
    IO = ...
    PERM = ...
    NOSYS = ...
    FAILED = ...

class IOChannelError(GObject.GEnum):
    FBIG = ...
    INVAL = ...
    IO = ...
    ISDIR = ...
    NOSPC = ...
    NXIO = ...
    OVERFLOW = ...
    PIPE = ...
    FAILED = ...

class IOError(GObject.GEnum):
    NONE = ...
    AGAIN = ...
    INVAL = ...
    UNKNOWN = ...

class IOStatus(GObject.GEnum):
    ERROR = ...
    NORMAL = ...
    EOF = ...
    AGAIN = ...

class KeyFileError(GObject.GEnum):
    UNKNOWN_ENCODING = ...
    PARSE = ...
    NOT_FOUND = ...
    KEY_NOT_FOUND = ...
    GROUP_NOT_FOUND = ...
    INVALID_VALUE = ...

class LogWriterOutput(GObject.GEnum):
    HANDLED = ...
    UNHANDLED = ...

class MarkupError(GObject.GEnum):
    BAD_UTF8 = ...
    EMPTY = ...
    PARSE = ...
    UNKNOWN_ELEMENT = ...
    UNKNOWN_ATTRIBUTE = ...
    INVALID_CONTENT = ...
    MISSING_ATTRIBUTE = ...

class NormalizeMode(GObject.GEnum):
    DEFAULT = ...
    NFD = ...
    DEFAULT_COMPOSE = ...
    NFC = ...
    ALL = ...
    NFKD = ...
    ALL_COMPOSE = ...
    NFKC = ...

class NumberParserError(GObject.GEnum):
    INVALID = ...
    OUT_OF_BOUNDS = ...

class OnceStatus(GObject.GEnum):
    NOTCALLED = ...
    PROGRESS = ...
    READY = ...

class OptionArg(GObject.GEnum):
    NONE = ...
    STRING = ...
    INT = ...
    CALLBACK = ...
    FILENAME = ...
    STRING_ARRAY = ...
    FILENAME_ARRAY = ...
    DOUBLE = ...
    INT64 = ...

class OptionError(GObject.GEnum):
    UNKNOWN_OPTION = ...
    BAD_VALUE = ...
    FAILED = ...

class RegexError(GObject.GEnum):
    COMPILE = ...
    OPTIMIZE = ...
    REPLACE = ...
    MATCH = ...
    INTERNAL = ...
    STRAY_BACKSLASH = ...
    MISSING_CONTROL_CHAR = ...
    UNRECOGNIZED_ESCAPE = ...
    QUANTIFIERS_OUT_OF_ORDER = ...
    QUANTIFIER_TOO_BIG = ...
    UNTERMINATED_CHARACTER_CLASS = ...
    INVALID_ESCAPE_IN_CHARACTER_CLASS = ...
    RANGE_OUT_OF_ORDER = ...
    NOTHING_TO_REPEAT = ...
    UNRECOGNIZED_CHARACTER = ...
    POSIX_NAMED_CLASS_OUTSIDE_CLASS = ...
    UNMATCHED_PARENTHESIS = ...
    INEXISTENT_SUBPATTERN_REFERENCE = ...
    UNTERMINATED_COMMENT = ...
    EXPRESSION_TOO_LARGE = ...
    MEMORY_ERROR = ...
    VARIABLE_LENGTH_LOOKBEHIND = ...
    MALFORMED_CONDITION = ...
    TOO_MANY_CONDITIONAL_BRANCHES = ...
    ASSERTION_EXPECTED = ...
    UNKNOWN_POSIX_CLASS_NAME = ...
    POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = ...
    HEX_CODE_TOO_LARGE = ...
    INVALID_CONDITION = ...
    SINGLE_BYTE_MATCH_IN_LOOKBEHIND = ...
    INFINITE_LOOP = ...
    MISSING_SUBPATTERN_NAME_TERMINATOR = ...
    DUPLICATE_SUBPATTERN_NAME = ...
    MALFORMED_PROPERTY = ...
    UNKNOWN_PROPERTY = ...
    SUBPATTERN_NAME_TOO_LONG = ...
    TOO_MANY_SUBPATTERNS = ...
    INVALID_OCTAL_VALUE = ...
    TOO_MANY_BRANCHES_IN_DEFINE = ...
    DEFINE_REPETION = ...
    INCONSISTENT_NEWLINE_OPTIONS = ...
    MISSING_BACK_REFERENCE = ...
    INVALID_RELATIVE_REFERENCE = ...
    BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = ...
    UNKNOWN_BACKTRACKING_CONTROL_VERB = ...
    NUMBER_TOO_BIG = ...
    MISSING_SUBPATTERN_NAME = ...
    MISSING_DIGIT = ...
    INVALID_DATA_CHARACTER = ...
    EXTRA_SUBPATTERN_NAME = ...
    BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = ...
    INVALID_CONTROL_CHAR = ...
    MISSING_NAME = ...
    NOT_SUPPORTED_IN_CLASS = ...
    TOO_MANY_FORWARD_REFERENCES = ...
    NAME_TOO_LONG = ...
    CHARACTER_VALUE_TOO_LARGE = ...

class SeekType(GObject.GEnum):
    CUR = ...
    SET = ...
    END = ...

class ShellError(GObject.GEnum):
    BAD_QUOTING = ...
    EMPTY_STRING = ...
    FAILED = ...

class SliceConfig(GObject.GEnum):
    ALWAYS_MALLOC = ...
    BYPASS_MAGAZINES = ...
    WORKING_SET_MSECS = ...
    COLOR_INCREMENT = ...
    CHUNK_SIZES = ...
    CONTENTION_COUNTER = ...

class SpawnError(GObject.GEnum):
    FORK = ...
    READ = ...
    CHDIR = ...
    ACCES = ...
    PERM = ...
    TOO_BIG = ...
    NOEXEC = ...
    NAMETOOLONG = ...
    NOENT = ...
    NOMEM = ...
    NOTDIR = ...
    LOOP = ...
    TXTBUSY = ...
    IO = ...
    NFILE = ...
    MFILE = ...
    INVAL = ...
    ISDIR = ...
    LIBBAD = ...
    FAILED = ...

class TestFileType(GObject.GEnum):
    DIST = ...
    BUILT = ...

class TestLogType(GObject.GEnum):
    NONE = ...
    ERROR = ...
    START_BINARY = ...
    LIST_CASE = ...
    SKIP_CASE = ...
    START_CASE = ...
    STOP_CASE = ...
    MIN_RESULT = ...
    MAX_RESULT = ...
    MESSAGE = ...
    START_SUITE = ...
    STOP_SUITE = ...

class TestResult(GObject.GEnum):
    SUCCESS = ...
    SKIPPED = ...
    FAILURE = ...
    INCOMPLETE = ...

class ThreadError(GObject.GEnum):
    THREAD_ERROR_AGAIN = ...

class TimeType(GObject.GEnum):
    STANDARD = ...
    DAYLIGHT = ...
    UNIVERSAL = ...

class TokenType(GObject.GEnum):
    EOF = ...
    LEFT_PAREN = ...
    RIGHT_PAREN = ...
    LEFT_CURLY = ...
    RIGHT_CURLY = ...
    LEFT_BRACE = ...
    RIGHT_BRACE = ...
    EQUAL_SIGN = ...
    COMMA = ...
    NONE = ...
    ERROR = ...
    CHAR = ...
    BINARY = ...
    OCTAL = ...
    INT = ...
    HEX = ...
    FLOAT = ...
    STRING = ...
    SYMBOL = ...
    IDENTIFIER = ...
    IDENTIFIER_NULL = ...
    COMMENT_SINGLE = ...
    COMMENT_MULTI = ...

class TraverseType(GObject.GEnum):
    IN_ORDER = ...
    PRE_ORDER = ...
    POST_ORDER = ...
    LEVEL_ORDER = ...

class UnicodeBreakType(GObject.GEnum):
    MANDATORY = ...
    CARRIAGE_RETURN = ...
    LINE_FEED = ...
    COMBINING_MARK = ...
    SURROGATE = ...
    ZERO_WIDTH_SPACE = ...
    INSEPARABLE = ...
    NON_BREAKING_GLUE = ...
    CONTINGENT = ...
    SPACE = ...
    AFTER = ...
    BEFORE = ...
    BEFORE_AND_AFTER = ...
    HYPHEN = ...
    NON_STARTER = ...
    OPEN_PUNCTUATION = ...
    CLOSE_PUNCTUATION = ...
    QUOTATION = ...
    EXCLAMATION = ...
    IDEOGRAPHIC = ...
    NUMERIC = ...
    INFIX_SEPARATOR = ...
    SYMBOL = ...
    ALPHABETIC = ...
    PREFIX = ...
    POSTFIX = ...
    COMPLEX_CONTEXT = ...
    AMBIGUOUS = ...
    UNKNOWN = ...
    NEXT_LINE = ...
    WORD_JOINER = ...
    HANGUL_L_JAMO = ...
    HANGUL_V_JAMO = ...
    HANGUL_T_JAMO = ...
    HANGUL_LV_SYLLABLE = ...
    HANGUL_LVT_SYLLABLE = ...
    CLOSE_PARANTHESIS = ...
    CONDITIONAL_JAPANESE_STARTER = ...
    HEBREW_LETTER = ...
    REGIONAL_INDICATOR = ...
    EMOJI_BASE = ...
    EMOJI_MODIFIER = ...
    ZERO_WIDTH_JOINER = ...

class UnicodeScript(GObject.GEnum):
    INVALID_CODE = ...
    COMMON = ...
    INHERITED = ...
    ARABIC = ...
    ARMENIAN = ...
    BENGALI = ...
    BOPOMOFO = ...
    CHEROKEE = ...
    COPTIC = ...
    CYRILLIC = ...
    DESERET = ...
    DEVANAGARI = ...
    ETHIOPIC = ...
    GEORGIAN = ...
    GOTHIC = ...
    GREEK = ...
    GUJARATI = ...
    GURMUKHI = ...
    HAN = ...
    HANGUL = ...
    HEBREW = ...
    HIRAGANA = ...
    KANNADA = ...
    KATAKANA = ...
    KHMER = ...
    LAO = ...
    LATIN = ...
    MALAYALAM = ...
    MONGOLIAN = ...
    MYANMAR = ...
    OGHAM = ...
    OLD_ITALIC = ...
    ORIYA = ...
    RUNIC = ...
    SINHALA = ...
    SYRIAC = ...
    TAMIL = ...
    TELUGU = ...
    THAANA = ...
    THAI = ...
    TIBETAN = ...
    CANADIAN_ABORIGINAL = ...
    YI = ...
    TAGALOG = ...
    HANUNOO = ...
    BUHID = ...
    TAGBANWA = ...
    BRAILLE = ...
    CYPRIOT = ...
    LIMBU = ...
    OSMANYA = ...
    SHAVIAN = ...
    LINEAR_B = ...
    TAI_LE = ...
    UGARITIC = ...
    NEW_TAI_LUE = ...
    BUGINESE = ...
    GLAGOLITIC = ...
    TIFINAGH = ...
    SYLOTI_NAGRI = ...
    OLD_PERSIAN = ...
    KHAROSHTHI = ...
    UNKNOWN = ...
    BALINESE = ...
    CUNEIFORM = ...
    PHOENICIAN = ...
    PHAGS_PA = ...
    NKO = ...
    KAYAH_LI = ...
    LEPCHA = ...
    REJANG = ...
    SUNDANESE = ...
    SAURASHTRA = ...
    CHAM = ...
    OL_CHIKI = ...
    VAI = ...
    CARIAN = ...
    LYCIAN = ...
    LYDIAN = ...
    AVESTAN = ...
    BAMUM = ...
    EGYPTIAN_HIEROGLYPHS = ...
    IMPERIAL_ARAMAIC = ...
    INSCRIPTIONAL_PAHLAVI = ...
    INSCRIPTIONAL_PARTHIAN = ...
    JAVANESE = ...
    KAITHI = ...
    LISU = ...
    MEETEI_MAYEK = ...
    OLD_SOUTH_ARABIAN = ...
    OLD_TURKIC = ...
    SAMARITAN = ...
    TAI_THAM = ...
    TAI_VIET = ...
    BATAK = ...
    BRAHMI = ...
    MANDAIC = ...
    CHAKMA = ...
    MEROITIC_CURSIVE = ...
    MEROITIC_HIEROGLYPHS = ...
    MIAO = ...
    SHARADA = ...
    SORA_SOMPENG = ...
    TAKRI = ...
    BASSA_VAH = ...
    CAUCASIAN_ALBANIAN = ...
    DUPLOYAN = ...
    ELBASAN = ...
    GRANTHA = ...
    KHOJKI = ...
    KHUDAWADI = ...
    LINEAR_A = ...
    MAHAJANI = ...
    MANICHAEAN = ...
    MENDE_KIKAKUI = ...
    MODI = ...
    MRO = ...
    NABATAEAN = ...
    OLD_NORTH_ARABIAN = ...
    OLD_PERMIC = ...
    PAHAWH_HMONG = ...
    PALMYRENE = ...
    PAU_CIN_HAU = ...
    PSALTER_PAHLAVI = ...
    SIDDHAM = ...
    TIRHUTA = ...
    WARANG_CITI = ...
    AHOM = ...
    ANATOLIAN_HIEROGLYPHS = ...
    HATRAN = ...
    MULTANI = ...
    OLD_HUNGARIAN = ...
    SIGNWRITING = ...
    ADLAM = ...
    BHAIKSUKI = ...
    MARCHEN = ...
    NEWA = ...
    OSAGE = ...
    TANGUT = ...
    MASARAM_GONDI = ...
    NUSHU = ...
    SOYOMBO = ...
    ZANABAZAR_SQUARE = ...
    DOGRA = ...
    GUNJALA_GONDI = ...
    HANIFI_ROHINGYA = ...
    MAKASAR = ...
    MEDEFAIDRIN = ...
    OLD_SOGDIAN = ...
    SOGDIAN = ...
    ELYMAIC = ...
    NANDINAGARI = ...
    NYIAKENG_PUACHUE_HMONG = ...
    WANCHO = ...
    CHORASMIAN = ...
    DIVES_AKURU = ...
    KHITAN_SMALL_SCRIPT = ...
    YEZIDI = ...

class UnicodeType(GObject.GEnum):
    CONTROL = ...
    FORMAT = ...
    UNASSIGNED = ...
    PRIVATE_USE = ...
    SURROGATE = ...
    LOWERCASE_LETTER = ...
    MODIFIER_LETTER = ...
    OTHER_LETTER = ...
    TITLECASE_LETTER = ...
    UPPERCASE_LETTER = ...
    SPACING_MARK = ...
    ENCLOSING_MARK = ...
    NON_SPACING_MARK = ...
    DECIMAL_NUMBER = ...
    LETTER_NUMBER = ...
    OTHER_NUMBER = ...
    CONNECT_PUNCTUATION = ...
    DASH_PUNCTUATION = ...
    CLOSE_PUNCTUATION = ...
    FINAL_PUNCTUATION = ...
    INITIAL_PUNCTUATION = ...
    OTHER_PUNCTUATION = ...
    OPEN_PUNCTUATION = ...
    CURRENCY_SYMBOL = ...
    MODIFIER_SYMBOL = ...
    MATH_SYMBOL = ...
    OTHER_SYMBOL = ...
    LINE_SEPARATOR = ...
    PARAGRAPH_SEPARATOR = ...
    SPACE_SEPARATOR = ...

class UriError(GObject.GEnum):
    FAILED = ...
    BAD_SCHEME = ...
    BAD_USER = ...
    BAD_PASSWORD = ...
    BAD_AUTH_PARAMS = ...
    BAD_HOST = ...
    BAD_PORT = ...
    BAD_PATH = ...
    BAD_QUERY = ...
    BAD_FRAGMENT = ...

class UserDirectory(GObject.GEnum):
    DIRECTORY_DESKTOP = ...
    DIRECTORY_DOCUMENTS = ...
    DIRECTORY_DOWNLOAD = ...
    DIRECTORY_MUSIC = ...
    DIRECTORY_PICTURES = ...
    DIRECTORY_PUBLIC_SHARE = ...
    DIRECTORY_TEMPLATES = ...
    DIRECTORY_VIDEOS = ...
    N_DIRECTORIES = ...

class VariantClass(GObject.GEnum):
    BOOLEAN = ...
    BYTE = ...
    INT16 = ...
    UINT16 = ...
    INT32 = ...
    UINT32 = ...
    INT64 = ...
    UINT64 = ...
    HANDLE = ...
    DOUBLE = ...
    STRING = ...
    OBJECT_PATH = ...
    SIGNATURE = ...
    VARIANT = ...
    MAYBE = ...
    ARRAY = ...
    TUPLE = ...
    DICT_ENTRY = ...

class VariantParseError(GObject.GEnum):
    FAILED = ...
    BASIC_TYPE_EXPECTED = ...
    CANNOT_INFER_TYPE = ...
    DEFINITE_TYPE_EXPECTED = ...
    INPUT_NOT_AT_END = ...
    INVALID_CHARACTER = ...
    INVALID_FORMAT_STRING = ...
    INVALID_OBJECT_PATH = ...
    INVALID_SIGNATURE = ...
    INVALID_TYPE_STRING = ...
    NO_COMMON_TYPE = ...
    NUMBER_OUT_OF_RANGE = ...
    NUMBER_TOO_BIG = ...
    TYPE_ERROR = ...
    UNEXPECTED_TOKEN = ...
    UNKNOWN_KEYWORD = ...
    UNTERMINATED_STRING_CONSTANT = ...
    VALUE_EXPECTED = ...
    RECURSION = ...
