from typing import Any
from typing import Callable
from typing import Literal
from typing import Optional
from typing import Sequence
from typing import Tuple
from typing import Type
from typing import TypeVar

try:
    from warnings import deprecated
except ImportError:
    from typing_extensions import deprecated

import cairo
from gi.repository import Gdk
from gi.repository import GdkPixbuf
from gi.repository import Gio
from gi.repository import GLib
from gi.repository import GObject
from gi.repository import Graphene
from gi.repository import Gsk
from gi.repository import Pango

_SomeSurface = TypeVar("_SomeSurface", bound=cairo.Surface)

ACCESSIBLE_VALUE_UNDEFINED: int = -1
"""
An undefined value. The accessible attribute is either unset, or its
value is undefined.
"""
BINARY_AGE: int = 1205
"""
Like [func@get_binary_age], but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""
IM_MODULE_EXTENSION_POINT_NAME: str = "gtk-im-module"
INPUT_ERROR: int = -1
"""
Constant to return from a signal handler for the ::input
signal in case of conversion failure.

See [signal@Gtk.SpinButton::input].
"""
INTERFACE_AGE: int = 5
"""
Like [func@get_interface_age], but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""
INVALID_LIST_POSITION: int = 4294967295
"""
The value used to refer to a guaranteed invalid position
in a `GListModel`.

This value may be returned from some functions, others may
accept it as input. Its interpretation may differ for different
functions.

Refer to each function's documentation for if this value is
allowed and what it does.
"""
LEVEL_BAR_OFFSET_FULL: str = "full"
"""
The name used for the stock full offset included by `GtkLevelBar`.
"""
LEVEL_BAR_OFFSET_HIGH: str = "high"
"""
The name used for the stock high offset included by `GtkLevelBar`.
"""
LEVEL_BAR_OFFSET_LOW: str = "low"
"""
The name used for the stock low offset included by `GtkLevelBar`.
"""
MAJOR_VERSION: int = 4
"""
Like [func@get_major_version], but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""
MAX_COMPOSE_LEN: int = 7
MEDIA_FILE_EXTENSION_POINT_NAME: str = "gtk-media-file"
MICRO_VERSION: int = 5
"""
Like [func@get_micro_version], but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""
MINOR_VERSION: int = 12
"""
Like [func@get_minor_version], but from the headers used at
application compile time, rather than from the library linked
against at application run time.
"""
PAPER_NAME_A3: str = "iso_a3"
"""
Name for the A3 paper size.
"""
PAPER_NAME_A4: str = "iso_a4"
"""
Name for the A4 paper size.
"""
PAPER_NAME_A5: str = "iso_a5"
"""
Name for the A5 paper size.
"""
PAPER_NAME_B5: str = "iso_b5"
"""
Name for the B5 paper size.
"""
PAPER_NAME_EXECUTIVE: str = "na_executive"
"""
Name for the Executive paper size.
"""
PAPER_NAME_LEGAL: str = "na_legal"
"""
Name for the Legal paper size.
"""
PAPER_NAME_LETTER: str = "na_letter"
"""
Name for the Letter paper size.
"""
PRINT_SETTINGS_COLLATE: str = "collate"
PRINT_SETTINGS_DEFAULT_SOURCE: str = "default-source"
PRINT_SETTINGS_DITHER: str = "dither"
PRINT_SETTINGS_DUPLEX: str = "duplex"
PRINT_SETTINGS_FINISHINGS: str = "finishings"
PRINT_SETTINGS_MEDIA_TYPE: str = "media-type"
PRINT_SETTINGS_NUMBER_UP: str = "number-up"
PRINT_SETTINGS_NUMBER_UP_LAYOUT: str = "number-up-layout"
PRINT_SETTINGS_N_COPIES: str = "n-copies"
PRINT_SETTINGS_ORIENTATION: str = "orientation"
PRINT_SETTINGS_OUTPUT_BASENAME: str = "output-basename"
"""
The key used by the “Print to file” printer to store the file
name of the output without the path to the directory and the
file extension.
"""
PRINT_SETTINGS_OUTPUT_BIN: str = "output-bin"
PRINT_SETTINGS_OUTPUT_DIR: str = "output-dir"
"""
The key used by the “Print to file” printer to store the
directory to which the output should be written.
"""
PRINT_SETTINGS_OUTPUT_FILE_FORMAT: str = "output-file-format"
"""
The key used by the “Print to file” printer to store the format
of the output. The supported values are “PS” and “PDF”.
"""
PRINT_SETTINGS_OUTPUT_URI: str = "output-uri"
"""
The key used by the “Print to file” printer to store the URI
to which the output should be written. GTK itself supports
only “file://” URIs.
"""
PRINT_SETTINGS_PAGE_RANGES: str = "page-ranges"
PRINT_SETTINGS_PAGE_SET: str = "page-set"
PRINT_SETTINGS_PAPER_FORMAT: str = "paper-format"
PRINT_SETTINGS_PAPER_HEIGHT: str = "paper-height"
PRINT_SETTINGS_PAPER_WIDTH: str = "paper-width"
PRINT_SETTINGS_PRINTER: str = "printer"
PRINT_SETTINGS_PRINTER_LPI: str = "printer-lpi"
PRINT_SETTINGS_PRINT_PAGES: str = "print-pages"
PRINT_SETTINGS_QUALITY: str = "quality"
PRINT_SETTINGS_RESOLUTION: str = "resolution"
PRINT_SETTINGS_RESOLUTION_X: str = "resolution-x"
PRINT_SETTINGS_RESOLUTION_Y: str = "resolution-y"
PRINT_SETTINGS_REVERSE: str = "reverse"
PRINT_SETTINGS_SCALE: str = "scale"
PRINT_SETTINGS_USE_COLOR: str = "use-color"
PRINT_SETTINGS_WIN32_DRIVER_EXTRA: str = "win32-driver-extra"
PRINT_SETTINGS_WIN32_DRIVER_VERSION: str = "win32-driver-version"
PRIORITY_RESIZE: int = 110
"""
Use this priority for functionality related to size allocation.

It is used internally by GTK+ to compute the sizes of widgets.
This priority is higher than %GDK_PRIORITY_REDRAW to avoid
resizing a widget which was just redrawn.
"""
STYLE_PROVIDER_PRIORITY_APPLICATION: int = 600
"""
A priority that can be used when adding a `GtkStyleProvider`
for application-specific style information.
"""
STYLE_PROVIDER_PRIORITY_FALLBACK: int = 1
"""
The priority used for default style information
that is used in the absence of themes.

Note that this is not very useful for providing default
styling for custom style classes - themes are likely to
override styling provided at this priority with
catch-all `* {...}` rules.
"""
STYLE_PROVIDER_PRIORITY_SETTINGS: int = 400
"""
The priority used for style information provided
via `GtkSettings`.

This priority is higher than %GTK_STYLE_PROVIDER_PRIORITY_THEME
to let settings override themes.
"""
STYLE_PROVIDER_PRIORITY_THEME: int = 200
"""
The priority used for style information provided
by themes.
"""
STYLE_PROVIDER_PRIORITY_USER: int = 800
"""
The priority used for the style information from
`$XDG_CONFIG_HOME/gtk-4.0/gtk.css`.

You should not use priorities higher than this, to
give the user the last word.
"""
TEXT_VIEW_PRIORITY_VALIDATE: int = 125
"""
The priority at which the text view validates onscreen lines
in an idle job in the background.
"""
TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: int = -1
"""
Uses the default sort function in a [iface@Gtk.TreeSortable].

See also: [method@Gtk.TreeSortable.set_sort_column_id]
"""
TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: int = -2
"""
Disables sorting in a [iface@Gtk.TreeSortable].

See also: [method@Gtk.TreeSortable.set_sort_column_id]
"""
_introspection_module = ...  # FIXME Constant
_lock = ...  # FIXME Constant
_namespace: str = "Gtk"
_overrides_module = ...  # FIXME Constant
_version: str = "4.0"

def accelerator_get_default_mod_mask() -> Gdk.ModifierType:
    """
    Gets the modifier mask.

    The modifier mask determines which modifiers are considered significant
    for keyboard accelerators. This includes all keyboard modifiers except
    for %GDK_LOCK_MASK.

    Parameters:


    Returns:
        Gdk.ModifierType: the modifier mask for accelerators

    """
    ...

def accelerator_get_label(
    accelerator_key: int, accelerator_mods: Gdk.ModifierType
) -> str:
    """
    Converts an accelerator keyval and modifier mask into a string
    which can be used to represent the accelerator to the user.

    Parameters:
        accelerator_key: accelerator keyval
        accelerator_mods: accelerator modifier mask

    Returns:
        str: a newly-allocated string representing the accelerator

    """
    ...

def accelerator_get_label_with_keycode(
    display: Optional[Gdk.Display],
    accelerator_key: int,
    keycode: int,
    accelerator_mods: Gdk.ModifierType,
) -> str:
    """
    Converts an accelerator keyval and modifier mask
    into a string that can be displayed to the user.

    The string may be translated.

    This function is similar to [func@Gtk.accelerator_get_label],
    but handling keycodes. This is only useful for system-level
    components, applications should use [func@Gtk.accelerator_get_label]
    instead.

    Parameters:
        display: a `GdkDisplay` or %NULL to use the default display
        accelerator_key: accelerator keyval
        keycode: accelerator keycode
        accelerator_mods: accelerator modifier mask

    Returns:
        str: a newly-allocated string representing the accelerator

    """
    ...

def accelerator_name(accelerator_key: int, accelerator_mods: Gdk.ModifierType) -> str:
    """
    Converts an accelerator keyval and modifier mask into a string
    parseable by gtk_accelerator_parse().

    For example, if you pass in %GDK_KEY_q and %GDK_CONTROL_MASK,
    this function returns `<Control>q`.

    If you need to display accelerators in the user interface,
    see [func@Gtk.accelerator_get_label].

    Parameters:
        accelerator_key: accelerator keyval
        accelerator_mods: accelerator modifier mask

    Returns:
        str: a newly-allocated accelerator name

    """
    ...

def accelerator_name_with_keycode(
    display: Optional[Gdk.Display],
    accelerator_key: int,
    keycode: int,
    accelerator_mods: Gdk.ModifierType,
) -> str:
    """
    Converts an accelerator keyval and modifier mask
    into a string parseable by gtk_accelerator_parse_with_keycode().

    This is similar to [func@Gtk.accelerator_name] but handling keycodes.
    This is only useful for system-level components, applications
    should use [func@Gtk.accelerator_name] instead.

    Parameters:
        display: a `GdkDisplay` or %NULL to use the default display
        accelerator_key: accelerator keyval
        keycode: accelerator keycode
        accelerator_mods: accelerator modifier mask

    Returns:
        str: a newly allocated accelerator name.

    """
    ...

def accelerator_parse(accelerator: str) -> Tuple[bool, int, Gdk.ModifierType]:
    """
    Parses a string representing an accelerator.

    The format looks like “`<Control>a`” or “`<Shift><Alt>F1`”.

    The parser is fairly liberal and allows lower or upper case, and also
    abbreviations such as “`<Ctl>`” and “`<Ctrl>`”.

    Key names are parsed using [func@Gdk.keyval_from_name]. For character keys
    the name is not the symbol, but the lowercase name, e.g. one would use
    “`<Ctrl>minus`” instead of “`<Ctrl>-`”.

    Modifiers are enclosed in angular brackets `<>`, and match the
    [flags@Gdk.ModifierType] mask:

    - `<Shift>` for `GDK_SHIFT_MASK`
    - `<Ctrl>` for `GDK_CONTROL_MASK`
    - `<Alt>` for `GDK_ALT_MASK`
    - `<Meta>` for `GDK_META_MASK`
    - `<Super>` for `GDK_SUPER_MASK`
    - `<Hyper>` for `GDK_HYPER_MASK`

    If the parse operation fails, @accelerator_key and @accelerator_mods will
    be set to 0 (zero).

    Parameters:
        accelerator: string representing an accelerator

    Returns:
        bool: Not documented
        int: return location for accelerator keyval
        Gdk.ModifierType: return location for accelerator
    modifier mask
    """
    ...

def accelerator_parse_with_keycode(
    accelerator: str, display: Optional[Gdk.Display] = None
) -> Tuple[bool, int, list[int], Gdk.ModifierType]:
    """
    Parses a string representing an accelerator.

    This is similar to [func@Gtk.accelerator_parse] but handles keycodes as
    well. This is only useful for system-level components, applications should
    use [func@Gtk.accelerator_parse] instead.

    If @accelerator_codes is given and the result stored in it is non-%NULL,
    the result must be freed with g_free().

    If a keycode is present in the accelerator and no @accelerator_codes
    is given, the parse will fail.

    If the parse fails, @accelerator_key, @accelerator_mods and
    @accelerator_codes will be set to 0 (zero).

    Parameters:
        accelerator: string representing an accelerator
        display: the `GdkDisplay` to look up @accelerator_codes in

    Returns:
        bool: %TRUE if parsing succeeded
        int: return location for accelerator keyval
        list[int]:
    return location for accelerator keycodes
        Gdk.ModifierType: return location for accelerator
    modifier mask
    """
    ...

def accelerator_valid(keyval: int, modifiers: Gdk.ModifierType) -> bool:
    """
    Determines whether a given keyval and modifier mask constitute
    a valid keyboard accelerator.

    For example, the %GDK_KEY_a keyval plus %GDK_CONTROL_MASK mark is valid,
    and matches the “Ctrl+a” accelerator. But, you can't, for instance, use
    the %GDK_KEY_Control_L keyval as an accelerator.

    Parameters:
        keyval: a GDK keyval
        modifiers: modifier mask

    Returns:
        bool: %TRUE if the accelerator is valid

    """
    ...

def accessible_property_init_value(
    property: AccessibleProperty, value: Any
) -> None: ...
def accessible_relation_init_value(
    relation: AccessibleRelation, value: Any
) -> None: ...
def accessible_state_init_value(state: AccessibleState, value: Any) -> None: ...
def bitset_iter_init_at(set: Bitset, target: int) -> Tuple[bool, BitsetIter, int]:
    """
    Initializes @iter to point to @target.

    If @target is not found, finds the next value after it.
    If no value >= @target exists in @set, this function returns %FALSE.

    Parameters:
        set: a `GtkBitset`
        target: target value to start iterating at

    Returns:
        bool: %TRUE if a value was found.
        BitsetIter: a pointer to an uninitialized `GtkBitsetIter`
        int: Set to the found value in @set
    """
    ...

def bitset_iter_init_first(set: Bitset) -> Tuple[bool, BitsetIter, int]:
    """
    Initializes an iterator for @set and points it to the first
    value in @set.

    If @set is empty, %FALSE is returned and @value is set to %G_MAXUINT.

    Parameters:
        set: a `GtkBitset`

    Returns:
        bool: %TRUE if @set isn't empty.
        BitsetIter: a pointer to an uninitialized `GtkBitsetIter`
        int: Set to the first value in @set
    """
    ...

def bitset_iter_init_last(set: Bitset) -> Tuple[bool, BitsetIter, int]:
    """
    Initializes an iterator for @set and points it to the last
    value in @set.

    If @set is empty, %FALSE is returned.

    Parameters:
        set: a `GtkBitset`

    Returns:
        bool: %TRUE if @set isn't empty.
        BitsetIter: a pointer to an uninitialized `GtkBitsetIter`
        int: Set to the last value in @set
    """
    ...

def builder_error_quark() -> int: ...
def check_version(
    required_major: int, required_minor: int, required_micro: int
) -> Optional[str]:
    """
    Checks that the GTK library in use is compatible with the
    given version.

    Generally you would pass in the constants %GTK_MAJOR_VERSION,
    %GTK_MINOR_VERSION, %GTK_MICRO_VERSION as the three arguments
    to this function; that produces a check that the library in
    use is compatible with the version of GTK the application or
    module was compiled against.

    Compatibility is defined by two things: first the version
    of the running library is newer than the version
    @required_major.required_minor.@required_micro. Second
    the running library must be binary compatible with the
    version @required_major.required_minor.@required_micro
    (same major version.)

    This function is primarily for GTK modules; the module
    can call this function to check that it wasn’t loaded
    into an incompatible version of GTK. However, such a
    check isn’t completely reliable, since the module may be
    linked against an old version of GTK and calling the
    old version of gtk_check_version(), but still get loaded
    into an application using a newer version of GTK.

    Parameters:
        required_major: the required major version
        required_minor: the required minor version
        required_micro: the required micro version

    Returns:
        Optional[str]: %NULL if the GTK library is compatible with the
    given version, or a string describing the version mismatch.
    The returned string is owned by GTK and should not be modified
    or freed.

    """
    ...

def constraint_vfl_parser_error_quark() -> int: ...
def css_parser_error_quark() -> int: ...
def css_parser_warning_quark() -> int: ...
def dialog_error_quark() -> int: ...
def disable_setlocale() -> None:
    """
    Prevents [id@gtk_init] and [id@gtk_init_check] from automatically calling
    `setlocale (LC_ALL, \"\")`.

    You would want to use this function if you wanted to set the locale for
    your program to something other than the user’s locale, or if
    you wanted to set different values for different locale categories.

    Most programs should not need to call this function.

    Parameters:


    Returns:

    """
    ...

def distribute_natural_allocation(
    extra_space: int, sizes: Sequence[RequestedSize]
) -> int:
    """
    Distributes @extra_space to child @sizes by bringing smaller
    children up to natural size first.

    The remaining space will be added to the @minimum_size member of the
    `GtkRequestedSize` struct. If all sizes reach their natural size then
    the remaining space is returned.

    Parameters:
        extra_space: Extra space to redistribute among children after subtracting
    minimum sizes and any child padding from the overall allocation
        sizes: An array of structs with a client pointer and a minimum/natural size
    in the orientation of the allocation.

    Returns:
        int: The remainder of @extra_space after redistributing space
    to @sizes.

    """
    ...

def editable_delegate_get_property(
    object: GObject.Object, prop_id: int, value: Any, pspec: GObject.ParamSpec
) -> bool:
    """
    Gets a property of the `GtkEditable` delegate for @object.

    This is helper function that should be called in the `get_property`
    function of your `GtkEditable` implementation, before handling your
    own properties.

    Parameters:
        object: a `GObject`
        prop_id: a property ID
        value: value to set
        pspec: the `GParamSpec` for the property

    Returns:
        bool: %TRUE if the property was found

    """
    ...

def editable_delegate_set_property(
    object: GObject.Object, prop_id: int, value: Any, pspec: GObject.ParamSpec
) -> bool:
    """
    Sets a property on the `GtkEditable` delegate for @object.

    This is a helper function that should be called in the `set_property`
    function of your `GtkEditable` implementation, before handling your
    own properties.

    Parameters:
        object: a `GObject`
        prop_id: a property ID
        value: value to set
        pspec: the `GParamSpec` for the property

    Returns:
        bool: %TRUE if the property was found

    """
    ...

def editable_install_properties(
    object_class: GObject.ObjectClass, first_prop: int
) -> int:
    """
    Overrides the `GtkEditable` properties for @class.

    This is a helper function that should be called in class_init,
    after installing your own properties.

    Note that your class must have \"text\", \"cursor-position\",
    \"selection-bound\", \"editable\", \"width-chars\", \"max-width-chars\",
    \"xalign\" and \"enable-undo\" properties for this function to work.

    To handle the properties in your set_property and get_property
    functions, you can either use [func@Gtk.Editable.delegate_set_property]
    and [func@Gtk.Editable.delegate_get_property] (if you are using
    a delegate), or remember the @first_prop offset and add it to the
    values in the [enum@Gtk.EditableProperties] enumeration to get the
    property IDs for these properties.

    Parameters:
        object_class: a `GObjectClass`
        first_prop: property ID to use for the first property

    Returns:
        int: the number of properties that were installed

    """
    ...

def enumerate_printers(func: Callable[..., bool], wait: bool, *data: Any) -> None:
    """
    Calls a function for all `GtkPrinter`s.

    If @func returns %TRUE, the enumeration is stopped.

    Parameters:
        func: a function to call for each printer
        wait: if %TRUE, wait in a recursive mainloop until
    all printers are enumerated; otherwise return early
        data: user data to pass to @func

    Returns:

    """
    ...

def file_chooser_error_quark() -> int:
    """
    Registers an error quark for `GtkFileChooser` errors.

    Parameters:


    Returns:
        int: The error quark used for `GtkFileChooser` errors.

    """
    ...

def get_binary_age() -> int:
    """
    Returns the binary age as passed to `libtool`.

    If `libtool` means nothing to you, don't worry about it.

    Parameters:


    Returns:
        int: the binary age of the GTK library

    """
    ...

def get_debug_flags() -> DebugFlags:
    """
    Returns the GTK debug flags that are currently active.

    This function is intended for GTK modules that want
    to adjust their debug output based on GTK debug flags.

    Parameters:


    Returns:
        DebugFlags: the GTK debug flags.

    """
    ...

def get_default_language() -> Pango.Language:
    """
    Returns the `PangoLanguage` for the default language
    currently in effect.

    Note that this can change over the life of an
    application.

    The default language is derived from the current
    locale. It determines, for example, whether GTK uses
    the right-to-left or left-to-right text direction.

    This function is equivalent to [func@Pango.Language.get_default].
    See that function for details.

    Parameters:


    Returns:
        Pango.Language: the default language

    """
    ...

def get_interface_age() -> int:
    """
    Returns the interface age as passed to `libtool`.

    If `libtool` means nothing to you, don't worry about it.

    Parameters:


    Returns:
        int: the interface age of the GTK library

    """
    ...

def get_locale_direction() -> TextDirection:
    """
    Get the direction of the current locale. This is the expected
    reading direction for text and UI.

    This function depends on the current locale being set with
    setlocale() and will default to setting the %GTK_TEXT_DIR_LTR
    direction otherwise. %GTK_TEXT_DIR_NONE will never be returned.

    GTK sets the default text direction according to the locale
    during gtk_init(), and you should normally use
    gtk_widget_get_direction() or gtk_widget_get_default_direction()
    to obtain the current direction.

    This function is only needed rare cases when the locale is
    changed after GTK has already been initialized. In this case,
    you can use it to update the default text direction as follows:

    |[<!-- language=\"C\" -->
    #include <locale.h>

    static void
    update_locale (const char *new_locale)
    {
    setlocale (LC_ALL, new_locale);
    gtk_widget_set_default_direction (gtk_get_locale_direction ());
    }
    ]|

    Parameters:


    Returns:
        TextDirection: the direction of the current locale

    """
    ...

def get_major_version() -> int:
    """
    Returns the major version number of the GTK library.

    For example, in GTK version 3.1.5 this is 3.

    This function is in the library, so it represents the GTK library
    your code is running against. Contrast with the %GTK_MAJOR_VERSION
    macro, which represents the major version of the GTK headers you
    have included when compiling your code.

    Parameters:


    Returns:
        int: the major version number of the GTK library

    """
    ...

def get_micro_version() -> int:
    """
    Returns the micro version number of the GTK library.

    For example, in GTK version 3.1.5 this is 5.

    This function is in the library, so it represents the GTK library
    your code is are running against. Contrast with the
    %GTK_MICRO_VERSION macro, which represents the micro version of the
    GTK headers you have included when compiling your code.

    Parameters:


    Returns:
        int: the micro version number of the GTK library

    """
    ...

def get_minor_version() -> int:
    """
    Returns the minor version number of the GTK library.

    For example, in GTK version 3.1.5 this is 1.

    This function is in the library, so it represents the GTK library
    your code is are running against. Contrast with the
    %GTK_MINOR_VERSION macro, which represents the minor version of the
    GTK headers you have included when compiling your code.

    Parameters:


    Returns:
        int: the minor version number of the GTK library

    """
    ...

def hsv_to_rgb(h: float, s: float, v: float) -> Tuple[float, float, float]:
    """
    Converts a color from HSV space to RGB.

    Input values must be in the [0.0, 1.0] range;
    output values will be in the same range.

    Parameters:
        h: Hue
        s: Saturation
        v: Value

    Returns:
        float: Return value for the red component
        float: Return value for the green component
        float: Return value for the blue component
    """
    ...

def icon_theme_error_quark() -> int: ...
def init() -> None:
    """
    Call this function before using any other GTK functions in your GUI
    applications. It will initialize everything needed to operate the
    toolkit.

    If you are using `GtkApplication`, you usually don't have to call this
    function; the `GApplication::startup` handler does it for you. Though,
    if you are using GApplication methods that will be invoked before `startup`,
    such as `local_command_line`, you may need to initialize stuff explicitly.

    This function will terminate your program if it was unable to
    initialize the windowing system for some reason. If you want
    your program to fall back to a textual interface, call
    [func@Gtk.init_check] instead.

    GTK calls `signal (SIGPIPE, SIG_IGN)` during initialization, to ignore
    SIGPIPE signals, since these are almost never wanted in graphical
    applications. If you do need to handle SIGPIPE for some reason, reset
    the handler after gtk_init(), but notice that other libraries (e.g.
    libdbus or gvfs) might do similar things.

    Parameters:


    Returns:

    """
    ...

def init_check() -> bool:
    """
    This function does the same work as gtk_init() with only a single
    change: It does not terminate the program if the windowing system
    can’t be initialized. Instead it returns %FALSE on failure.

    This way the application can fall back to some other means of
    communication with the user - for example a curses or command line
    interface.

    Parameters:


    Returns:
        bool: %TRUE if the windowing system has been successfully
    initialized, %FALSE otherwise

    """
    ...

def is_initialized() -> bool:
    """
    Use this function to check if GTK has been initialized.

    See [func@Gtk.init].

    Parameters:


    Returns:
        bool: the initialization status

    """
    ...

def native_get_for_surface(surface: Gdk.Surface) -> Optional[Native]:
    """
    Finds the `GtkNative` associated with the surface.

    Parameters:
        surface: a `GdkSurface`

    Returns:
        Optional[Native]: the `GtkNative` that is associated with @surface

    """
    ...

def paper_size_get_default() -> str:
    """
    Returns the name of the default paper size, which
    depends on the current locale.

    Parameters:


    Returns:
        str: the name of the default paper size. The string
    is owned by GTK and should not be modified.

    """
    ...

def paper_size_get_paper_sizes(include_custom: bool) -> list[PaperSize]:
    """
    Creates a list of known paper sizes.

    Parameters:
        include_custom: whether to include custom paper sizes
    as defined in the page setup dialog

    Returns:
        list[PaperSize]: a newly allocated list of newly
    allocated `GtkPaperSize` objects

    """
    ...

def param_spec_expression(
    name: str, nick: str, blurb: str, flags: GObject.ParamFlags
) -> GObject.ParamSpec:
    """
    Creates a new `GParamSpec` instance for a property holding a `GtkExpression`.

    See `g_param_spec_internal()` for details on the property strings.

    Parameters:
        name: canonical name of the property
        nick: a user-readable name for the property
        blurb: a user-readable description of the property
        flags: flags for the property

    Returns:
        GObject.ParamSpec: a newly created property specification

    """
    ...

def print_error_quark() -> int:
    """
    Registers an error quark for `GtkPrintOperation` if necessary.

    Parameters:


    Returns:
        int: The error quark used for `GtkPrintOperation` errors.

    """
    ...

def print_run_page_setup_dialog(
    parent: Optional[Window], page_setup: Optional[PageSetup], settings: PrintSettings
) -> PageSetup:
    """
    Runs a page setup dialog, letting the user modify the values from
    @page_setup. If the user cancels the dialog, the returned `GtkPageSetup`
    is identical to the passed in @page_setup, otherwise it contains the
    modifications done in the dialog.

    Note that this function may use a recursive mainloop to show the page
    setup dialog. See gtk_print_run_page_setup_dialog_async() if this is
    a problem.

    Parameters:
        parent: transient parent
        page_setup: an existing `GtkPageSetup`
        settings: a `GtkPrintSettings`

    Returns:
        PageSetup: a new `GtkPageSetup`

    """
    ...

def print_run_page_setup_dialog_async(
    parent: Optional[Window],
    page_setup: Optional[PageSetup],
    settings: PrintSettings,
    done_cb: Callable[..., None],
    *data: Any,
) -> None:
    """
    Runs a page setup dialog, letting the user modify the values from @page_setup.

    In contrast to gtk_print_run_page_setup_dialog(), this function returns after
    showing the page setup dialog on platforms that support this, and calls @done_cb
    from a signal handler for the ::response signal of the dialog.

    Parameters:
        parent: transient parent
        page_setup: an existing `GtkPageSetup`
        settings: a `GtkPrintSettings`
        done_cb: a function to call when the user saves
    the modified page setup
        data: user data to pass to @done_cb

    Returns:

    """
    ...

def recent_manager_error_quark() -> int: ...
@deprecated("This function is deprecated")
def render_activity(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    x: float,
    y: float,
    width: float,
    height: float,
) -> None:
    """
    Renders an activity indicator (such as in `GtkSpinner`).
    The state %GTK_STATE_FLAG_CHECKED determines whether there is
    activity going on.

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        x: X origin of the rectangle
        y: Y origin of the rectangle
        width: rectangle width
        height: rectangle height

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_arrow(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    angle: float,
    x: float,
    y: float,
    size: float,
) -> None:
    """
    Renders an arrow pointing to @angle.

    Typical arrow rendering at 0, 1⁄2 π;, π; and 3⁄2 π:

    ![](arrows.png)

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        angle: arrow angle from 0 to 2 * %G_PI, being 0 the arrow pointing to the north
        x: X origin of the render area
        y: Y origin of the render area
        size: square side for render area

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_background(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    x: float,
    y: float,
    width: float,
    height: float,
) -> None:
    """
    Renders the background of an element.

    Typical background rendering, showing the effect of
    `background-image`, `border-width` and `border-radius`:

    ![](background.png)

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        x: X origin of the rectangle
        y: Y origin of the rectangle
        width: rectangle width
        height: rectangle height

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_check(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    x: float,
    y: float,
    width: float,
    height: float,
) -> None:
    """
    Renders a checkmark (as in a `GtkCheckButton`).

    The %GTK_STATE_FLAG_CHECKED state determines whether the check is
    on or off, and %GTK_STATE_FLAG_INCONSISTENT determines whether it
    should be marked as undefined.

    Typical checkmark rendering:

    ![](checks.png)

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        x: X origin of the rectangle
        y: Y origin of the rectangle
        width: rectangle width
        height: rectangle height

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_expander(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    x: float,
    y: float,
    width: float,
    height: float,
) -> None:
    """
    Renders an expander (as used in `GtkTreeView` and `GtkExpander`) in the area
    defined by @x, @y, @width, @height. The state %GTK_STATE_FLAG_CHECKED
    determines whether the expander is collapsed or expanded.

    Typical expander rendering:

    ![](expanders.png)

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        x: X origin of the rectangle
        y: Y origin of the rectangle
        width: rectangle width
        height: rectangle height

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_focus(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    x: float,
    y: float,
    width: float,
    height: float,
) -> None:
    """
    Renders a focus indicator on the rectangle determined by @x, @y, @width, @height.

    Typical focus rendering:

    ![](focus.png)

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        x: X origin of the rectangle
        y: Y origin of the rectangle
        width: rectangle width
        height: rectangle height

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_frame(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    x: float,
    y: float,
    width: float,
    height: float,
) -> None:
    """
    Renders a frame around the rectangle defined by @x, @y, @width, @height.

    Examples of frame rendering, showing the effect of `border-image`,
    `border-color`, `border-width`, `border-radius` and junctions:

    ![](frames.png)

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        x: X origin of the rectangle
        y: Y origin of the rectangle
        width: rectangle width
        height: rectangle height

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_handle(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    x: float,
    y: float,
    width: float,
    height: float,
) -> None:
    """
    Renders a handle (as in `GtkPaned` and `GtkWindow`’s resize grip),
    in the rectangle determined by @x, @y, @width, @height.

    Handles rendered for the paned and grip classes:

    ![](handles.png)

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        x: X origin of the rectangle
        y: Y origin of the rectangle
        width: rectangle width
        height: rectangle height

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_icon(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    texture: Gdk.Texture,
    x: float,
    y: float,
) -> None:
    """
    Renders the icon in @texture at the specified @x and @y coordinates.

    This function will render the icon in @texture at exactly its size,
    regardless of scaling factors, which may not be appropriate when
    drawing on displays with high pixel densities.

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        texture: a `GdkTexture` containing the icon to draw
        x: X position for the @texture
        y: Y position for the @texture

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_layout(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    x: float,
    y: float,
    layout: Pango.Layout,
) -> None:
    """
    Renders @layout on the coordinates @x, @y

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        x: X origin
        y: Y origin
        layout: the `PangoLayout` to render

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_line(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    x0: float,
    y0: float,
    x1: float,
    y1: float,
) -> None:
    """
    Renders a line from (x0, y0) to (x1, y1).

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        x0: X coordinate for the origin of the line
        y0: Y coordinate for the origin of the line
        x1: X coordinate for the end of the line
        y1: Y coordinate for the end of the line

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def render_option(
    context: StyleContext,
    cr: cairo.Context[_SomeSurface],
    x: float,
    y: float,
    width: float,
    height: float,
) -> None:
    """
    Renders an option mark (as in a radio button), the %GTK_STATE_FLAG_CHECKED
    state will determine whether the option is on or off, and
    %GTK_STATE_FLAG_INCONSISTENT whether it should be marked as undefined.

    Typical option mark rendering:

    ![](options.png)

    Parameters:
        context: a `GtkStyleContext`
        cr: a `cairo_t`
        x: X origin of the rectangle
        y: Y origin of the rectangle
        width: rectangle width
        height: rectangle height

    Returns:

    """
    ...

def rgb_to_hsv(r: float, g: float, b: float) -> Tuple[float, float, float]:
    """
    Converts a color from RGB space to HSV.

    Input values must be in the [0.0, 1.0] range;
    output values will be in the same range.

    Parameters:
        r: Red
        g: Green
        b: Blue

    Returns:
        float: Return value for the hue component
        float: Return value for the saturation component
        float: Return value for the value component
    """
    ...

def set_debug_flags(flags: DebugFlags) -> None:
    """
    Sets the GTK debug flags.

    Parameters:
        flags: the debug flags to set

    Returns:

    """
    ...

@deprecated(
    "Use [method@Gtk.FileLauncher.launch] or [method@Gtk.UriLauncher.launch] instead"
)
def show_uri(parent: Optional[Window], uri: str, timestamp: int) -> None:
    """
    This function launches the default application for showing
    a given uri, or shows an error dialog if that fails.

    Parameters:
        parent: parent window
        uri: the uri to show
        timestamp: timestamp from the event that triggered this call, or %GDK_CURRENT_TIME

    Returns:

    """
    ...

@deprecated(
    "Use [method@Gtk.FileLauncher.launch] or [method@Gtk.UriLauncher.launch] instead"
)
def show_uri_full(
    parent: Optional[Window],
    uri: str,
    timestamp: int,
    cancellable: Optional[Gio.Cancellable] = None,
    callback: Optional[Callable[..., None]] = None,
    *user_data: Any,
) -> None:
    """
    This function launches the default application for showing
    a given uri.

    The @callback will be called when the launch is completed.
    It should call gtk_show_uri_full_finish() to obtain the result.

    This is the recommended call to be used as it passes information
    necessary for sandbox helpers to parent their dialogs properly.

    Parameters:
        parent: parent window
        uri: the uri to show
        timestamp: timestamp from the event that triggered this call, or %GDK_CURRENT_TIME
        cancellable: a `GCancellable` to cancel the launch
        callback: a callback to call when the action is complete
        user_data: data to pass to @callback

    Returns:

    """
    ...

@deprecated(
    "Use [method@Gtk.FileLauncher.launch_finish] or [method@Gtk.UriLauncher.launch_finish] instead"
)
def show_uri_full_finish(parent: Window, result: Gio.AsyncResult) -> bool:
    """
    Finishes the gtk_show_uri() call and returns the result
    of the operation.

    Parameters:
        parent: the `GtkWindow` passed to gtk_show_uri()
        result: `GAsyncResult` that was passed to @callback

    Returns:
        bool: %TRUE if the URI was shown successfully.
    Otherwise, %FALSE is returned and @error is set

    """
    ...

def test_accessible_assertion_message_role(
    domain: str,
    file: str,
    line: int,
    func: str,
    expr: str,
    accessible: Accessible,
    expected_role: AccessibleRole,
    actual_role: AccessibleRole,
) -> None: ...
def test_accessible_has_property(
    accessible: Accessible, property: AccessibleProperty
) -> bool:
    """
    Checks whether the `GtkAccessible` has @property set.

    Parameters:
        accessible: a `GtkAccessible`
        property: a `GtkAccessibleProperty`

    Returns:
        bool: %TRUE if the @property is set in the @accessible

    """
    ...

def test_accessible_has_relation(
    accessible: Accessible, relation: AccessibleRelation
) -> bool:
    """
    Checks whether the `GtkAccessible` has @relation set.

    Parameters:
        accessible: a `GtkAccessible`
        relation: a `GtkAccessibleRelation`

    Returns:
        bool: %TRUE if the @relation is set in the @accessible

    """
    ...

def test_accessible_has_role(accessible: Accessible, role: AccessibleRole) -> bool:
    """
    Checks whether the `GtkAccessible:accessible-role` of the accessible
    is @role.

    Parameters:
        accessible: a `GtkAccessible`
        role: a `GtkAccessibleRole`

    Returns:
        bool: %TRUE if the role matches

    """
    ...

def test_accessible_has_state(accessible: Accessible, state: AccessibleState) -> bool:
    """
    Checks whether the `GtkAccessible` has @state set.

    Parameters:
        accessible: a `GtkAccessible`
        state: a `GtkAccessibleState`

    Returns:
        bool: %TRUE if the @state is set in the @accessible

    """
    ...

def test_list_all_types() -> list[Type]:
    """
    Return the type ids that have been registered after
    calling gtk_test_register_all_types().

    Parameters:


    Returns:
        list[Type]:
    0-terminated array of type ids

    """
    ...

def test_register_all_types() -> None:
    """
    Force registration of all core GTK object types.

    This allows to refer to any of those object types via
    g_type_from_name() after calling this function.

    Parameters:


    Returns:

    """
    ...

def test_widget_wait_for_draw(widget: Widget) -> None:
    """
    Enters the main loop and waits for @widget to be “drawn”.

    In this context that means it waits for the frame clock of
    @widget to have run a full styling, layout and drawing cycle.

    This function is intended to be used for syncing with actions that
    depend on @widget relayouting or on interaction with the display
    server.

    Parameters:
        widget: the widget to wait for

    Returns:

    """
    ...

@deprecated("Use list models instead")
def tree_create_row_drag_content(
    tree_model: TreeModel, path: TreePath
) -> Gdk.ContentProvider:
    """
    Creates a content provider for dragging @path from @tree_model.

    Parameters:
        tree_model: a `GtkTreeModel`
        path: a row in @tree_model

    Returns:
        Gdk.ContentProvider: a new `GdkContentProvider`

    """
    ...

@deprecated("Use list models instead")
def tree_get_row_drag_data(value: Any) -> Tuple[bool, TreeModel, TreePath]:
    """
    Obtains a @tree_model and @path from value of target type
    %GTK_TYPE_TREE_ROW_DATA.

    The returned path must be freed with gtk_tree_path_free().

    Parameters:
        value: a `GValue`

    Returns:
        bool: %TRUE if @selection_data had target type %GTK_TYPE_TREE_ROW_DATA
    is otherwise valid
        TreeModel: a `GtkTreeModel`
        TreePath: row in @tree_model
    """
    ...

@deprecated("This function is deprecated")
def tree_row_reference_deleted(proxy: GObject.Object, path: TreePath) -> None:
    """
    Lets a set of row reference created by
    gtk_tree_row_reference_new_proxy() know that the
    model emitted the ::row-deleted signal.

    Parameters:
        proxy: a `GObject`
        path: the path position that was deleted

    Returns:

    """
    ...

@deprecated("This function is deprecated")
def tree_row_reference_inserted(proxy: GObject.Object, path: TreePath) -> None:
    """
    Lets a set of row reference created by
    gtk_tree_row_reference_new_proxy() know that the
    model emitted the ::row-inserted signal.

    Parameters:
        proxy: a `GObject`
        path: the row position that was inserted

    Returns:

    """
    ...

def value_dup_expression(value: Any) -> Optional[Expression]:
    """
    Retrieves the `GtkExpression` stored inside the given `value`, and acquires
    a reference to it.

    Parameters:
        value: a `GValue` initialized with type `GTK_TYPE_EXPRESSION`

    Returns:
        Optional[Expression]: a `GtkExpression`

    """
    ...

def value_get_expression(value: Any) -> Optional[Expression]:
    """
    Retrieves the `GtkExpression` stored inside the given `value`.

    Parameters:
        value: a `GValue` initialized with type `GTK_TYPE_EXPRESSION`

    Returns:
        Optional[Expression]: a `GtkExpression`

    """
    ...

def value_set_expression(value: Any, expression: Expression) -> None:
    """
    Stores the given `GtkExpression` inside `value`.

    The `GValue` will acquire a reference to the `expression`.

    Parameters:
        value: a `GValue` initialized with type `GTK_TYPE_EXPRESSION`
        expression: a `GtkExpression`

    Returns:

    """
    ...

def value_take_expression(value: Any, expression: Optional[Expression] = None) -> None:
    """
    Stores the given `GtkExpression` inside `value`.

    This function transfers the ownership of the `expression` to the `GValue`.

    Parameters:
        value: a `GValue` initialized with type `GTK_TYPE_EXPRESSION`
        expression: a `GtkExpression`

    Returns:

    """
    ...

class ATContext(GObject.Object):
    """
    `GtkATContext` is an abstract class provided by GTK to communicate to
    platform-specific assistive technologies API.

    Each platform supported by GTK implements a `GtkATContext` subclass, and
    is responsible for updating the accessible state in response to state
    changes in `GtkAccessible`.

    :Constructors:

    ::

        ATContext(**properties)
        create(accessible_role:Gtk.AccessibleRole, accessible:Gtk.Accessible, display:Gdk.Display) -> Gtk.ATContext or None

    Object GtkATContext

    Signals from GtkATContext:
      state-change ()

    Properties from GtkATContext:
      accessible-role -> GtkAccessibleRole: accessible-role
      accessible -> GtkAccessible: accessible
      display -> GdkDisplay: display

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        accessible: Accessible
        """
        The `GtkAccessible` that created the `GtkATContext` instance.
        """
        accessible_role: AccessibleRole
        """
        The accessible role used by the AT context.

        Depending on the given role, different states and properties can be
        set or retrieved.
        """
        display: Gdk.Display
        """
        The `GdkDisplay` for the `GtkATContext`.
        """

    props: Props = ...
    def __init__(
        self,
        accessible: Accessible = ...,
        accessible_role: AccessibleRole = ...,
        display: Gdk.Display = ...,
    ): ...
    @classmethod
    def create(
        cls,
        accessible_role: AccessibleRole,
        accessible: Accessible,
        display: Gdk.Display,
    ) -> Optional[ATContext]:
        """
        Creates a new `GtkATContext` instance for the given accessible role,
        accessible instance, and display connection.

        The `GtkATContext` implementation being instantiated will depend on the
        platform.

        Parameters:
            accessible_role: the accessible role used by the `GtkATContext`
            accessible: the `GtkAccessible` implementation using the `GtkATContext`
            display: the `GdkDisplay` used by the `GtkATContext`

        Returns:
            Optional[ATContext]: the `GtkATContext`

        """
        ...

    def get_accessible(self) -> Accessible:
        """
        Retrieves the `GtkAccessible` using this context.

        Parameters:


        Returns:
            Accessible: a `GtkAccessible`

        """
        ...

    def get_accessible_role(self) -> AccessibleRole:
        """
        Retrieves the accessible role of this context.

        Parameters:


        Returns:
            AccessibleRole: a `GtkAccessibleRole`

        """
        ...

class ATContextClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class AboutDialog(
    Window, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager
):
    """
    The `GtkAboutDialog` offers a simple way to display information about
    a program.

    The shown information includes the programs' logo, name, copyright,
    website and license. It is also possible to give credits to the authors,
    documenters, translators and artists who have worked on the program.

    An about dialog is typically opened when the user selects the `About`
    option from the `Help` menu. All parts of the dialog are optional.

    ![An example GtkAboutDialog](aboutdialog.png)

    About dialogs often contain links and email addresses. `GtkAboutDialog`
    displays these as clickable links. By default, it calls [method@Gtk.FileLauncher.launch]
    when a user clicks one. The behaviour can be overridden with the
    [signal@Gtk.AboutDialog::activate-link] signal.

    To specify a person with an email address, use a string like
    `Edgar Allan Poe <edgar@poe.com>`. To specify a website with a title,
    use a string like `GTK team https://www.gtk.org`.

    To make constructing a `GtkAboutDialog` as convenient as possible, you can
    use the function [func@Gtk.show_about_dialog] which constructs and shows
    a dialog and keeps it around so that it can be shown again.

    Note that GTK sets a default title of `_(\"About %s\")` on the dialog
    window (where `%s` is replaced by the name of the application, but in
    order to ensure proper translation of the title, applications should
    set the title property explicitly when constructing a `GtkAboutDialog`,
    as shown in the following example:

    ```c
    GFile *logo_file = g_file_new_for_path (\"./logo.png\");
    GdkTexture *example_logo = gdk_texture_new_from_file (logo_file, NULL);
    g_object_unref (logo_file);

    gtk_show_about_dialog (NULL,
    \"program-name\", \"ExampleCode\",
    \"logo\", example_logo,
    \"title\", _(\"About ExampleCode\"),
    NULL);
    ```

    ## CSS nodes

    `GtkAboutDialog` has a single CSS node with the name `window` and style
    class `.aboutdialog`.

    :Constructors:

    ::

        AboutDialog(**properties)
        new() -> Gtk.Widget

    Object GtkAboutDialog

    Signals from GtkAboutDialog:
      activate-link (gchararray) -> gboolean

    Properties from GtkAboutDialog:
      program-name -> gchararray: program-name
      version -> gchararray: version
      copyright -> gchararray: copyright
      comments -> gchararray: comments
      website -> gchararray: website
      website-label -> gchararray: website-label
      license -> gchararray: license
      system-information -> gchararray: system-information
      authors -> GStrv: authors
      documenters -> GStrv: documenters
      translator-credits -> gchararray: translator-credits
      artists -> GStrv: artists
      logo -> GdkPaintable: logo
      logo-icon-name -> gchararray: logo-icon-name
      wrap-license -> gboolean: wrap-license
      license-type -> GtkLicense: license-type

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Window.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ):
        artists: list[str]
        """
        The people who contributed artwork to the program, as a `NULL`-terminated
        array of strings.

        Each string may contain email addresses and URLs, which will be displayed
        as links.
        """
        authors: list[str]
        """
        The authors of the program, as a `NULL`-terminated array of strings.

        Each string may contain email addresses and URLs, which will be displayed
        as links, see the introduction for more details.
        """
        comments: Optional[str]
        """
        Comments about the program.

        This string is displayed in a label in the main dialog, thus it
        should be a short explanation of the main purpose of the program,
        not a detailed list of features.
        """
        copyright: Optional[str]
        """
        Copyright information for the program.
        """
        documenters: list[str]
        """
        The people documenting the program, as a `NULL`-terminated array of strings.

        Each string may contain email addresses and URLs, which will be displayed
        as links, see the introduction for more details.
        """
        license: Optional[str]
        """
        The license of the program, as free-form text.

        This string is displayed in a text view in a secondary dialog, therefore
        it is fine to use a long multi-paragraph text. Note that the text is only
        wrapped in the text view if the \"wrap-license\" property is set to `TRUE`;
        otherwise the text itself must contain the intended linebreaks.

        When setting this property to a non-`NULL` value, the
        [property@Gtk.AboutDialog:license-type] property is set to
        `GTK_LICENSE_CUSTOM` as a side effect.

        The text may contain links in this format `<http://www.some.place/>`
        and email references in the form `<mail-to@some.body>`, and these will
        be converted into clickable links.
        """
        license_type: License
        """
        The license of the program.

        The `GtkAboutDialog` will automatically fill out a standard disclaimer
        and link the user to the appropriate online resource for the license
        text.

        If `GTK_LICENSE_UNKNOWN` is used, the link used will be the same
        specified in the [property@Gtk.AboutDialog:website] property.

        If `GTK_LICENSE_CUSTOM` is used, the current contents of the
        [property@Gtk.AboutDialog:license] property are used.

        For any other [enum@Gtk.License] value, the contents of the
        [property@Gtk.AboutDialog:license] property are also set by this property as
        a side effect.
        """
        logo: Optional[Gdk.Paintable]
        """
        A logo for the about box.

        If it is `NULL`, the default window icon set with
        [id@gtk_window_set_default_icon_name] will be used.
        """
        logo_icon_name: Optional[str]
        """
        A named icon to use as the logo for the about box.

        This property overrides the [property@Gtk.AboutDialog:logo] property.
        """
        program_name: Optional[str]
        """
        The name of the program.

        If this is not set, it defaults to the value returned by
        `g_get_application_name()`.
        """
        system_information: Optional[str]
        """
        Information about the system on which the program is running.

        This information is displayed in a separate page, therefore it is fine
        to use a long multi-paragraph text. Note that the text should contain
        the intended linebreaks.

        The text may contain links in this format `<http://www.some.place/>`
        and email references in the form `<mail-to@some.body>`, and these will
        be converted into clickable links.
        """
        translator_credits: Optional[str]
        """
        Credits to the translators.

        This string should be marked as translatable.

        The string may contain email addresses and URLs, which will be displayed
        as links, see the introduction for more details.
        """
        version: Optional[str]
        """
        The version of the program.
        """
        website: Optional[str]
        """
        The URL for the link to the website of the program.

        This should be a string starting with `http://` or `https://`.
        """
        website_label: Optional[str]
        """
        The label for the link to the website of the program.
        """
        wrap_license: bool
        """
        Whether to wrap the text in the license dialog.
        """

    props: Props = ...
    def __init__(
        self,
        artists: Sequence[str] = ...,
        authors: Sequence[str] = ...,
        comments: Optional[str] = ...,
        copyright: Optional[str] = ...,
        documenters: Sequence[str] = ...,
        license: Optional[str] = ...,
        license_type: License = ...,
        logo: Optional[Gdk.Paintable] = ...,
        logo_icon_name: Optional[str] = ...,
        program_name: Optional[str] = ...,
        system_information: Optional[str] = ...,
        translator_credits: Optional[str] = ...,
        version: Optional[str] = ...,
        website: Optional[str] = ...,
        website_label: str = ...,
        wrap_license: bool = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def add_credit_section(self, section_name: str, people: Sequence[str]) -> None:
        """
        Creates a new section in the \"Credits\" page.

        Parameters:
            section_name: The name of the section
            people: The people who belong to that section

        Returns:

        """
        ...

    def get_artists(self) -> list[str]:
        """
        Returns the names of the artists which are displayed
        in the credits page.

        Parameters:


        Returns:
            list[str]: A
        `NULL`-terminated string array containing the artists

        """
        ...

    def get_authors(self) -> list[str]:
        """
        Returns the names of the authors which are displayed
        in the credits page.

        Parameters:


        Returns:
            list[str]: A
        `NULL`-terminated string array containing the authors

        """
        ...

    def get_comments(self) -> Optional[str]:
        """
        Returns the comments string.

        Parameters:


        Returns:
            Optional[str]: The comments

        """
        ...

    def get_copyright(self) -> Optional[str]:
        """
        Returns the copyright string.

        Parameters:


        Returns:
            Optional[str]: The copyright string

        """
        ...

    def get_documenters(self) -> list[str]:
        """
        Returns the name of the documenters which are displayed
        in the credits page.

        Parameters:


        Returns:
            list[str]: A
        `NULL`-terminated string array containing the documenters

        """
        ...

    def get_license(self) -> Optional[str]:
        """
        Returns the license information.

        Parameters:


        Returns:
            Optional[str]: The license information

        """
        ...

    def get_license_type(self) -> License:
        """
        Retrieves the license type.

        Parameters:


        Returns:
            License: a [enum@Gtk.License] value

        """
        ...

    def get_logo(self) -> Optional[Gdk.Paintable]:
        """
        Returns the paintable displayed as logo in the about dialog.

        Parameters:


        Returns:
            Optional[Gdk.Paintable]: the paintable displayed as
        logo or `NULL` if the logo is unset or has been set via
        [method@Gtk.AboutDialog.set_logo_icon_name]

        """
        ...

    def get_logo_icon_name(self) -> Optional[str]:
        """
        Returns the icon name displayed as logo in the about dialog.

        Parameters:


        Returns:
            Optional[str]: the icon name displayed as logo,
        or `NULL` if the logo has been set via [method@Gtk.AboutDialog.set_logo]

        """
        ...

    def get_program_name(self) -> Optional[str]:
        """
        Returns the program name displayed in the about dialog.

        Parameters:


        Returns:
            Optional[str]: The program name

        """
        ...

    def get_system_information(self) -> Optional[str]:
        """
        Returns the system information that is shown in the about dialog.

        Parameters:


        Returns:
            Optional[str]: the system information

        """
        ...

    def get_translator_credits(self) -> Optional[str]:
        """
        Returns the translator credits string which is displayed
        in the credits page.

        Parameters:


        Returns:
            Optional[str]: The translator credits string

        """
        ...

    def get_version(self) -> Optional[str]:
        """
        Returns the version string.

        Parameters:


        Returns:
            Optional[str]: The version string

        """
        ...

    def get_website(self) -> Optional[str]:
        """
        Returns the website URL.

        Parameters:


        Returns:
            Optional[str]: The website URL

        """
        ...

    def get_website_label(self) -> Optional[str]:
        """
        Returns the label used for the website link.

        Parameters:


        Returns:
            Optional[str]: The label used for the website link

        """
        ...

    def get_wrap_license(self) -> bool:
        """
        Returns whether the license text in the about dialog is
        automatically wrapped.

        Parameters:


        Returns:
            bool: `TRUE` if the license text is wrapped

        """
        ...

    @classmethod
    def new(cls) -> AboutDialog:
        """
        Creates a new `GtkAboutDialog`.

        Parameters:


        Returns:
            Widget: a newly created `GtkAboutDialog`

        """
        ...

    def set_artists(self, artists: Sequence[str]) -> None:
        """
        Sets the names of the artists to be displayed
        in the \"Credits\" page.

        Parameters:
            artists: the authors of the artwork
        of the application

        Returns:

        """
        ...

    def set_authors(self, authors: Sequence[str]) -> None:
        """
        Sets the names of the authors which are displayed
        in the \"Credits\" page of the about dialog.

        Parameters:
            authors: the authors of the application

        Returns:

        """
        ...

    def set_comments(self, comments: Optional[str] = None) -> None:
        """
        Sets the comments string to display in the about dialog.

        This should be a short string of one or two lines.

        Parameters:
            comments: a comments string

        Returns:

        """
        ...

    def set_copyright(self, copyright: Optional[str] = None) -> None:
        """
        Sets the copyright string to display in the about dialog.

        This should be a short string of one or two lines.

        Parameters:
            copyright: the copyright string

        Returns:

        """
        ...

    def set_documenters(self, documenters: Sequence[str]) -> None:
        """
        Sets the names of the documenters which are displayed
        in the \"Credits\" page.

        Parameters:
            documenters: the authors of the documentation
        of the application

        Returns:

        """
        ...

    def set_license(self, license: Optional[str] = None) -> None:
        """
        Sets the license information to be displayed in the
        about dialog.

        If `license` is `NULL`, the license page is hidden.

        Parameters:
            license: the license information

        Returns:

        """
        ...

    def set_license_type(self, license_type: License) -> None:
        """
        Sets the license of the application showing the about dialog from a
        list of known licenses.

        This function overrides the license set using
        [method@Gtk.AboutDialog.set_license].

        Parameters:
            license_type: the type of license

        Returns:

        """
        ...

    def set_logo(self, logo: Optional[Gdk.Paintable] = None) -> None:
        """
        Sets the logo in the about dialog.

        Parameters:
            logo: a `GdkPaintable`

        Returns:

        """
        ...

    def set_logo_icon_name(self, icon_name: Optional[str] = None) -> None:
        """
        Sets the icon name to be displayed as logo in the about dialog.

        Parameters:
            icon_name: an icon name

        Returns:

        """
        ...

    def set_program_name(self, name: Optional[str] = None) -> None:
        """
        Sets the name to display in the about dialog.

        If `name` is not set, the string returned
        by `g_get_application_name()` is used.

        Parameters:
            name: the program name

        Returns:

        """
        ...

    def set_system_information(self, system_information: Optional[str] = None) -> None:
        """
        Sets the system information to be displayed in the about
        dialog.

        If `system_information` is `NULL`, the system information
        page is hidden.

        See [property@Gtk.AboutDialog:system-information].

        Parameters:
            system_information: system information

        Returns:

        """
        ...

    def set_translator_credits(self, translator_credits: Optional[str] = None) -> None:
        """
        Sets the translator credits string which is displayed in
        the credits page.

        The intended use for this string is to display the translator
        of the language which is currently used in the user interface.
        Using `gettext()`, a simple way to achieve that is to mark the
        string for translation:

        ```c
        GtkWidget *about = gtk_about_dialog_new ();
        gtk_about_dialog_set_translator_credits (GTK_ABOUT_DIALOG (about),
        _(\"translator-credits\"));
        ```

        It is a good idea to use the customary `msgid` “translator-credits”
        for this purpose, since translators will already know the purpose of
        that `msgid`, and since `GtkAboutDialog` will detect if “translator-credits”
        is untranslated and omit translator credits.

        Parameters:
            translator_credits: the translator credits

        Returns:

        """
        ...

    def set_version(self, version: Optional[str] = None) -> None:
        """
        Sets the version string to display in the about dialog.

        Parameters:
            version: the version string

        Returns:

        """
        ...

    def set_website(self, website: Optional[str] = None) -> None:
        """
        Sets the URL to use for the website link.

        Parameters:
            website: a URL string starting with `http://`

        Returns:

        """
        ...

    def set_website_label(self, website_label: str) -> None:
        """
        Sets the label to be used for the website link.

        Parameters:
            website_label: the label used for the website link

        Returns:

        """
        ...

    def set_wrap_license(self, wrap_license: bool) -> None:
        """
        Sets whether the license text in the about dialog should be
        automatically wrapped.

        Parameters:
            wrap_license: whether to wrap the license

        Returns:

        """
        ...

class Accessible(GObject.GInterface):
    """
    `GtkAccessible` is an interface for describing UI elements for
    Assistive Technologies.

    Every accessible implementation has:

    - a “role”, represented by a value of the [enum@Gtk.AccessibleRole] enumeration
    - an “attribute”, represented by a set of [enum@Gtk.AccessibleState],
    [enum@Gtk.AccessibleProperty] and [enum@Gtk.AccessibleRelation] values

    The role cannot be changed after instantiating a `GtkAccessible`
    implementation.

    The attributes are updated every time a UI element's state changes in
    a way that should be reflected by assistive technologies. For instance,
    if a `GtkWidget` visibility changes, the %GTK_ACCESSIBLE_STATE_HIDDEN
    state will also change to reflect the [property@Gtk.Widget:visible] property.

    Every accessible implementation is part of a tree of accessible objects.
    Normally, this tree corresponds to the widget tree, but can be customized
    by reimplementing the [vfunc@Gtk.Accessible.get_accessible_parent],
    [vfunc@Gtk.Accessible.get_first_accessible_child] and
    [vfunc@Gtk.Accessible.get_next_accessible_sibling] virtual functions.
    Note that you can not create a top-level accessible object as of now,
    which means that you must always have a parent accessible object.
    Also note that when an accessible object does not correspond to a widget,
    and it has children, whose implementation you don't control,
    it is necessary to ensure the correct shape of the a11y tree
    by calling [method@Gtk.Accessible.set_accessible_parent] and
    updating the sibling by [method@Gtk.Accessible.update_next_accessible_sibling].



    Interface GtkAccessible

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def __init__(self, accessible_role: AccessibleRole = ...): ...
    def get_accessible_parent(self) -> Optional[Accessible]:
        """
        Retrieves the accessible parent for an accessible object.

        This function returns `NULL` for top level widgets.

        Parameters:


        Returns:
            Optional[Accessible]: the accessible parent

        """
        ...

    def get_accessible_role(self) -> AccessibleRole:
        """
        Retrieves the accessible role of an accessible object.

        Parameters:


        Returns:
            AccessibleRole: the accessible role

        """
        ...

    def get_at_context(self) -> ATContext:
        """
        Retrieves the accessible implementation for the given `GtkAccessible`.

        Parameters:


        Returns:
            ATContext: the accessible implementation object

        """
        ...

    def get_bounds(self) -> Tuple[bool, int, int, int, int]:
        """
        Queries the coordinates and dimensions of this accessible

        This functionality can be overridden by `GtkAccessible`
        implementations, e.g. to get the bounds from an ignored
        child widget.

        Parameters:


        Returns:
            bool: true if the bounds are valid, and false otherwise
            int: the x coordinate of the top left corner of the accessible
            int: the y coordinate of the top left corner of the widget
            int: the width of the accessible object
            int: the height of the accessible object
        """
        ...

    def get_first_accessible_child(self) -> Optional[Accessible]:
        """
        Retrieves the first accessible child of an accessible object.

        Parameters:


        Returns:
            Optional[Accessible]: the first accessible child

        """
        ...

    def get_next_accessible_sibling(self) -> Optional[Accessible]:
        """
        Retrieves the next accessible sibling of an accessible object

        Parameters:


        Returns:
            Optional[Accessible]: the next accessible sibling

        """
        ...

    def get_platform_state(self, state: AccessiblePlatformState) -> bool:
        """
        Query a platform state, such as focus.

        See gtk_accessible_platform_changed().

        This functionality can be overridden by `GtkAccessible`
        implementations, e.g. to get platform state from an ignored
        child widget, as is the case for `GtkText` wrappers.

        Parameters:
            state: platform state to query

        Returns:
            bool: the value of @state for the accessible

        """
        ...

    def reset_property(self, property: AccessibleProperty) -> None:
        """
        Resets the accessible @property to its default value.

        Parameters:
            property: a `GtkAccessibleProperty`

        Returns:

        """
        ...

    def reset_relation(self, relation: AccessibleRelation) -> None:
        """
        Resets the accessible @relation to its default value.

        Parameters:
            relation: a `GtkAccessibleRelation`

        Returns:

        """
        ...

    def reset_state(self, state: AccessibleState) -> None:
        """
        Resets the accessible @state to its default value.

        Parameters:
            state: a `GtkAccessibleState`

        Returns:

        """
        ...

    def set_accessible_parent(
        self,
        parent: Optional[Accessible] = None,
        next_sibling: Optional[Accessible] = None,
    ) -> None:
        """
        Sets the parent and sibling of an accessible object.

        This function is meant to be used by accessible implementations that are
        not part of the widget hierarchy, and but act as a logical bridge between
        widgets. For instance, if a widget creates an object that holds metadata
        for each child, and you want that object to implement the `GtkAccessible`
        interface, you will use this function to ensure that the parent of each
        child widget is the metadata object, and the parent of each metadata
        object is the container widget.

        Parameters:
            parent: the parent accessible object
            next_sibling: the sibling accessible object

        Returns:

        """
        ...

    def update_next_accessible_sibling(
        self, new_sibling: Optional[Accessible] = None
    ) -> None:
        """
        Updates the next accessible sibling of @self.

        That might be useful when a new child of a custom `GtkAccessible`
        is created, and it needs to be linked to a previous child.

        Parameters:
            new_sibling: the new next accessible sibling to set

        Returns:

        """
        ...

    def update_property(
        self, properties: Sequence[AccessibleProperty], values: Sequence[Any]
    ) -> None:
        """
        Updates a list of accessible properties.

        See the [enum@Gtk.AccessibleProperty] documentation for the
        value types of accessible properties.

        This function should be called by `GtkWidget` types whenever
        an accessible property change must be communicated to assistive
        technologies.

        Example:
        ```c
        value = gtk_adjustment_get_value (adjustment);
        gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
        GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
        -1);
        ```

        Parameters:
            properties:
            values:

        Returns:

        """
        ...

    def update_relation(
        self, relations: Sequence[AccessibleRelation], values: Sequence[Any]
    ) -> None:
        """
        Updates a list of accessible relations.

        This function should be called by `GtkWidget` types whenever an accessible
        relation change must be communicated to assistive technologies.

        If the [enum@Gtk.AccessibleRelation] requires a list of references,
        you should pass each reference individually, followed by %NULL, e.g.

        ```c
        gtk_accessible_update_relation (accessible,
        GTK_ACCESSIBLE_RELATION_CONTROLS,
        ref1, NULL,
        GTK_ACCESSIBLE_RELATION_LABELLED_BY,
        ref1, ref2, ref3, NULL,
        -1);
        ```

        Parameters:
            relations:
            values:

        Returns:

        """
        ...

    def update_state(
        self, states: Sequence[AccessibleState], values: Sequence[Any]
    ) -> None:
        """
        Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
        documentation for the value types of accessible states.

        This function should be called by `GtkWidget` types whenever an accessible
        state change must be communicated to assistive technologies.

        Example:

        ```c
        value = GTK_ACCESSIBLE_TRISTATE_MIXED;
        gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
        GTK_ACCESSIBLE_STATE_CHECKED, value,
        -1);
        ```

        Parameters:
            states:
            values:

        Returns:

        """
        ...

class AccessibleInterface(GObject.GPointer):
    """
    The common interface for accessible objects.

    :Constructors:

    ::

        AccessibleInterface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    get_at_context: Callable[[Accessible], Optional[ATContext]] = ...
    get_platform_state: Callable[[Accessible, AccessiblePlatformState], bool] = ...
    get_accessible_parent: Callable[[Accessible], Optional[Accessible]] = ...
    get_first_accessible_child: Callable[[Accessible], Optional[Accessible]] = ...
    get_next_accessible_sibling: Callable[[Accessible], Optional[Accessible]] = ...
    get_bounds: Callable[[Accessible], Tuple[bool, int, int, int, int]] = ...

class AccessibleRange(GObject.GInterface):
    """
    This interface describes ranged controls, e.g. controls which have a single
    value within an allowed range and that can optionally be changed by the user.

    This interface is expected to be implemented by controls using the following
    roles:

    - `GTK_ACCESSIBLE_ROLE_METER`
    - `GTK_ACCESSIBLE_ROLE_PROGRESS_BAR`
    - `GTK_ACCESSIBLE_ROLE_SCROLLBAR`
    - `GTK_ACCESSIBLE_ROLE_SLIDER`
    - `GTK_ACCESSIBLE_ROLE_SPIN_BUTTON`

    If that is not the case, a warning will be issued at run time.

    In addition to this interface, its implementors are expected to provide the
    correct values for the following properties:

    - `GTK_ACCESSIBLE_PROPERTY_VALUE_MAX`
    - `GTK_ACCESSIBLE_PROPERTY_VALUE_MIN`
    - `GTK_ACCESSIBLE_PROPERTY_VALUE_NOW`
    - `GTK_ACCESSIBLE_PROPERTY_VALUE_TEXT`



    Interface GtkAccessibleRange

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

class AccessibleRangeInterface(GObject.GPointer):
    """
    :Constructors:

    ::

        AccessibleRangeInterface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    set_current_value: Callable[[AccessibleRange, float], bool] = ...

class ActionBar(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkActionBar` is designed to present contextual actions.

    ![An example GtkActionBar](action-bar.png)

    It is expected to be displayed below the content and expand
    horizontally to fill the area.

    It allows placing children at the start or the end. In addition, it
    contains an internal centered box which is centered with respect to
    the full width of the box, even if the children at either side take
    up different amounts of space.

    # GtkActionBar as GtkBuildable

    The `GtkActionBar` implementation of the `GtkBuildable` interface supports
    adding children at the start or end sides by specifying “start” or “end” as
    the “type” attribute of a `<child>` element, or setting the center widget
    by specifying “center” value.

    # CSS nodes

    ```
    actionbar
    ╰── revealer
    ╰── box
    ├── box.start
    │ ╰── [start children]
    ├── [center widget]
    ╰── box.end
    ╰── [end children]
    ```

    A `GtkActionBar`'s CSS node is called `actionbar`. It contains a `revealer`
    subnode, which contains a `box` subnode, which contains two `box` subnodes at
    the start and end of the action bar, with `start` and `end style classes
    respectively, as well as a center node that represents the center child.

    Each of the boxes contains children packed for that side.

    :Constructors:

    ::

        ActionBar(**properties)
        new() -> Gtk.Widget

    Object GtkActionBar

    Properties from GtkActionBar:
      revealed -> gboolean: revealed

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        revealed: bool
        """
        Controls whether the action bar shows its contents.
        """

    props: Props = ...
    def __init__(
        self,
        revealed: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_center_widget(self) -> Optional[Widget]:
        """
        Retrieves the center bar widget of the bar.

        Parameters:


        Returns:
            Optional[Widget]: the center `GtkWidget`

        """
        ...

    def get_revealed(self) -> bool:
        """
        Gets whether the contents of the action bar are revealed.

        Parameters:


        Returns:
            bool: the current value of the [property@Gtk.ActionBar:revealed]
        property

        """
        ...

    @classmethod
    def new(cls) -> ActionBar:
        """
        Creates a new `GtkActionBar` widget.

        Parameters:


        Returns:
            Widget: a new `GtkActionBar`

        """
        ...

    def pack_end(self, child: Widget) -> None:
        """
        Adds @child to @action_bar, packed with reference to the
        end of the @action_bar.

        Parameters:
            child: the `GtkWidget` to be added to @action_bar

        Returns:

        """
        ...

    def pack_start(self, child: Widget) -> None:
        """
        Adds @child to @action_bar, packed with reference to the
        start of the @action_bar.

        Parameters:
            child: the `GtkWidget` to be added to @action_bar

        Returns:

        """
        ...

    def remove(self, child: Widget) -> None:
        """
        Removes a child from @action_bar.

        Parameters:
            child: the `GtkWidget` to be removed

        Returns:

        """
        ...

    def set_center_widget(self, center_widget: Optional[Widget] = None) -> None:
        """
        Sets the center widget for the `GtkActionBar`.

        Parameters:
            center_widget: a widget to use for the center

        Returns:

        """
        ...

    def set_revealed(self, revealed: bool) -> None:
        """
        Reveals or conceals the content of the action bar.

        Note: this does not show or hide @action_bar in the
        [property@Gtk.Widget:visible] sense, so revealing has
        no effect if the action bar is hidden.

        Parameters:
            revealed: The new value of the property

        Returns:

        """
        ...

class Actionable(GObject.GInterface):
    """
    The `GtkActionable` interface provides a convenient way of associating
    widgets with actions.

    It primarily consists of two properties: [property@Gtk.Actionable:action-name]
    and [property@Gtk.Actionable:action-target]. There are also some convenience
    APIs for setting these properties.

    The action will be looked up in action groups that are found among
    the widgets ancestors. Most commonly, these will be the actions with
    the “win.” or “app.” prefix that are associated with the
    `GtkApplicationWindow` or `GtkApplication`, but other action groups that
    are added with [method@Gtk.Widget.insert_action_group] will be consulted
    as well.



    Interface GtkActionable

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def __init__(
        self, action_name: Optional[str] = ..., action_target: GLib.Variant = ...
    ): ...
    def get_action_name(self) -> Optional[str]:
        """
        Gets the action name for @actionable.

        Parameters:


        Returns:
            Optional[str]: the action name

        """
        ...

    def get_action_target_value(self) -> Optional[GLib.Variant]:
        """
        Gets the current target value of @actionable.

        Parameters:


        Returns:
            Optional[GLib.Variant]: the current target value

        """
        ...

    def set_action_name(self, action_name: Optional[str] = None) -> None:
        """
        Specifies the name of the action with which this widget should be
        associated.

        If @action_name is %NULL then the widget will be unassociated from
        any previous action.

        Usually this function is used when the widget is located (or will be
        located) within the hierarchy of a `GtkApplicationWindow`.

        Names are of the form “win.save” or “app.quit” for actions on the
        containing [class@ApplicationWindow] or its associated [class@Application],
        respectively. This is the same form used for actions in the [class@Gio.Menu]
        associated with the window.

        Parameters:
            action_name: an action name

        Returns:

        """
        ...

    def set_action_target_value(
        self, target_value: Optional[GLib.Variant] = None
    ) -> None:
        """
        Sets the target value of an actionable widget.

        If @target_value is %NULL then the target value is unset.

        The target value has two purposes. First, it is used as the parameter
        to activation of the action associated with the `GtkActionable` widget.
        Second, it is used to determine if the widget should be rendered as
        “active” — the widget is active if the state is equal to the given target.

        Consider the example of associating a set of buttons with a [iface@Gio.Action]
        with string state in a typical “radio button” situation. Each button
        will be associated with the same action, but with a different target
        value for that action. Clicking on a particular button will activate
        the action with the target of that button, which will typically cause
        the action’s state to change to that value. Since the action’s state
        is now equal to the target value of the button, the button will now
        be rendered as active (and the other buttons, with different targets,
        rendered inactive).

        Parameters:
            target_value: a [struct@GLib.Variant] to set as the target value

        Returns:

        """
        ...

    def set_detailed_action_name(self, detailed_action_name: str) -> None:
        """
        Sets the action-name and associated string target value of an
        actionable widget.

        @detailed_action_name is a string in the format accepted by
        [func@Gio.Action.parse_detailed_name].

        Parameters:
            detailed_action_name: the detailed action name

        Returns:

        """
        ...

class ActionableInterface(GObject.GPointer):
    """
    The interface vtable for `GtkActionable`.

    :Constructors:

    ::

        ActionableInterface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    get_action_name: Callable[[Actionable], Optional[str]] = ...
    set_action_name: Callable[[Actionable, Optional[str]], None] = ...
    get_action_target_value: Callable[[Actionable], Optional[GLib.Variant]] = ...
    set_action_target_value: Callable[[Actionable, Optional[GLib.Variant]], None] = ...

class ActivateAction(ShortcutAction):
    """
    A `GtkShortcutAction` that calls gtk_widget_activate().

    :Constructors:

    ::

        ActivateAction(**properties)

    Object GtkActivateAction

    Signals from GObject:
      notify (GParam)
    """

    class Props(ShortcutAction.Props): ...

    @staticmethod
    def get() -> ActivateAction:
        """
        Gets the activate action.

        This is an action that calls gtk_widget_activate()
        on the given widget upon activation.

        Parameters:


        Returns:
            ActivateAction: The activate action

        """
        ...

class ActivateActionClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class Adjustment(GObject.InitiallyUnowned):
    """
    `GtkAdjustment` is a model for a numeric value.

    The `GtkAdjustment` has an associated lower and upper bound.
    It also contains step and page increments, and a page size.

    Adjustments are used within several GTK widgets, including
    [class@Gtk.SpinButton], [class@Gtk.Viewport], [class@Gtk.Scrollbar]
    and [class@Gtk.Scale].

    The `GtkAdjustment` object does not update the value itself. Instead
    it is left up to the owner of the `GtkAdjustment` to control the value.

    :Constructors:

    ::

        Adjustment(**properties)
        new(value:float, lower:float, upper:float, step_increment:float, page_increment:float, page_size:float) -> Gtk.Adjustment

    Object GtkAdjustment

    Signals from GtkAdjustment:
      changed ()
      value-changed ()

    Properties from GtkAdjustment:
      value -> gdouble: value
      lower -> gdouble: lower
      upper -> gdouble: upper
      step-increment -> gdouble: step-increment
      page-increment -> gdouble: page-increment
      page-size -> gdouble: page-size

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.InitiallyUnowned.Props):
        lower: float
        """
        The minimum value of the adjustment.
        """
        page_increment: float
        """
        The page increment of the adjustment.
        """
        page_size: float
        """
        The page size of the adjustment.

        Note that the page-size is irrelevant and should be set to zero
        if the adjustment is used for a simple scalar value, e.g. in a
        `GtkSpinButton`.
        """
        step_increment: float
        """
        The step increment of the adjustment.
        """
        upper: float
        """
        The maximum value of the adjustment.

        Note that values will be restricted by `upper - page-size` if the page-size
        property is nonzero.
        """
        value: float
        """
        The value of the adjustment.
        """

    props: Props = ...
    parent_instance: GObject.InitiallyUnowned = ...
    def __init__(
        self,
        lower: float = ...,
        page_increment: float = ...,
        page_size: float = ...,
        step_increment: float = ...,
        upper: float = ...,
        value: float = ...,
    ): ...
    def clamp_page(self, lower: float, upper: float) -> None:
        """
        Updates the value property to ensure that the range
        between @lower and @upper is in the current page.

        The current page goes from `value` to `value` + `page-size`.
        If the range is larger than the page size, then only the
        start of it will be in the current page.

        A [signal@Gtk.Adjustment::value-changed] signal will be emitted
        if the value is changed.

        Parameters:
            lower: the lower value
            upper: the upper value

        Returns:

        """
        ...

    def configure(
        self,
        value: float,
        lower: float,
        upper: float,
        step_increment: float,
        page_increment: float,
        page_size: float,
    ) -> None:
        """
        Sets all properties of the adjustment at once.

        Use this function to avoid multiple emissions of the
        [signal@Gtk.Adjustment::changed] signal. See
        [method@Gtk.Adjustment.set_lower] for an alternative
        way of compressing multiple emissions of
        [signal@Gtk.Adjustment::changed] into one.

        Parameters:
            value: the new value
            lower: the new minimum value
            upper: the new maximum value
            step_increment: the new step increment
            page_increment: the new page increment
            page_size: the new page size

        Returns:

        """
        ...

    def do_changed(self) -> None: ...
    def do_value_changed(self) -> None: ...
    def get_lower(self) -> float:
        """
        Retrieves the minimum value of the adjustment.

        Parameters:


        Returns:
            float: The current minimum value of the adjustment

        """
        ...

    def get_minimum_increment(self) -> float:
        """
        Gets the smaller of step increment and page increment.

        Parameters:


        Returns:
            float: the minimum increment of @adjustment

        """
        ...

    def get_page_increment(self) -> float:
        """
        Retrieves the page increment of the adjustment.

        Parameters:


        Returns:
            float: The current page increment of the adjustment

        """
        ...

    def get_page_size(self) -> float:
        """
        Retrieves the page size of the adjustment.

        Parameters:


        Returns:
            float: The current page size of the adjustment

        """
        ...

    def get_step_increment(self) -> float:
        """
        Retrieves the step increment of the adjustment.

        Parameters:


        Returns:
            float: The current step increment of the adjustment.

        """
        ...

    def get_upper(self) -> float:
        """
        Retrieves the maximum value of the adjustment.

        Parameters:


        Returns:
            float: The current maximum value of the adjustment

        """
        ...

    def get_value(self) -> float:
        """
        Gets the current value of the adjustment.

        Parameters:


        Returns:
            float: The current value of the adjustment

        """
        ...

    @classmethod
    def new(
        cls,
        value: float,
        lower: float,
        upper: float,
        step_increment: float,
        page_increment: float,
        page_size: float,
    ) -> Adjustment:
        """
        Creates a new `GtkAdjustment`.

        Parameters:
            value: the initial value
            lower: the minimum value
            upper: the maximum value
            step_increment: the step increment
            page_increment: the page increment
            page_size: the page size

        Returns:
            Adjustment: a new `GtkAdjustment`

        """
        ...

    def set_lower(self, lower: float) -> None:
        """
        Sets the minimum value of the adjustment.

        When setting multiple adjustment properties via their individual
        setters, multiple [signal@Gtk.Adjustment::changed] signals will
        be emitted. However, since the emission of the
        [signal@Gtk.Adjustment::changed] signal is tied to the emission
        of the ::notify signals of the changed properties, it’s possible
        to compress the [signal@Gtk.Adjustment::changed] signals into one
        by calling g_object_freeze_notify() and g_object_thaw_notify()
        around the calls to the individual setters.

        Alternatively, using a single g_object_set() for all the properties
        to change, or using [method@Gtk.Adjustment.configure] has the same effect.

        Parameters:
            lower: the new minimum value

        Returns:

        """
        ...

    def set_page_increment(self, page_increment: float) -> None:
        """
        Sets the page increment of the adjustment.

        See [method@Gtk.Adjustment.set_lower] about how to compress
        multiple emissions of the [signal@Gtk.Adjustment::changed]
        signal when setting multiple adjustment properties.

        Parameters:
            page_increment: the new page increment

        Returns:

        """
        ...

    def set_page_size(self, page_size: float) -> None:
        """
        Sets the page size of the adjustment.

        See [method@Gtk.Adjustment.set_lower] about how to compress
        multiple emissions of the [signal@Gtk.Adjustment::changed]
        signal when setting multiple adjustment properties.

        Parameters:
            page_size: the new page size

        Returns:

        """
        ...

    def set_step_increment(self, step_increment: float) -> None:
        """
        Sets the step increment of the adjustment.

        See [method@Gtk.Adjustment.set_lower] about how to compress
        multiple emissions of the [signal@Gtk.Adjustment::changed]
        signal when setting multiple adjustment properties.

        Parameters:
            step_increment: the new step increment

        Returns:

        """
        ...

    def set_upper(self, upper: float) -> None:
        """
        Sets the maximum value of the adjustment.

        Note that values will be restricted by `upper - page-size`
        if the page-size property is nonzero.

        See [method@Gtk.Adjustment.set_lower] about how to compress
        multiple emissions of the [signal@Gtk.Adjustment::changed]
        signal when setting multiple adjustment properties.

        Parameters:
            upper: the new maximum value

        Returns:

        """
        ...

    def set_value(self, value: float) -> None:
        """
        Sets the `GtkAdjustment` value.

        The value is clamped to lie between [property@Gtk.Adjustment:lower]
        and [property@Gtk.Adjustment:upper].

        Note that for adjustments which are used in a `GtkScrollbar`,
        the effective range of allowed values goes from
        [property@Gtk.Adjustment:lower] to
        [property@Gtk.Adjustment:upper] - [property@Gtk.Adjustment:page-size].

        Parameters:
            value: the new value

        Returns:

        """
        ...

class AdjustmentClass(GObject.GPointer):
    """
    :Constructors:

    ::

        AdjustmentClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.InitiallyUnownedClass = ...
    changed: Callable[[Adjustment], None] = ...
    value_changed: Callable[[Adjustment], None] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...

class AlertDialog(GObject.Object):
    """
    A `GtkAlertDialog` object collects the arguments that
    are needed to present a message to the user.

    The message is shown with the [method@Gtk.AlertDialog.choose]
    function. This API follows the GIO async pattern, and the result can
    be obtained by calling [method@Gtk.AlertDialog.choose_finish].

    If you don't need to wait for a button to be clicked, you can use
    [method@Gtk.AlertDialog.show].

    :Constructors:

    ::

        AlertDialog(**properties)

    Object GtkAlertDialog

    Properties from GtkAlertDialog:
      modal -> gboolean: modal
      message -> gchararray: message
      detail -> gchararray: detail
      buttons -> GStrv: buttons
      cancel-button -> gint: cancel-button
      default-button -> gint: default-button

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        buttons: Optional[list[str]]
        """
        Labels for buttons to show in the alert.

        The labels should be translated and may contain
        a _ to indicate the mnemonic character.

        If this property is not set, then a 'Close' button is
        automatically created.
        """
        cancel_button: int
        """
        This property determines what happens when the Escape key is
        pressed while the alert is shown.

        If this property holds the index of a button in [property@Gtk.AlertDialog:buttons],
        then pressing Escape is treated as if that button was pressed. If it is -1
        or not a valid index for the `buttons` array, then an error is returned.

        If `buttons` is `NULL`, then the automatically created 'Close' button
        is treated as both cancel and default button, so 0 is returned.
        """
        default_button: int
        """
        This property determines what happens when the Return key is
        pressed while the alert is shown.

        If this property holds the index of a button in [property@Gtk.AlertDialog:buttons],
        then pressing Return is treated as if that button was pressed. If it is -1
        or not a valid index for the `buttons` array, then nothing happens.

        If `buttons` is `NULL`, then the automatically created 'Close' button
        is treated as both cancel and default button, so 0 is returned.
        """
        detail: str
        """
        The detail text for the alert.
        """
        message: str
        """
        The message for the alert.
        """
        modal: bool
        """
        Whether the alert is modal.
        """

    props: Props = ...
    def __init__(
        self,
        buttons: Sequence[str] = ...,
        cancel_button: int = ...,
        default_button: int = ...,
        detail: str = ...,
        message: str = ...,
        modal: bool = ...,
    ): ...
    def choose(
        self,
        parent: Optional[Window] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function shows the alert to the user.

        The @callback will be called when the alert is dismissed.
        It should call [method@Gtk.AlertDialog.choose_finish]
        to obtain the result.

        It is ok to pass `NULL` for the callback if the alert
        does not have more than one button. A simpler API for
        this case is [method@Gtk.AlertDialog.show].

        Parameters:
            parent: the parent `GtkWindow`
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def choose_finish(self, result: Gio.AsyncResult) -> int:
        """
        Finishes the [method@Gtk.AlertDialog.choose] call
        and returns the index of the button that was clicked.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            int: the index of the button that was clicked, or -1 if
        the dialog was cancelled and [property@Gtk.AlertDialog:cancel-button]
        is not set

        """
        ...

    def get_buttons(self) -> Optional[list[str]]:
        """
        Returns the button labels for the alert.

        Parameters:


        Returns:
            Optional[list[str]]: the button labels

        """
        ...

    def get_cancel_button(self) -> int:
        """
        Returns the index of the cancel button.

        Parameters:


        Returns:
            int: the index of the cancel button, or -1

        """
        ...

    def get_default_button(self) -> int:
        """
        Returns the index of the default button.

        Parameters:


        Returns:
            int: the index of the default button, or -1

        """
        ...

    def get_detail(self) -> str:
        """
        Returns the detail text that will be shown in the alert.

        Parameters:


        Returns:
            str: the detail text

        """
        ...

    def get_message(self) -> str:
        """
        Returns the message that will be shown in the alert.

        Parameters:


        Returns:
            str: the message

        """
        ...

    def get_modal(self) -> bool:
        """
        Returns whether the alert blocks interaction
        with the parent window while it is presented.

        Parameters:


        Returns:
            bool: `TRUE` if the alert is modal

        """
        ...

    def set_buttons(self, labels: Sequence[str]) -> None:
        """
        Sets the button labels for the alert.

        Parameters:
            labels: the new button labels

        Returns:

        """
        ...

    def set_cancel_button(self, button: int) -> None:
        """
        Sets the index of the cancel button.

        See [property@Gtk.AlertDialog:cancel-button] for
        details of how this value is used.

        Parameters:
            button: the new cancel button

        Returns:

        """
        ...

    def set_default_button(self, button: int) -> None:
        """
        Sets the index of the default button.

        See [property@Gtk.AlertDialog:default-button] for
        details of how this value is used.

        Parameters:
            button: the new default button

        Returns:

        """
        ...

    def set_detail(self, detail: str) -> None:
        """
        Sets the detail text that will be shown in the alert.

        Parameters:
            detail: the new detail text

        Returns:

        """
        ...

    def set_message(self, message: str) -> None:
        """
        Sets the message that will be shown in the alert.

        Parameters:
            message: the new message

        Returns:

        """
        ...

    def set_modal(self, modal: bool) -> None:
        """
        Sets whether the alert blocks interaction
        with the parent window while it is presented.

        Parameters:
            modal: the new value

        Returns:

        """
        ...

    def show(self, parent: Optional[Window] = None) -> None:
        """
        Show the alert to the user.

        This function is a simple version of [method@Gtk.AlertDialog.choose]
        intended for dialogs with a single button.
        If you want to cancel the dialog or if the alert has more than one button,
        you should use that function instead and provide it with a #GCancellable or
        callback respectively.

        Parameters:
            parent: the parent `GtkWindow`

        Returns:

        """
        ...

class AlertDialogClass(GObject.GPointer):
    """
    :Constructors:

    ::

        AlertDialogClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class AlternativeTrigger(ShortcutTrigger):
    """
    A `GtkShortcutTrigger` that combines two triggers.

    The `GtkAlternativeTrigger` triggers when either of two trigger.

    This can be cascaded to combine more than two triggers.

    :Constructors:

    ::

        AlternativeTrigger(**properties)
        new(first:Gtk.ShortcutTrigger, second:Gtk.ShortcutTrigger) -> Gtk.ShortcutTrigger

    Object GtkAlternativeTrigger

    Properties from GtkAlternativeTrigger:
      first -> GtkShortcutTrigger: first
      second -> GtkShortcutTrigger: second

    Signals from GObject:
      notify (GParam)
    """

    class Props(ShortcutTrigger.Props):
        first: ShortcutTrigger
        """
        The first `GtkShortcutTrigger` to check.
        """
        second: ShortcutTrigger
        """
        The second `GtkShortcutTrigger` to check.
        """

    props: Props = ...
    def __init__(self, first: ShortcutTrigger = ..., second: ShortcutTrigger = ...): ...
    def get_first(self) -> ShortcutTrigger:
        """
        Gets the first of the two alternative triggers that may
        trigger @self.

        [method@Gtk.AlternativeTrigger.get_second] will return
        the other one.

        Parameters:


        Returns:
            ShortcutTrigger: the first alternative trigger

        """
        ...

    def get_second(self) -> ShortcutTrigger:
        """
        Gets the second of the two alternative triggers that may
        trigger @self.

        [method@Gtk.AlternativeTrigger.get_first] will return
        the other one.

        Parameters:


        Returns:
            ShortcutTrigger: the second alternative trigger

        """
        ...

    @classmethod
    def new(cls, first: ShortcutTrigger, second: ShortcutTrigger) -> AlternativeTrigger:
        """
        Creates a `GtkShortcutTrigger` that will trigger whenever
        either of the two given triggers gets triggered.

        Note that nesting is allowed, so if you want more than two
        alternative, create a new alternative trigger for each option.

        Parameters:
            first: The first trigger that may trigger
            second: The second trigger that may trigger

        Returns:
            ShortcutTrigger: a new `GtkShortcutTrigger`

        """
        ...

class AlternativeTriggerClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class AnyFilter(MultiFilter, Gio.ListModel, Buildable):
    """
    `GtkAnyFilter` matches an item when at least one of its filters matches.

    To add filters to a `GtkAnyFilter`, use [method@Gtk.MultiFilter.append].

    :Constructors:

    ::

        AnyFilter(**properties)
        new() -> Gtk.AnyFilter

    Object GtkAnyFilter

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Properties from GtkMultiFilter:
      item-type -> GType: item-type
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkFilter:
      changed (GtkFilterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(MultiFilter.Props, Gio.ListModel.Props, Buildable.Props): ...

    @classmethod
    def new(cls) -> AnyFilter:
        """
        Creates a new empty \"any\" filter.

        Use [method@Gtk.MultiFilter.append] to add filters to it.

        This filter matches an item if any of the filters added to it
        matches the item. In particular, this means that if no filter
        has been added to it, the filter matches no item.

        Parameters:


        Returns:
            AnyFilter: a new `GtkAnyFilter`

        """
        ...

class AnyFilterClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

@deprecated(
    "The application selection widgets should be implemented according to the design of each platform and/or application requiring them."
)
class AppChooser(GObject.GInterface):
    """
    `GtkAppChooser` is an interface for widgets which allow the user to
    choose an application.

    The main objects that implement this interface are
    [class@Gtk.AppChooserWidget],
    [class@Gtk.AppChooserDialog] and [class@Gtk.AppChooserButton].

    Applications are represented by GIO `GAppInfo` objects here.
    GIO has a concept of recommended and fallback applications for a
    given content type. Recommended applications are those that claim
    to handle the content type itself, while fallback also includes
    applications that handle a more generic content type. GIO also
    knows the default and last-used application for a given content
    type. The `GtkAppChooserWidget` provides detailed control over
    whether the shown list of applications should include default,
    recommended or fallback applications.

    To obtain the application that has been selected in a `GtkAppChooser`,
    use [method@Gtk.AppChooser.get_app_info].



    Interface GtkAppChooser

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def __init__(self, content_type: str = ...): ...
    @deprecated("This widget will be removed in GTK 5")
    def get_app_info(self) -> Optional[Gio.AppInfo]:
        """
        Returns the currently selected application.

        Parameters:


        Returns:
            Optional[Gio.AppInfo]: a `GAppInfo` for the
        currently selected application

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_content_type(self) -> str:
        """
        Returns the content type for which the `GtkAppChooser`
        shows applications.

        Parameters:


        Returns:
            str: the content type of @self. Free with g_free()

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def refresh(self) -> None:
        """
        Reloads the list of applications.

        Parameters:


        Returns:

        """
        ...

@deprecated(
    "The application selection widgets should be implemented according to the design of each platform and/or application requiring them."
)
class AppChooserButton(Widget, Accessible, AppChooser, Buildable, ConstraintTarget):
    """
    The `GtkAppChooserButton` lets the user select an application.

    ![An example GtkAppChooserButton](appchooserbutton.png)

    Initially, a `GtkAppChooserButton` selects the first application
    in its list, which will either be the most-recently used application
    or, if [property@Gtk.AppChooserButton:show-default-item] is %TRUE, the
    default application.

    The list of applications shown in a `GtkAppChooserButton` includes
    the recommended applications for the given content type. When
    [property@Gtk.AppChooserButton:show-default-item] is set, the default
    application is also included. To let the user chooser other applications,
    you can set the [property@Gtk.AppChooserButton:show-dialog-item] property,
    which allows to open a full [class@Gtk.AppChooserDialog].

    It is possible to add custom items to the list, using
    [method@Gtk.AppChooserButton.append_custom_item]. These items cause
    the [signal@Gtk.AppChooserButton::custom-item-activated] signal to be
    emitted when they are selected.

    To track changes in the selected application, use the
    [signal@Gtk.AppChooserButton::changed] signal.

    ## CSS nodes

    `GtkAppChooserButton` has a single CSS node with the name “appchooserbutton”.

    :Constructors:

    ::

        AppChooserButton(**properties)
        new(content_type:str) -> Gtk.Widget

    Object GtkAppChooserButton

    Signals from GtkAppChooserButton:
      changed ()
      custom-item-activated (gchararray)
      activate ()

    Properties from GtkAppChooserButton:
      show-dialog-item -> gboolean: show-dialog-item
      show-default-item -> gboolean: show-default-item
      heading -> gchararray: heading
      modal -> gboolean: modal

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        AppChooser.Props,
        Buildable.Props,
        ConstraintTarget.Props,
    ):
        heading: Optional[str]
        """
        The text to show at the top of the dialog that can be
        opened from the button.

        The string may contain Pango markup.
        """
        modal: bool
        """
        Whether the app chooser dialog should be modal.
        """
        show_default_item: bool
        """
        Determines whether the dropdown menu shows the default application
        on top for the provided content type.
        """
        show_dialog_item: bool
        """
        Determines whether the dropdown menu shows an item to open
        a `GtkAppChooserDialog`.
        """

    props: Props = ...
    def __init__(
        self,
        heading: str = ...,
        modal: bool = ...,
        show_default_item: bool = ...,
        show_dialog_item: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        content_type: str = ...,
    ): ...
    @deprecated("This widget will be removed in GTK 5")
    def append_custom_item(self, name: str, label: str, icon: Gio.Icon) -> None:
        """
        Appends a custom item to the list of applications that is shown
        in the popup.

        The item name must be unique per-widget. Clients can use the
        provided name as a detail for the
        [signal@Gtk.AppChooserButton::custom-item-activated] signal, to add a
        callback for the activation of a particular custom item in the list.

        See also [method@Gtk.AppChooserButton.append_separator].

        Parameters:
            name: the name of the custom item
            label: the label for the custom item
            icon: the icon for the custom item

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def append_separator(self) -> None:
        """
        Appends a separator to the list of applications that is shown
        in the popup.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_heading(self) -> Optional[str]:
        """
        Returns the text to display at the top of the dialog.

        Parameters:


        Returns:
            Optional[str]: the text to display at the top of the dialog,
        or %NULL, in which case a default text is displayed

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_modal(self) -> bool:
        """
        Gets whether the dialog is modal.

        Parameters:


        Returns:
            bool: %TRUE if the dialog is modal

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_show_default_item(self) -> bool:
        """
        Returns whether the dropdown menu should show the default
        application at the top.

        Parameters:


        Returns:
            bool: the value of [property@Gtk.AppChooserButton:show-default-item]

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_show_dialog_item(self) -> bool:
        """
        Returns whether the dropdown menu shows an item
        for a `GtkAppChooserDialog`.

        Parameters:


        Returns:
            bool: the value of [property@Gtk.AppChooserButton:show-dialog-item]

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    @classmethod
    def new(cls, content_type: str) -> AppChooserButton:
        """
        Creates a new `GtkAppChooserButton` for applications
        that can handle content of the given type.

        Parameters:
            content_type: the content type to show applications for

        Returns:
            Widget: a newly created `GtkAppChooserButton`

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_active_custom_item(self, name: str) -> None:
        """
        Selects a custom item.

        See [method@Gtk.AppChooserButton.append_custom_item].

        Use [method@Gtk.AppChooser.refresh] to bring the selection
        to its initial state.

        Parameters:
            name: the name of the custom item

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_heading(self, heading: str) -> None:
        """
        Sets the text to display at the top of the dialog.

        If the heading is not set, the dialog displays a default text.

        Parameters:
            heading: a string containing Pango markup

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_modal(self, modal: bool) -> None:
        """
        Sets whether the dialog should be modal.

        Parameters:
            modal: %TRUE to make the dialog modal

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_show_default_item(self, setting: bool) -> None:
        """
        Sets whether the dropdown menu of this button should show the
        default application for the given content type at top.

        Parameters:
            setting: the new value for [property@Gtk.AppChooserButton:show-default-item]

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_show_dialog_item(self, setting: bool) -> None:
        """
        Sets whether the dropdown menu of this button should show an
        entry to trigger a `GtkAppChooserDialog`.

        Parameters:
            setting: the new value for [property@Gtk.AppChooserButton:show-dialog-item]

        Returns:

        """
        ...

@deprecated(
    "The application selection widgets should be implemented according to the design of each platform and/or application requiring them."
)
class AppChooserDialog(
    Dialog,
    Accessible,
    AppChooser,
    Buildable,
    ConstraintTarget,
    Native,
    Root,
    ShortcutManager,
):
    """
    `GtkAppChooserDialog` shows a `GtkAppChooserWidget` inside a `GtkDialog`.

    ![An example GtkAppChooserDialog](appchooserdialog.png)

    Note that `GtkAppChooserDialog` does not have any interesting methods
    of its own. Instead, you should get the embedded `GtkAppChooserWidget`
    using [method@Gtk.AppChooserDialog.get_widget] and call its methods if
    the generic [iface@Gtk.AppChooser] interface is not sufficient for
    your needs.

    To set the heading that is shown above the `GtkAppChooserWidget`,
    use [method@Gtk.AppChooserDialog.set_heading].

    ## CSS nodes

    `GtkAppChooserDialog` has a single CSS node with the name `window` and style
    class `.appchooser`.

    :Constructors:

    ::

        AppChooserDialog(**properties)
        new(parent:Gtk.Window=None, flags:Gtk.DialogFlags, file:Gio.File) -> Gtk.Widget
        new_for_content_type(parent:Gtk.Window=None, flags:Gtk.DialogFlags, content_type:str) -> Gtk.Widget

    Object GtkAppChooserDialog

    Properties from GtkAppChooserDialog:
      gfile -> GFile: gfile
      heading -> gchararray: heading

    Signals from GtkDialog:
      response (gint)
      close ()

    Properties from GtkDialog:
      use-header-bar -> gint: use-header-bar

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Dialog.Props,
        Accessible.Props,
        AppChooser.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ):
        gfile: Gio.File
        """
        The GFile used by the `GtkAppChooserDialog`.

        The dialog's `GtkAppChooserWidget` content type will
        be guessed from the file, if present.
        """
        heading: Optional[str]
        """
        The text to show at the top of the dialog.

        The string may contain Pango markup.
        """

    props: Props = ...
    def __init__(
        self,
        gfile: Gio.File = ...,
        heading: str = ...,
        use_header_bar: int = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        content_type: str = ...,
    ): ...
    @deprecated("This widget will be removed in GTK 5")
    def get_heading(self) -> Optional[str]:
        """
        Returns the text to display at the top of the dialog.

        Parameters:


        Returns:
            Optional[str]: the text to display at the top of the dialog,
        or %NULL, in which case a default text is displayed

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_widget(self) -> Widget:
        """
        Returns the `GtkAppChooserWidget` of this dialog.

        Parameters:


        Returns:
            Widget: the `GtkAppChooserWidget` of @self

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    @classmethod
    def new(
        cls, parent: Optional[Window], flags: DialogFlags, file: Gio.File
    ) -> AppChooserDialog:
        """
        Creates a new `GtkAppChooserDialog` for the provided `GFile`.

        The dialog will show applications that can open the file.

        Parameters:
            parent: a `GtkWindow`
            flags: flags for this dialog
            file: a `GFile`

        Returns:
            Widget: a newly created `GtkAppChooserDialog`

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    @classmethod
    def new_for_content_type(
        cls, parent: Optional[Window], flags: DialogFlags, content_type: str
    ) -> AppChooserDialog:
        """
        Creates a new `GtkAppChooserDialog` for the provided content type.

        The dialog will show applications that can open the content type.

        Parameters:
            parent: a `GtkWindow`
            flags: flags for this dialog
            content_type: a content type string

        Returns:
            Widget: a newly created `GtkAppChooserDialog`

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_heading(self, heading: str) -> None:
        """
        Sets the text to display at the top of the dialog.

        If the heading is not set, the dialog displays a default text.

        Parameters:
            heading: a string containing Pango markup

        Returns:

        """
        ...

@deprecated(
    "The application selection widgets should be implemented according to the design of each platform and/or application requiring them."
)
class AppChooserWidget(Widget, Accessible, AppChooser, Buildable, ConstraintTarget):
    """
    `GtkAppChooserWidget` is a widget for selecting applications.

    It is the main building block for [class@Gtk.AppChooserDialog].
    Most applications only need to use the latter; but you can use
    this widget as part of a larger widget if you have special needs.

    `GtkAppChooserWidget` offers detailed control over what applications
    are shown, using the
    [property@Gtk.AppChooserWidget:show-default],
    [property@Gtk.AppChooserWidget:show-recommended],
    [property@Gtk.AppChooserWidget:show-fallback],
    [property@Gtk.AppChooserWidget:show-other] and
    [property@Gtk.AppChooserWidget:show-all] properties. See the
    [iface@Gtk.AppChooser] documentation for more information about these
    groups of applications.

    To keep track of the selected application, use the
    [signal@Gtk.AppChooserWidget::application-selected] and
    [signal@Gtk.AppChooserWidget::application-activated] signals.

    ## CSS nodes

    `GtkAppChooserWidget` has a single CSS node with name appchooser.

    :Constructors:

    ::

        AppChooserWidget(**properties)
        new(content_type:str) -> Gtk.Widget

    Object GtkAppChooserWidget

    Signals from GtkAppChooserWidget:
      application-selected (GAppInfo)
      application-activated (GAppInfo)

    Properties from GtkAppChooserWidget:
      show-default -> gboolean: show-default
      show-recommended -> gboolean: show-recommended
      show-fallback -> gboolean: show-fallback
      show-other -> gboolean: show-other
      show-all -> gboolean: show-all
      default-text -> gchararray: default-text

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        AppChooser.Props,
        Buildable.Props,
        ConstraintTarget.Props,
    ):
        default_text: Optional[str]
        """
        The text that appears in the widget when there are no applications
        for the given content type.
        """
        show_all: bool
        """
        If %TRUE, the app chooser presents all applications
        in a single list, without subsections for default,
        recommended or related applications.
        """
        show_default: bool
        """
        Determines whether the app chooser should show the default
        handler for the content type in a separate section.

        If %FALSE, the default handler is listed among the recommended
        applications.
        """
        show_fallback: bool
        """
        Determines whether the app chooser should show a section
        for fallback applications.

        If %FALSE, the fallback applications are listed among the
        other applications.
        """
        show_other: bool
        """
        Determines whether the app chooser should show a section
        for other applications.
        """
        show_recommended: bool
        """
        Determines whether the app chooser should show a section
        for recommended applications.

        If %FALSE, the recommended applications are listed
        among the other applications.
        """

    props: Props = ...
    def __init__(
        self,
        default_text: str = ...,
        show_all: bool = ...,
        show_default: bool = ...,
        show_fallback: bool = ...,
        show_other: bool = ...,
        show_recommended: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        content_type: str = ...,
    ): ...
    @deprecated("This widget will be removed in GTK 5")
    def get_default_text(self) -> Optional[str]:
        """
        Returns the text that is shown if there are not applications
        that can handle the content type.

        Parameters:


        Returns:
            Optional[str]: the value of [property@Gtk.AppChooserWidget:default-text]

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_show_all(self) -> bool:
        """
        Gets whether the app chooser should show all applications
        in a flat list.

        Parameters:


        Returns:
            bool: the value of [property@Gtk.AppChooserWidget:show-all]

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_show_default(self) -> bool:
        """
        Gets whether the app chooser should show the default handler
        for the content type in a separate section.

        Parameters:


        Returns:
            bool: the value of [property@Gtk.AppChooserWidget:show-default]

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_show_fallback(self) -> bool:
        """
        Gets whether the app chooser should show related applications
        for the content type in a separate section.

        Parameters:


        Returns:
            bool: the value of [property@Gtk.AppChooserWidget:show-fallback]

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_show_other(self) -> bool:
        """
        Gets whether the app chooser should show applications
        which are unrelated to the content type.

        Parameters:


        Returns:
            bool: the value of [property@Gtk.AppChooserWidget:show-other]

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_show_recommended(self) -> bool:
        """
        Gets whether the app chooser should show recommended applications
        for the content type in a separate section.

        Parameters:


        Returns:
            bool: the value of [property@Gtk.AppChooserWidget:show-recommended]

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    @classmethod
    def new(cls, content_type: str) -> AppChooserWidget:
        """
        Creates a new `GtkAppChooserWidget` for applications
        that can handle content of the given type.

        Parameters:
            content_type: the content type to show applications for

        Returns:
            Widget: a newly created `GtkAppChooserWidget`

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_default_text(self, text: str) -> None:
        """
        Sets the text that is shown if there are not applications
        that can handle the content type.

        Parameters:
            text: the new value for [property@Gtk.AppChooserWidget:default-text]

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_show_all(self, setting: bool) -> None:
        """
        Sets whether the app chooser should show all applications
        in a flat list.

        Parameters:
            setting: the new value for [property@Gtk.AppChooserWidget:show-all]

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_show_default(self, setting: bool) -> None:
        """
        Sets whether the app chooser should show the default handler
        for the content type in a separate section.

        Parameters:
            setting: the new value for [property@Gtk.AppChooserWidget:show-default]

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_show_fallback(self, setting: bool) -> None:
        """
        Sets whether the app chooser should show related applications
        for the content type in a separate section.

        Parameters:
            setting: the new value for [property@Gtk.AppChooserWidget:show-fallback]

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_show_other(self, setting: bool) -> None:
        """
        Sets whether the app chooser should show applications
        which are unrelated to the content type.

        Parameters:
            setting: the new value for [property@Gtk.AppChooserWidget:show-other]

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_show_recommended(self, setting: bool) -> None:
        """
        Sets whether the app chooser should show recommended applications
        for the content type in a separate section.

        Parameters:
            setting: the new value for [property@Gtk.AppChooserWidget:show-recommended]

        Returns:

        """
        ...

class Application(Gio.Application, Gio.ActionGroup, Gio.ActionMap):
    """
    `GtkApplication` is a high-level API for writing applications.

    It supports many aspects of writing a GTK application in a convenient
    fashion, without enforcing a one-size-fits-all model.

    Currently, `GtkApplication` handles GTK initialization, application
    uniqueness, session management, provides some basic scriptability and
    desktop shell integration by exporting actions and menus and manages a
    list of toplevel windows whose life-cycle is automatically tied to the
    life-cycle of your application.

    While `GtkApplication` works fine with plain [class@Gtk.Window]s, it is
    recommended to use it together with [class@Gtk.ApplicationWindow].

    ## Automatic resources

    `GtkApplication` will automatically load menus from the `GtkBuilder`
    resource located at \"gtk/menus.ui\", relative to the application's
    resource base path (see [method@Gio.Application.set_resource_base_path]).
    The menu with the ID \"menubar\" is taken as the application's
    menubar. Additional menus (most interesting submenus) can be named
    and accessed via [method@Gtk.Application.get_menu_by_id] which allows for
    dynamic population of a part of the menu structure.

    Note that automatic resource loading uses the resource base path
    that is set at construction time and will not work if the resource
    base path is changed at a later time.

    It is also possible to provide the menubar manually using
    [method@Gtk.Application.set_menubar].

    `GtkApplication` will also automatically setup an icon search path for
    the default icon theme by appending \"icons\" to the resource base
    path. This allows your application to easily store its icons as
    resources. See [method@Gtk.IconTheme.add_resource_path] for more
    information.

    If there is a resource located at `gtk/help-overlay.ui` which
    defines a [class@Gtk.ShortcutsWindow] with ID `help_overlay` then
    `GtkApplication` associates an instance of this shortcuts window with
    each [class@Gtk.ApplicationWindow] and sets up the keyboard accelerator
    <kbd>Control</kbd>+<kbd>?</kbd> to open it. To create a menu item that
    displays the shortcuts window, associate the item with the action
    `win.show-help-overlay`.

    ## A simple application

    [A simple example](https://gitlab.gnome.org/GNOME/gtk/tree/main/examples/bp/bloatpad.c)
    is available in the GTK source code repository

    `GtkApplication` optionally registers with a session manager of the
    users session (if you set the [property@Gtk.Application:register-session]
    property) and offers various functionality related to the session
    life-cycle.

    An application can block various ways to end the session with
    the [method@Gtk.Application.inhibit] function. Typical use cases for
    this kind of inhibiting are long-running, uninterruptible operations,
    such as burning a CD or performing a disk backup. The session
    manager may not honor the inhibitor, but it can be expected to
    inform the user about the negative consequences of ending the
    session while inhibitors are present.

    ## See Also

    [HowDoI: Using GtkApplication](https://wiki.gnome.org/HowDoI/GtkApplication),
    [Getting Started with GTK: Basics](getting_started.html#basics)

    :Constructors:

    ::

        Application(**properties)
        new(application_id:str=None, flags:Gio.ApplicationFlags) -> Gtk.Application

    Object GtkApplication

    Signals from GtkApplication:
      window-added (GtkWindow)
      window-removed (GtkWindow)
      query-end ()

    Properties from GtkApplication:
      register-session -> gboolean: register-session
      screensaver-active -> gboolean: screensaver-active
      menubar -> GMenuModel: menubar
      active-window -> GtkWindow: active-window

    Signals from GActionGroup:
      action-added (gchararray)
      action-removed (gchararray)
      action-enabled-changed (gchararray, gboolean)
      action-state-changed (gchararray, GVariant)

    Signals from GApplication:
      activate ()
      startup ()
      shutdown ()
      open (gpointer, gint, gchararray)
      command-line (GApplicationCommandLine) -> gint
      handle-local-options (GVariantDict) -> gint
      name-lost () -> gboolean

    Properties from GApplication:
      application-id -> gchararray: Application identifier
        The unique identifier for the application
      flags -> GApplicationFlags: Application flags
        Flags specifying the behaviour of the application
      resource-base-path -> gchararray: Resource base path
        The base resource path for the application
      is-registered -> gboolean: Is registered
        If g_application_register() has been called
      is-remote -> gboolean: Is remote
        If this application instance is remote
      inactivity-timeout -> guint: Inactivity timeout
        Time (ms) to stay alive after becoming idle
      action-group -> GActionGroup: Action group
        The group of actions that the application exports
      is-busy -> gboolean: Is busy
        If this application is currently marked busy

    Signals from GActionGroup:
      action-added (gchararray)
      action-removed (gchararray)
      action-enabled-changed (gchararray, gboolean)
      action-state-changed (gchararray, GVariant)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Gio.Application.Props, Gio.ActionGroup.Props, Gio.ActionMap.Props):
        active_window: Optional[Window]
        """
        The currently focused window of the application.
        """
        menubar: Optional[Gio.MenuModel]
        """
        The `GMenuModel` to be used for the application's menu bar.
        """
        register_session: bool
        """
        Set this property to `TRUE` to register with the session manager.

        This will make GTK track the session state (such as the
        [property@Gtk.Application:screensaver-active] property).
        """
        screensaver_active: bool
        """
        This property is `TRUE` if GTK believes that the screensaver is
        currently active.

        GTK only tracks session state (including this) when
        [property@Gtk.Application:register-session] is set to %TRUE.

        Tracking the screensaver state is currently only supported on
        Linux.
        """

    props: Props = ...
    parent_instance: Gio.Application = ...
    def __init__(
        self,
        menubar: Optional[Gio.MenuModel] = ...,
        register_session: bool = ...,
        action_group: Optional[Gio.ActionGroup] = ...,
        application_id: Optional[str] = ...,
        flags: Gio.ApplicationFlags = ...,
        inactivity_timeout: int = ...,
        resource_base_path: Optional[str] = ...,
    ): ...
    def add_window(self, window: Window) -> None:
        """
        Adds a window to `application`.

        This call can only happen after the `application` has started;
        typically, you should add new application windows in response
        to the emission of the `GApplication::activate` signal.

        This call is equivalent to setting the [property@Gtk.Window:application]
        property of `window` to `application`.

        Normally, the connection between the application and the window
        will remain until the window is destroyed, but you can explicitly
        remove it with [method@Gtk.Application.remove_window].

        GTK will keep the `application` running as long as it has
        any windows.

        Parameters:
            window: a `GtkWindow`

        Returns:

        """
        ...

    def do_window_added(self, window: Window) -> None: ...
    def do_window_removed(self, window: Window) -> None: ...
    def get_accels_for_action(self, detailed_action_name: str) -> list[str]:
        """
        Gets the accelerators that are currently associated with
        the given action.

        Parameters:
            detailed_action_name: a detailed action name, specifying an action
        and target to obtain accelerators for

        Returns:
            list[str]:
        accelerators for `detailed_action_name`

        """
        ...

    def get_actions_for_accel(self, accel: str) -> list[str]:
        """
        Returns the list of actions (possibly empty) that `accel` maps to.

        Each item in the list is a detailed action name in the usual form.

        This might be useful to discover if an accel already exists in
        order to prevent installation of a conflicting accelerator (from
        an accelerator editor or a plugin system, for example). Note that
        having more than one action per accelerator may not be a bad thing
        and might make sense in cases where the actions never appear in the
        same context.

        In case there are no actions for a given accelerator, an empty array
        is returned. `NULL` is never returned.

        It is a programmer error to pass an invalid accelerator string.

        If you are unsure, check it with [func@Gtk.accelerator_parse] first.

        Parameters:
            accel: an accelerator that can be parsed by [func@Gtk.accelerator_parse]

        Returns:
            list[str]: a %NULL-terminated array of actions for `accel`

        """
        ...

    def get_active_window(self) -> Optional[Window]:
        """
        Gets the “active” window for the application.

        The active window is the one that was most recently focused (within
        the application). This window may not have the focus at the moment
        if another application has it — this is just the most
        recently-focused window within this application.

        Parameters:


        Returns:
            Optional[Window]: the active window

        """
        ...

    def get_menu_by_id(self, id: str) -> Optional[Gio.Menu]:
        """
        Gets a menu from automatically loaded resources.

        See [the section on Automatic resources](class.Application.html#automatic-resources)
        for more information.

        Parameters:
            id: the id of the menu to look up

        Returns:
            Optional[Gio.Menu]: Gets the menu with the
        given id from the automatically loaded resources

        """
        ...

    def get_menubar(self) -> Optional[Gio.MenuModel]:
        """
        Returns the menu model that has been set with
        [method@Gtk.Application.set_menubar].

        Parameters:


        Returns:
            Optional[Gio.MenuModel]: the menubar for windows of `application`

        """
        ...

    def get_window_by_id(self, id: int) -> Optional[Window]:
        """
        Returns the [class@Gtk.ApplicationWindow] with the given ID.

        The ID of a `GtkApplicationWindow` can be retrieved with
        [method@Gtk.ApplicationWindow.get_id].

        Parameters:
            id: an identifier number

        Returns:
            Optional[Window]: the window for the given `id`

        """
        ...

    def get_windows(self) -> list[Window]:
        """
        Gets a list of the [class@Gtk.Window] instances associated with `application`.

        The list is sorted by most recently focused window, such that the first
        element is the currently focused window. (Useful for choosing a parent
        for a transient window.)

        The list that is returned should not be modified in any way. It will
        only remain valid until the next focus change or window creation or
        deletion.

        Parameters:


        Returns:
            list[Window]: a `GList` of `GtkWindow`
        instances

        """
        ...

    def inhibit(
        self,
        window: Optional[Window],
        flags: ApplicationInhibitFlags,
        reason: Optional[str] = None,
    ) -> int:
        """
        Inform the session manager that certain types of actions should be
        inhibited.

        This is not guaranteed to work on all platforms and for all types of
        actions.

        Applications should invoke this method when they begin an operation
        that should not be interrupted, such as creating a CD or DVD. The
        types of actions that may be blocked are specified by the `flags`
        parameter. When the application completes the operation it should
        call [method@Gtk.Application.uninhibit] to remove the inhibitor. Note
        that an application can have multiple inhibitors, and all of them must
        be individually removed. Inhibitors are also cleared when the
        application exits.

        Applications should not expect that they will always be able to block
        the action. In most cases, users will be given the option to force
        the action to take place.

        The `reason` message should be short and to the point.

        If `window` is given, the session manager may point the user to
        this window to find out more about why the action is inhibited.

        Parameters:
            window: a `GtkWindow`
            flags: what types of actions should be inhibited
            reason: a short, human-readable string that explains
        why these operations are inhibited

        Returns:
            int: A non-zero cookie that is used to uniquely identify this
        request. It should be used as an argument to [method@Gtk.Application.uninhibit]
        in order to remove the request. If the platform does not support
        inhibiting or the request failed for some reason, 0 is returned.

        """
        ...

    def list_action_descriptions(self) -> list[str]:
        """
        Lists the detailed action names which have associated accelerators.

        See [method@Gtk.Application.set_accels_for_action].

        Parameters:


        Returns:
            list[str]: the detailed action names

        """
        ...

    @classmethod
    def new(
        cls, application_id: Optional[str], flags: Gio.ApplicationFlags
    ) -> Application:
        """
        Creates a new `GtkApplication` instance.

        When using `GtkApplication`, it is not necessary to call [func@Gtk.init]
        manually. It is called as soon as the application gets registered as
        the primary instance.

        Concretely, [func@Gtk.init] is called in the default handler for the
        `GApplication::startup` signal. Therefore, `GtkApplication` subclasses should
        always chain up in their `GApplication::startup` handler before using any GTK
        API.

        Note that commandline arguments are not passed to [func@Gtk.init].

        If `application_id` is not %NULL, then it must be valid. See
        `g_application_id_is_valid()`.

        If no application ID is given then some features (most notably application
        uniqueness) will be disabled.

        Parameters:
            application_id: The application ID
            flags: the application flags

        Returns:
            Application: a new `GtkApplication` instance

        """
        ...

    def remove_window(self, window: Window) -> None:
        """
        Remove a window from `application`.

        If `window` belongs to `application` then this call is equivalent to
        setting the [property@Gtk.Window:application] property of `window` to
        `NULL`.

        The application may stop running as a result of a call to this
        function, if `window` was the last window of the `application`.

        Parameters:
            window: a `GtkWindow`

        Returns:

        """
        ...

    def set_accels_for_action(
        self, detailed_action_name: str, accels: Sequence[str]
    ) -> None:
        """
        Sets zero or more keyboard accelerators that will trigger the
        given action.

        The first item in `accels` will be the primary accelerator, which may be
        displayed in the UI.

        To remove all accelerators for an action, use an empty, zero-terminated
        array for `accels`.

        For the `detailed_action_name`, see `g_action_parse_detailed_name()` and
        `g_action_print_detailed_name()`.

        Parameters:
            detailed_action_name: a detailed action name, specifying an action
        and target to associate accelerators with
            accels: a list of accelerators in the format
        understood by [func@Gtk.accelerator_parse]

        Returns:

        """
        ...

    def set_menubar(self, menubar: Optional[Gio.MenuModel] = None) -> None:
        """
        Sets or unsets the menubar for windows of `application`.

        This is a menubar in the traditional sense.

        This can only be done in the primary instance of the application,
        after it has been registered. `GApplication::startup` is a good place
        to call this.

        Depending on the desktop environment, this may appear at the top of
        each window, or at the top of the screen. In some environments, if
        both the application menu and the menubar are set, the application
        menu will be presented as if it were the first item of the menubar.
        Other environments treat the two as completely separate — for example,
        the application menu may be rendered by the desktop shell while the
        menubar (if set) remains in each individual window.

        Use the base `GActionMap` interface to add actions, to respond to the
        user selecting these menu items.

        Parameters:
            menubar: a `GMenuModel`

        Returns:

        """
        ...

    def uninhibit(self, cookie: int) -> None:
        """
        Removes an inhibitor that has been previously established.

        See [method@Gtk.Application.inhibit].

        Inhibitors are also cleared when the application exits.

        Parameters:
            cookie: a cookie that was returned by [method@Gtk.Application.inhibit]

        Returns:

        """
        ...

class ApplicationClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ApplicationClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: Gio.ApplicationClass = ...
    window_added: Callable[[Application, Window], None] = ...
    window_removed: Callable[[Application, Window], None] = ...
    padding: list[None] = ...

class ApplicationWindow(
    Window,
    Gio.ActionGroup,
    Gio.ActionMap,
    Accessible,
    Buildable,
    ConstraintTarget,
    Native,
    Root,
    ShortcutManager,
):
    """
    `GtkApplicationWindow` is a `GtkWindow` subclass that integrates with
    `GtkApplication`.

    Notably, `GtkApplicationWindow` can handle an application menubar.

    This class implements the `GActionGroup` and `GActionMap` interfaces,
    to let you add window-specific actions that will be exported by the
    associated [class@Gtk.Application], together with its application-wide
    actions. Window-specific actions are prefixed with the “win.”
    prefix and application-wide actions are prefixed with the “app.”
    prefix. Actions must be addressed with the prefixed name when
    referring to them from a `GMenuModel`.

    Note that widgets that are placed inside a `GtkApplicationWindow`
    can also activate these actions, if they implement the
    [iface@Gtk.Actionable] interface.

    The settings [property@Gtk.Settings:gtk-shell-shows-app-menu] and
    [property@Gtk.Settings:gtk-shell-shows-menubar] tell GTK whether the
    desktop environment is showing the application menu and menubar
    models outside the application as part of the desktop shell.
    For instance, on OS X, both menus will be displayed remotely;
    on Windows neither will be.

    If the desktop environment does not display the menubar, then
    `GtkApplicationWindow` will automatically show a menubar for it.
    This behaviour can be overridden with the
    [property@Gtk.ApplicationWindow:show-menubar] property. If the
    desktop environment does not display the application menu, then
    it will automatically be included in the menubar or in the windows
    client-side decorations.

    See [class@Gtk.PopoverMenu] for information about the XML language
    used by `GtkBuilder` for menu models.

    See also: [method@Gtk.Application.set_menubar].

    ## A GtkApplicationWindow with a menubar

    The code sample below shows how to set up a `GtkApplicationWindow`
    with a menu bar defined on the [class@Gtk.Application]:

    ```c
    GtkApplication *app = gtk_application_new (\"org.gtk.test\", 0);

    GtkBuilder *builder = gtk_builder_new_from_string (
    \"<interface>\"
    \" <menu id='menubar'>\"
    \" <submenu>\"
    \" <attribute name='label' translatable='yes'>_Edit</attribute>\"
    \" <item>\"
    \" <attribute name='label' translatable='yes'>_Copy</attribute>\"
    \" <attribute name='action'>win.copy</attribute>\"
    \" </item>\"
    \" <item>\"
    \" <attribute name='label' translatable='yes'>_Paste</attribute>\"
    \" <attribute name='action'>win.paste</attribute>\"
    \" </item>\"
    \" </submenu>\"
    \" </menu>\"
    \"</interface>\",
    -1);

    GMenuModel *menubar = G_MENU_MODEL (gtk_builder_get_object (builder, \"menubar\"));
    gtk_application_set_menubar (GTK_APPLICATION (app), menubar);
    g_object_unref (builder);

    // ...

    GtkWidget *window = gtk_application_window_new (app);
    ```

    :Constructors:

    ::

        ApplicationWindow(**properties)
        new(application:Gtk.Application) -> Gtk.Widget

    Object GtkApplicationWindow

    Properties from GtkApplicationWindow:
      show-menubar -> gboolean: show-menubar

    Signals from GActionGroup:
      action-added (gchararray)
      action-removed (gchararray)
      action-enabled-changed (gchararray, gboolean)
      action-state-changed (gchararray, GVariant)

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Window.Props,
        Gio.ActionGroup.Props,
        Gio.ActionMap.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ):
        show_menubar: bool
        """
        If this property is %TRUE, the window will display a menubar
        unless it is shown by the desktop shell.

        See [method@Gtk.Application.set_menubar].

        If %FALSE, the window will not display a menubar, regardless
        of whether the desktop shell is showing it or not.
        """

    props: Props = ...
    parent_instance: Window = ...
    def __init__(
        self,
        show_menubar: bool = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_help_overlay(self) -> Optional[ShortcutsWindow]:
        """
        Gets the `GtkShortcutsWindow` that is associated with @window.

        See [method@Gtk.ApplicationWindow.set_help_overlay].

        Parameters:


        Returns:
            Optional[ShortcutsWindow]: the help overlay associated
        with @window

        """
        ...

    def get_id(self) -> int:
        """
        Returns the unique ID of the window.

        If the window has not yet been added to a `GtkApplication`, returns `0`.

        Parameters:


        Returns:
            int: the unique ID for @window, or `0` if the window
        has not yet been added to a `GtkApplication`

        """
        ...

    def get_show_menubar(self) -> bool:
        """
        Returns whether the window will display a menubar for the app menu
        and menubar as needed.

        Parameters:


        Returns:
            bool: %TRUE if @window will display a menubar when needed

        """
        ...

    @classmethod
    def new(cls, application: Application) -> ApplicationWindow:
        """
        Creates a new `GtkApplicationWindow`.

        Parameters:
            application: a `GtkApplication`

        Returns:
            Widget: a newly created `GtkApplicationWindow`

        """
        ...

    def set_help_overlay(self, help_overlay: Optional[ShortcutsWindow] = None) -> None:
        """
        Associates a shortcuts window with the application window.

        Additionally, sets up an action with the name
        `win.show-help-overlay` to present it.

        @window takes responsibility for destroying @help_overlay.

        Parameters:
            help_overlay: a `GtkShortcutsWindow`

        Returns:

        """
        ...

    def set_show_menubar(self, show_menubar: bool) -> None:
        """
        Sets whether the window will display a menubar for the app menu
        and menubar as needed.

        Parameters:
            show_menubar: whether to show a menubar when needed

        Returns:

        """
        ...

class ApplicationWindowClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ApplicationWindowClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WindowClass = ...
    padding: list[None] = ...

class AspectFrame(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkAspectFrame` preserves the aspect ratio of its child.

    The frame can respect the aspect ratio of the child widget,
    or use its own aspect ratio.

    # CSS nodes

    `GtkAspectFrame` uses a CSS node with name `frame`.

    # Accessibility

    Until GTK 4.10, `GtkAspectFrame` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.

    Starting from GTK 4.12, `GtkAspectFrame` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.

    :Constructors:

    ::

        AspectFrame(**properties)
        new(xalign:float, yalign:float, ratio:float, obey_child:bool) -> Gtk.Widget

    Object GtkAspectFrame

    Properties from GtkAspectFrame:
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      ratio -> gfloat: ratio
      obey-child -> gboolean: obey-child
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        child: Optional[Widget]
        """
        The child widget.
        """
        obey_child: bool
        """
        Whether the `GtkAspectFrame` should use the aspect ratio of its child.
        """
        ratio: float
        """
        The aspect ratio to be used by the `GtkAspectFrame`.

        This property is only used if
        [property@Gtk.AspectFrame:obey-child] is set to %FALSE.
        """
        xalign: float
        """
        The horizontal alignment of the child.
        """
        yalign: float
        """
        The vertical alignment of the child.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        obey_child: bool = ...,
        ratio: float = ...,
        xalign: float = ...,
        yalign: float = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @self.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @self

        """
        ...

    def get_obey_child(self) -> bool:
        """
        Returns whether the child's size request should override
        the set aspect ratio of the `GtkAspectFrame`.

        Parameters:


        Returns:
            bool: whether to obey the child's size request

        """
        ...

    def get_ratio(self) -> float:
        """
        Returns the desired aspect ratio of the child.

        Parameters:


        Returns:
            float: the desired aspect ratio

        """
        ...

    def get_xalign(self) -> float:
        """
        Returns the horizontal alignment of the child within the
        allocation of the `GtkAspectFrame`.

        Parameters:


        Returns:
            float: the horizontal alignment

        """
        ...

    def get_yalign(self) -> float:
        """
        Returns the vertical alignment of the child within the
        allocation of the `GtkAspectFrame`.

        Parameters:


        Returns:
            float: the vertical alignment

        """
        ...

    @classmethod
    def new(
        cls, xalign: float, yalign: float, ratio: float, obey_child: bool
    ) -> AspectFrame:
        """
        Create a new `GtkAspectFrame`.

        Parameters:
            xalign: Horizontal alignment of the child within the parent.
        Ranges from 0.0 (left aligned) to 1.0 (right aligned)
            yalign: Vertical alignment of the child within the parent.
        Ranges from 0.0 (top aligned) to 1.0 (bottom aligned)
            ratio: The desired aspect ratio.
            obey_child: If %TRUE, @ratio is ignored, and the aspect
        ratio is taken from the requistion of the child.

        Returns:
            Widget: the new `GtkAspectFrame`.

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @self.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_obey_child(self, obey_child: bool) -> None:
        """
        Sets whether the aspect ratio of the child's size
        request should override the set aspect ratio of
        the `GtkAspectFrame`.

        Parameters:
            obey_child: If %TRUE, @ratio is ignored, and the aspect
        ratio is taken from the requisition of the child.

        Returns:

        """
        ...

    def set_ratio(self, ratio: float) -> None:
        """
        Sets the desired aspect ratio of the child.

        Parameters:
            ratio: aspect ratio of the child

        Returns:

        """
        ...

    def set_xalign(self, xalign: float) -> None:
        """
        Sets the horizontal alignment of the child within the allocation
        of the `GtkAspectFrame`.

        Parameters:
            xalign: horizontal alignment, from 0.0 (left aligned) to 1.0 (right aligned)

        Returns:

        """
        ...

    def set_yalign(self, yalign: float) -> None:
        """
        Sets the vertical alignment of the child within the allocation
        of the `GtkAspectFrame`.

        Parameters:
            yalign: horizontal alignment, from 0.0 (top aligned) to 1.0 (bottom aligned)

        Returns:

        """
        ...

@deprecated("This widget will be removed in GTK 5")
class Assistant(
    Window, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager
):
    """
    `GtkAssistant` is used to represent a complex as a series of steps.

    ![An example GtkAssistant](assistant.png)

    Each step consists of one or more pages. `GtkAssistant` guides the user
    through the pages, and controls the page flow to collect the data needed
    for the operation.

    `GtkAssistant` handles which buttons to show and to make sensitive based
    on page sequence knowledge and the [enum@Gtk.AssistantPageType] of each
    page in addition to state information like the *completed* and *committed*
    page statuses.

    If you have a case that doesn’t quite fit in `GtkAssistant`s way of
    handling buttons, you can use the %GTK_ASSISTANT_PAGE_CUSTOM page
    type and handle buttons yourself.

    `GtkAssistant` maintains a `GtkAssistantPage` object for each added
    child, which holds additional per-child properties. You
    obtain the `GtkAssistantPage` for a child with [method@Gtk.Assistant.get_page].

    # GtkAssistant as GtkBuildable

    The `GtkAssistant` implementation of the `GtkBuildable` interface
    exposes the @action_area as internal children with the name
    “action_area”.

    To add pages to an assistant in `GtkBuilder`, simply add it as a
    child to the `GtkAssistant` object. If you need to set per-object
    properties, create a `GtkAssistantPage` object explicitly, and
    set the child widget as a property on it.

    # CSS nodes

    `GtkAssistant` has a single CSS node with the name window and style
    class .assistant.

    :Constructors:

    ::

        Assistant(**properties)
        new() -> Gtk.Widget

    Object GtkAssistant

    Signals from GtkAssistant:
      close ()
      cancel ()
      prepare (GtkWidget)
      apply ()
      escape ()

    Properties from GtkAssistant:
      use-header-bar -> gint: use-header-bar
      pages -> GListModel: pages

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Window.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ):
        pages: Gio.ListModel
        """
        `GListModel` containing the pages.
        """
        use_header_bar: int
        """
        %TRUE if the assistant uses a `GtkHeaderBar` for action buttons
        instead of the action-area.

        For technical reasons, this property is declared as an integer
        property, but you should only set it to %TRUE or %FALSE.
        """

    props: Props = ...
    def __init__(
        self,
        use_header_bar: int = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    @deprecated("This widget will be removed in GTK 5")
    def add_action_widget(self, child: Widget) -> None:
        """
        Adds a widget to the action area of a `GtkAssistant`.

        Parameters:
            child: a `GtkWidget`

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def append_page(self, page: Widget) -> int:
        """
        Appends a page to the @assistant.

        Parameters:
            page: a `GtkWidget`

        Returns:
            int: the index (starting at 0) of the inserted page

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def commit(self) -> None:
        """
        Erases the visited page history.

        GTK will then hide the back button on the current page,
        and removes the cancel button from subsequent pages.

        Use this when the information provided up to the current
        page is hereafter deemed permanent and cannot be modified
        or undone. For example, showing a progress page to track
        a long-running, unreversible operation after the user has
        clicked apply on a confirmation page.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_current_page(self) -> int:
        """
        Returns the page number of the current page.

        Parameters:


        Returns:
            int: The index (starting from 0) of the current
        page in the @assistant, or -1 if the @assistant has no pages,
        or no current page

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_n_pages(self) -> int:
        """
        Returns the number of pages in the @assistant

        Parameters:


        Returns:
            int: the number of pages in the @assistant

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_nth_page(self, page_num: int) -> Optional[Widget]:
        """
        Returns the child widget contained in page number @page_num.

        Parameters:
            page_num: the index of a page in the @assistant,
        or -1 to get the last page

        Returns:
            Optional[Widget]: the child widget, or %NULL
        if @page_num is out of bounds

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_page(self, child: Widget) -> AssistantPage:
        """
        Returns the `GtkAssistantPage` object for @child.

        Parameters:
            child: a child of @assistant

        Returns:
            AssistantPage: the `GtkAssistantPage` for @child

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_page_complete(self, page: Widget) -> bool:
        """
        Gets whether @page is complete.

        Parameters:
            page: a page of @assistant

        Returns:
            bool: %TRUE if @page is complete.

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_page_title(self, page: Widget) -> str:
        """
        Gets the title for @page.

        Parameters:
            page: a page of @assistant

        Returns:
            str: the title for @page

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_page_type(self, page: Widget) -> AssistantPageType:
        """
        Gets the page type of @page.

        Parameters:
            page: a page of @assistant

        Returns:
            AssistantPageType: the page type of @page

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def get_pages(self) -> Gio.ListModel:
        """
        Gets a list model of the assistant pages.

        Parameters:


        Returns:
            Gio.ListModel: A list model of the pages.

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def insert_page(self, page: Widget, position: int) -> int:
        """
        Inserts a page in the @assistant at a given position.

        Parameters:
            page: a `GtkWidget`
            position: the index (starting at 0) at which to insert the page,
        or -1 to append the page to the @assistant

        Returns:
            int: the index (starting from 0) of the inserted page

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    @classmethod
    def new(cls) -> Assistant:
        """
        Creates a new `GtkAssistant`.

        Parameters:


        Returns:
            Widget: a newly created `GtkAssistant`

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def next_page(self) -> None:
        """
        Navigate to the next page.

        It is a programming error to call this function when
        there is no next page.

        This function is for use when creating pages of the
        %GTK_ASSISTANT_PAGE_CUSTOM type.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def prepend_page(self, page: Widget) -> int:
        """
        Prepends a page to the @assistant.

        Parameters:
            page: a `GtkWidget`

        Returns:
            int: the index (starting at 0) of the inserted page

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def previous_page(self) -> None:
        """
        Navigate to the previous visited page.

        It is a programming error to call this function when
        no previous page is available.

        This function is for use when creating pages of the
        %GTK_ASSISTANT_PAGE_CUSTOM type.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def remove_action_widget(self, child: Widget) -> None:
        """
        Removes a widget from the action area of a `GtkAssistant`.

        Parameters:
            child: a `GtkWidget`

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def remove_page(self, page_num: int) -> None:
        """
        Removes the @page_num’s page from @assistant.

        Parameters:
            page_num: the index of a page in the @assistant,
        or -1 to remove the last page

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_current_page(self, page_num: int) -> None:
        """
        Switches the page to @page_num.

        Note that this will only be necessary in custom buttons,
        as the @assistant flow can be set with
        gtk_assistant_set_forward_page_func().

        Parameters:
            page_num: index of the page to switch to, starting from 0.
        If negative, the last page will be used. If greater
        than the number of pages in the @assistant, nothing
        will be done.

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_forward_page_func(
        self, page_func: Optional[Callable[..., int]] = None, *data: Any
    ) -> None:
        """
        Sets the page forwarding function to be @page_func.

        This function will be used to determine what will be
        the next page when the user presses the forward button.
        Setting @page_func to %NULL will make the assistant to
        use the default forward function, which just goes to the
        next visible page.

        Parameters:
            page_func: the `GtkAssistantPageFunc`, or %NULL
        to use the default one
            data: user data for @page_func

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_page_complete(self, page: Widget, complete: bool) -> None:
        """
        Sets whether @page contents are complete.

        This will make @assistant update the buttons state
        to be able to continue the task.

        Parameters:
            page: a page of @assistant
            complete: the completeness status of the page

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_page_title(self, page: Widget, title: str) -> None:
        """
        Sets a title for @page.

        The title is displayed in the header area of the assistant
        when @page is the current page.

        Parameters:
            page: a page of @assistant
            title: the new title for @page

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_page_type(self, page: Widget, type: AssistantPageType) -> None:
        """
        Sets the page type for @page.

        The page type determines the page behavior in the @assistant.

        Parameters:
            page: a page of @assistant
            type: the new type for @page

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def update_buttons_state(self) -> None:
        """
        Forces @assistant to recompute the buttons state.

        GTK automatically takes care of this in most situations,
        e.g. when the user goes to a different page, or when the
        visibility or completeness of a page changes.

        One situation where it can be necessary to call this
        function is when changing a value on the current page
        affects the future page flow of the assistant.

        Parameters:


        Returns:

        """
        ...

@deprecated("This object will be removed in GTK 5")
class AssistantPage(GObject.Object):
    """
    `GtkAssistantPage` is an auxiliary object used by `GtkAssistant.

    :Constructors:

    ::

        AssistantPage(**properties)

    Object GtkAssistantPage

    Properties from GtkAssistantPage:
      child -> GtkWidget: child
      page-type -> GtkAssistantPageType: page-type
      title -> gchararray: title
      complete -> gboolean: complete

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        child: Widget
        """
        The child widget.
        """
        complete: bool
        """
        Whether all required fields are filled in.

        GTK uses this information to control the sensitivity
        of the navigation buttons.
        """
        page_type: AssistantPageType
        """
        The type of the assistant page.
        """
        title: str
        """
        The title of the page.
        """

    props: Props = ...
    def __init__(
        self,
        child: Widget = ...,
        complete: bool = ...,
        page_type: AssistantPageType = ...,
        title: str = ...,
    ): ...
    @deprecated("This widget will be removed in GTK 5")
    def get_child(self) -> Widget:
        """
        Returns the child to which @page belongs.

        Parameters:


        Returns:
            Widget: the child to which @page belongs

        """
        ...

class BinLayout(LayoutManager):
    """
    `GtkBinLayout` is a `GtkLayoutManager` subclass useful for create \"bins\" of
    widgets.

    `GtkBinLayout` will stack each child of a widget on top of each other,
    using the [property@Gtk.Widget:hexpand], [property@Gtk.Widget:vexpand],
    [property@Gtk.Widget:halign], and [property@Gtk.Widget:valign] properties
    of each child to determine where they should be positioned.

    :Constructors:

    ::

        BinLayout(**properties)
        new() -> Gtk.LayoutManager

    Object GtkBinLayout

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutManager.Props): ...

    @classmethod
    def new(cls) -> BinLayout:
        """
        Creates a new `GtkBinLayout` instance.

        Parameters:


        Returns:
            LayoutManager: the newly created `GtkBinLayout`

        """
        ...

class BinLayoutClass(GObject.GPointer):
    """
    :Constructors:

    ::

        BinLayoutClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutManagerClass = ...

class Bitset(GObject.GBoxed):
    """
    A `GtkBitset` represents a set of unsigned integers.

    Another name for this data structure is \"bitmap\".

    The current implementation is based on [roaring bitmaps](https://roaringbitmap.org/).

    A bitset allows adding a set of integers and provides support for set operations
    like unions, intersections and checks for equality or if a value is contained
    in the set. `GtkBitset` also contains various functions to query metadata about
    the bitset, such as the minimum or maximum values or its size.

    The fastest way to iterate values in a bitset is [struct@Gtk.BitsetIter].

    The main use case for `GtkBitset` is implementing complex selections for
    [iface@Gtk.SelectionModel].

    :Constructors:

    ::

        new_empty() -> Gtk.Bitset
        new_range(start:int, n_items:int) -> Gtk.Bitset
    """

    class Props(GObject.GBoxed.Props): ...

    def add(self, value: int) -> bool:
        """
        Adds @value to @self if it wasn't part of it before.

        Parameters:
            value: value to add

        Returns:
            bool: %TRUE if @value was not part of @self and @self
        was changed

        """
        ...

    def add_range(self, start: int, n_items: int) -> None:
        """
        Adds all values from @start (inclusive) to @start + @n_items
        (exclusive) in @self.

        Parameters:
            start: first value to add
            n_items: number of consecutive values to add

        Returns:

        """
        ...

    def add_range_closed(self, first: int, last: int) -> None:
        """
        Adds the closed range [@first, @last], so @first, @last and all
        values in between. @first must be smaller than @last.

        Parameters:
            first: first value to add
            last: last value to add

        Returns:

        """
        ...

    def add_rectangle(self, start: int, width: int, height: int, stride: int) -> None:
        """
        Interprets the values as a 2-dimensional boolean grid with the given @stride
        and inside that grid, adds a rectangle with the given @width and @height.

        Parameters:
            start: first value to add
            width: width of the rectangle
            height: height of the rectangle
            stride: row stride of the grid

        Returns:

        """
        ...

    def contains(self, value: int) -> bool:
        """
        Checks if the given @value has been added to @self

        Parameters:
            value: the value to check

        Returns:
            bool: %TRUE if @self contains @value

        """
        ...

    def copy(self) -> Bitset:
        """
        Creates a copy of @self.

        Parameters:


        Returns:
            Bitset: A new bitset that contains the same
        values as @self

        """
        ...

    def difference(self, other: Bitset) -> None:
        """
        Sets @self to be the symmetric difference of @self and @other.

        The symmetric difference is set @self to contain all values that
        were either contained in @self or in @other, but not in both.
        This operation is also called an XOR.

        It is allowed for @self and @other to be the same bitset. The bitset
        will be emptied in that case.

        Parameters:
            other: the `GtkBitset` to compute the difference from

        Returns:

        """
        ...

    def equals(self, other: Bitset) -> bool:
        """
        Returns %TRUE if @self and @other contain the same values.

        Parameters:
            other: another `GtkBitset`

        Returns:
            bool: %TRUE if @self and @other contain the same values

        """
        ...

    def get_maximum(self) -> int:
        """
        Returns the largest value in @self.

        If @self is empty, 0 is returned.

        Parameters:


        Returns:
            int: The largest value in @self

        """
        ...

    def get_minimum(self) -> int:
        """
        Returns the smallest value in @self.

        If @self is empty, `G_MAXUINT` is returned.

        Parameters:


        Returns:
            int: The smallest value in @self

        """
        ...

    def get_nth(self, nth: int) -> int:
        """
        Returns the value of the @nth item in self.

        If @nth is >= the size of @self, 0 is returned.

        Parameters:
            nth: index of the item to get

        Returns:
            int: the value of the @nth item in @self

        """
        ...

    def get_size(self) -> int:
        """
        Gets the number of values that were added to the set.

        For example, if the set is empty, 0 is returned.

        Note that this function returns a `guint64`, because when all
        values are set, the return value is `G_MAXUINT + 1`. Unless you
        are sure this cannot happen (it can't with `GListModel`), be sure
        to use a 64bit type.

        Parameters:


        Returns:
            int: The number of values in the set.

        """
        ...

    def get_size_in_range(self, first: int, last: int) -> int:
        """
        Gets the number of values that are part of the set from @first to @last
        (inclusive).

        Note that this function returns a `guint64`, because when all values are
        set, the return value is `G_MAXUINT + 1`. Unless you are sure this cannot
        happen (it can't with `GListModel`), be sure to use a 64bit type.

        Parameters:
            first: the first element to include
            last: the last element to include

        Returns:
            int: The number of values in the set from @first to @last.

        """
        ...

    def intersect(self, other: Bitset) -> None:
        """
        Sets @self to be the intersection of @self and @other.

        In other words, remove all values from @self that are not part of @other.

        It is allowed for @self and @other to be the same bitset. Nothing will
        happen in that case.

        Parameters:
            other: the `GtkBitset` to intersect with

        Returns:

        """
        ...

    def is_empty(self) -> bool:
        """
        Check if no value is contained in bitset.

        Parameters:


        Returns:
            bool: %TRUE if @self is empty

        """
        ...

    @classmethod
    def new_empty(cls) -> Bitset:
        """
        Creates a new empty bitset.

        Parameters:


        Returns:
            Bitset: A new empty bitset

        """
        ...

    @classmethod
    def new_range(cls, start: int, n_items: int) -> Bitset:
        """
        Creates a bitset with the given range set.

        Parameters:
            start: first value to add
            n_items: number of consecutive values to add

        Returns:
            Bitset: A new bitset

        """
        ...

    def ref(self) -> Bitset:
        """
        Acquires a reference on the given `GtkBitset`.

        Parameters:


        Returns:
            Bitset: the `GtkBitset` with an additional reference

        """
        ...

    def remove(self, value: int) -> bool:
        """
        Removes @value from @self if it was part of it before.

        Parameters:
            value: value to remove

        Returns:
            bool: %TRUE if @value was part of @self and @self
        was changed

        """
        ...

    def remove_all(self) -> None:
        """
        Removes all values from the bitset so that it is empty again.

        Parameters:


        Returns:

        """
        ...

    def remove_range(self, start: int, n_items: int) -> None:
        """
        Removes all values from @start (inclusive) to @start + @n_items (exclusive)
        in @self.

        Parameters:
            start: first value to remove
            n_items: number of consecutive values to remove

        Returns:

        """
        ...

    def remove_range_closed(self, first: int, last: int) -> None:
        """
        Removes the closed range [@first, @last], so @first, @last and all
        values in between. @first must be smaller than @last.

        Parameters:
            first: first value to remove
            last: last value to remove

        Returns:

        """
        ...

    def remove_rectangle(
        self, start: int, width: int, height: int, stride: int
    ) -> None:
        """
        Interprets the values as a 2-dimensional boolean grid with the given @stride
        and inside that grid, removes a rectangle with the given @width and @height.

        Parameters:
            start: first value to remove
            width: width of the rectangle
            height: height of the rectangle
            stride: row stride of the grid

        Returns:

        """
        ...

    def shift_left(self, amount: int) -> None:
        """
        Shifts all values in @self to the left by @amount.

        Values smaller than @amount are discarded.

        Parameters:
            amount: amount to shift all values to the left

        Returns:

        """
        ...

    def shift_right(self, amount: int) -> None:
        """
        Shifts all values in @self to the right by @amount.

        Values that end up too large to be held in a #guint are discarded.

        Parameters:
            amount: amount to shift all values to the right

        Returns:

        """
        ...

    def splice(self, position: int, removed: int, added: int) -> None:
        """
        This is a support function for `GListModel` handling, by mirroring
        the `GlistModel::items-changed` signal.

        First, it \"cuts\" the values from @position to @removed from
        the bitset. That is, it removes all those values and shifts
        all larger values to the left by @removed places.

        Then, it \"pastes\" new room into the bitset by shifting all values
        larger than @position by @added spaces to the right. This frees
        up space that can then be filled.

        Parameters:
            position: position at which to slice
            removed: number of values to remove
            added: number of values to add

        Returns:

        """
        ...

    def subtract(self, other: Bitset) -> None:
        """
        Sets @self to be the subtraction of @other from @self.

        In other words, remove all values from @self that are part of @other.

        It is allowed for @self and @other to be the same bitset. The bitset
        will be emptied in that case.

        Parameters:
            other: the `GtkBitset` to subtract

        Returns:

        """
        ...

    def union(self, other: Bitset) -> None:
        """
        Sets @self to be the union of @self and @other.

        That is, add all values from @other into @self that weren't part of it.

        It is allowed for @self and @other to be the same bitset. Nothing will
        happen in that case.

        Parameters:
            other: the `GtkBitset` to union with

        Returns:

        """
        ...

    def unref(self) -> None:
        """
        Releases a reference on the given `GtkBitset`.

        If the reference was the last, the resources associated to the @self are
        freed.

        Parameters:


        Returns:

        """
        ...

class BitsetIter(GObject.GBoxed):
    """
    An opaque, stack-allocated struct for iterating
    over the elements of a `GtkBitset`.

    Before a `GtkBitsetIter` can be used, it needs to be initialized with
    [func@Gtk.BitsetIter.init_first], [func@Gtk.BitsetIter.init_last]
    or [func@Gtk.BitsetIter.init_at].

    :Constructors:

    ::

        BitsetIter()
    """

    class Props(GObject.GBoxed.Props): ...
    private_data: list[None] = ...
    def get_value(self) -> int:
        """
        Gets the current value that @iter points to.

        If @iter is not valid and [method@Gtk.BitsetIter.is_valid]
        returns %FALSE, this function returns 0.

        Parameters:


        Returns:
            int: The current value pointer to by @iter

        """
        ...

    @staticmethod
    def init_at(set: Bitset, target: int) -> Tuple[bool, BitsetIter, int]:
        """
        Initializes @iter to point to @target.

        If @target is not found, finds the next value after it.
        If no value >= @target exists in @set, this function returns %FALSE.

        Parameters:
            set: a `GtkBitset`
            target: target value to start iterating at

        Returns:
            bool: %TRUE if a value was found.
            BitsetIter: a pointer to an uninitialized `GtkBitsetIter`
            int: Set to the found value in @set
        """
        ...

    @staticmethod
    def init_first(set: Bitset) -> Tuple[bool, BitsetIter, int]:
        """
        Initializes an iterator for @set and points it to the first
        value in @set.

        If @set is empty, %FALSE is returned and @value is set to %G_MAXUINT.

        Parameters:
            set: a `GtkBitset`

        Returns:
            bool: %TRUE if @set isn't empty.
            BitsetIter: a pointer to an uninitialized `GtkBitsetIter`
            int: Set to the first value in @set
        """
        ...

    @staticmethod
    def init_last(set: Bitset) -> Tuple[bool, BitsetIter, int]:
        """
        Initializes an iterator for @set and points it to the last
        value in @set.

        If @set is empty, %FALSE is returned.

        Parameters:
            set: a `GtkBitset`

        Returns:
            bool: %TRUE if @set isn't empty.
            BitsetIter: a pointer to an uninitialized `GtkBitsetIter`
            int: Set to the last value in @set
        """
        ...

    def is_valid(self) -> bool:
        """
        Checks if @iter points to a valid value.

        Parameters:


        Returns:
            bool: %TRUE if @iter points to a valid value

        """
        ...

    def next(self) -> Tuple[bool, int]:
        """
        Moves @iter to the next value in the set.

        If it was already pointing to the last value in the set,
        %FALSE is returned and @iter is invalidated.

        Parameters:


        Returns:
            bool: %TRUE if a next value existed
            int: Set to the next value
        """
        ...

    def previous(self) -> Tuple[bool, int]:
        """
        Moves @iter to the previous value in the set.

        If it was already pointing to the first value in the set,
        %FALSE is returned and @iter is invalidated.

        Parameters:


        Returns:
            bool: %TRUE if a previous value existed
            int: Set to the previous value
        """
        ...

class BookmarkList(GObject.Object, Gio.ListModel):
    """
    `GtkBookmarkList` is a list model that wraps `GBookmarkFile`.

    It presents a `GListModel` and fills it asynchronously with the
    `GFileInfo`s returned from that function.

    The `GFileInfo`s in the list have some attributes in the recent
    namespace added: `recent::private` (boolean) and `recent:applications`
    (stringv).

    :Constructors:

    ::

        BookmarkList(**properties)
        new(filename:str=None, attributes:str=None) -> Gtk.BookmarkList

    Object GtkBookmarkList

    Properties from GtkBookmarkList:
      filename -> gchararray: filename
      attributes -> gchararray: attributes
      io-priority -> gint: io-priority
      item-type -> GType: item-type
      loading -> gboolean: loading
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gio.ListModel.Props):
        attributes: Optional[str]
        """
        The attributes to query.
        """
        filename: str
        """
        The bookmark file to load.
        """
        io_priority: int
        """
        Priority used when loading.
        """
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        loading: bool
        """
        %TRUE if files are being loaded.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """

    props: Props = ...
    def __init__(
        self,
        attributes: Optional[str] = ...,
        filename: str = ...,
        io_priority: int = ...,
    ): ...
    def get_attributes(self) -> Optional[str]:
        """
        Gets the attributes queried on the children.

        Parameters:


        Returns:
            Optional[str]: The queried attributes

        """
        ...

    def get_filename(self) -> str:
        """
        Returns the filename of the bookmark file that
        this list is loading.

        Parameters:


        Returns:
            str: the filename of the .xbel file

        """
        ...

    def get_io_priority(self) -> int:
        """
        Gets the IO priority to use while loading file.

        Parameters:


        Returns:
            int: The IO priority.

        """
        ...

    def is_loading(self) -> bool:
        """
        Returns %TRUE if the files are currently being loaded.

        Files will be added to @self from time to time while loading is
        going on. The order in which are added is undefined and may change
        in between runs.

        Parameters:


        Returns:
            bool: %TRUE if @self is loading

        """
        ...

    @classmethod
    def new(
        cls, filename: Optional[str] = None, attributes: Optional[str] = None
    ) -> BookmarkList:
        """
        Creates a new `GtkBookmarkList` with the given @attributes.

        Parameters:
            filename: The bookmark file to load
            attributes: The attributes to query

        Returns:
            BookmarkList: a new `GtkBookmarkList`

        """
        ...

    def set_attributes(self, attributes: Optional[str] = None) -> None:
        """
        Sets the @attributes to be enumerated and starts the enumeration.

        If @attributes is %NULL, no attributes will be queried, but a list
        of `GFileInfo`s will still be created.

        Parameters:
            attributes: the attributes to enumerate

        Returns:

        """
        ...

    def set_io_priority(self, io_priority: int) -> None:
        """
        Sets the IO priority to use while loading files.

        The default IO priority is %G_PRIORITY_DEFAULT.

        Parameters:
            io_priority: IO priority to use

        Returns:

        """
        ...

class BookmarkListClass(GObject.GPointer):
    """
    :Constructors:

    ::

        BookmarkListClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class BoolFilter(Filter):
    """
    `GtkBoolFilter` evaluates a boolean `GtkExpression`
    to determine whether to include items.

    :Constructors:

    ::

        BoolFilter(**properties)
        new(expression:Gtk.Expression=None) -> Gtk.BoolFilter

    Object GtkBoolFilter

    Properties from GtkBoolFilter:
      expression -> GtkExpression: expression
      invert -> gboolean: invert

    Signals from GtkFilter:
      changed (GtkFilterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Filter.Props):
        expression: Optional[Expression]
        """
        The boolean expression to evaluate on item.
        """
        invert: bool
        """
        If the expression result should be inverted.
        """

    props: Props = ...
    def __init__(self, expression: Optional[Expression] = ..., invert: bool = ...): ...
    def get_expression(self) -> Optional[Expression]:
        """
        Gets the expression that the filter uses to evaluate if
        an item should be filtered.

        Parameters:


        Returns:
            Optional[Expression]: a `GtkExpression`

        """
        ...

    def get_invert(self) -> bool:
        """
        Returns whether the filter inverts the expression.

        Parameters:


        Returns:
            bool: %TRUE if the filter inverts

        """
        ...

    @classmethod
    def new(cls, expression: Optional[Expression] = None) -> BoolFilter:
        """
        Creates a new bool filter.

        Parameters:
            expression: The expression to evaluate

        Returns:
            BoolFilter: a new `GtkBoolFilter`

        """
        ...

    def set_expression(self, expression: Optional[Expression] = None) -> None:
        """
        Sets the expression that the filter uses to check if items
        should be filtered.

        The expression must have a value type of %G_TYPE_BOOLEAN.

        Parameters:
            expression: a `GtkExpression`

        Returns:

        """
        ...

    def set_invert(self, invert: bool) -> None:
        """
        Sets whether the filter should invert the expression.

        Parameters:
            invert: %TRUE to invert

        Returns:

        """
        ...

class BoolFilterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        BoolFilterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: FilterClass = ...

class Border(GObject.GBoxed):
    """
    A struct that specifies a border around a rectangular area.

    Each side can have different width.

    :Constructors:

    ::

        Border()
        new() -> Gtk.Border
    """

    class Props(GObject.GBoxed.Props): ...
    left: int = ...
    right: int = ...
    top: int = ...
    bottom: int = ...
    def copy(self) -> Border:
        """
        Copies a `GtkBorder`.

        Parameters:


        Returns:
            Border: a copy of @border_.

        """
        ...

    def free(self) -> None:
        """
        Frees a `GtkBorder`.

        Parameters:


        Returns:

        """
        ...

    @classmethod
    def new(cls) -> Border:
        """
        Allocates a new `GtkBorder` struct and initializes its elements to zero.

        Parameters:


        Returns:
            Border: a newly allocated `GtkBorder` struct.
        Free with [method@Gtk.Border.free]

        """
        ...

class Box(Widget, Accessible, Buildable, ConstraintTarget, Orientable):
    """
    The `GtkBox` widget arranges child widgets into a single row or column.

    ![An example GtkBox](box.png)

    Whether it is a row or column depends on the value of its
    [property@Gtk.Orientable:orientation] property. Within the other
    dimension, all children are allocated the same size. Of course, the
    [property@Gtk.Widget:halign] and [property@Gtk.Widget:valign] properties
    can be used on the children to influence their allocation.

    Use repeated calls to [method@Gtk.Box.append] to pack widgets into a
    `GtkBox` from start to end. Use [method@Gtk.Box.remove] to remove widgets
    from the `GtkBox`. [method@Gtk.Box.insert_child_after] can be used to add
    a child at a particular position.

    Use [method@Gtk.Box.set_homogeneous] to specify whether or not all children
    of the `GtkBox` are forced to get the same amount of space.

    Use [method@Gtk.Box.set_spacing] to determine how much space will be minimally
    placed between all children in the `GtkBox`. Note that spacing is added
    *between* the children.

    Use [method@Gtk.Box.reorder_child_after] to move a child to a different
    place in the box.

    # CSS nodes

    `GtkBox` uses a single CSS node with name box.

    # Accessibility

    Until GTK 4.10, `GtkBox` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.

    Starting from GTK 4.12, `GtkBox` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.

    :Constructors:

    ::

        Box(**properties)
        new(orientation:Gtk.Orientation, spacing:int) -> Gtk.Widget

    Object GtkBox

    Properties from GtkBox:
      spacing -> gint: spacing
      homogeneous -> gboolean: homogeneous
      baseline-child -> gint: baseline-child
      baseline-position -> GtkBaselinePosition: baseline-position

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        baseline_child: int
        """
        The child that determines the baseline, in vertical orientation.
        """
        baseline_position: BaselinePosition
        """
        The position of the baseline aligned widgets if extra space is available.
        """
        homogeneous: bool
        """
        Whether the children should all be the same size.
        """
        spacing: int
        """
        The amount of space between children.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        baseline_child: int = ...,
        baseline_position: BaselinePosition = ...,
        homogeneous: bool = ...,
        spacing: int = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def append(self, child: Widget) -> None:
        """
        Adds @child as the last child to @box.

        Parameters:
            child: the `GtkWidget` to append

        Returns:

        """
        ...

    def get_baseline_child(self) -> int:
        """
        Gets the value set by gtk_box_set_baseline_child().

        Parameters:


        Returns:
            int: the baseline child

        """
        ...

    def get_baseline_position(self) -> BaselinePosition:
        """
        Gets the value set by gtk_box_set_baseline_position().

        Parameters:


        Returns:
            BaselinePosition: the baseline position

        """
        ...

    def get_homogeneous(self) -> bool:
        """
        Returns whether the box is homogeneous (all children are the
        same size).

        Parameters:


        Returns:
            bool: %TRUE if the box is homogeneous.

        """
        ...

    def get_spacing(self) -> int:
        """
        Gets the value set by gtk_box_set_spacing().

        Parameters:


        Returns:
            int: spacing between children

        """
        ...

    def insert_child_after(
        self, child: Widget, sibling: Optional[Widget] = None
    ) -> None:
        """
        Inserts @child in the position after @sibling in the list
        of @box children.

        If @sibling is %NULL, insert @child at the first position.

        Parameters:
            child: the `GtkWidget` to insert
            sibling: the sibling after which to insert @child

        Returns:

        """
        ...

    @classmethod
    def new(cls, orientation: Orientation, spacing: int) -> Box:
        """
        Creates a new `GtkBox`.

        Parameters:
            orientation: the box’s orientation
            spacing: the number of pixels to place by default between children

        Returns:
            Widget: a new `GtkBox`.

        """
        ...

    def prepend(self, child: Widget) -> None:
        """
        Adds @child as the first child to @box.

        Parameters:
            child: the `GtkWidget` to prepend

        Returns:

        """
        ...

    def remove(self, child: Widget) -> None:
        """
        Removes a child widget from @box.

        The child must have been added before with
        [method@Gtk.Box.append], [method@Gtk.Box.prepend], or
        [method@Gtk.Box.insert_child_after].

        Parameters:
            child: the child to remove

        Returns:

        """
        ...

    def reorder_child_after(
        self, child: Widget, sibling: Optional[Widget] = None
    ) -> None:
        """
        Moves @child to the position after @sibling in the list
        of @box children.

        If @sibling is %NULL, move @child to the first position.

        Parameters:
            child: the `GtkWidget` to move, must be a child of @box
            sibling: the sibling to move @child after

        Returns:

        """
        ...

    def set_baseline_child(self, child: int) -> None:
        """
        Sets the baseline child of a box.

        This affects only vertical boxes.

        Parameters:
            child: a child, or -1

        Returns:

        """
        ...

    def set_baseline_position(self, position: BaselinePosition) -> None:
        """
        Sets the baseline position of a box.

        This affects only horizontal boxes with at least one baseline
        aligned child. If there is more vertical space available than
        requested, and the baseline is not allocated by the parent then
        @position is used to allocate the baseline with respect to the
        extra space available.

        Parameters:
            position: a `GtkBaselinePosition`

        Returns:

        """
        ...

    def set_homogeneous(self, homogeneous: bool) -> None:
        """
        Sets whether or not all children of @box are given equal space
        in the box.

        Parameters:
            homogeneous: a boolean value, %TRUE to create equal allotments,
        %FALSE for variable allotments

        Returns:

        """
        ...

    def set_spacing(self, spacing: int) -> None:
        """
        Sets the number of pixels to place between children of @box.

        Parameters:
            spacing: the number of pixels to put between children

        Returns:

        """
        ...

class BoxClass(GObject.GPointer):
    """
    :Constructors:

    ::

        BoxClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    padding: list[None] = ...

class BoxLayout(LayoutManager, Orientable):
    """
    `GtkBoxLayout` is a layout manager that arranges children in a single
    row or column.

    Whether it is a row or column depends on the value of its
    [property@Gtk.Orientable:orientation] property. Within the other dimension
    all children all allocated the same size. The `GtkBoxLayout` will respect
    the [property@Gtk.Widget:halign] and [property@Gtk.Widget:valign]
    properties of each child widget.

    If you want all children to be assigned the same size, you can use
    the [property@Gtk.BoxLayout:homogeneous] property.

    If you want to specify the amount of space placed between each child,
    you can use the [property@Gtk.BoxLayout:spacing] property.

    :Constructors:

    ::

        BoxLayout(**properties)
        new(orientation:Gtk.Orientation) -> Gtk.LayoutManager

    Object GtkBoxLayout

    Properties from GtkBoxLayout:
      homogeneous -> gboolean: homogeneous
      spacing -> gint: spacing
      baseline-child -> gint: baseline-child
      baseline-position -> GtkBaselinePosition: baseline-position

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutManager.Props, Orientable.Props):
        baseline_child: int
        """
        The child that determines the baseline of the box
        in vertical layout.

        If the child does baseline positioning, then its baseline
        is lined up with the baseline of the box. If it doesn't, then
        the bottom edge of the child is used.
        """
        baseline_position: BaselinePosition
        """
        The position of the allocated baseline within the extra space
        allocated to each child.

        This property is only relevant for horizontal layouts containing
        at least one child with a baseline alignment.
        """
        homogeneous: bool
        """
        Whether the box layout should distribute the available space
        equally among the children.
        """
        spacing: int
        """
        The space to put between the children.
        """

    props: Props = ...
    def __init__(
        self,
        baseline_child: int = ...,
        baseline_position: BaselinePosition = ...,
        homogeneous: bool = ...,
        spacing: int = ...,
        orientation: Orientation = ...,
    ): ...
    def get_baseline_child(self) -> int:
        """
        Gets the value set by gtk_box_layout_set_baseline_child().

        Parameters:


        Returns:
            int: the index of the child that determines the baseline
        in vertical layout, or -1

        """
        ...

    def get_baseline_position(self) -> BaselinePosition:
        """
        Gets the value set by gtk_box_layout_set_baseline_position().

        Parameters:


        Returns:
            BaselinePosition: the baseline position

        """
        ...

    def get_homogeneous(self) -> bool:
        """
        Returns whether the layout is set to be homogeneous.

        Parameters:


        Returns:
            bool: %TRUE if the layout is homogeneous

        """
        ...

    def get_spacing(self) -> int:
        """
        Returns the space that @box_layout puts between children.

        Parameters:


        Returns:
            int: the spacing of the layout

        """
        ...

    @classmethod
    def new(cls, orientation: Orientation) -> BoxLayout:
        """
        Creates a new `GtkBoxLayout`.

        Parameters:
            orientation: the orientation for the new layout

        Returns:
            LayoutManager: a new box layout

        """
        ...

    def set_baseline_child(self, child: int) -> None:
        """
        Sets the index of the child that determines the baseline
        in vertical layout.

        Parameters:
            child: the child position, or -1

        Returns:

        """
        ...

    def set_baseline_position(self, position: BaselinePosition) -> None:
        """
        Sets the baseline position of a box layout.

        The baseline position affects only horizontal boxes with at least one
        baseline aligned child. If there is more vertical space available than
        requested, and the baseline is not allocated by the parent then the
        given @position is used to allocate the baseline within the extra
        space available.

        Parameters:
            position: a `GtkBaselinePosition`

        Returns:

        """
        ...

    def set_homogeneous(self, homogeneous: bool) -> None:
        """
        Sets whether the box layout will allocate the same
        size to all children.

        Parameters:
            homogeneous: %TRUE to set the box layout as homogeneous

        Returns:

        """
        ...

    def set_spacing(self, spacing: int) -> None:
        """
        Sets how much spacing to put between children.

        Parameters:
            spacing: the spacing to apply between children

        Returns:

        """
        ...

class BoxLayoutClass(GObject.GPointer):
    """
    :Constructors:

    ::

        BoxLayoutClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutManagerClass = ...

class Buildable(GObject.GInterface):
    """
    `GtkBuildable` allows objects to extend and customize their deserialization
    from ui files.

    The interface includes methods for setting names and properties of objects,
    parsing custom tags and constructing child objects.

    The `GtkBuildable` interface is implemented by all widgets and
    many of the non-widget objects that are provided by GTK. The
    main user of this interface is [class@Gtk.Builder]. There should be
    very little need for applications to call any of these functions directly.

    An object only needs to implement this interface if it needs to extend the
    `GtkBuilder` XML format or run any extra routines at deserialization time.



    Interface GtkBuildable

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def get_buildable_id(self) -> Optional[str]:
        """
        Gets the ID of the @buildable object.

        `GtkBuilder` sets the name based on the ID attribute
        of the `<object>` tag used to construct the @buildable.

        Parameters:


        Returns:
            Optional[str]: the ID of the buildable object

        """
        ...

class BuildableIface(GObject.GPointer):
    """
    The `GtkBuildableIface` interface contains methods that are
    necessary to allow `GtkBuilder` to construct an object from
    a `GtkBuilder` UI definition.

    :Constructors:

    ::

        BuildableIface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    set_id: Callable[[Buildable, str], None] = ...
    get_id: Callable[[Buildable], str] = ...
    add_child: Callable[[Buildable, Builder, GObject.Object, Optional[str]], None] = ...
    set_buildable_property: Callable[[Buildable, Builder, str, Any], None] = ...
    construct_child: None = ...
    custom_tag_start: Callable[
        [Buildable, Builder, Optional[GObject.Object], str],
        Tuple[bool, BuildableParser, None],
    ] = ...
    custom_tag_end: Callable[
        [Buildable, Builder, Optional[GObject.Object], str, None], None
    ] = ...
    custom_finished: Callable[
        [Buildable, Builder, Optional[GObject.Object], str, None], None
    ] = ...
    parser_finished: Callable[[Buildable, Builder], None] = ...
    get_internal_child: Callable[[Buildable, Builder, str], GObject.Object] = ...

class BuildableParseContext(GObject.GPointer):
    """
    An opaque context struct for `GtkBuildableParser`.
    """

    class Props(GObject.GPointer.Props): ...

    def get_element(self) -> Optional[str]:
        """
        Retrieves the name of the currently open element.

        If called from the start_element or end_element handlers this will
        give the element_name as passed to those functions. For the parent
        elements, see gtk_buildable_parse_context_get_element_stack().

        Parameters:


        Returns:
            Optional[str]: the name of the currently open element

        """
        ...

    def get_element_stack(self) -> list[str]:
        """
        Retrieves the element stack from the internal state of the parser.

        The returned `GPtrArray` is an array of strings where the last item is
        the currently open tag (as would be returned by
        gtk_buildable_parse_context_get_element()) and the previous item is its
        immediate parent.

        This function is intended to be used in the start_element and
        end_element handlers where gtk_buildable_parse_context_get_element()
        would merely return the name of the element that is being
        processed.

        Parameters:


        Returns:
            list[str]: the element stack, which must not be modified

        """
        ...

    def get_position(self) -> Tuple[int, int]:
        """
        Retrieves the current line number and the number of the character on
        that line. Intended for use in error messages; there are no strict
        semantics for what constitutes the \"current\" line number other than
        \"the best number we could come up with for error messages.\"

        Parameters:


        Returns:
            int: return location for a line number
            int: return location for a char-on-line number
        """
        ...

    def pop(self) -> None:
        """
        Completes the process of a temporary sub-parser redirection.

        This function exists to collect the user_data allocated by a
        matching call to gtk_buildable_parse_context_push(). It must be called
        in the end_element handler corresponding to the start_element
        handler during which gtk_buildable_parse_context_push() was called.
        You must not call this function from the error callback -- the
        @user_data is provided directly to the callback in that case.

        This function is not intended to be directly called by users
        interested in invoking subparsers. Instead, it is intended to
        be used by the subparsers themselves to implement a higher-level
        interface.

        Parameters:


        Returns:

        """
        ...

    def push(self, parser: BuildableParser, user_data: None) -> None:
        """
        Temporarily redirects markup data to a sub-parser.

        This function may only be called from the start_element handler of
        a `GtkBuildableParser`. It must be matched with a corresponding call to
        gtk_buildable_parse_context_pop() in the matching end_element handler
        (except in the case that the parser aborts due to an error).

        All tags, text and other data between the matching tags is
        redirected to the subparser given by @parser. @user_data is used
        as the user_data for that parser. @user_data is also passed to the
        error callback in the event that an error occurs. This includes
        errors that occur in subparsers of the subparser.

        The end tag matching the start tag for which this call was made is
        handled by the previous parser (which is given its own user_data)
        which is why gtk_buildable_parse_context_pop() is provided to allow \"one
        last access\" to the @user_data provided to this function. In the
        case of error, the @user_data provided here is passed directly to
        the error callback of the subparser and gtk_buildable_parse_context_pop()
        should not be called. In either case, if @user_data was allocated
        then it ought to be freed from both of these locations.

        This function is not intended to be directly called by users
        interested in invoking subparsers. Instead, it is intended to be
        used by the subparsers themselves to implement a higher-level
        interface.

        For an example of how to use this, see g_markup_parse_context_push() which
        has the same kind of API.

        Parameters:
            parser: a `GtkBuildableParser`
            user_data: user data to pass to `GtkBuildableParser` functions

        Returns:

        """
        ...

class BuildableParser(GObject.GPointer):
    """
    A sub-parser for `GtkBuildable` implementations.

    :Constructors:

    ::

        BuildableParser()
    """

    class Props(GObject.GPointer.Props): ...
    start_element: Callable[..., None] = ...
    end_element: Callable[..., None] = ...
    text: Callable[..., None] = ...
    error: Callable[..., None] = ...
    padding: list[None] = ...

class Builder(GObject.Object):
    """
    A `GtkBuilder` reads XML descriptions of a user interface and
    instantiates the described objects.

    To create a `GtkBuilder` from a user interface description, call
    [ctor@Gtk.Builder.new_from_file], [ctor@Gtk.Builder.new_from_resource]
    or [ctor@Gtk.Builder.new_from_string].

    In the (unusual) case that you want to add user interface
    descriptions from multiple sources to the same `GtkBuilder` you can
    call [ctor@Gtk.Builder.new] to get an empty builder and populate it by
    (multiple) calls to [method@Gtk.Builder.add_from_file],
    [method@Gtk.Builder.add_from_resource] or
    [method@Gtk.Builder.add_from_string].

    A `GtkBuilder` holds a reference to all objects that it has constructed
    and drops these references when it is finalized. This finalization can
    cause the destruction of non-widget objects or widgets which are not
    contained in a toplevel window. For toplevel windows constructed by a
    builder, it is the responsibility of the user to call
    [method@Gtk.Window.destroy] to get rid of them and all the widgets
    they contain.

    The functions [method@Gtk.Builder.get_object] and
    [method@Gtk.Builder.get_objects] can be used to access the widgets in
    the interface by the names assigned to them inside the UI description.
    Toplevel windows returned by these functions will stay around until the
    user explicitly destroys them with [method@Gtk.Window.destroy]. Other
    widgets will either be part of a larger hierarchy constructed by the
    builder (in which case you should not have to worry about their lifecycle),
    or without a parent, in which case they have to be added to some container
    to make use of them. Non-widget objects need to be reffed with
    g_object_ref() to keep them beyond the lifespan of the builder.

    ## GtkBuilder UI Definitions

    `GtkBuilder` parses textual descriptions of user interfaces which are
    specified in XML format. We refer to these descriptions as “GtkBuilder
    UI definitions” or just “UI definitions” if the context is clear.

    ### Structure of UI definitions

    UI definition files are always encoded in UTF-8.

    The toplevel element is `<interface>`. It optionally takes a “domain”
    attribute, which will make the builder look for translated strings
    using `dgettext()` in the domain specified. This can also be done by
    calling [method@Gtk.Builder.set_translation_domain] on the builder.
    For example:

    ```xml
    <?xml version=\"1.0\" encoding=\"UTF-8\">
    <interface domain=\"your-app\">
    ...
    </interface>
    ```

    ### Requirements

    The target toolkit version(s) are described by `<requires>` elements,
    the “lib” attribute specifies the widget library in question (currently
    the only supported value is “gtk”) and the “version” attribute specifies
    the target version in the form “`<major>`.`<minor>`”. `GtkBuilder` will
    error out if the version requirements are not met. For example:

    ```xml
    <?xml version=\"1.0\" encoding=\"UTF-8\">
    <interface domain=\"your-app\">
    <requires lib=\"gtk\" version=\"4.0\" />
    </interface>
    ```

    ### Objects

    Objects are defined as children of the `<interface>` element.

    Objects are described by `<object>` elements, which can contain
    `<property>` elements to set properties, `<signal>` elements which
    connect signals to handlers, and `<child>` elements, which describe
    child objects (most often widgets inside a container, but also e.g.
    actions in an action group, or columns in a tree model). A `<child>`
    element contains an `<object>` element which describes the child object.

    Typically, the specific kind of object represented by an `<object>`
    element is specified by the “class” attribute. If the type has not
    been loaded yet, GTK tries to find the `get_type()` function from the
    class name by applying heuristics. This works in most cases, but if
    necessary, it is possible to specify the name of the `get_type()`
    function explicitly with the \"type-func\" attribute. If your UI definition
    is referencing internal types, you should make sure to call
    `g_type_ensure()` for each object type before parsing the UI definition.

    Objects may be given a name with the “id” attribute, which allows the
    application to retrieve them from the builder with
    [method@Gtk.Builder.get_object]. An id is also necessary to use the
    object as property value in other parts of the UI definition. GTK
    reserves ids starting and ending with `___` (three consecutive
    underscores) for its own purposes.

    ### Properties

    Setting properties of objects is pretty straightforward with the
    `<property>` element: the “name” attribute specifies the name of the
    property, and the content of the element specifies the value:

    ```xml
    <object class=\"GtkButton\">
    <property name=\"label\">Hello, world</property>
    </object>
    ```

    If the “translatable” attribute is set to a true value, GTK uses
    `gettext()` (or `dgettext()` if the builder has a translation domain set)
    to find a translation for the value. This happens before the value
    is parsed, so it can be used for properties of any type, but it is
    probably most useful for string properties. It is also possible to
    specify a context to disambiguate short strings, and comments which
    may help the translators:

    ```xml
    <object class=\"GtkButton\">
    <property name=\"label\" translatable=\"yes\" context=\"button\">Hello, world</property>
    </object>
    ```

    `GtkBuilder` can parse textual representations for the most common
    property types:

    - characters
    - strings
    - integers
    - floating-point numbers
    - booleans (strings like “TRUE”, “t”, “yes”, “y”, “1” are interpreted
    as true values, strings like “FALSE”, “f”, “no”, “n”, “0” are interpreted
    as false values)
    - enumeration types (can be specified by their full C identifier their short
    name used when registering the enumeration type, or their integer value)
    - flag types (can be specified by their C identifier, short name, integer
    value, and optionally combined with “|” for bitwise OR, e.g.
    “GTK_INPUT_HINT_EMOJI|GTK_INPUT_HINT_LOWERCASE”, or “emoji|lowercase”)
    - colors (in a format understood by [method@Gdk.RGBA.parse])
    - `GVariant` (can be specified in the format understood by
    [func@GLib.Variant.parse])
    - pixbufs (can be specified as a filename of an image file to load)

    Objects can be referred to by their name and by default refer to
    objects declared in the local XML fragment and objects exposed via
    [method@Gtk.Builder.expose_object]. In general, `GtkBuilder` allows
    forward references to objects declared in the local XML; an object
    doesn’t have to be constructed before it can be referred to. The
    exception to this rule is that an object has to be constructed before
    it can be used as the value of a construct-only property.

    ### Property bindings

    It is also possible to bind a property value to another object's
    property value using the attributes \"bind-source\" to specify the
    source object of the binding, and optionally, \"bind-property\" and
    \"bind-flags\" to specify the source property and source binding flags
    respectively. Internally, `GtkBuilder` implements this using
    [class@GObject.Binding] objects.

    For instance, in the example below the “label” property of the
    `bottom_label` widget is bound to the “label” property of the
    `top_button` widget:

    ```xml
    <object class=\"GtkBox\">
    <property name=\"orientation\">vertical</property>
    <child>
    <object class=\"GtkButton\" id=\"top_button\">
    <property name=\"label\">Hello, world</property>
    </object>
    </child>
    <child>
    <object class=\"GtkLabel\" id=\"bottom_label\">
    <property name=\"label\"
    bind-source=\"top_button\"
    bind-property=\"label\"
    bind-flags=\"sync-create\" />
    </object>
    </child>
    </object>
    ```

    For more information, see the documentation of the
    [method@GObject.Object.bind_property] method.

    ### Internal children

    Sometimes it is necessary to refer to widgets which have implicitly
    been constructed by GTK as part of a composite widget, to set
    properties on them or to add further children (e.g. the content area
    of a `GtkDialog`). This can be achieved by setting the “internal-child”
    property of the `<child>` element to a true value. Note that `GtkBuilder`
    still requires an `<object>` element for the internal child, even if it
    has already been constructed.

    ### Specialized children

    A number of widgets have different places where a child can be added
    (e.g. tabs vs. page content in notebooks). This can be reflected in
    a UI definition by specifying the “type” attribute on a `<child>`
    The possible values for the “type” attribute are described in the
    sections describing the widget-specific portions of UI definitions.

    ### Signal handlers and function pointers

    Signal handlers are set up with the `<signal>` element. The “name”
    attribute specifies the name of the signal, and the “handler” attribute
    specifies the function to connect to the signal.

    ```xml
    <object class=\"GtkButton\" id=\"hello_button\">
    <signal name=\"clicked\" handler=\"hello_button__clicked\" />
    </object>
    ```

    The remaining attributes, “after”, “swapped” and “object”, have the
    same meaning as the corresponding parameters of the
    [func@GObject.signal_connect_object] or [func@GObject.signal_connect_data]
    functions:

    - “after” matches the `G_CONNECT_AFTER` flag, and will ensure that the
    handler is called after the default class closure for the signal
    - “swapped” matches the `G_CONNECT_SWAPPED` flag, and will swap the
    instance and closure arguments when invoking the signal handler
    - “object” will bind the signal handler to the lifetime of the object
    referenced by the attribute

    By default \"swapped\" will be set to \"yes\" if not specified otherwise, in
    the case where \"object\" is set, for convenience. A “last_modification_time”
    attribute is also allowed, but it does not have a meaning to the builder.

    When compiling applications for Windows, you must declare signal callbacks
    with the `G_MODULE_EXPORT` decorator, or they will not be put in the symbol
    table:

    ```c
    G_MODULE_EXPORT void
    hello_button__clicked (GtkButton *button,
    gpointer data)
    {
    // ...
    }
    ```

    On Linux and Unix, this is not necessary; applications should instead
    be compiled with the `-Wl,--export-dynamic` argument inside their compiler
    flags, and linked against `gmodule-export-2.0`.

    ## Example UI Definition

    ```xml
    <interface>
    <object class=\"GtkDialog\" id=\"dialog1\">
    <child internal-child=\"content_area\">
    <object class=\"GtkBox\">
    <child internal-child=\"action_area\">
    <object class=\"GtkBox\">
    <child>
    <object class=\"GtkButton\" id=\"ok_button\">
    <property name=\"label\" translatable=\"yes\">_Ok</property>
    <property name=\"use-underline\">True</property>
    <signal name=\"clicked\" handler=\"ok_button_clicked\"/>
    </object>
    </child>
    </object>
    </child>
    </object>
    </child>
    </object>
    </interface>
    ```

    ## Using GtkBuildable for extending UI definitions

    Objects can implement the [iface@Gtk.Buildable] interface to add custom
    elements and attributes to the XML. Typically, any extension will be
    documented in each type that implements the interface.

    ## Templates

    When describing a [class@Gtk.Widget], you can use the `<template>` tag to
    describe a UI bound to a specific widget type. GTK will automatically load
    the UI definition when instantiating the type, and bind children and
    signal handlers to instance fields and function symbols.

    For more information, see the [`GtkWidget` documentation](class.Widget.html#building-composite-widgets-from-template-xml)
    for details.

    :Constructors:

    ::

        Builder(**properties)
        new() -> Gtk.Builder
        new_from_file(filename:str) -> Gtk.Builder
        new_from_resource(resource_path:str) -> Gtk.Builder
        new_from_string(string:str, length:int) -> Gtk.Builder

    Object GtkBuilder

    Properties from GtkBuilder:
      current-object -> GObject: current-object
      scope -> GtkBuilderScope: scope
      translation-domain -> gchararray: translation-domain

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        current_object: Optional[GObject.Object]
        """
        The object the builder is evaluating for.
        """
        scope: BuilderScope
        """
        The scope the builder is operating in
        """
        translation_domain: Optional[str]
        """
        The translation domain used when translating property values that
        have been marked as translatable.

        If the translation domain is %NULL, `GtkBuilder` uses gettext(),
        otherwise g_dgettext().
        """

    props: Props = ...
    def __init__(
        self,
        current_object: Optional[GObject.Object] = ...,
        scope: Optional[BuilderScope] = ...,
        translation_domain: Optional[str] = ...,
    ): ...
    def add_from_file(self, filename: str) -> bool:
        """
        Parses a file containing a UI definition and merges it with
        the current contents of @builder.

        This function is useful if you need to call
        [method@Gtk.Builder.set_current_object]) to add user data to
        callbacks before loading GtkBuilder UI. Otherwise, you probably
        want [ctor@Gtk.Builder.new_from_file] instead.

        If an error occurs, 0 will be returned and @error will be assigned a
        `GError` from the `GTK_BUILDER_ERROR`, `G_MARKUP_ERROR` or `G_FILE_ERROR`
        domains.

        It’s not really reasonable to attempt to handle failures of this
        call. You should not use this function with untrusted files (ie:
        files that are not part of your application). Broken `GtkBuilder`
        files can easily crash your program, and it’s possible that memory
        was leaked leading up to the reported failure. The only reasonable
        thing to do when an error is detected is to call `g_error()`.

        Parameters:
            filename: the name of the file to parse

        Returns:
            bool: %TRUE on success, %FALSE if an error occurred

        """
        ...

    def add_from_resource(self, resource_path: str) -> bool:
        """
        Parses a resource file containing a UI definition
        and merges it with the current contents of @builder.

        This function is useful if you need to call
        [method@Gtk.Builder.set_current_object] to add user data to
        callbacks before loading GtkBuilder UI. Otherwise, you probably
        want [ctor@Gtk.Builder.new_from_resource] instead.

        If an error occurs, 0 will be returned and @error will be assigned a
        `GError` from the %GTK_BUILDER_ERROR, %G_MARKUP_ERROR or %G_RESOURCE_ERROR
        domain.

        It’s not really reasonable to attempt to handle failures of this
        call. The only reasonable thing to do when an error is detected is
        to call g_error().

        Parameters:
            resource_path: the path of the resource file to parse

        Returns:
            bool: %TRUE on success, %FALSE if an error occurred

        """
        ...

    def add_from_string(self, buffer): ...  # FIXME Function
    def add_objects_from_file(self, filename: str, object_ids: Sequence[str]) -> bool:
        """
        Parses a file containing a UI definition building only the
        requested objects and merges them with the current contents
        of @builder.

        Upon errors, 0 will be returned and @error will be assigned a
        `GError` from the %GTK_BUILDER_ERROR, %G_MARKUP_ERROR or %G_FILE_ERROR
        domain.

        If you are adding an object that depends on an object that is not
        its child (for instance a `GtkTreeView` that depends on its
        `GtkTreeModel`), you have to explicitly list all of them in @object_ids.

        Parameters:
            filename: the name of the file to parse
            object_ids: nul-terminated array of objects to build

        Returns:
            bool: %TRUE on success, %FALSE if an error occurred

        """
        ...

    def add_objects_from_resource(
        self, resource_path: str, object_ids: Sequence[str]
    ) -> bool:
        """
        Parses a resource file containing a UI definition, building
        only the requested objects and merges them with the current
        contents of @builder.

        Upon errors, 0 will be returned and @error will be assigned a
        `GError` from the %GTK_BUILDER_ERROR, %G_MARKUP_ERROR or %G_RESOURCE_ERROR
        domain.

        If you are adding an object that depends on an object that is not
        its child (for instance a `GtkTreeView` that depends on its
        `GtkTreeModel`), you have to explicitly list all of them in @object_ids.

        Parameters:
            resource_path: the path of the resource file to parse
            object_ids: nul-terminated array of objects to build

        Returns:
            bool: %TRUE on success, %FALSE if an error occurred

        """
        ...

    def add_objects_from_string(self, buffer, object_ids): ...  # FIXME Function
    def create_closure(
        self,
        function_name: str,
        flags: BuilderClosureFlags,
        object: Optional[GObject.Object] = None,
    ) -> Optional[Callable[..., Any]]:
        """
        Creates a closure to invoke the function called @function_name.

        This is using the create_closure() implementation of @builder's
        [iface@Gtk.BuilderScope].

        If no closure could be created, %NULL will be returned and @error
        will be set.

        Parameters:
            function_name: name of the function to look up
            flags: closure creation flags
            object: Object to create the closure with

        Returns:
            Optional[Callable[..., Any]]: A new closure for invoking @function_name

        """
        ...

    def define_builder_scope(): ...  # FIXME Function
    def expose_object(self, name: str, object: GObject.Object) -> None:
        """
        Add @object to the @builder object pool so it can be
        referenced just like any other object built by builder.

        Only a single object may be added using @name. However,
        it is not an error to expose the same object under multiple
        names. `gtk_builder_get_object()` may be used to determine
        if an object has already been added with @name.

        Parameters:
            name: the name of the object exposed to the builder
            object: the object to expose

        Returns:

        """
        ...

    def extend_with_template(
        self, object: GObject.Object, template_type: Type, buffer: str, length: int
    ) -> bool:
        """
        Main private entry point for building composite components
        from template XML.

        Most likely you do not need to call this function in applications as
        templates are handled by `GtkWidget`.

        Parameters:
            object: the object that is being extended
            template_type: the type that the template is for
            buffer: the string to parse
            length: the length of @buffer (may be -1 if @buffer is nul-terminated)

        Returns:
            bool: A positive value on success, 0 if an error occurred

        """
        ...

    def get_current_object(self) -> Optional[GObject.Object]:
        """
        Gets the current object set via gtk_builder_set_current_object().

        Parameters:


        Returns:
            Optional[GObject.Object]: the current object

        """
        ...

    def get_object(self, name: str) -> Optional[GObject.Object]:
        """
        Gets the object named @name.

        Note that this function does not increment the reference count
        of the returned object.

        Parameters:
            name: name of object to get

        Returns:
            Optional[GObject.Object]: the object named @name

        """
        ...

    def get_objects(self) -> list[GObject.Object]:
        """
        Gets all objects that have been constructed by @builder.

        Note that this function does not increment the reference
        counts of the returned objects.

        Parameters:


        Returns:
            list[GObject.Object]: a
        newly-allocated `GSList` containing all the objects
        constructed by the `GtkBuilder instance`. It should be
        freed by g_slist_free()

        """
        ...

    def get_scope(self) -> BuilderScope:
        """
        Gets the scope in use that was set via gtk_builder_set_scope().

        Parameters:


        Returns:
            BuilderScope: the current scope

        """
        ...

    def get_translation_domain(self) -> Optional[str]:
        """
        Gets the translation domain of @builder.

        Parameters:


        Returns:
            Optional[str]: the translation domain

        """
        ...

    def get_type_from_name(self, type_name: str) -> Type:
        """
        Looks up a type by name.

        This is using the virtual function that `GtkBuilder` has
        for that purpose. This is mainly used when implementing
        the `GtkBuildable` interface on a type.

        Parameters:
            type_name: type name to lookup

        Returns:
            Type: the `GType` found for @type_name or %G_TYPE_INVALID
        if no type was found

        """
        ...

    @classmethod
    def new(cls) -> Builder:
        """
        Creates a new empty builder object.

        This function is only useful if you intend to make multiple calls
        to [method@Gtk.Builder.add_from_file], [method@Gtk.Builder.add_from_resource]
        or [method@Gtk.Builder.add_from_string] in order to merge multiple UI
        descriptions into a single builder.

        Parameters:


        Returns:
            Builder: a new (empty) `GtkBuilder` object

        """
        ...

    @classmethod
    def new_from_file(cls, filename: str) -> Builder:
        """
        Parses the UI definition in the file @filename.

        If there is an error opening the file or parsing the description then
        the program will be aborted. You should only ever attempt to parse
        user interface descriptions that are shipped as part of your program.

        Parameters:
            filename: filename of user interface description file

        Returns:
            Builder: a `GtkBuilder` containing the described interface

        """
        ...

    @classmethod
    def new_from_resource(cls, resource_path: str) -> Builder:
        """
        Parses the UI definition at @resource_path.

        If there is an error locating the resource or parsing the
        description, then the program will be aborted.

        Parameters:
            resource_path: a `GResource` resource path

        Returns:
            Builder: a `GtkBuilder` containing the described interface

        """
        ...

    @classmethod
    def new_from_string(cls, string: str, length: int) -> Builder:
        """
        Parses the UI definition in @string.

        If @string is %NULL-terminated, then @length should be -1.
        If @length is not -1, then it is the length of @string.

        If there is an error parsing @string then the program will be
        aborted. You should not attempt to parse user interface description
        from untrusted sources.

        Parameters:
            string: a user interface (XML) description
            length: the length of @string, or -1

        Returns:
            Builder: a `GtkBuilder` containing the interface described by @string

        """
        ...

    def set_current_object(
        self, current_object: Optional[GObject.Object] = None
    ) -> None:
        """
        Sets the current object for the @builder.

        The current object can be thought of as the `this` object that the
        builder is working for and will often be used as the default object
        when an object is optional.

        [method@Gtk.Widget.init_template] for example will set the current
        object to the widget the template is inited for. For functions like
        [ctor@Gtk.Builder.new_from_resource], the current object will be %NULL.

        Parameters:
            current_object: the new current object

        Returns:

        """
        ...

    def set_scope(self, scope: Optional[BuilderScope] = None) -> None:
        """
        Sets the scope the builder should operate in.

        If @scope is %NULL, a new [class@Gtk.BuilderCScope] will be created.

        Parameters:
            scope: the scope to use

        Returns:

        """
        ...

    def set_translation_domain(self, domain: Optional[str] = None) -> None:
        """
        Sets the translation domain of @builder.

        Parameters:
            domain: the translation domain

        Returns:

        """
        ...

    def value_from_string(
        self, pspec: GObject.ParamSpec, string: str
    ) -> Tuple[bool, Any]:
        """
        Demarshals a value from a string.

        This function calls g_value_init() on the @value argument,
        so it need not be initialised beforehand.

        Can handle char, uchar, boolean, int, uint, long,
        ulong, enum, flags, float, double, string, `GdkRGBA` and
        `GtkAdjustment` type values.

        Upon errors %FALSE will be returned and @error will be
        assigned a `GError` from the %GTK_BUILDER_ERROR domain.

        Parameters:
            pspec: the `GParamSpec` for the property
            string: the string representation of the value

        Returns:
            bool: %TRUE on success
            Any: the `GValue` to store the result in
        """
        ...

    def value_from_string_type(self, type: Type, string: str) -> Tuple[bool, Any]:
        """
        Demarshals a value from a string.

        Unlike [method@Gtk.Builder.value_from_string], this function
        takes a `GType` instead of `GParamSpec`.

        Calls g_value_init() on the @value argument, so it
        need not be initialised beforehand.

        Upon errors %FALSE will be returned and @error will be
        assigned a `GError` from the %GTK_BUILDER_ERROR domain.

        Parameters:
            type: the `GType` of the value
            string: the string representation of the value

        Returns:
            bool: %TRUE on success
            Any: the `GValue` to store the result in
        """
        ...

    class BuilderScope:
        """
        Object gi+_gtktemplate+BuilderScope

        Signals from GObject:
          notify (GParam)
        """

        class Props: ...
        g_type_instance: GObject.TypeInstance = ...
        ref_count: int = ...
        qdata: GLib.Data = ...
        def bind_property(self, *args, **kwargs): ...  # FIXME Function
        def bind_property_full(self, *args, **kargs): ...  # FIXME Function
        def compat_control(self, *args, **kargs): ...  # FIXME Function
        def do_create_closure(
            self, builder, func_name, flags, obj
        ): ...  # FIXME Function
        def force_floating(self, *args, **kargs): ...  # FIXME Function
        def freeze_notify(self): ...  # FIXME Function
        def get_data(self, *args, **kargs): ...  # FIXME Function
        def get_property(self, *args, **kwargs): ...  # FIXME Function
        def get_qdata(self, *args, **kargs): ...  # FIXME Function
        def getv(self, names: Sequence[str], values: Sequence[Any]) -> None: ...
        def interface_find_property(self, *args, **kargs): ...  # FIXME Function
        def interface_install_property(self, *args, **kargs): ...  # FIXME Function
        def interface_list_properties(self, *args, **kargs): ...  # FIXME Function
        def is_floating(self) -> bool: ...
        @deprecated("This method is deprecated")
        @classmethod
        def newv(
            cls, object_type: Type, parameters: Sequence[GObject.Parameter]
        ) -> Object: ...
        def notify(self, property_name: str) -> None: ...
        def notify_by_pspec(self, *args, **kargs): ...  # FIXME Function
        def ref(self, *args, **kargs): ...  # FIXME Function
        def ref_sink(self, *args, **kargs): ...  # FIXME Function
        def run_dispose(self) -> None: ...
        def set_data(self, *args, **kargs): ...  # FIXME Function
        def set_property(self, *args, **kwargs): ...  # FIXME Function
        def steal_data(self, *args, **kargs): ...  # FIXME Function
        def steal_qdata(self, *args, **kargs): ...  # FIXME Function
        def thaw_notify(self) -> None: ...
        def unref(self, *args, **kargs): ...  # FIXME Function
        def watch_closure(self, *args, **kargs): ...  # FIXME Function

class BuilderCScope(GObject.Object, BuilderScope):
    """
    A `GtkBuilderScope` implementation for the C language.

    `GtkBuilderCScope` instances use symbols explicitly added to @builder
    with prior calls to [method@Gtk.BuilderCScope.add_callback_symbol].
    If developers want to do that, they are encouraged to create their
    own scopes for that purpose.

    In the case that symbols are not explicitly added; GTK will uses
    `GModule`’s introspective features (by opening the module %NULL) to
    look at the application’s symbol table. From here it tries to match
    the signal function names given in the interface description with
    symbols in the application.

    Note that unless [method@Gtk.BuilderCScope.add_callback_symbol] is
    called for all signal callbacks which are referenced by the loaded XML,
    this functionality will require that `GModule` be supported on the platform.

    :Constructors:

    ::

        BuilderCScope(**properties)
        new() -> Gtk.BuilderCScope

    Object GtkBuilderCScope

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, BuilderScope.Props): ...
    parent_instance: GObject.Object = ...
    def add_callback_symbol(
        self, callback_name: str, callback_symbol: Callable[[], None]
    ) -> None:
        """
        Adds the @callback_symbol to the scope of @builder under the
        given @callback_name.

        Using this function overrides the behavior of
        [method@Gtk.Builder.create_closure] for any callback symbols that
        are added. Using this method allows for better encapsulation as it
        does not require that callback symbols be declared in the global
        namespace.

        Parameters:
            callback_name: The name of the callback, as expected in the XML
            callback_symbol: The callback pointer

        Returns:

        """
        ...

    @classmethod
    def new(cls) -> BuilderCScope:
        """
        Creates a new `GtkBuilderCScope` object to use with future
        `GtkBuilder` instances.

        Calling this function is only necessary if you want to add
        custom callbacks via [method@Gtk.BuilderCScope.add_callback_symbol].

        Parameters:


        Returns:
            BuilderCScope: a new `GtkBuilderCScope`

        """
        ...

class BuilderCScopeClass(GObject.GPointer):
    """
    :Constructors:

    ::

        BuilderCScopeClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class BuilderClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class BuilderListItemFactory(ListItemFactory):
    """
    `GtkBuilderListItemFactory` is a `GtkListItemFactory` that creates
    widgets by instantiating `GtkBuilder` UI templates.

    The templates must be extending `GtkListItem`, and typically use
    `GtkExpression`s to obtain data from the items in the model.

    Example:
    ```xml
    <interface>
    <template class=\"GtkListItem\">
    <property name=\"child\">
    <object class=\"GtkLabel\">
    <property name=\"xalign\">0</property>
    <binding name=\"label\">
    <lookup name=\"name\" type=\"SettingsKey\">
    <lookup name=\"item\">GtkListItem</lookup>
    </lookup>
    </binding>
    </object>
    </property>
    </template>
    </interface>
    ```

    :Constructors:

    ::

        BuilderListItemFactory(**properties)
        new_from_bytes(scope:Gtk.BuilderScope=None, bytes:GLib.Bytes) -> Gtk.ListItemFactory
        new_from_resource(scope:Gtk.BuilderScope=None, resource_path:str) -> Gtk.ListItemFactory

    Object GtkBuilderListItemFactory

    Properties from GtkBuilderListItemFactory:
      bytes -> GBytes: bytes
      resource -> gchararray: resource
      scope -> GtkBuilderScope: scope

    Signals from GObject:
      notify (GParam)
    """

    class Props(ListItemFactory.Props):
        bytes: GLib.Bytes
        """
        `GBytes` containing the UI definition.
        """
        resource: Optional[str]
        """
        Path of the resource containing the UI definition.
        """
        scope: Optional[BuilderScope]
        """
        `GtkBuilderScope` to use when instantiating listitems
        """

    props: Props = ...
    def __init__(
        self, bytes: GLib.Bytes = ..., resource: str = ..., scope: BuilderScope = ...
    ): ...
    def get_bytes(self) -> GLib.Bytes:
        """
        Gets the data used as the `GtkBuilder` UI template for constructing
        listitems.

        Parameters:


        Returns:
            GLib.Bytes: The `GtkBuilder` data

        """
        ...

    def get_resource(self) -> Optional[str]:
        """
        If the data references a resource, gets the path of that resource.

        Parameters:


        Returns:
            Optional[str]: The path to the resource

        """
        ...

    def get_scope(self) -> Optional[BuilderScope]:
        """
        Gets the scope used when constructing listitems.

        Parameters:


        Returns:
            Optional[BuilderScope]: The scope used when constructing listitems

        """
        ...

    @classmethod
    def new_from_bytes(
        cls, scope: Optional[BuilderScope], bytes: GLib.Bytes
    ) -> BuilderListItemFactory:
        """
        Creates a new `GtkBuilderListItemFactory` that instantiates widgets
        using @bytes as the data to pass to `GtkBuilder`.

        Parameters:
            scope: A scope to use when instantiating
            bytes: the `GBytes` containing the ui file to instantiate

        Returns:
            ListItemFactory: a new `GtkBuilderListItemFactory`

        """
        ...

    @classmethod
    def new_from_resource(
        cls, scope: Optional[BuilderScope], resource_path: str
    ) -> BuilderListItemFactory:
        """
        Creates a new `GtkBuilderListItemFactory` that instantiates widgets
        using data read from the given @resource_path to pass to `GtkBuilder`.

        Parameters:
            scope: A scope to use when instantiating
            resource_path: valid path to a resource that contains the data

        Returns:
            ListItemFactory: a new `GtkBuilderListItemFactory`

        """
        ...

class BuilderListItemFactoryClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class BuilderScope(GObject.GInterface):
    """
    `GtkBuilderScope` is an interface to provide language binding support
    to `GtkBuilder`.

    The goal of `GtkBuilderScope` is to look up programming-language-specific
    values for strings that are given in a `GtkBuilder` UI file.

    The primary intended audience is bindings that want to provide deeper
    integration of `GtkBuilder` into the language.

    A `GtkBuilderScope` instance may be used with multiple `GtkBuilder` objects,
    even at once.

    By default, GTK will use its own implementation of `GtkBuilderScope`
    for the C language which can be created via [ctor@Gtk.BuilderCScope.new].

    If you implement `GtkBuilderScope` for a language binding, you
    may want to (partially) derive from or fall back to a [class@Gtk.BuilderCScope],
    as that class implements support for automatic lookups from C symbols.



    Interface GtkBuilderScope

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

class BuilderScopeInterface(GObject.GPointer):
    """
    The virtual function table to implement for `GtkBuilderScope` implementations.
    Default implementations for each function do exist, but they usually just fail,
    so it is suggested that implementations implement all of them.

    :Constructors:

    ::

        BuilderScopeInterface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    get_type_from_name: Callable[[BuilderScope, Builder, str], Type] = ...
    get_type_from_function: Callable[[BuilderScope, Builder, str], Type] = ...
    create_closure: Callable[
        [BuilderScope, Builder, str, BuilderClosureFlags, GObject.Object],
        Callable[..., Any],
    ] = ...

class Button(Widget, Accessible, Actionable, Buildable, ConstraintTarget):
    """
    The `GtkButton` widget is generally used to trigger a callback function that is
    called when the button is pressed.

    ![An example GtkButton](button.png)

    The `GtkButton` widget can hold any valid child widget. That is, it can hold
    almost any other standard `GtkWidget`. The most commonly used child is the
    `GtkLabel`.

    # CSS nodes

    `GtkButton` has a single CSS node with name button. The node will get the
    style classes .image-button or .text-button, if the content is just an
    image or label, respectively. It may also receive the .flat style class.
    When activating a button via the keyboard, the button will temporarily
    gain the .keyboard-activating style class.

    Other style classes that are commonly used with `GtkButton` include
    .suggested-action and .destructive-action. In special cases, buttons
    can be made round by adding the .circular style class.

    Button-like widgets like [class@Gtk.ToggleButton], [class@Gtk.MenuButton],
    [class@Gtk.VolumeButton], [class@Gtk.LockButton], [class@Gtk.ColorButton]
    or [class@Gtk.FontButton] use style classes such as .toggle, .popup, .scale,
    .lock, .color on the button node to differentiate themselves from a plain
    `GtkButton`.

    # Accessibility

    `GtkButton` uses the %GTK_ACCESSIBLE_ROLE_BUTTON role.

    :Constructors:

    ::

        Button(**properties)
        new() -> Gtk.Widget
        new_from_icon_name(icon_name:str) -> Gtk.Widget
        new_with_label(label:str) -> Gtk.Widget
        new_with_mnemonic(label:str) -> Gtk.Widget

    Object GtkButton

    Signals from GtkButton:
      activate ()
      clicked ()

    Properties from GtkButton:
      label -> gchararray: label
      has-frame -> gboolean: has-frame
      use-underline -> gboolean: use-underline
      icon-name -> gchararray: icon-name
      child -> GtkWidget: child
      can-shrink -> gboolean: can-shrink

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Actionable.Props,
        Buildable.Props,
        ConstraintTarget.Props,
    ):
        can_shrink: bool
        """
        Whether the size of the button can be made smaller than the natural
        size of its contents.

        For text buttons, setting this property will allow ellipsizing the label.

        If the contents of a button are an icon or a custom widget, setting this
        property has no effect.
        """
        child: Optional[Widget]
        """
        The child widget.
        """
        has_frame: bool
        """
        Whether the button has a frame.
        """
        icon_name: Optional[str]
        """
        The name of the icon used to automatically populate the button.
        """
        label: Optional[str]
        """
        Text of the label inside the button, if the button contains a label widget.
        """
        use_underline: bool
        """
        If set, an underline in the text indicates that the following character is
        to be used as mnemonic.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        can_shrink: bool = ...,
        child: Optional[Widget] = ...,
        has_frame: bool = ...,
        icon_name: str = ...,
        label: str = ...,
        use_underline: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        action_name: Optional[str] = ...,
        action_target: GLib.Variant = ...,
    ): ...
    def do_activate(self) -> None: ...
    def do_clicked(self) -> None: ...
    def get_can_shrink(self) -> bool:
        """
        Retrieves whether the button can be smaller than the natural
        size of its contents.

        Parameters:


        Returns:
            bool: true if the button can shrink, and false otherwise

        """
        ...

    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @button.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @button

        """
        ...

    def get_has_frame(self) -> bool:
        """
        Returns whether the button has a frame.

        Parameters:


        Returns:
            bool: %TRUE if the button has a frame

        """
        ...

    def get_icon_name(self) -> Optional[str]:
        """
        Returns the icon name of the button.

        If the icon name has not been set with [method@Gtk.Button.set_icon_name]
        the return value will be %NULL. This will be the case if you create
        an empty button with [ctor@Gtk.Button.new] to use as a container.

        Parameters:


        Returns:
            Optional[str]: The icon name set via [method@Gtk.Button.set_icon_name]

        """
        ...

    def get_label(self) -> Optional[str]:
        """
        Fetches the text from the label of the button.

        If the label text has not been set with [method@Gtk.Button.set_label]
        the return value will be %NULL. This will be the case if you create
        an empty button with [ctor@Gtk.Button.new] to use as a container.

        Parameters:


        Returns:
            Optional[str]: The text of the label widget. This string is owned
        by the widget and must not be modified or freed.

        """
        ...

    def get_use_underline(self) -> bool:
        """
        gets whether underlines are interpreted as mnemonics.

        See [method@Gtk.Button.set_use_underline].

        Parameters:


        Returns:
            bool: %TRUE if an embedded underline in the button label
        indicates the mnemonic accelerator keys.

        """
        ...

    @classmethod
    def new(cls) -> Button:
        """
        Creates a new `GtkButton` widget.

        To add a child widget to the button, use [method@Gtk.Button.set_child].

        Parameters:


        Returns:
            Widget: The newly created `GtkButton` widget.

        """
        ...

    @classmethod
    def new_from_icon_name(cls, icon_name: str) -> Button:
        """
        Creates a new button containing an icon from the current icon theme.

        If the icon name isn’t known, a “broken image” icon will be
        displayed instead. If the current icon theme is changed, the icon
        will be updated appropriately.

        Parameters:
            icon_name: an icon name

        Returns:
            Widget: a new `GtkButton` displaying the themed icon

        """
        ...

    @classmethod
    def new_with_label(cls, label: str) -> Button:
        """
        Creates a `GtkButton` widget with a `GtkLabel` child.

        Parameters:
            label: The text you want the `GtkLabel` to hold

        Returns:
            Widget: The newly created `GtkButton` widget

        """
        ...

    @classmethod
    def new_with_mnemonic(cls, label: str) -> Button:
        """
        Creates a new `GtkButton` containing a label.

        If characters in @label are preceded by an underscore, they are underlined.
        If you need a literal underscore character in a label, use “__” (two
        underscores). The first underlined character represents a keyboard
        accelerator called a mnemonic. Pressing <kbd>Alt</kbd> and that key
        activates the button.

        Parameters:
            label: The text of the button, with an underscore in front of the
        mnemonic character

        Returns:
            Widget: a new `GtkButton`

        """
        ...

    def set_can_shrink(self, can_shrink: bool) -> None:
        """
        Sets whether the button size can be smaller than the natural size of
        its contents.

        For text buttons, setting @can_shrink to true will ellipsize the label.

        For icons and custom children, this function has no effect.

        Parameters:
            can_shrink: whether the button can shrink

        Returns:

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @button.

        Note that by using this API, you take full responsibility for setting
        up the proper accessibility label and description information for @button.
        Most likely, you'll either set the accessibility label or description
        for @button explicitly, or you'll set a labelled-by or described-by
        relations from @child to @button.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_has_frame(self, has_frame: bool) -> None:
        """
        Sets the style of the button.

        Buttons can have a flat appearance or have a frame drawn around them.

        Parameters:
            has_frame: whether the button should have a visible frame

        Returns:

        """
        ...

    def set_icon_name(self, icon_name: str) -> None:
        """
        Adds a `GtkImage` with the given icon name as a child.

        If @button already contains a child widget, that child widget will
        be removed and replaced with the image.

        Parameters:
            icon_name: An icon name

        Returns:

        """
        ...

    def set_label(self, label: str) -> None:
        """
        Sets the text of the label of the button to @label.

        This will also clear any previously set labels.

        Parameters:
            label: a string

        Returns:

        """
        ...

    def set_use_underline(self, use_underline: bool) -> None:
        """
        Sets whether to use underlines as mnemonics.

        If true, an underline in the text of the button label indicates
        the next character should be used for the mnemonic accelerator key.

        Parameters:
            use_underline: %TRUE if underlines in the text indicate mnemonics

        Returns:

        """
        ...

class ButtonClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ButtonClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    clicked: Callable[[Button], None] = ...
    activate: Callable[[Button], None] = ...
    padding: list[None] = ...

class ButtonPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class CClosureExpression(Expression):
    """
    A variant of `GtkClosureExpression` using a C closure.

    :Constructors:

    ::

        CClosureExpression(**properties)
        new(value_type:GType, marshal:GObject.ClosureMarshal=None, params:list, callback_func:GObject.Callback, user_data=None) -> Gtk.CClosureExpression
    """

    class Props(Expression.Props): ...

    @classmethod
    def new(
        cls,
        value_type: Type,
        marshal: Optional[
            Callable[
                [Callable[..., Any], Optional[Any], Sequence[Any], None, None], None
            ]
        ],
        params: Sequence[Expression],
        callback_func: Callable[..., None],
        *user_data: Any,
    ) -> CClosureExpression:
        """
        Creates a `GtkExpression` that calls `callback_func` when it is evaluated.

        This function is a variant of [ctor@Gtk.ClosureExpression.new] that
        creates a `GClosure` by calling g_cclosure_new() with the given
        `callback_func`, `user_data` and `user_destroy`.

        Parameters:
            value_type: the type of the value that this expression evaluates to
            marshal: marshaller used for creating a closure
            params: expressions for each parameter
            callback_func: callback used for creating a closure
            user_data: user data used for creating a closure

        Returns:
            CClosureExpression: a new `GtkExpression`

        """
        ...

class Calendar(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkCalendar` is a widget that displays a Gregorian calendar, one month
    at a time.

    ![An example GtkCalendar](calendar.png)

    A `GtkCalendar` can be created with [ctor@Gtk.Calendar.new].

    The date that is currently displayed can be altered with
    [method@Gtk.Calendar.select_day].

    To place a visual marker on a particular day, use
    [method@Gtk.Calendar.mark_day] and to remove the marker,
    [method@Gtk.Calendar.unmark_day]. Alternative, all
    marks can be cleared with [method@Gtk.Calendar.clear_marks].

    The selected date can be retrieved from a `GtkCalendar` using
    [method@Gtk.Calendar.get_date].

    Users should be aware that, although the Gregorian calendar is the
    legal calendar in most countries, it was adopted progressively
    between 1582 and 1929. Display before these dates is likely to be
    historically incorrect.

    # CSS nodes

    ```
    calendar.view
    ├── header
    │ ├── button
    │ ├── stack.month
    │ ├── button
    │ ├── button
    │ ├── label.year
    │ ╰── button
    ╰── grid
    ╰── label[.day-name][.week-number][.day-number][.other-month][.today]
    ```

    `GtkCalendar` has a main node with name calendar. It contains a subnode
    called header containing the widgets for switching between years and months.

    The grid subnode contains all day labels, including week numbers on the left
    (marked with the .week-number css class) and day names on top (marked with the
    .day-name css class).

    Day labels that belong to the previous or next month get the .other-month
    style class. The label of the current day get the .today style class.

    Marked day labels get the :selected state assigned.

    :Constructors:

    ::

        Calendar(**properties)
        new() -> Gtk.Widget

    Object GtkCalendar

    Signals from GtkCalendar:
      day-selected ()
      prev-month ()
      next-month ()
      prev-year ()
      next-year ()

    Properties from GtkCalendar:
      year -> gint: year
      month -> gint: month
      day -> gint: day
      show-heading -> gboolean: show-heading
      show-day-names -> gboolean: show-day-names
      show-week-numbers -> gboolean: show-week-numbers

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        day: int
        """
        The selected day (as a number between 1 and 31).
        """
        month: int
        """
        The selected month (as a number between 0 and 11).

        This property gets initially set to the current month.
        """
        show_day_names: bool
        """
        Determines whether day names are displayed.
        """
        show_heading: bool
        """
        Determines whether a heading is displayed.
        """
        show_week_numbers: bool
        """
        Determines whether week numbers are displayed.
        """
        year: int
        """
        The selected year.

        This property gets initially set to the current year.
        """

    props: Props = ...
    def __init__(
        self,
        day: int = ...,
        month: int = ...,
        show_day_names: bool = ...,
        show_heading: bool = ...,
        show_week_numbers: bool = ...,
        year: int = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def clear_marks(self) -> None:
        """
        Remove all visual markers.

        Parameters:


        Returns:

        """
        ...

    def get_date(self) -> GLib.DateTime:
        """
        Returns a `GDateTime` representing the shown
        year, month and the selected day.

        The returned date is in the local time zone.

        Parameters:


        Returns:
            GLib.DateTime: the `GDate` representing the shown date

        """
        ...

    def get_day_is_marked(self, day: int) -> bool:
        """
        Returns if the @day of the @calendar is already marked.

        Parameters:
            day: the day number between 1 and 31.

        Returns:
            bool: whether the day is marked.

        """
        ...

    def get_show_day_names(self) -> bool:
        """
        Returns whether @self is currently showing the names
        of the week days.

        This is the value of the [property@Gtk.Calendar:show-day-names]
        property.

        Parameters:


        Returns:
            bool: Whether the calendar shows day names.

        """
        ...

    def get_show_heading(self) -> bool:
        """
        Returns whether @self is currently showing the heading.

        This is the value of the [property@Gtk.Calendar:show-heading]
        property.

        Parameters:


        Returns:
            bool: Whether the calendar is showing a heading.

        """
        ...

    def get_show_week_numbers(self) -> bool:
        """
        Returns whether @self is showing week numbers right
        now.

        This is the value of the [property@Gtk.Calendar:show-week-numbers]
        property.

        Parameters:


        Returns:
            bool: Whether the calendar is showing week numbers.

        """
        ...

    def mark_day(self, day: int) -> None:
        """
        Places a visual marker on a particular day of the current month.

        Parameters:
            day: the day number to mark between 1 and 31.

        Returns:

        """
        ...

    @classmethod
    def new(cls) -> Calendar:
        """
        Creates a new calendar, with the current date being selected.

        Parameters:


        Returns:
            Widget: a newly `GtkCalendar` widget

        """
        ...

    def select_day(self, date: GLib.DateTime) -> None:
        """
        Switches to @date's year and month and select its day.

        Parameters:
            date: a `GDateTime` representing the day to select

        Returns:

        """
        ...

    def set_show_day_names(self, value: bool) -> None:
        """
        Sets whether the calendar shows day names.

        Parameters:
            value: Whether to show day names above the day numbers

        Returns:

        """
        ...

    def set_show_heading(self, value: bool) -> None:
        """
        Sets whether the calendar should show a heading.

        The heading contains the current year and month as well as
        buttons for changing both.

        Parameters:
            value: Whether to show the heading in the calendar

        Returns:

        """
        ...

    def set_show_week_numbers(self, value: bool) -> None:
        """
        Sets whether week numbers are shown in the calendar.

        Parameters:
            value: whether to show week numbers on the left of the days

        Returns:

        """
        ...

    def unmark_day(self, day: int) -> None:
        """
        Removes the visual marker from a particular day.

        Parameters:
            day: the day number to unmark between 1 and 31.

        Returns:

        """
        ...

class CallbackAction(ShortcutAction):
    """
    A `GtkShortcutAction` that invokes a callback.

    :Constructors:

    ::

        CallbackAction(**properties)
        new(callback:Gtk.ShortcutFunc=None) -> Gtk.CallbackAction

    Object GtkCallbackAction

    Signals from GObject:
      notify (GParam)
    """

    class Props(ShortcutAction.Props): ...

    @classmethod
    def new(
        cls, callback: Optional[Callable[..., bool]] = None, *data: Any
    ) -> CallbackAction:
        """
        Create a custom action that calls the given @callback when
        activated.

        Parameters:
            callback: the callback to call
            data: the data to be passed to @callback

        Returns:
            CallbackAction: A new shortcut action

        """
        ...

class CallbackActionClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

@deprecated("List views use widgets for displaying their contents")
class CellArea(GObject.InitiallyUnowned, Buildable, CellLayout):
    """
    An abstract class for laying out `GtkCellRenderer`s

    The `GtkCellArea` is an abstract class for [iface@Gtk.CellLayout]
    widgets (also referred to as \"layouting widgets\") to interface with
    an arbitrary number of [class@Gtk.CellRenderer]s and interact with the user
    for a given [iface@Gtk.TreeModel] row.

    The cell area handles events, focus navigation, drawing and
    size requests and allocations for a given row of data.

    Usually users dont have to interact with the `GtkCellArea` directly
    unless they are implementing a cell-layouting widget themselves.

    ## Requesting area sizes

    As outlined in
    [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management),
    GTK uses a height-for-width
    geometry management system to compute the sizes of widgets and user
    interfaces. `GtkCellArea` uses the same semantics to calculate the
    size of an area for an arbitrary number of `GtkTreeModel` rows.

    When requesting the size of a cell area one needs to calculate
    the size for a handful of rows, and this will be done differently by
    different layouting widgets. For instance a [class@Gtk.TreeViewColumn]
    always lines up the areas from top to bottom while a [class@Gtk.IconView]
    on the other hand might enforce that all areas received the same
    width and wrap the areas around, requesting height for more cell
    areas when allocated less width.

    It’s also important for areas to maintain some cell
    alignments with areas rendered for adjacent rows (cells can
    appear “columnized” inside an area even when the size of
    cells are different in each row). For this reason the `GtkCellArea`
    uses a [class@Gtk.CellAreaContext] object to store the alignments
    and sizes along the way (as well as the overall largest minimum
    and natural size for all the rows which have been calculated
    with the said context).

    The [class@Gtk.CellAreaContext] is an opaque object specific to the
    `GtkCellArea` which created it (see [method@Gtk.CellArea.create_context]).

    The owning cell-layouting widget can create as many contexts as
    it wishes to calculate sizes of rows which should receive the
    same size in at least one orientation (horizontally or vertically),
    However, it’s important that the same [class@Gtk.CellAreaContext] which
    was used to request the sizes for a given `GtkTreeModel` row be
    used when rendering or processing events for that row.

    In order to request the width of all the rows at the root level
    of a `GtkTreeModel` one would do the following:

    ```c
    GtkTreeIter iter;
    int minimum_width;
    int natural_width;

    valid = gtk_tree_model_get_iter_first (model, &iter);
    while (valid)
    {
    gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
    gtk_cell_area_get_preferred_width (area, context, widget, NULL, NULL);

    valid = gtk_tree_model_iter_next (model, &iter);
    }

    gtk_cell_area_context_get_preferred_width (context, &minimum_width, &natural_width);
    ```

    Note that in this example it’s not important to observe the
    returned minimum and natural width of the area for each row
    unless the cell-layouting object is actually interested in the
    widths of individual rows. The overall width is however stored
    in the accompanying `GtkCellAreaContext` object and can be consulted
    at any time.

    This can be useful since `GtkCellLayout` widgets usually have to
    support requesting and rendering rows in treemodels with an
    exceedingly large amount of rows. The `GtkCellLayout` widget in
    that case would calculate the required width of the rows in an
    idle or timeout source (see [func@GLib.timeout_add]) and when the widget
    is requested its actual width in [vfunc@Gtk.Widget.measure]
    it can simply consult the width accumulated so far in the
    `GtkCellAreaContext` object.

    A simple example where rows are rendered from top to bottom and
    take up the full width of the layouting widget would look like:

    ```c
    static void
    foo_get_preferred_width (GtkWidget *widget,
    int *minimum_size,
    int *natural_size)
    {
    Foo *self = FOO (widget);
    FooPrivate *priv = foo_get_instance_private (self);

    foo_ensure_at_least_one_handfull_of_rows_have_been_requested (self);

    gtk_cell_area_context_get_preferred_width (priv->context, minimum_size, natural_size);
    }
    ```

    In the above example the `Foo` widget has to make sure that some
    row sizes have been calculated (the amount of rows that `Foo` judged
    was appropriate to request space for in a single timeout iteration)
    before simply returning the amount of space required by the area via
    the `GtkCellAreaContext`.

    Requesting the height for width (or width for height) of an area is
    a similar task except in this case the `GtkCellAreaContext` does not
    store the data (actually, it does not know how much space the layouting
    widget plans to allocate it for every row. It’s up to the layouting
    widget to render each row of data with the appropriate height and
    width which was requested by the `GtkCellArea`).

    In order to request the height for width of all the rows at the
    root level of a `GtkTreeModel` one would do the following:

    ```c
    GtkTreeIter iter;
    int minimum_height;
    int natural_height;
    int full_minimum_height = 0;
    int full_natural_height = 0;

    valid = gtk_tree_model_get_iter_first (model, &iter);
    while (valid)
    {
    gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
    gtk_cell_area_get_preferred_height_for_width (area, context, widget,
    width, &minimum_height, &natural_height);

    if (width_is_for_allocation)
    cache_row_height (&iter, minimum_height, natural_height);

    full_minimum_height += minimum_height;
    full_natural_height += natural_height;

    valid = gtk_tree_model_iter_next (model, &iter);
    }
    ```

    Note that in the above example we would need to cache the heights
    returned for each row so that we would know what sizes to render the
    areas for each row. However we would only want to really cache the
    heights if the request is intended for the layouting widgets real
    allocation.

    In some cases the layouting widget is requested the height for an
    arbitrary for_width, this is a special case for layouting widgets
    who need to request size for tens of thousands of rows. For this
    case it’s only important that the layouting widget calculate
    one reasonably sized chunk of rows and return that height
    synchronously. The reasoning here is that any layouting widget is
    at least capable of synchronously calculating enough height to fill
    the screen height (or scrolled window height) in response to a single
    call to [vfunc@Gtk.Widget.measure]. Returning
    a perfect height for width that is larger than the screen area is
    inconsequential since after the layouting receives an allocation
    from a scrolled window it simply continues to drive the scrollbar
    values while more and more height is required for the row heights
    that are calculated in the background.

    ## Rendering Areas

    Once area sizes have been acquired at least for the rows in the
    visible area of the layouting widget they can be rendered at
    [vfunc@Gtk.Widget.snapshot] time.

    A crude example of how to render all the rows at the root level
    runs as follows:

    ```c
    GtkAllocation allocation;
    GdkRectangle cell_area = { 0, };
    GtkTreeIter iter;
    int minimum_width;
    int natural_width;

    gtk_widget_get_allocation (widget, &allocation);
    cell_area.width = allocation.width;

    valid = gtk_tree_model_get_iter_first (model, &iter);
    while (valid)
    {
    cell_area.height = get_cached_height_for_row (&iter);

    gtk_cell_area_apply_attributes (area, model, &iter, FALSE, FALSE);
    gtk_cell_area_render (area, context, widget, cr,
    &cell_area, &cell_area, state_flags, FALSE);

    cell_area.y += cell_area.height;

    valid = gtk_tree_model_iter_next (model, &iter);
    }
    ```

    Note that the cached height in this example really depends on how
    the layouting widget works. The layouting widget might decide to
    give every row its minimum or natural height or, if the model content
    is expected to fit inside the layouting widget without scrolling, it
    would make sense to calculate the allocation for each row at
    the time the widget is allocated using [func@Gtk.distribute_natural_allocation].

    ## Handling Events and Driving Keyboard Focus

    Passing events to the area is as simple as handling events on any
    normal widget and then passing them to the [method@Gtk.CellArea.event]
    API as they come in. Usually `GtkCellArea` is only interested in
    button events, however some customized derived areas can be implemented
    who are interested in handling other events. Handling an event can
    trigger the [`signal@Gtk.CellArea::focus-changed`] signal to fire; as well
    as [`signal@Gtk.CellArea::add-editable`] in the case that an editable cell
    was clicked and needs to start editing. You can call
    [method@Gtk.CellArea.stop_editing] at any time to cancel any cell editing
    that is currently in progress.

    The `GtkCellArea` drives keyboard focus from cell to cell in a way
    similar to `GtkWidget`. For layouting widgets that support giving
    focus to cells it’s important to remember to pass `GTK_CELL_RENDERER_FOCUSED`
    to the area functions for the row that has focus and to tell the
    area to paint the focus at render time.

    Layouting widgets that accept focus on cells should implement the
    [vfunc@Gtk.Widget.focus] virtual method. The layouting widget is always
    responsible for knowing where `GtkTreeModel` rows are rendered inside
    the widget, so at [vfunc@Gtk.Widget.focus] time the layouting widget
    should use the `GtkCellArea` methods to navigate focus inside the area
    and then observe the [enum@Gtk.DirectionType] to pass the focus to adjacent
    rows and areas.

    A basic example of how the [vfunc@Gtk.Widget.focus] virtual method
    should be implemented:

    ```
    static gboolean
    foo_focus (GtkWidget *widget,
    GtkDirectionType direction)
    {
    Foo *self = FOO (widget);
    FooPrivate *priv = foo_get_instance_private (self);
    int focus_row = priv->focus_row;
    gboolean have_focus = FALSE;

    if (!gtk_widget_has_focus (widget))
    gtk_widget_grab_focus (widget);

    valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, priv->focus_row);
    while (valid)
    {
    gtk_cell_area_apply_attributes (priv->area, priv->model, &iter, FALSE, FALSE);

    if (gtk_cell_area_focus (priv->area, direction))
    {
    priv->focus_row = focus_row;
    have_focus = TRUE;
    break;
    }
    else
    {
    if (direction == GTK_DIR_RIGHT ||
    direction == GTK_DIR_LEFT)
    break;
    else if (direction == GTK_DIR_UP ||
    direction == GTK_DIR_TAB_BACKWARD)
    {
    if (focus_row == 0)
    break;
    else
    {
    focus_row--;
    valid = gtk_tree_model_iter_nth_child (priv->model, &iter, NULL, focus_row);
    }
    }
    else
    {
    if (focus_row == last_row)
    break;
    else
    {
    focus_row++;
    valid = gtk_tree_model_iter_next (priv->model, &iter);
    }
    }
    }
    }
    return have_focus;
    }
    ```

    Note that the layouting widget is responsible for matching the
    `GtkDirectionType` values to the way it lays out its cells.

    ## Cell Properties

    The `GtkCellArea` introduces cell properties for `GtkCellRenderer`s.
    This provides some general interfaces for defining the relationship
    cell areas have with their cells. For instance in a [class@Gtk.CellAreaBox]
    a cell might “expand” and receive extra space when the area is allocated
    more than its full natural request, or a cell might be configured to “align”
    with adjacent rows which were requested and rendered with the same
    `GtkCellAreaContext`.

    Use [method@Gtk.CellAreaClass.install_cell_property] to install cell
    properties for a cell area class and [method@Gtk.CellAreaClass.find_cell_property]
    or [method@Gtk.CellAreaClass.list_cell_properties] to get information about
    existing cell properties.

    To set the value of a cell property, use [method@Gtk.CellArea.cell_set_property],
    [method@Gtk.CellArea.cell_set] or [method@Gtk.CellArea.cell_set_valist]. To obtain
    the value of a cell property, use [method@Gtk.CellArea.cell_get_property]
    [method@Gtk.CellArea.cell_get] or [method@Gtk.CellArea.cell_get_valist].

    :Constructors:

    ::

        CellArea(**properties)

    Object GtkCellArea

    Signals from GtkCellArea:
      apply-attributes (GtkTreeModel, GtkTreeIter, gboolean, gboolean)
      add-editable (GtkCellRenderer, GtkCellEditable, GdkRectangle, gchararray)
      remove-editable (GtkCellRenderer, GtkCellEditable)
      focus-changed (GtkCellRenderer, gchararray)

    Properties from GtkCellArea:
      focus-cell -> GtkCellRenderer: focus-cell
      edited-cell -> GtkCellRenderer: edited-cell
      edit-widget -> GtkCellEditable: edit-widget

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.InitiallyUnowned.Props, Buildable.Props, CellLayout.Props):
        edit_widget: Optional[CellEditable]
        """
        The widget currently editing the edited cell

        This property is read-only and only changes as
        a result of a call gtk_cell_area_activate_cell().
        """
        edited_cell: Optional[CellRenderer]
        """
        The cell in the area that is currently edited

        This property is read-only and only changes as
        a result of a call gtk_cell_area_activate_cell().
        """
        focus_cell: Optional[CellRenderer]
        """
        The cell in the area that currently has focus
        """

    props: Props = ...
    parent_instance: GObject.InitiallyUnowned = ...
    def __init__(self, focus_cell: Optional[CellRenderer] = ...): ...
    @deprecated("This method is deprecated")
    def activate(
        self,
        context: CellAreaContext,
        widget: Widget,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
        edit_only: bool,
    ) -> bool:
        """
        Activates @area, usually by activating the currently focused
        cell, however some subclasses which embed widgets in the area
        can also activate a widget if it currently has the focus.

        Parameters:
            context: the `GtkCellArea`Context in context with the current row data
            widget: the `GtkWidget` that @area is rendering on
            cell_area: the size and location of @area relative to @widget’s allocation
            flags: the `GtkCellRenderer`State flags for @area for this row of data.
            edit_only: if %TRUE then only cell renderers that are %GTK_CELL_RENDERER_MODE_EDITABLE
        will be activated.

        Returns:
            bool: Whether @area was successfully activated.

        """
        ...

    @deprecated("This method is deprecated")
    def activate_cell(
        self,
        widget: Widget,
        renderer: CellRenderer,
        event: Gdk.Event,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
    ) -> bool:
        """
        This is used by `GtkCellArea` subclasses when handling events
        to activate cells, the base `GtkCellArea` class activates cells
        for keyboard events for free in its own GtkCellArea->activate()
        implementation.

        Parameters:
            widget: the `GtkWidget` that @area is rendering onto
            renderer: the `GtkCellRenderer` in @area to activate
            event: the `GdkEvent` for which cell activation should occur
            cell_area: the `GdkRectangle` in @widget relative coordinates
        of @renderer for the current row.
            flags: the `GtkCellRenderer`State for @renderer

        Returns:
            bool: whether cell activation was successful

        """
        ...

    @deprecated("This method is deprecated")
    def add(self, renderer: CellRenderer) -> None:
        """
        Adds @renderer to @area with the default child cell properties.

        Parameters:
            renderer: the `GtkCellRenderer` to add to @area

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def add_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> None:
        """
        Adds @sibling to @renderer’s focusable area, focus will be drawn
        around @renderer and all of its siblings if @renderer can
        focus for a given row.

        Events handled by focus siblings can also activate the given
        focusable @renderer.

        Parameters:
            renderer: the `GtkCellRenderer` expected to have focus
            sibling: the `GtkCellRenderer` to add to @renderer’s focus area

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def apply_attributes(
        self,
        tree_model: TreeModel,
        iter: TreeIter,
        is_expander: bool,
        is_expanded: bool,
    ) -> None:
        """
        Applies any connected attributes to the renderers in
        @area by pulling the values from @tree_model.

        Parameters:
            tree_model: the `GtkTreeModel` to pull values from
            iter: the `GtkTreeIter` in @tree_model to apply values for
            is_expander: whether @iter has children
            is_expanded: whether @iter is expanded in the view and
        children are visible

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def attribute_connect(
        self, renderer: CellRenderer, attribute: str, column: int
    ) -> None:
        """
        Connects an @attribute to apply values from @column for the
        `GtkTreeModel` in use.

        Parameters:
            renderer: the `GtkCellRenderer` to connect an attribute for
            attribute: the attribute name
            column: the `GtkTreeModel` column to fetch attribute values from

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def attribute_disconnect(self, renderer: CellRenderer, attribute: str) -> None:
        """
        Disconnects @attribute for the @renderer in @area so that
        attribute will no longer be updated with values from the
        model.

        Parameters:
            renderer: the `GtkCellRenderer` to disconnect an attribute for
            attribute: the attribute name

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def attribute_get_column(self, renderer: CellRenderer, attribute: str) -> int:
        """
        Returns the model column that an attribute has been mapped to,
        or -1 if the attribute is not mapped.

        Parameters:
            renderer: a `GtkCellRenderer`
            attribute: an attribute on the renderer

        Returns:
            int: the model column, or -1

        """
        ...

    @deprecated("This method is deprecated")
    def cell_get_property(
        self, renderer: CellRenderer, property_name: str, value: Any
    ) -> None:
        """
        Gets the value of a cell property for @renderer in @area.

        Parameters:
            renderer: a `GtkCellRenderer` inside @area
            property_name: the name of the property to get
            value: a location to return the value

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def cell_set_property(
        self, renderer: CellRenderer, property_name: str, value: Any
    ) -> None:
        """
        Sets a cell property for @renderer in @area.

        Parameters:
            renderer: a `GtkCellRenderer` inside @area
            property_name: the name of the cell property to set
            value: the value to set the cell property to

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def copy_context(self, context: CellAreaContext) -> CellAreaContext:
        """
        This is sometimes needed for cases where rows need to share
        alignments in one orientation but may be separately grouped
        in the opposing orientation.

        For instance, `GtkIconView` creates all icons (rows) to have
        the same width and the cells theirin to have the same
        horizontal alignments. However each row of icons may have
        a separate collective height. `GtkIconView` uses this to
        request the heights of each row based on a context which
        was already used to request all the row widths that are
        to be displayed.

        Parameters:
            context: the `GtkCellArea`Context to copy

        Returns:
            CellAreaContext: a newly created `GtkCellArea`Context copy of @context.

        """
        ...

    @deprecated("This method is deprecated")
    def create_context(self) -> CellAreaContext:
        """
        Creates a `GtkCellArea`Context to be used with @area for
        all purposes. `GtkCellArea`Context stores geometry information
        for rows for which it was operated on, it is important to use
        the same context for the same row of data at all times (i.e.
        one should render and handle events with the same `GtkCellArea`Context
        which was used to request the size of those rows of data).

        Parameters:


        Returns:
            CellAreaContext: a newly created `GtkCellArea`Context which can be used with @area.

        """
        ...

    def do_activate(
        self,
        context: CellAreaContext,
        widget: Widget,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
        edit_only: bool,
    ) -> bool:
        """
        Activates @area, usually by activating the currently focused
        cell, however some subclasses which embed widgets in the area
        can also activate a widget if it currently has the focus.

        Parameters:
            context: the `GtkCellArea`Context in context with the current row data
            widget: the `GtkWidget` that @area is rendering on
            cell_area: the size and location of @area relative to @widget’s allocation
            flags: the `GtkCellRenderer`State flags for @area for this row of data.
            edit_only: if %TRUE then only cell renderers that are %GTK_CELL_RENDERER_MODE_EDITABLE
        will be activated.

        Returns:
            bool: Whether @area was successfully activated.

        """
        ...

    def do_add(self, renderer: CellRenderer) -> None:
        """
        Adds @renderer to @area with the default child cell properties.

        Parameters:
            renderer: the `GtkCellRenderer` to add to @area

        Returns:

        """
        ...

    def do_apply_attributes(
        self,
        tree_model: TreeModel,
        iter: TreeIter,
        is_expander: bool,
        is_expanded: bool,
    ) -> None:
        """
        Applies any connected attributes to the renderers in
        @area by pulling the values from @tree_model.

        Parameters:
            tree_model: the `GtkTreeModel` to pull values from
            iter: the `GtkTreeIter` in @tree_model to apply values for
            is_expander: whether @iter has children
            is_expanded: whether @iter is expanded in the view and
        children are visible

        Returns:

        """
        ...

    def do_copy_context(self, context: CellAreaContext) -> CellAreaContext:
        """
        This is sometimes needed for cases where rows need to share
        alignments in one orientation but may be separately grouped
        in the opposing orientation.

        For instance, `GtkIconView` creates all icons (rows) to have
        the same width and the cells theirin to have the same
        horizontal alignments. However each row of icons may have
        a separate collective height. `GtkIconView` uses this to
        request the heights of each row based on a context which
        was already used to request all the row widths that are
        to be displayed.

        Parameters:
            context: the `GtkCellArea`Context to copy

        Returns:
            CellAreaContext: a newly created `GtkCellArea`Context copy of @context.

        """
        ...

    def do_create_context(self) -> CellAreaContext:
        """
        Creates a `GtkCellArea`Context to be used with @area for
        all purposes. `GtkCellArea`Context stores geometry information
        for rows for which it was operated on, it is important to use
        the same context for the same row of data at all times (i.e.
        one should render and handle events with the same `GtkCellArea`Context
        which was used to request the size of those rows of data).

        Parameters:


        Returns:
            CellAreaContext: a newly created `GtkCellArea`Context which can be used with @area.

        """
        ...

    def do_event(
        self,
        context: CellAreaContext,
        widget: Widget,
        event: Gdk.Event,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
    ) -> int:
        """
        Delegates event handling to a `GtkCellArea`.

        Parameters:
            context: the `GtkCellArea`Context for this row of data.
            widget: the `GtkWidget` that @area is rendering to
            event: the `GdkEvent` to handle
            cell_area: the @widget relative coordinates for @area
            flags: the `GtkCellRenderer`State for @area in this row.

        Returns:
            int: %TRUE if the event was handled by @area.

        """
        ...

    def do_focus(self, direction: DirectionType) -> bool:
        """
        This should be called by the @area’s owning layout widget
        when focus is to be passed to @area, or moved within @area
        for a given @direction and row data.

        Implementing `GtkCellArea` classes should implement this
        method to receive and navigate focus in its own way particular
        to how it lays out cells.

        Parameters:
            direction: the `GtkDirectionType`

        Returns:
            bool: %TRUE if focus remains inside @area as a result of this call.

        """
        ...

    def do_foreach(self, callback: Callable[..., bool], *callback_data: Any) -> None:
        """
        Calls @callback for every `GtkCellRenderer` in @area.

        Parameters:
            callback: the `GtkCellCallback` to call
            callback_data: user provided data pointer

        Returns:

        """
        ...

    def do_foreach_alloc(
        self,
        context: CellAreaContext,
        widget: Widget,
        cell_area: Gdk.Rectangle,
        background_area: Gdk.Rectangle,
        callback: Callable[..., bool],
        *callback_data: Any,
    ) -> None:
        """
        Calls @callback for every `GtkCellRenderer` in @area with the
        allocated rectangle inside @cell_area.

        Parameters:
            context: the `GtkCellArea`Context for this row of data.
            widget: the `GtkWidget` that @area is rendering to
            cell_area: the @widget relative coordinates and size for @area
            background_area: the @widget relative coordinates of the background area
            callback: the `GtkCellAllocCallback` to call
            callback_data: user provided data pointer

        Returns:

        """
        ...

    def do_get_cell_property(
        self,
        renderer: CellRenderer,
        property_id: int,
        value: Any,
        pspec: GObject.ParamSpec,
    ) -> None: ...
    def do_get_preferred_height(
        self, context: CellAreaContext, widget: Widget
    ) -> Tuple[int, int]:
        """
        Retrieves a cell area’s initial minimum and natural height.

        @area will store some geometrical information in @context along the way;
        when requesting sizes over an arbitrary number of rows, it’s not important
        to check the @minimum_height and @natural_height of this call but rather to
        consult gtk_cell_area_context_get_preferred_height() after a series of
        requests.

        Parameters:
            context: the `GtkCellArea`Context to perform this request with
            widget: the `GtkWidget` where @area will be rendering

        Returns:
            int: location to store the minimum height
            int: location to store the natural height
        """
        ...

    def do_get_preferred_height_for_width(
        self, context: CellAreaContext, widget: Widget, width: int
    ) -> Tuple[int, int]:
        """
        Retrieves a cell area’s minimum and natural height if it would be given
        the specified @width.

        @area stores some geometrical information in @context along the way
        while calling gtk_cell_area_get_preferred_width(). It’s important to
        perform a series of gtk_cell_area_get_preferred_width() requests with
        @context first and then call gtk_cell_area_get_preferred_height_for_width()
        on each cell area individually to get the height for width of each
        fully requested row.

        If at some point, the width of a single row changes, it should be
        requested with gtk_cell_area_get_preferred_width() again and then
        the full width of the requested rows checked again with
        gtk_cell_area_context_get_preferred_width().

        Parameters:
            context: the `GtkCellArea`Context which has already been requested for widths.
            widget: the `GtkWidget` where @area will be rendering
            width: the width for which to check the height of this area

        Returns:
            int: location to store the minimum height
            int: location to store the natural height
        """
        ...

    def do_get_preferred_width(
        self, context: CellAreaContext, widget: Widget
    ) -> Tuple[int, int]:
        """
        Retrieves a cell area’s initial minimum and natural width.

        @area will store some geometrical information in @context along the way;
        when requesting sizes over an arbitrary number of rows, it’s not important
        to check the @minimum_width and @natural_width of this call but rather to
        consult gtk_cell_area_context_get_preferred_width() after a series of
        requests.

        Parameters:
            context: the `GtkCellArea`Context to perform this request with
            widget: the `GtkWidget` where @area will be rendering

        Returns:
            int: location to store the minimum width
            int: location to store the natural width
        """
        ...

    def do_get_preferred_width_for_height(
        self, context: CellAreaContext, widget: Widget, height: int
    ) -> Tuple[int, int]:
        """
        Retrieves a cell area’s minimum and natural width if it would be given
        the specified @height.

        @area stores some geometrical information in @context along the way
        while calling gtk_cell_area_get_preferred_height(). It’s important to
        perform a series of gtk_cell_area_get_preferred_height() requests with
        @context first and then call gtk_cell_area_get_preferred_width_for_height()
        on each cell area individually to get the height for width of each
        fully requested row.

        If at some point, the height of a single row changes, it should be
        requested with gtk_cell_area_get_preferred_height() again and then
        the full height of the requested rows checked again with
        gtk_cell_area_context_get_preferred_height().

        Parameters:
            context: the `GtkCellArea`Context which has already been requested for widths.
            widget: the `GtkWidget` where @area will be rendering
            height: the height for which to check the width of this area

        Returns:
            int: location to store the minimum width
            int: location to store the natural width
        """
        ...

    def do_get_request_mode(self) -> SizeRequestMode:
        """
        Gets whether the area prefers a height-for-width layout
        or a width-for-height layout.

        Parameters:


        Returns:
            SizeRequestMode: The `GtkSizeRequestMode` preferred by @area.

        """
        ...

    def do_is_activatable(self) -> bool:
        """
        Returns whether the area can do anything when activated,
        after applying new attributes to @area.

        Parameters:


        Returns:
            bool: whether @area can do anything when activated.

        """
        ...

    def do_remove(self, renderer: CellRenderer) -> None:
        """
        Removes @renderer from @area.

        Parameters:
            renderer: the `GtkCellRenderer` to remove from @area

        Returns:

        """
        ...

    def do_set_cell_property(
        self,
        renderer: CellRenderer,
        property_id: int,
        value: Any,
        pspec: GObject.ParamSpec,
    ) -> None: ...
    def do_snapshot(
        self,
        context: CellAreaContext,
        widget: Widget,
        snapshot: Snapshot,
        background_area: Gdk.Rectangle,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
        paint_focus: bool,
    ) -> None:
        """
        Snapshots @area’s cells according to @area’s layout onto at
        the given coordinates.

        Parameters:
            context: the `GtkCellArea`Context for this row of data.
            widget: the `GtkWidget` that @area is rendering to
            snapshot: the `GtkSnapshot` to draw to
            background_area: the @widget relative coordinates for @area’s background
            cell_area: the @widget relative coordinates for @area
            flags: the `GtkCellRenderer`State for @area in this row.
            paint_focus: whether @area should paint focus on focused cells for focused rows or not.

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def event(
        self,
        context: CellAreaContext,
        widget: Widget,
        event: Gdk.Event,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
    ) -> int:
        """
        Delegates event handling to a `GtkCellArea`.

        Parameters:
            context: the `GtkCellArea`Context for this row of data.
            widget: the `GtkWidget` that @area is rendering to
            event: the `GdkEvent` to handle
            cell_area: the @widget relative coordinates for @area
            flags: the `GtkCellRenderer`State for @area in this row.

        Returns:
            int: %TRUE if the event was handled by @area.

        """
        ...

    @deprecated("This method is deprecated")
    def find_cell_property(self, property_name: str) -> GObject.ParamSpec: ...
    @deprecated("This method is deprecated")
    def focus(self, direction: DirectionType) -> bool:
        """
        This should be called by the @area’s owning layout widget
        when focus is to be passed to @area, or moved within @area
        for a given @direction and row data.

        Implementing `GtkCellArea` classes should implement this
        method to receive and navigate focus in its own way particular
        to how it lays out cells.

        Parameters:
            direction: the `GtkDirectionType`

        Returns:
            bool: %TRUE if focus remains inside @area as a result of this call.

        """
        ...

    @deprecated("This method is deprecated")
    def foreach(self, callback: Callable[..., bool], *callback_data: Any) -> None:
        """
        Calls @callback for every `GtkCellRenderer` in @area.

        Parameters:
            callback: the `GtkCellCallback` to call
            callback_data: user provided data pointer

        Returns:

        """
        ...

    def foreach_alloc(
        self,
        context: CellAreaContext,
        widget: Widget,
        cell_area: Gdk.Rectangle,
        background_area: Gdk.Rectangle,
        callback: Callable[..., bool],
        *callback_data: Any,
    ) -> None:
        """
        Calls @callback for every `GtkCellRenderer` in @area with the
        allocated rectangle inside @cell_area.

        Parameters:
            context: the `GtkCellArea`Context for this row of data.
            widget: the `GtkWidget` that @area is rendering to
            cell_area: the @widget relative coordinates and size for @area
            background_area: the @widget relative coordinates of the background area
            callback: the `GtkCellAllocCallback` to call
            callback_data: user provided data pointer

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def get_cell_allocation(
        self,
        context: CellAreaContext,
        widget: Widget,
        renderer: CellRenderer,
        cell_area: Gdk.Rectangle,
    ) -> Gdk.Rectangle:
        """
        Derives the allocation of @renderer inside @area if @area
        were to be rendered in @cell_area.

        Parameters:
            context: the `GtkCellArea`Context used to hold sizes for @area.
            widget: the `GtkWidget` that @area is rendering on
            renderer: the `GtkCellRenderer` to get the allocation for
            cell_area: the whole allocated area for @area in @widget
        for this row

        Returns:
            Gdk.Rectangle: where to store the allocation for @renderer
        """
        ...

    @deprecated("This method is deprecated")
    def get_cell_at_position(
        self,
        context: CellAreaContext,
        widget: Widget,
        cell_area: Gdk.Rectangle,
        x: int,
        y: int,
    ) -> Tuple[CellRenderer, Gdk.Rectangle]:
        """
        Gets the `GtkCellRenderer` at @x and @y coordinates inside @area and optionally
        returns the full cell allocation for it inside @cell_area.

        Parameters:
            context: the `GtkCellArea`Context used to hold sizes for @area.
            widget: the `GtkWidget` that @area is rendering on
            cell_area: the whole allocated area for @area in @widget
        for this row
            x: the x position
            y: the y position

        Returns:
            CellRenderer: the `GtkCellRenderer` at @x and @y.
            Gdk.Rectangle: where to store the inner allocated area of the
        returned cell renderer
        """
        ...

    def get_current_path_string(self) -> str:
        """
        Gets the current `GtkTreePath` string for the currently
        applied `GtkTreeIter`, this is implicitly updated when
        gtk_cell_area_apply_attributes() is called and can be
        used to interact with renderers from `GtkCellArea`
        subclasses.

        Parameters:


        Returns:
            str: The current `GtkTreePath` string for the current
        attributes applied to @area. This string belongs to the area and
        should not be freed.

        """
        ...

    @deprecated("This method is deprecated")
    def get_edit_widget(self) -> Optional[CellEditable]:
        """
        Gets the `GtkCellEditable` widget currently used
        to edit the currently edited cell.

        Parameters:


        Returns:
            Optional[CellEditable]: The currently active `GtkCellEditable` widget

        """
        ...

    @deprecated("This method is deprecated")
    def get_edited_cell(self) -> Optional[CellRenderer]:
        """
        Gets the `GtkCellRenderer` in @area that is currently
        being edited.

        Parameters:


        Returns:
            Optional[CellRenderer]: The currently edited `GtkCellRenderer`

        """
        ...

    @deprecated("This method is deprecated")
    def get_focus_cell(self) -> Optional[CellRenderer]:
        """
        Retrieves the currently focused cell for @area

        Parameters:


        Returns:
            Optional[CellRenderer]: the currently focused cell in @area.

        """
        ...

    @deprecated("This method is deprecated")
    def get_focus_from_sibling(self, renderer: CellRenderer) -> Optional[CellRenderer]:
        """
        Gets the `GtkCellRenderer` which is expected to be focusable
        for which @renderer is, or may be a sibling.

        This is handy for `GtkCellArea` subclasses when handling events,
        after determining the renderer at the event location it can
        then chose to activate the focus cell for which the event
        cell may have been a sibling.

        Parameters:
            renderer: the `GtkCellRenderer`

        Returns:
            Optional[CellRenderer]: the `GtkCellRenderer`
        for which @renderer is a sibling

        """
        ...

    @deprecated("This method is deprecated")
    def get_focus_siblings(self, renderer: CellRenderer) -> list[CellRenderer]:
        """
        Gets the focus sibling cell renderers for @renderer.

        Parameters:
            renderer: the `GtkCellRenderer` expected to have focus

        Returns:
            list[CellRenderer]: A `GList` of `GtkCellRenderer`s.
        The returned list is internal and should not be freed.

        """
        ...

    @deprecated("This method is deprecated")
    def get_preferred_height(
        self, context: CellAreaContext, widget: Widget
    ) -> Tuple[int, int]:
        """
        Retrieves a cell area’s initial minimum and natural height.

        @area will store some geometrical information in @context along the way;
        when requesting sizes over an arbitrary number of rows, it’s not important
        to check the @minimum_height and @natural_height of this call but rather to
        consult gtk_cell_area_context_get_preferred_height() after a series of
        requests.

        Parameters:
            context: the `GtkCellArea`Context to perform this request with
            widget: the `GtkWidget` where @area will be rendering

        Returns:
            int: location to store the minimum height
            int: location to store the natural height
        """
        ...

    @deprecated("This method is deprecated")
    def get_preferred_height_for_width(
        self, context: CellAreaContext, widget: Widget, width: int
    ) -> Tuple[int, int]:
        """
        Retrieves a cell area’s minimum and natural height if it would be given
        the specified @width.

        @area stores some geometrical information in @context along the way
        while calling gtk_cell_area_get_preferred_width(). It’s important to
        perform a series of gtk_cell_area_get_preferred_width() requests with
        @context first and then call gtk_cell_area_get_preferred_height_for_width()
        on each cell area individually to get the height for width of each
        fully requested row.

        If at some point, the width of a single row changes, it should be
        requested with gtk_cell_area_get_preferred_width() again and then
        the full width of the requested rows checked again with
        gtk_cell_area_context_get_preferred_width().

        Parameters:
            context: the `GtkCellArea`Context which has already been requested for widths.
            widget: the `GtkWidget` where @area will be rendering
            width: the width for which to check the height of this area

        Returns:
            int: location to store the minimum height
            int: location to store the natural height
        """
        ...

    @deprecated("This method is deprecated")
    def get_preferred_width(
        self, context: CellAreaContext, widget: Widget
    ) -> Tuple[int, int]:
        """
        Retrieves a cell area’s initial minimum and natural width.

        @area will store some geometrical information in @context along the way;
        when requesting sizes over an arbitrary number of rows, it’s not important
        to check the @minimum_width and @natural_width of this call but rather to
        consult gtk_cell_area_context_get_preferred_width() after a series of
        requests.

        Parameters:
            context: the `GtkCellArea`Context to perform this request with
            widget: the `GtkWidget` where @area will be rendering

        Returns:
            int: location to store the minimum width
            int: location to store the natural width
        """
        ...

    @deprecated("This method is deprecated")
    def get_preferred_width_for_height(
        self, context: CellAreaContext, widget: Widget, height: int
    ) -> Tuple[int, int]:
        """
        Retrieves a cell area’s minimum and natural width if it would be given
        the specified @height.

        @area stores some geometrical information in @context along the way
        while calling gtk_cell_area_get_preferred_height(). It’s important to
        perform a series of gtk_cell_area_get_preferred_height() requests with
        @context first and then call gtk_cell_area_get_preferred_width_for_height()
        on each cell area individually to get the height for width of each
        fully requested row.

        If at some point, the height of a single row changes, it should be
        requested with gtk_cell_area_get_preferred_height() again and then
        the full height of the requested rows checked again with
        gtk_cell_area_context_get_preferred_height().

        Parameters:
            context: the `GtkCellArea`Context which has already been requested for widths.
            widget: the `GtkWidget` where @area will be rendering
            height: the height for which to check the width of this area

        Returns:
            int: location to store the minimum width
            int: location to store the natural width
        """
        ...

    def get_request_mode(self) -> SizeRequestMode:
        """
        Gets whether the area prefers a height-for-width layout
        or a width-for-height layout.

        Parameters:


        Returns:
            SizeRequestMode: The `GtkSizeRequestMode` preferred by @area.

        """
        ...

    @deprecated("This method is deprecated")
    def has_renderer(self, renderer: CellRenderer) -> bool:
        """
        Checks if @area contains @renderer.

        Parameters:
            renderer: the `GtkCellRenderer` to check

        Returns:
            bool: %TRUE if @renderer is in the @area.

        """
        ...

    @deprecated("This method is deprecated")
    def inner_cell_area(
        self, widget: Widget, cell_area: Gdk.Rectangle
    ) -> Gdk.Rectangle:
        """
        This is a convenience function for `GtkCellArea` implementations
        to get the inner area where a given `GtkCellRenderer` will be
        rendered. It removes any padding previously added by gtk_cell_area_request_renderer().

        Parameters:
            widget: the `GtkWidget` that @area is rendering onto
            cell_area: the @widget relative coordinates where one of @area’s cells
        is to be placed

        Returns:
            Gdk.Rectangle: the return location for the inner cell area
        """
        ...

    @deprecated("This method is deprecated")
    def install_cell_property(
        self, property_id: int, pspec: GObject.ParamSpec
    ) -> None: ...
    @deprecated("This method is deprecated")
    def is_activatable(self) -> bool:
        """
        Returns whether the area can do anything when activated,
        after applying new attributes to @area.

        Parameters:


        Returns:
            bool: whether @area can do anything when activated.

        """
        ...

    @deprecated("This method is deprecated")
    def is_focus_sibling(self, renderer: CellRenderer, sibling: CellRenderer) -> bool:
        """
        Returns whether @sibling is one of @renderer’s focus siblings
        (see gtk_cell_area_add_focus_sibling()).

        Parameters:
            renderer: the `GtkCellRenderer` expected to have focus
            sibling: the `GtkCellRenderer` to check against @renderer’s sibling list

        Returns:
            bool: %TRUE if @sibling is a focus sibling of @renderer

        """
        ...

    @deprecated("This method is deprecated")
    def list_cell_properties(self) -> list[GObject.ParamSpec]: ...
    @deprecated("This method is deprecated")
    def remove(self, renderer: CellRenderer) -> None:
        """
        Removes @renderer from @area.

        Parameters:
            renderer: the `GtkCellRenderer` to remove from @area

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def remove_focus_sibling(
        self, renderer: CellRenderer, sibling: CellRenderer
    ) -> None:
        """
        Removes @sibling from @renderer’s focus sibling list
        (see gtk_cell_area_add_focus_sibling()).

        Parameters:
            renderer: the `GtkCellRenderer` expected to have focus
            sibling: the `GtkCellRenderer` to remove from @renderer’s focus area

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def request_renderer(
        self,
        renderer: CellRenderer,
        orientation: Orientation,
        widget: Widget,
        for_size: int,
    ) -> Tuple[int, int]:
        """
        This is a convenience function for `GtkCellArea` implementations
        to request size for cell renderers. It’s important to use this
        function to request size and then use gtk_cell_area_inner_cell_area()
        at render and event time since this function will add padding
        around the cell for focus painting.

        Parameters:
            renderer: the `GtkCellRenderer` to request size for
            orientation: the `GtkOrientation` in which to request size
            widget: the `GtkWidget` that @area is rendering onto
            for_size: the allocation contextual size to request for, or -1 if
        the base request for the orientation is to be returned.

        Returns:
            int: location to store the minimum size
            int: location to store the natural size
        """
        ...

    @deprecated("This method is deprecated")
    def set_focus_cell(self, renderer: Optional[CellRenderer] = None) -> None:
        """
        Explicitly sets the currently focused cell to @renderer.

        This is generally called by implementations of
        `GtkCellAreaClass.focus()` or `GtkCellAreaClass.event()`,
        however it can also be used to implement functions such
        as gtk_tree_view_set_cursor_on_cell().

        Parameters:
            renderer: the `GtkCellRenderer` to give focus to

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def snapshot(
        self,
        context: CellAreaContext,
        widget: Widget,
        snapshot: Snapshot,
        background_area: Gdk.Rectangle,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
        paint_focus: bool,
    ) -> None:
        """
        Snapshots @area’s cells according to @area’s layout onto at
        the given coordinates.

        Parameters:
            context: the `GtkCellArea`Context for this row of data.
            widget: the `GtkWidget` that @area is rendering to
            snapshot: the `GtkSnapshot` to draw to
            background_area: the @widget relative coordinates for @area’s background
            cell_area: the @widget relative coordinates for @area
            flags: the `GtkCellRenderer`State for @area in this row.
            paint_focus: whether @area should paint focus on focused cells for focused rows or not.

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def stop_editing(self, canceled: bool) -> None:
        """
        Explicitly stops the editing of the currently edited cell.

        If @canceled is %TRUE, the currently edited cell renderer
        will emit the ::editing-canceled signal, otherwise the
        the ::editing-done signal will be emitted on the current
        edit widget.

        See gtk_cell_area_get_edited_cell() and gtk_cell_area_get_edit_widget().

        Parameters:
            canceled: whether editing was canceled.

        Returns:

        """
        ...

@deprecated("List views use widgets for displaying their contents")
class CellAreaBox(CellArea, Buildable, CellLayout, Orientable):
    """
    A cell area that renders GtkCellRenderers into a row or a column

    The `GtkCellAreaBox` renders cell renderers into a row or a column
    depending on its `GtkOrientation`.

    GtkCellAreaBox uses a notion of packing. Packing
    refers to adding cell renderers with reference to a particular position
    in a `GtkCellAreaBox`. There are two reference positions: the
    start and the end of the box.
    When the `GtkCellAreaBox` is oriented in the %GTK_ORIENTATION_VERTICAL
    orientation, the start is defined as the top of the box and the end is
    defined as the bottom. In the %GTK_ORIENTATION_HORIZONTAL orientation
    start is defined as the left side and the end is defined as the right
    side.

    Alignments of `GtkCellRenderer`s rendered in adjacent rows can be
    configured by configuring the `GtkCellAreaBox` align child cell property
    with gtk_cell_area_cell_set_property() or by specifying the \"align\"
    argument to gtk_cell_area_box_pack_start() and gtk_cell_area_box_pack_end().

    :Constructors:

    ::

        CellAreaBox(**properties)
        new() -> Gtk.CellArea

    Object GtkCellAreaBox

    Properties from GtkCellAreaBox:
      spacing -> gint: spacing

    Signals from GtkCellArea:
      apply-attributes (GtkTreeModel, GtkTreeIter, gboolean, gboolean)
      add-editable (GtkCellRenderer, GtkCellEditable, GdkRectangle, gchararray)
      remove-editable (GtkCellRenderer, GtkCellEditable)
      focus-changed (GtkCellRenderer, gchararray)

    Properties from GtkCellArea:
      focus-cell -> GtkCellRenderer: focus-cell
      edited-cell -> GtkCellRenderer: edited-cell
      edit-widget -> GtkCellEditable: edit-widget

    Signals from GObject:
      notify (GParam)
    """

    class Props(CellArea.Props, Buildable.Props, CellLayout.Props, Orientable.Props):
        spacing: int
        """
        The amount of space to reserve between cells.
        """

    props: Props = ...
    def __init__(
        self,
        spacing: int = ...,
        focus_cell: Optional[CellRenderer] = ...,
        orientation: Orientation = ...,
    ): ...
    @deprecated("This method is deprecated")
    def get_spacing(self) -> int:
        """
        Gets the spacing added between cell renderers.

        Parameters:


        Returns:
            int: the space added between cell renderers in @box.

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> CellAreaBox:
        """
        Creates a new `GtkCellAreaBox`.

        Parameters:


        Returns:
            CellArea: a newly created `GtkCellAreaBox`

        """
        ...

    @deprecated("This method is deprecated")
    def pack_end(
        self, renderer: CellRenderer, expand: bool, align: bool, fixed: bool
    ) -> None:
        """
        Adds @renderer to @box, packed with reference to the end of @box.

        The @renderer is packed after (away from end of) any other
        `GtkCellRenderer` packed with reference to the end of @box.

        Parameters:
            renderer: the `GtkCellRenderer` to add
            expand: whether @renderer should receive extra space when the area receives
        more than its natural size
            align: whether @renderer should be aligned in adjacent rows
            fixed: whether @renderer should have the same size in all rows

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def pack_start(
        self, renderer: CellRenderer, expand: bool, align: bool, fixed: bool
    ) -> None:
        """
        Adds @renderer to @box, packed with reference to the start of @box.

        The @renderer is packed after any other `GtkCellRenderer` packed
        with reference to the start of @box.

        Parameters:
            renderer: the `GtkCellRenderer` to add
            expand: whether @renderer should receive extra space when the area receives
        more than its natural size
            align: whether @renderer should be aligned in adjacent rows
            fixed: whether @renderer should have the same size in all rows

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_spacing(self, spacing: int) -> None:
        """
        Sets the spacing to add between cell renderers in @box.

        Parameters:
            spacing: the space to add between `GtkCellRenderer`s

        Returns:

        """
        ...

class CellAreaClass(GObject.GPointer):
    """
    :Constructors:

    ::

        CellAreaClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.InitiallyUnownedClass = ...
    add: Callable[[CellArea, CellRenderer], None] = ...
    remove: Callable[[CellArea, CellRenderer], None] = ...
    foreach: Callable[..., None] = ...
    foreach_alloc: Callable[..., None] = ...
    event: Callable[
        [
            CellArea,
            CellAreaContext,
            Widget,
            Gdk.Event,
            Gdk.Rectangle,
            CellRendererState,
        ],
        int,
    ] = ...
    snapshot: Callable[
        [
            CellArea,
            CellAreaContext,
            Widget,
            Snapshot,
            Gdk.Rectangle,
            Gdk.Rectangle,
            CellRendererState,
            bool,
        ],
        None,
    ] = ...
    apply_attributes: Callable[[CellArea, TreeModel, TreeIter, bool, bool], None] = ...
    create_context: Callable[[CellArea], CellAreaContext] = ...
    copy_context: Callable[[CellArea, CellAreaContext], CellAreaContext] = ...
    get_request_mode: Callable[[CellArea], SizeRequestMode] = ...
    get_preferred_width: Callable[
        [CellArea, CellAreaContext, Widget], Tuple[int, int]
    ] = ...
    get_preferred_height_for_width: Callable[
        [CellArea, CellAreaContext, Widget, int], Tuple[int, int]
    ] = ...
    get_preferred_height: Callable[
        [CellArea, CellAreaContext, Widget], Tuple[int, int]
    ] = ...
    get_preferred_width_for_height: Callable[
        [CellArea, CellAreaContext, Widget, int], Tuple[int, int]
    ] = ...
    set_cell_property: Callable[
        [CellArea, CellRenderer, int, Any, GObject.ParamSpec], None
    ] = ...
    get_cell_property: Callable[
        [CellArea, CellRenderer, int, Any, GObject.ParamSpec], None
    ] = ...
    focus: Callable[[CellArea, DirectionType], bool] = ...
    is_activatable: Callable[[CellArea], bool] = ...
    activate: Callable[
        [CellArea, CellAreaContext, Widget, Gdk.Rectangle, CellRendererState, bool],
        bool,
    ] = ...
    padding: list[None] = ...
    @deprecated("This method is deprecated")
    def find_cell_property(self, property_name: str) -> GObject.ParamSpec:
        """
        Finds a cell property of a cell area class by name.

        Parameters:
            property_name: the name of the child property to find

        Returns:
            GObject.ParamSpec: the `GParamSpec` of the child property

        """
        ...

    @deprecated("This method is deprecated")
    def install_cell_property(self, property_id: int, pspec: GObject.ParamSpec) -> None:
        """
        Installs a cell property on a cell area class.

        Parameters:
            property_id: the id for the property
            pspec: the `GParamSpec` for the property

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def list_cell_properties(self) -> list[GObject.ParamSpec]:
        """
        Returns all cell properties of a cell area class.

        Parameters:


        Returns:
            list[GObject.ParamSpec]: a newly
        allocated %NULL-terminated array of `GParamSpec`*. The array
        must be freed with g_free().

        """
        ...

@deprecated("This object will be removed in GTK 5")
class CellAreaContext(GObject.Object):
    """
    Stores geometrical information for a series of rows in a GtkCellArea

    The `GtkCellAreaContext` object is created by a given `GtkCellArea`
    implementation via its `GtkCellAreaClass.create_context()` virtual
    method and is used to store cell sizes and alignments for a series of
    `GtkTreeModel` rows that are requested and rendered in the same context.

    `GtkCellLayout` widgets can create any number of contexts in which to
    request and render groups of data rows. However, it’s important that the
    same context which was used to request sizes for a given `GtkTreeModel`
    row also be used for the same row when calling other `GtkCellArea` APIs
    such as gtk_cell_area_render() and gtk_cell_area_event().

    :Constructors:

    ::

        CellAreaContext(**properties)

    Object GtkCellAreaContext

    Properties from GtkCellAreaContext:
      area -> GtkCellArea: area
      minimum-width -> gint: minimum-width
      natural-width -> gint: natural-width
      minimum-height -> gint: minimum-height
      natural-height -> gint: natural-height

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        area: CellArea
        """
        The `GtkCellArea` this context was created by
        """
        minimum_height: int
        """
        The minimum height for the `GtkCellArea` in this context
        for all `GtkTreeModel` rows that this context was requested
        for using gtk_cell_area_get_preferred_height().
        """
        minimum_width: int
        """
        The minimum width for the `GtkCellArea` in this context
        for all `GtkTreeModel` rows that this context was requested
        for using gtk_cell_area_get_preferred_width().
        """
        natural_height: int
        """
        The natural height for the `GtkCellArea` in this context
        for all `GtkTreeModel` rows that this context was requested
        for using gtk_cell_area_get_preferred_height().
        """
        natural_width: int
        """
        The natural width for the `GtkCellArea` in this context
        for all `GtkTreeModel` rows that this context was requested
        for using gtk_cell_area_get_preferred_width().
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    def __init__(self, area: CellArea = ...): ...
    @deprecated("This object will be removed in GTK 5")
    def allocate(self, width: int, height: int) -> None:
        """
        Allocates a width and/or a height for all rows which are to be
        rendered with @context.

        Usually allocation is performed only horizontally or sometimes
        vertically since a group of rows are usually rendered side by
        side vertically or horizontally and share either the same width
        or the same height. Sometimes they are allocated in both horizontal
        and vertical orientations producing a homogeneous effect of the
        rows. This is generally the case for `GtkTreeView` when
        `GtkTreeView:fixed-height-mode` is enabled.

        Parameters:
            width: the allocated width for all `GtkTreeModel` rows rendered
        with @context, or -1
            height: the allocated height for all `GtkTreeModel` rows rendered
        with @context, or -1

        Returns:

        """
        ...

    def do_allocate(self, width: int, height: int) -> None:
        """
        Allocates a width and/or a height for all rows which are to be
        rendered with @context.

        Usually allocation is performed only horizontally or sometimes
        vertically since a group of rows are usually rendered side by
        side vertically or horizontally and share either the same width
        or the same height. Sometimes they are allocated in both horizontal
        and vertical orientations producing a homogeneous effect of the
        rows. This is generally the case for `GtkTreeView` when
        `GtkTreeView:fixed-height-mode` is enabled.

        Parameters:
            width: the allocated width for all `GtkTreeModel` rows rendered
        with @context, or -1
            height: the allocated height for all `GtkTreeModel` rows rendered
        with @context, or -1

        Returns:

        """
        ...

    def do_get_preferred_height_for_width(self, width: int) -> Tuple[int, int]:
        """
        Gets the accumulative preferred height for @width for all rows
        which have been requested for the same said @width with this context.

        After gtk_cell_area_context_reset() is called and/or before ever
        requesting the size of a `GtkCellArea`, the returned values are -1.

        Parameters:
            width: a proposed width for allocation

        Returns:
            int: location to store the minimum height
            int: location to store the natural height
        """
        ...

    def do_get_preferred_width_for_height(self, height: int) -> Tuple[int, int]:
        """
        Gets the accumulative preferred width for @height for all rows which
        have been requested for the same said @height with this context.

        After gtk_cell_area_context_reset() is called and/or before ever
        requesting the size of a `GtkCellArea`, the returned values are -1.

        Parameters:
            height: a proposed height for allocation

        Returns:
            int: location to store the minimum width
            int: location to store the natural width
        """
        ...

    def do_reset(self) -> None:
        """
        Resets any previously cached request and allocation
        data.

        When underlying `GtkTreeModel` data changes its
        important to reset the context if the content
        size is allowed to shrink. If the content size
        is only allowed to grow (this is usually an option
        for views rendering large data stores as a measure
        of optimization), then only the row that changed
        or was inserted needs to be (re)requested with
        gtk_cell_area_get_preferred_width().

        When the new overall size of the context requires
        that the allocated size changes (or whenever this
        allocation changes at all), the variable row
        sizes need to be re-requested for every row.

        For instance, if the rows are displayed all with
        the same width from top to bottom then a change
        in the allocated width necessitates a recalculation
        of all the displayed row heights using
        gtk_cell_area_get_preferred_height_for_width().

        Parameters:


        Returns:

        """
        ...

    @deprecated("This object will be removed in GTK 5")
    def get_allocation(self) -> Tuple[int, int]:
        """
        Fetches the current allocation size for @context.

        If the context was not allocated in width or height, or if the
        context was recently reset with gtk_cell_area_context_reset(),
        the returned value will be -1.

        Parameters:


        Returns:
            int: location to store the allocated width
            int: location to store the allocated height
        """
        ...

    @deprecated("This object will be removed in GTK 5")
    def get_area(self) -> CellArea:
        """
        Fetches the `GtkCellArea` this @context was created by.

        This is generally unneeded by layouting widgets; however,
        it is important for the context implementation itself to
        fetch information about the area it is being used for.

        For instance at `GtkCellAreaContextClass.allocate()` time
        it’s important to know details about any cell spacing
        that the `GtkCellArea` is configured with in order to
        compute a proper allocation.

        Parameters:


        Returns:
            CellArea: the `GtkCellArea` this context was created by.

        """
        ...

    @deprecated("This object will be removed in GTK 5")
    def get_preferred_height(self) -> Tuple[int, int]:
        """
        Gets the accumulative preferred height for all rows which have been
        requested with this context.

        After gtk_cell_area_context_reset() is called and/or before ever
        requesting the size of a `GtkCellArea`, the returned values are 0.

        Parameters:


        Returns:
            int: location to store the minimum height
            int: location to store the natural height
        """
        ...

    @deprecated("This object will be removed in GTK 5")
    def get_preferred_height_for_width(self, width: int) -> Tuple[int, int]:
        """
        Gets the accumulative preferred height for @width for all rows
        which have been requested for the same said @width with this context.

        After gtk_cell_area_context_reset() is called and/or before ever
        requesting the size of a `GtkCellArea`, the returned values are -1.

        Parameters:
            width: a proposed width for allocation

        Returns:
            int: location to store the minimum height
            int: location to store the natural height
        """
        ...

    @deprecated("This object will be removed in GTK 5")
    def get_preferred_width(self) -> Tuple[int, int]:
        """
        Gets the accumulative preferred width for all rows which have been
        requested with this context.

        After gtk_cell_area_context_reset() is called and/or before ever
        requesting the size of a `GtkCellArea`, the returned values are 0.

        Parameters:


        Returns:
            int: location to store the minimum width
            int: location to store the natural width
        """
        ...

    @deprecated("This object will be removed in GTK 5")
    def get_preferred_width_for_height(self, height: int) -> Tuple[int, int]:
        """
        Gets the accumulative preferred width for @height for all rows which
        have been requested for the same said @height with this context.

        After gtk_cell_area_context_reset() is called and/or before ever
        requesting the size of a `GtkCellArea`, the returned values are -1.

        Parameters:
            height: a proposed height for allocation

        Returns:
            int: location to store the minimum width
            int: location to store the natural width
        """
        ...

    @deprecated("This object will be removed in GTK 5")
    def push_preferred_height(self, minimum_height: int, natural_height: int) -> None:
        """
        Causes the minimum and/or natural height to grow if the new
        proposed sizes exceed the current minimum and natural height.

        This is used by `GtkCellAreaContext` implementations during
        the request process over a series of `GtkTreeModel` rows to
        progressively push the requested height over a series of
        gtk_cell_area_get_preferred_height() requests.

        Parameters:
            minimum_height: the proposed new minimum height for @context
            natural_height: the proposed new natural height for @context

        Returns:

        """
        ...

    @deprecated("This object will be removed in GTK 5")
    def push_preferred_width(self, minimum_width: int, natural_width: int) -> None:
        """
        Causes the minimum and/or natural width to grow if the new
        proposed sizes exceed the current minimum and natural width.

        This is used by `GtkCellAreaContext` implementations during
        the request process over a series of `GtkTreeModel` rows to
        progressively push the requested width over a series of
        gtk_cell_area_get_preferred_width() requests.

        Parameters:
            minimum_width: the proposed new minimum width for @context
            natural_width: the proposed new natural width for @context

        Returns:

        """
        ...

    @deprecated("This object will be removed in GTK 5")
    def reset(self) -> None:
        """
        Resets any previously cached request and allocation
        data.

        When underlying `GtkTreeModel` data changes its
        important to reset the context if the content
        size is allowed to shrink. If the content size
        is only allowed to grow (this is usually an option
        for views rendering large data stores as a measure
        of optimization), then only the row that changed
        or was inserted needs to be (re)requested with
        gtk_cell_area_get_preferred_width().

        When the new overall size of the context requires
        that the allocated size changes (or whenever this
        allocation changes at all), the variable row
        sizes need to be re-requested for every row.

        For instance, if the rows are displayed all with
        the same width from top to bottom then a change
        in the allocated width necessitates a recalculation
        of all the displayed row heights using
        gtk_cell_area_get_preferred_height_for_width().

        Parameters:


        Returns:

        """
        ...

class CellAreaContextClass(GObject.GPointer):
    """
    :Constructors:

    ::

        CellAreaContextClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    allocate: Callable[[CellAreaContext, int, int], None] = ...
    reset: Callable[[CellAreaContext], None] = ...
    get_preferred_height_for_width: Callable[
        [CellAreaContext, int], Tuple[int, int]
    ] = ...
    get_preferred_width_for_height: Callable[
        [CellAreaContext, int], Tuple[int, int]
    ] = ...
    padding: list[None] = ...

class CellAreaContextPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

@deprecated(
    "List views use widgets for displaying their contents. See [iface@Gtk.Editable] for editable text widgets"
)
class CellEditable(GObject.GInterface):
    """
    Interface for widgets that can be used for editing cells

    The `GtkCellEditable` interface must be implemented for widgets to be usable
    to edit the contents of a `GtkTreeView` cell. It provides a way to specify how
    temporary widgets should be configured for editing, get the new value, etc.



    Interface GtkCellEditable

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def __init__(self, editing_canceled: bool = ...): ...
    @deprecated("This method is deprecated")
    def editing_done(self) -> None:
        """
        Emits the `GtkCellEditable::editing-done` signal.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def remove_widget(self) -> None:
        """
        Emits the `GtkCellEditable::remove-widget` signal.

        Parameters:


        Returns:

        """
        ...

    def start_editing(self, event: Optional[Gdk.Event] = None) -> None:
        """
        Begins editing on a @cell_editable.

        The `GtkCellRenderer` for the cell creates and returns a `GtkCellEditable` from
        gtk_cell_renderer_start_editing(), configured for the `GtkCellRenderer` type.

        gtk_cell_editable_start_editing() can then set up @cell_editable suitably for
        editing a cell, e.g. making the Esc key emit `GtkCellEditable::editing-done`.

        Note that the @cell_editable is created on-demand for the current edit; its
        lifetime is temporary and does not persist across other edits and/or cells.

        Parameters:
            event: The `GdkEvent` that began the editing process, or
        %NULL if editing was initiated programmatically

        Returns:

        """
        ...

class CellEditableIface(GObject.GPointer):
    """
    :Constructors:

    ::

        CellEditableIface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    editing_done: Callable[[CellEditable], None] = ...
    remove_widget: Callable[[CellEditable], None] = ...
    start_editing: Callable[[CellEditable, Optional[Gdk.Event]], None] = ...

@deprecated(
    "List views use widgets to display their contents. See [class@Gtk.LayoutManager] for layout manager delegate objects"
)
class CellLayout(GObject.GInterface):
    """
    An interface for packing cells

    `GtkCellLayout` is an interface to be implemented by all objects which
    want to provide a `GtkTreeViewColumn` like API for packing cells,
    setting attributes and data funcs.

    One of the notable features provided by implementations of
    `GtkCellLayout` are attributes. Attributes let you set the properties
    in flexible ways. They can just be set to constant values like regular
    properties. But they can also be mapped to a column of the underlying
    tree model with gtk_cell_layout_set_attributes(), which means that the value
    of the attribute can change from cell to cell as they are rendered by
    the cell renderer. Finally, it is possible to specify a function with
    gtk_cell_layout_set_cell_data_func() that is called to determine the
    value of the attribute for each cell that is rendered.

    ## GtkCellLayouts as GtkBuildable

    Implementations of GtkCellLayout which also implement the GtkBuildable
    interface (`GtkCellView`, `GtkIconView`, `GtkComboBox`,
    `GtkEntryCompletion`, `GtkTreeViewColumn`) accept `GtkCellRenderer` objects
    as `<child>` elements in UI definitions. They support a custom `<attributes>`
    element for their children, which can contain multiple `<attribute>`
    elements. Each `<attribute>` element has a name attribute which specifies
    a property of the cell renderer; the content of the element is the
    attribute value.

    This is an example of a UI definition fragment specifying attributes:

    ```xml
    <object class=\"GtkCellView\">
    <child>
    <object class=\"GtkCellRendererText\"/>
    <attributes>
    <attribute name=\"text\">0</attribute>
    </attributes>
    </child>
    </object>
    ```

    Furthermore for implementations of `GtkCellLayout` that use a `GtkCellArea`
    to lay out cells (all `GtkCellLayout`s in GTK use a `GtkCellArea`)
    [cell properties](class.CellArea.html#cell-properties) can also be defined
    in the format by specifying the custom `<cell-packing>` attribute which can
    contain multiple `<property>` elements.

    Here is a UI definition fragment specifying cell properties:

    ```xml
    <object class=\"GtkTreeViewColumn\">
    <child>
    <object class=\"GtkCellRendererText\"/>
    <cell-packing>
    <property name=\"align\">True</property>
    <property name=\"expand\">False</property>
    </cell-packing>
    </child>
    </object>
    ```

    ## Subclassing GtkCellLayout implementations

    When subclassing a widget that implements `GtkCellLayout` like
    `GtkIconView` or `GtkComboBox`, there are some considerations related
    to the fact that these widgets internally use a `GtkCellArea`.
    The cell area is exposed as a construct-only property by these
    widgets. This means that it is possible to e.g. do

    ```c
    GtkWIdget *combo =
    g_object_new (GTK_TYPE_COMBO_BOX, \"cell-area\", my_cell_area, NULL);
    ```

    to use a custom cell area with a combo box. But construct properties
    are only initialized after instance `init()`
    functions have run, which means that using functions which rely on
    the existence of the cell area in your subclass `init()` function will
    cause the default cell area to be instantiated. In this case, a provided
    construct property value will be ignored (with a warning, to alert
    you to the problem).

    ```c
    static void
    my_combo_box_init (MyComboBox *b)
    {
    GtkCellRenderer *cell;

    cell = gtk_cell_renderer_pixbuf_new ();

    // The following call causes the default cell area for combo boxes,
    // a GtkCellAreaBox, to be instantiated
    gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (b), cell, FALSE);
    ...
    }

    GtkWidget *
    my_combo_box_new (GtkCellArea *area)
    {
    // This call is going to cause a warning about area being ignored
    return g_object_new (MY_TYPE_COMBO_BOX, \"cell-area\", area, NULL);
    }
    ```

    If supporting alternative cell areas with your derived widget is
    not important, then this does not have to concern you. If you want
    to support alternative cell areas, you can do so by moving the
    problematic calls out of `init()` and into a `constructor()`
    for your class.



    Interface GtkCellLayout

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    @deprecated("This method is deprecated")
    def add_attribute(self, cell: CellRenderer, attribute: str, column: int) -> None:
        """
        Adds an attribute mapping to the list in @cell_layout.

        The @column is the column of the model to get a value from, and the
        @attribute is the property on @cell to be set from that value. So for
        example if column 2 of the model contains strings, you could have the
        “text” attribute of a `GtkCellRendererText` get its values from column 2.
        In this context \"attribute\" and \"property\" are used interchangeably.

        Parameters:
            cell: a `GtkCellRenderer`
            attribute: a property on the renderer
            column: the column position on the model to get the attribute from

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def clear(self) -> None:
        """
        Unsets all the mappings on all renderers on @cell_layout and
        removes all renderers from @cell_layout.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def clear_attributes(self, cell: CellRenderer) -> None:
        """
        Clears all existing attributes previously set with
        gtk_cell_layout_set_attributes().

        Parameters:
            cell: a `GtkCellRenderer` to clear the attribute mapping on

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def get_area(self) -> Optional[CellArea]:
        """
        Returns the underlying `GtkCellArea` which might be @cell_layout
        if called on a `GtkCellArea` or might be %NULL if no `GtkCellArea`
        is used by @cell_layout.

        Parameters:


        Returns:
            Optional[CellArea]: the cell area used by @cell_layout

        """
        ...

    @deprecated("This method is deprecated")
    def get_cells(self) -> list[CellRenderer]:
        """
        Returns the cell renderers which have been added to @cell_layout.

        Parameters:


        Returns:
            list[CellRenderer]:
        a list of cell renderers. The list, but not the renderers has
        been newly allocated and should be freed with g_list_free()
        when no longer needed.

        """
        ...

    @deprecated("This method is deprecated")
    def pack_end(self, cell: CellRenderer, expand: bool) -> None:
        """
        Adds the @cell to the end of @cell_layout. If @expand is %FALSE, then the
        @cell is allocated no more space than it needs. Any unused space is
        divided evenly between cells for which @expand is %TRUE.

        Note that reusing the same cell renderer is not supported.

        Parameters:
            cell: a `GtkCellRenderer`
            expand: %TRUE if @cell is to be given extra space allocated to @cell_layout

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def pack_start(self, cell: CellRenderer, expand: bool) -> None:
        """
        Packs the @cell into the beginning of @cell_layout. If @expand is %FALSE,
        then the @cell is allocated no more space than it needs. Any unused space
        is divided evenly between cells for which @expand is %TRUE.

        Note that reusing the same cell renderer is not supported.

        Parameters:
            cell: a `GtkCellRenderer`
            expand: %TRUE if @cell is to be given extra space allocated to @cell_layout

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def reorder(self, cell: CellRenderer, position: int) -> None:
        """
        Re-inserts @cell at @position.

        Note that @cell has already to be packed into @cell_layout
        for this to function properly.

        Parameters:
            cell: a `GtkCellRenderer` to reorder
            position: new position to insert @cell at

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_cell_data_func(
        self,
        cell: CellRenderer,
        func: Optional[Callable[..., None]] = None,
        *func_data: Any,
    ) -> None:
        """
        Sets the `GtkCellLayout`DataFunc to use for @cell_layout.

        This function is used instead of the standard attributes mapping
        for setting the column value, and should set the value of @cell_layout’s
        cell renderer(s) as appropriate.

        @func may be %NULL to remove a previously set function.

        Parameters:
            cell: a `GtkCellRenderer`
            func: the `GtkCellLayout`DataFunc to use
            func_data: user data for @func

        Returns:

        """
        ...

class CellLayoutIface(GObject.GPointer):
    """
    :Constructors:

    ::

        CellLayoutIface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    pack_start: Callable[[CellLayout, CellRenderer, bool], None] = ...
    pack_end: Callable[[CellLayout, CellRenderer, bool], None] = ...
    clear: Callable[[CellLayout], None] = ...
    add_attribute: Callable[[CellLayout, CellRenderer, str, int], None] = ...
    set_cell_data_func: Callable[..., None] = ...
    clear_attributes: Callable[[CellLayout, CellRenderer], None] = ...
    reorder: Callable[[CellLayout, CellRenderer, int], None] = ...
    get_cells: Callable[[CellLayout], list[CellRenderer]] = ...
    get_area: Callable[[CellLayout], Optional[CellArea]] = ...

@deprecated("List views use widgets for displaying their contents")
class CellRenderer(GObject.InitiallyUnowned):
    """
    An object for rendering a single cell

    The `GtkCellRenderer` is a base class of a set of objects used for
    rendering a cell to a `cairo_t`. These objects are used primarily by
    the `GtkTreeView` widget, though they aren’t tied to them in any
    specific way. It is worth noting that `GtkCellRenderer` is not a
    `GtkWidget` and cannot be treated as such.

    The primary use of a `GtkCellRenderer` is for drawing a certain graphical
    elements on a `cairo_t`. Typically, one cell renderer is used to
    draw many cells on the screen. To this extent, it isn’t expected that a
    CellRenderer keep any permanent state around. Instead, any state is set
    just prior to use using `GObject`s property system. Then, the
    cell is measured using gtk_cell_renderer_get_preferred_size(). Finally, the cell
    is rendered in the correct location using gtk_cell_renderer_snapshot().

    There are a number of rules that must be followed when writing a new
    `GtkCellRenderer`. First and foremost, it’s important that a certain set
    of properties will always yield a cell renderer of the same size,
    barring a style change. The `GtkCellRenderer` also has a number of
    generic properties that are expected to be honored by all children.

    Beyond merely rendering a cell, cell renderers can optionally
    provide active user interface elements. A cell renderer can be
    “activatable” like `GtkCellRenderer`Toggle,
    which toggles when it gets activated by a mouse click, or it can be
    “editable” like `GtkCellRenderer`Text, which
    allows the user to edit the text using a widget implementing the
    `GtkCellEditable` interface, e.g. `GtkEntry`.
    To make a cell renderer activatable or editable, you have to
    implement the `GtkCellRenderer`Class.activate or
    `GtkCellRenderer`Class.start_editing virtual functions, respectively.

    Many properties of `GtkCellRenderer` and its subclasses have a
    corresponding “set” property, e.g. “cell-background-set” corresponds
    to “cell-background”. These “set” properties reflect whether a property
    has been set or not. You should not set them independently.

    :Constructors:

    ::

        CellRenderer(**properties)

    Object GtkCellRenderer

    Signals from GtkCellRenderer:
      editing-canceled ()
      editing-started (GtkCellEditable, gchararray)

    Properties from GtkCellRenderer:
      mode -> GtkCellRendererMode: mode
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      xpad -> guint: xpad
      ypad -> guint: ypad
      width -> gint: width
      height -> gint: height
      is-expander -> gboolean: is-expander
      is-expanded -> gboolean: is-expanded
      cell-background -> gchararray: cell-background
      cell-background-rgba -> GdkRGBA: cell-background-rgba
      cell-background-set -> gboolean: cell-background-set
      editing -> gboolean: editing

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.InitiallyUnowned.Props):
        cell_background_rgba: Gdk.RGBA
        """
        Cell background as a `GdkRGBA`
        """
        cell_background_set: bool
        editing: bool
        height: int
        is_expanded: bool
        is_expander: bool
        mode: CellRendererMode
        sensitive: bool
        visible: bool
        width: int
        xalign: float
        xpad: int
        yalign: float
        ypad: int
        cell_background: str

    props: Props = ...
    parent_instance: GObject.InitiallyUnowned = ...
    priv: CellRendererPrivate = ...
    def __init__(
        self,
        cell_background: str = ...,
        cell_background_rgba: Gdk.RGBA = ...,
        cell_background_set: bool = ...,
        height: int = ...,
        is_expanded: bool = ...,
        is_expander: bool = ...,
        mode: CellRendererMode = ...,
        sensitive: bool = ...,
        visible: bool = ...,
        width: int = ...,
        xalign: float = ...,
        xpad: int = ...,
        yalign: float = ...,
        ypad: int = ...,
    ): ...
    @deprecated("This method is deprecated")
    def activate(
        self,
        event: Gdk.Event,
        widget: Widget,
        path: str,
        background_area: Gdk.Rectangle,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
    ) -> bool:
        """
        Passes an activate event to the cell renderer for possible processing.
        Some cell renderers may use events; for example, `GtkCellRendererToggle`
        toggles when it gets a mouse click.

        Parameters:
            event: a `GdkEvent`
            widget: widget that received the event
            path: widget-dependent string representation of the event location;
        e.g. for `GtkTreeView`, a string representation of `GtkTreePath`
            background_area: background area as passed to gtk_cell_renderer_render()
            cell_area: cell area as passed to gtk_cell_renderer_render()
            flags: render flags

        Returns:
            bool: %TRUE if the event was consumed/handled

        """
        ...

    def do_activate(
        self,
        event: Gdk.Event,
        widget: Widget,
        path: str,
        background_area: Gdk.Rectangle,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
    ) -> bool:
        """
        Passes an activate event to the cell renderer for possible processing.
        Some cell renderers may use events; for example, `GtkCellRendererToggle`
        toggles when it gets a mouse click.

        Parameters:
            event: a `GdkEvent`
            widget: widget that received the event
            path: widget-dependent string representation of the event location;
        e.g. for `GtkTreeView`, a string representation of `GtkTreePath`
            background_area: background area as passed to gtk_cell_renderer_render()
            cell_area: cell area as passed to gtk_cell_renderer_render()
            flags: render flags

        Returns:
            bool: %TRUE if the event was consumed/handled

        """
        ...

    def do_editing_canceled(self) -> None: ...
    def do_editing_started(self, editable: CellEditable, path: str) -> None: ...
    def do_get_aligned_area(
        self, widget: Widget, flags: CellRendererState, cell_area: Gdk.Rectangle
    ) -> Gdk.Rectangle:
        """
        Gets the aligned area used by @cell inside @cell_area. Used for finding
        the appropriate edit and focus rectangle.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to
            flags: render flags
            cell_area: cell area which would be passed to gtk_cell_renderer_render()

        Returns:
            Gdk.Rectangle: the return location for the space inside @cell_area
        that would actually be used to render.
        """
        ...

    def do_get_preferred_height(self, widget: Widget) -> Tuple[int, int]:
        """
        Retrieves a renderer’s natural size when rendered to @widget.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to

        Returns:
            int: location to store the minimum size
            int: location to store the natural size
        """
        ...

    def do_get_preferred_height_for_width(
        self, widget: Widget, width: int
    ) -> Tuple[int, int]:
        """
        Retrieves a cell renderers’s minimum and natural height if it were rendered to
        @widget with the specified @width.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to
            width: the size which is available for allocation

        Returns:
            int: location for storing the minimum size
            int: location for storing the preferred size
        """
        ...

    def do_get_preferred_width(self, widget: Widget) -> Tuple[int, int]:
        """
        Retrieves a renderer’s natural size when rendered to @widget.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to

        Returns:
            int: location to store the minimum size
            int: location to store the natural size
        """
        ...

    def do_get_preferred_width_for_height(
        self, widget: Widget, height: int
    ) -> Tuple[int, int]:
        """
        Retrieves a cell renderers’s minimum and natural width if it were rendered to
        @widget with the specified @height.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to
            height: the size which is available for allocation

        Returns:
            int: location for storing the minimum size
            int: location for storing the preferred size
        """
        ...

    def do_get_request_mode(self) -> SizeRequestMode:
        """
        Gets whether the cell renderer prefers a height-for-width layout
        or a width-for-height layout.

        Parameters:


        Returns:
            SizeRequestMode: The `GtkSizeRequestMode` preferred by this renderer.

        """
        ...

    def do_snapshot(
        self,
        snapshot: Snapshot,
        widget: Widget,
        background_area: Gdk.Rectangle,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
    ) -> None:
        """
        Invokes the virtual render function of the `GtkCellRenderer`. The three
        passed-in rectangles are areas in @cr. Most renderers will draw within
        @cell_area; the xalign, yalign, xpad, and ypad fields of the `GtkCellRenderer`
        should be honored with respect to @cell_area. @background_area includes the
        blank space around the cell, and also the area containing the tree expander;
        so the @background_area rectangles for all cells tile to cover the entire
        @window.

        Parameters:
            snapshot: a `GtkSnapshot` to draw to
            widget: the widget owning @window
            background_area: entire cell area (including tree expanders and maybe
        padding on the sides)
            cell_area: area normally rendered by a cell renderer
            flags: flags that affect rendering

        Returns:

        """
        ...

    def do_start_editing(
        self,
        event: Optional[Gdk.Event],
        widget: Widget,
        path: str,
        background_area: Gdk.Rectangle,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
    ) -> Optional[CellEditable]:
        """
        Starts editing the contents of this @cell, through a new `GtkCellEditable`
        widget created by the `GtkCellRenderer`Class.start_editing virtual function.

        Parameters:
            event: a `GdkEvent`
            widget: widget that received the event
            path: widget-dependent string representation of the event location;
        e.g. for `GtkTreeView`, a string representation of `GtkTreePath`
            background_area: background area as passed to gtk_cell_renderer_render()
            cell_area: cell area as passed to gtk_cell_renderer_render()
            flags: render flags

        Returns:
            Optional[CellEditable]: A new `GtkCellEditable` for editing this
        @cell, or %NULL if editing is not possible

        """
        ...

    @deprecated("This method is deprecated")
    def get_aligned_area(
        self, widget: Widget, flags: CellRendererState, cell_area: Gdk.Rectangle
    ) -> Gdk.Rectangle:
        """
        Gets the aligned area used by @cell inside @cell_area. Used for finding
        the appropriate edit and focus rectangle.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to
            flags: render flags
            cell_area: cell area which would be passed to gtk_cell_renderer_render()

        Returns:
            Gdk.Rectangle: the return location for the space inside @cell_area
        that would actually be used to render.
        """
        ...

    @deprecated("This method is deprecated")
    def get_alignment(self) -> Tuple[float, float]:
        """
        Fills in @xalign and @yalign with the appropriate values of @cell.

        Parameters:


        Returns:
            float: location to fill in with the x alignment of the cell
            float: location to fill in with the y alignment of the cell
        """
        ...

    @deprecated("This method is deprecated")
    def get_fixed_size(self) -> Tuple[int, int]:
        """
        Fills in @width and @height with the appropriate size of @cell.

        Parameters:


        Returns:
            int: location to fill in with the fixed width of the cell
            int: location to fill in with the fixed height of the cell
        """
        ...

    @deprecated("This method is deprecated")
    def get_is_expanded(self) -> bool:
        """
        Checks whether the given `GtkCellRenderer` is expanded.

        Parameters:


        Returns:
            bool: %TRUE if the cell renderer is expanded

        """
        ...

    @deprecated("This method is deprecated")
    def get_is_expander(self) -> bool:
        """
        Checks whether the given `GtkCellRenderer` is an expander.

        Parameters:


        Returns:
            bool: %TRUE if @cell is an expander, and %FALSE otherwise

        """
        ...

    @deprecated("This method is deprecated")
    def get_padding(self) -> Tuple[int, int]:
        """
        Fills in @xpad and @ypad with the appropriate values of @cell.

        Parameters:


        Returns:
            int: location to fill in with the x padding of the cell
            int: location to fill in with the y padding of the cell
        """
        ...

    @deprecated("This method is deprecated")
    def get_preferred_height(self, widget: Widget) -> Tuple[int, int]:
        """
        Retrieves a renderer’s natural size when rendered to @widget.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to

        Returns:
            int: location to store the minimum size
            int: location to store the natural size
        """
        ...

    @deprecated("This method is deprecated")
    def get_preferred_height_for_width(
        self, widget: Widget, width: int
    ) -> Tuple[int, int]:
        """
        Retrieves a cell renderers’s minimum and natural height if it were rendered to
        @widget with the specified @width.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to
            width: the size which is available for allocation

        Returns:
            int: location for storing the minimum size
            int: location for storing the preferred size
        """
        ...

    @deprecated("This method is deprecated")
    def get_preferred_size(self, widget: Widget) -> Tuple[Requisition, Requisition]:
        """
        Retrieves the minimum and natural size of a cell taking
        into account the widget’s preference for height-for-width management.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to

        Returns:
            Requisition: location for storing the minimum size
            Requisition: location for storing the natural size
        """
        ...

    @deprecated("This method is deprecated")
    def get_preferred_width(self, widget: Widget) -> Tuple[int, int]:
        """
        Retrieves a renderer’s natural size when rendered to @widget.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to

        Returns:
            int: location to store the minimum size
            int: location to store the natural size
        """
        ...

    @deprecated("This method is deprecated")
    def get_preferred_width_for_height(
        self, widget: Widget, height: int
    ) -> Tuple[int, int]:
        """
        Retrieves a cell renderers’s minimum and natural width if it were rendered to
        @widget with the specified @height.

        Parameters:
            widget: the `GtkWidget` this cell will be rendering to
            height: the size which is available for allocation

        Returns:
            int: location for storing the minimum size
            int: location for storing the preferred size
        """
        ...

    @deprecated("This method is deprecated")
    def get_request_mode(self) -> SizeRequestMode:
        """
        Gets whether the cell renderer prefers a height-for-width layout
        or a width-for-height layout.

        Parameters:


        Returns:
            SizeRequestMode: The `GtkSizeRequestMode` preferred by this renderer.

        """
        ...

    @deprecated("This method is deprecated")
    def get_sensitive(self) -> bool:
        """
        Returns the cell renderer’s sensitivity.

        Parameters:


        Returns:
            bool: %TRUE if the cell renderer is sensitive

        """
        ...

    @deprecated("This method is deprecated")
    def get_state(
        self, widget: Optional[Widget], cell_state: CellRendererState
    ) -> StateFlags:
        """
        Translates the cell renderer state to `GtkStateFlags`,
        based on the cell renderer and widget sensitivity, and
        the given `GtkCellRenderer`State.

        Parameters:
            widget: a `GtkWidget`
            cell_state: cell renderer state

        Returns:
            StateFlags: the widget state flags applying to @cell

        """
        ...

    @deprecated("This method is deprecated")
    def get_visible(self) -> bool:
        """
        Returns the cell renderer’s visibility.

        Parameters:


        Returns:
            bool: %TRUE if the cell renderer is visible

        """
        ...

    @deprecated("This method is deprecated")
    def is_activatable(self) -> bool:
        """
        Checks whether the cell renderer can do something when activated.

        Parameters:


        Returns:
            bool: %TRUE if the cell renderer can do anything when activated

        """
        ...

    @deprecated("This method is deprecated")
    def set_alignment(self, xalign: float, yalign: float) -> None:
        """
        Sets the renderer’s alignment within its available space.

        Parameters:
            xalign: the x alignment of the cell renderer
            yalign: the y alignment of the cell renderer

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_fixed_size(self, width: int, height: int) -> None:
        """
        Sets the renderer size to be explicit, independent of the properties set.

        Parameters:
            width: the width of the cell renderer, or -1
            height: the height of the cell renderer, or -1

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_is_expanded(self, is_expanded: bool) -> None:
        """
        Sets whether the given `GtkCellRenderer` is expanded.

        Parameters:
            is_expanded: whether @cell should be expanded

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_is_expander(self, is_expander: bool) -> None:
        """
        Sets whether the given `GtkCellRenderer` is an expander.

        Parameters:
            is_expander: whether @cell is an expander

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_padding(self, xpad: int, ypad: int) -> None:
        """
        Sets the renderer’s padding.

        Parameters:
            xpad: the x padding of the cell renderer
            ypad: the y padding of the cell renderer

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_sensitive(self, sensitive: bool) -> None:
        """
        Sets the cell renderer’s sensitivity.

        Parameters:
            sensitive: the sensitivity of the cell

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_visible(self, visible: bool) -> None:
        """
        Sets the cell renderer’s visibility.

        Parameters:
            visible: the visibility of the cell

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def snapshot(
        self,
        snapshot: Snapshot,
        widget: Widget,
        background_area: Gdk.Rectangle,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
    ) -> None:
        """
        Invokes the virtual render function of the `GtkCellRenderer`. The three
        passed-in rectangles are areas in @cr. Most renderers will draw within
        @cell_area; the xalign, yalign, xpad, and ypad fields of the `GtkCellRenderer`
        should be honored with respect to @cell_area. @background_area includes the
        blank space around the cell, and also the area containing the tree expander;
        so the @background_area rectangles for all cells tile to cover the entire
        @window.

        Parameters:
            snapshot: a `GtkSnapshot` to draw to
            widget: the widget owning @window
            background_area: entire cell area (including tree expanders and maybe
        padding on the sides)
            cell_area: area normally rendered by a cell renderer
            flags: flags that affect rendering

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def start_editing(
        self,
        event: Optional[Gdk.Event],
        widget: Widget,
        path: str,
        background_area: Gdk.Rectangle,
        cell_area: Gdk.Rectangle,
        flags: CellRendererState,
    ) -> Optional[CellEditable]:
        """
        Starts editing the contents of this @cell, through a new `GtkCellEditable`
        widget created by the `GtkCellRenderer`Class.start_editing virtual function.

        Parameters:
            event: a `GdkEvent`
            widget: widget that received the event
            path: widget-dependent string representation of the event location;
        e.g. for `GtkTreeView`, a string representation of `GtkTreePath`
            background_area: background area as passed to gtk_cell_renderer_render()
            cell_area: cell area as passed to gtk_cell_renderer_render()
            flags: render flags

        Returns:
            Optional[CellEditable]: A new `GtkCellEditable` for editing this
        @cell, or %NULL if editing is not possible

        """
        ...

    @deprecated("This method is deprecated")
    def stop_editing(self, canceled: bool) -> None:
        """
        Informs the cell renderer that the editing is stopped.
        If @canceled is %TRUE, the cell renderer will emit the
        `GtkCellRenderer`::editing-canceled signal.

        This function should be called by cell renderer implementations
        in response to the `GtkCellEditable::editing-done` signal of
        `GtkCellEditable`.

        Parameters:
            canceled: %TRUE if the editing has been canceled

        Returns:

        """
        ...

@deprecated(
    "Applications editing keyboard accelerators should provide their own implementation according to platform design guidelines"
)
class CellRendererAccel(CellRendererText):
    """
    Renders a keyboard accelerator in a cell

    `GtkCellRendererAccel` displays a keyboard accelerator (i.e. a key
    combination like `Control + a`). If the cell renderer is editable,
    the accelerator can be changed by simply typing the new combination.

    :Constructors:

    ::

        CellRendererAccel(**properties)
        new() -> Gtk.CellRenderer

    Object GtkCellRendererAccel

    Signals from GtkCellRendererAccel:
      accel-edited (gchararray, guint, GdkModifierType, guint)
      accel-cleared (gchararray)

    Properties from GtkCellRendererAccel:
      accel-key -> guint: accel-key
      accel-mods -> GdkModifierType: accel-mods
      keycode -> guint: keycode
      accel-mode -> GtkCellRendererAccelMode: accel-mode

    Signals from GtkCellRendererText:
      edited (gchararray, gchararray)

    Properties from GtkCellRendererText:
      text -> gchararray: text
      markup -> gchararray: markup
      attributes -> PangoAttrList: attributes
      single-paragraph-mode -> gboolean: single-paragraph-mode
      width-chars -> gint: width-chars
      max-width-chars -> gint: max-width-chars
      wrap-width -> gint: wrap-width
      alignment -> PangoAlignment: alignment
      placeholder-text -> gchararray: placeholder-text
      background -> gchararray: background
      foreground -> gchararray: foreground
      background-rgba -> GdkRGBA: background-rgba
      foreground-rgba -> GdkRGBA: foreground-rgba
      font -> gchararray: font
      font-desc -> PangoFontDescription: font-desc
      family -> gchararray: family
      style -> PangoStyle: style
      variant -> PangoVariant: variant
      weight -> gint: weight
      stretch -> PangoStretch: stretch
      size -> gint: size
      size-points -> gdouble: size-points
      scale -> gdouble: scale
      editable -> gboolean: editable
      strikethrough -> gboolean: strikethrough
      underline -> PangoUnderline: underline
      rise -> gint: rise
      language -> gchararray: language
      ellipsize -> PangoEllipsizeMode: ellipsize
      wrap-mode -> PangoWrapMode: wrap-mode
      background-set -> gboolean: background-set
      foreground-set -> gboolean: foreground-set
      family-set -> gboolean: family-set
      style-set -> gboolean: style-set
      variant-set -> gboolean: variant-set
      weight-set -> gboolean: weight-set
      stretch-set -> gboolean: stretch-set
      size-set -> gboolean: size-set
      scale-set -> gboolean: scale-set
      editable-set -> gboolean: editable-set
      strikethrough-set -> gboolean: strikethrough-set
      underline-set -> gboolean: underline-set
      rise-set -> gboolean: rise-set
      language-set -> gboolean: language-set
      ellipsize-set -> gboolean: ellipsize-set
      align-set -> gboolean: align-set

    Signals from GtkCellRenderer:
      editing-canceled ()
      editing-started (GtkCellEditable, gchararray)

    Properties from GtkCellRenderer:
      mode -> GtkCellRendererMode: mode
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      xpad -> guint: xpad
      ypad -> guint: ypad
      width -> gint: width
      height -> gint: height
      is-expander -> gboolean: is-expander
      is-expanded -> gboolean: is-expanded
      cell-background -> gchararray: cell-background
      cell-background-rgba -> GdkRGBA: cell-background-rgba
      cell-background-set -> gboolean: cell-background-set
      editing -> gboolean: editing

    Signals from GObject:
      notify (GParam)
    """

    class Props(CellRendererText.Props):
        accel_key: int
        """
        The keyval of the accelerator.
        """
        accel_mode: CellRendererAccelMode
        """
        Determines if the edited accelerators are GTK accelerators. If
        they are, consumed modifiers are suppressed, only accelerators
        accepted by GTK are allowed, and the accelerators are rendered
        in the same way as they are in menus.
        """
        accel_mods: Gdk.ModifierType
        """
        The modifier mask of the accelerator.
        """
        keycode: int
        """
        The hardware keycode of the accelerator. Note that the hardware keycode is
        only relevant if the key does not have a keyval. Normally, the keyboard
        configuration should assign keyvals to all keys.
        """

    props: Props = ...
    def __init__(
        self,
        accel_key: int = ...,
        accel_mode: CellRendererAccelMode = ...,
        accel_mods: Gdk.ModifierType = ...,
        keycode: int = ...,
        align_set: bool = ...,
        alignment: Pango.Alignment = ...,
        attributes: Pango.AttrList = ...,
        background: str = ...,
        background_rgba: Gdk.RGBA = ...,
        background_set: bool = ...,
        editable: bool = ...,
        editable_set: bool = ...,
        ellipsize: Pango.EllipsizeMode = ...,
        ellipsize_set: bool = ...,
        family: str = ...,
        family_set: bool = ...,
        font: str = ...,
        font_desc: Pango.FontDescription = ...,
        foreground: str = ...,
        foreground_rgba: Gdk.RGBA = ...,
        foreground_set: bool = ...,
        language: str = ...,
        language_set: bool = ...,
        markup: str = ...,
        max_width_chars: int = ...,
        placeholder_text: str = ...,
        rise: int = ...,
        rise_set: bool = ...,
        scale: float = ...,
        scale_set: bool = ...,
        single_paragraph_mode: bool = ...,
        size: int = ...,
        size_points: float = ...,
        size_set: bool = ...,
        stretch: Pango.Stretch = ...,
        stretch_set: bool = ...,
        strikethrough: bool = ...,
        strikethrough_set: bool = ...,
        style: Pango.Style = ...,
        style_set: bool = ...,
        text: str = ...,
        underline: Pango.Underline = ...,
        underline_set: bool = ...,
        variant: Pango.Variant = ...,
        variant_set: bool = ...,
        weight: int = ...,
        weight_set: bool = ...,
        width_chars: int = ...,
        wrap_mode: Pango.WrapMode = ...,
        wrap_width: int = ...,
        cell_background: str = ...,
        cell_background_rgba: Gdk.RGBA = ...,
        cell_background_set: bool = ...,
        height: int = ...,
        is_expanded: bool = ...,
        is_expander: bool = ...,
        mode: CellRendererMode = ...,
        sensitive: bool = ...,
        visible: bool = ...,
        width: int = ...,
        xalign: float = ...,
        xpad: int = ...,
        yalign: float = ...,
        ypad: int = ...,
    ): ...
    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> CellRendererAccel:
        """
        Creates a new `GtkCellRendererAccel`.

        Parameters:


        Returns:
            CellRenderer: the new cell renderer

        """
        ...

class CellRendererClass(GObject.GPointer):
    """
    :Constructors:

    ::

        CellRendererClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.InitiallyUnownedClass = ...
    get_request_mode: Callable[[CellRenderer], SizeRequestMode] = ...
    get_preferred_width: Callable[[CellRenderer, Widget], Tuple[int, int]] = ...
    get_preferred_height_for_width: Callable[
        [CellRenderer, Widget, int], Tuple[int, int]
    ] = ...
    get_preferred_height: Callable[[CellRenderer, Widget], Tuple[int, int]] = ...
    get_preferred_width_for_height: Callable[
        [CellRenderer, Widget, int], Tuple[int, int]
    ] = ...
    get_aligned_area: Callable[
        [CellRenderer, Widget, CellRendererState, Gdk.Rectangle], Gdk.Rectangle
    ] = ...
    snapshot: Callable[
        [
            CellRenderer,
            Snapshot,
            Widget,
            Gdk.Rectangle,
            Gdk.Rectangle,
            CellRendererState,
        ],
        None,
    ] = ...
    activate: Callable[
        [
            CellRenderer,
            Gdk.Event,
            Widget,
            str,
            Gdk.Rectangle,
            Gdk.Rectangle,
            CellRendererState,
        ],
        bool,
    ] = ...
    start_editing: Callable[
        [
            CellRenderer,
            Optional[Gdk.Event],
            Widget,
            str,
            Gdk.Rectangle,
            Gdk.Rectangle,
            CellRendererState,
        ],
        Optional[CellEditable],
    ] = ...
    editing_canceled: Callable[[CellRenderer], None] = ...
    editing_started: Callable[[CellRenderer, CellEditable, str], None] = ...
    padding: list[None] = ...

class CellRendererClassPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

@deprecated(
    "List views use widgets to display their contents. You should use [class@Gtk.DropDown] instead"
)
class CellRendererCombo(CellRendererText):
    """
    Renders a combobox in a cell

    `GtkCellRendererCombo` renders text in a cell like `GtkCellRendererText` from
    which it is derived. But while `GtkCellRendererText` offers a simple entry to
    edit the text, `GtkCellRendererCombo` offers a `GtkComboBox`
    widget to edit the text. The values to display in the combo box are taken from
    the tree model specified in the `GtkCellRendererCombo`:model property.

    The combo cell renderer takes care of adding a text cell renderer to the combo
    box and sets it to display the column specified by its
    `GtkCellRendererCombo`:text-column property. Further properties of the combo box
    can be set in a handler for the `GtkCellRenderer::editing-started` signal.

    :Constructors:

    ::

        CellRendererCombo(**properties)
        new() -> Gtk.CellRenderer

    Object GtkCellRendererCombo

    Signals from GtkCellRendererCombo:
      changed (gchararray, GtkTreeIter)

    Properties from GtkCellRendererCombo:
      model -> GtkTreeModel: model
      text-column -> gint: text-column
      has-entry -> gboolean: has-entry

    Signals from GtkCellRendererText:
      edited (gchararray, gchararray)

    Properties from GtkCellRendererText:
      text -> gchararray: text
      markup -> gchararray: markup
      attributes -> PangoAttrList: attributes
      single-paragraph-mode -> gboolean: single-paragraph-mode
      width-chars -> gint: width-chars
      max-width-chars -> gint: max-width-chars
      wrap-width -> gint: wrap-width
      alignment -> PangoAlignment: alignment
      placeholder-text -> gchararray: placeholder-text
      background -> gchararray: background
      foreground -> gchararray: foreground
      background-rgba -> GdkRGBA: background-rgba
      foreground-rgba -> GdkRGBA: foreground-rgba
      font -> gchararray: font
      font-desc -> PangoFontDescription: font-desc
      family -> gchararray: family
      style -> PangoStyle: style
      variant -> PangoVariant: variant
      weight -> gint: weight
      stretch -> PangoStretch: stretch
      size -> gint: size
      size-points -> gdouble: size-points
      scale -> gdouble: scale
      editable -> gboolean: editable
      strikethrough -> gboolean: strikethrough
      underline -> PangoUnderline: underline
      rise -> gint: rise
      language -> gchararray: language
      ellipsize -> PangoEllipsizeMode: ellipsize
      wrap-mode -> PangoWrapMode: wrap-mode
      background-set -> gboolean: background-set
      foreground-set -> gboolean: foreground-set
      family-set -> gboolean: family-set
      style-set -> gboolean: style-set
      variant-set -> gboolean: variant-set
      weight-set -> gboolean: weight-set
      stretch-set -> gboolean: stretch-set
      size-set -> gboolean: size-set
      scale-set -> gboolean: scale-set
      editable-set -> gboolean: editable-set
      strikethrough-set -> gboolean: strikethrough-set
      underline-set -> gboolean: underline-set
      rise-set -> gboolean: rise-set
      language-set -> gboolean: language-set
      ellipsize-set -> gboolean: ellipsize-set
      align-set -> gboolean: align-set

    Signals from GtkCellRenderer:
      editing-canceled ()
      editing-started (GtkCellEditable, gchararray)

    Properties from GtkCellRenderer:
      mode -> GtkCellRendererMode: mode
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      xpad -> guint: xpad
      ypad -> guint: ypad
      width -> gint: width
      height -> gint: height
      is-expander -> gboolean: is-expander
      is-expanded -> gboolean: is-expanded
      cell-background -> gchararray: cell-background
      cell-background-rgba -> GdkRGBA: cell-background-rgba
      cell-background-set -> gboolean: cell-background-set
      editing -> gboolean: editing

    Signals from GObject:
      notify (GParam)
    """

    class Props(CellRendererText.Props):
        has_entry: bool
        """
        If %TRUE, the cell renderer will include an entry and allow to enter
        values other than the ones in the popup list.
        """
        model: TreeModel
        """
        Holds a tree model containing the possible values for the combo box.
        Use the text_column property to specify the column holding the values.
        """
        text_column: int
        """
        Specifies the model column which holds the possible values for the
        combo box.

        Note that this refers to the model specified in the model property,
        not the model backing the tree view to which
        this cell renderer is attached.

        `GtkCellRendererCombo` automatically adds a text cell renderer for
        this column to its combo box.
        """

    props: Props = ...
    def __init__(
        self,
        has_entry: bool = ...,
        model: TreeModel = ...,
        text_column: int = ...,
        align_set: bool = ...,
        alignment: Pango.Alignment = ...,
        attributes: Pango.AttrList = ...,
        background: str = ...,
        background_rgba: Gdk.RGBA = ...,
        background_set: bool = ...,
        editable: bool = ...,
        editable_set: bool = ...,
        ellipsize: Pango.EllipsizeMode = ...,
        ellipsize_set: bool = ...,
        family: str = ...,
        family_set: bool = ...,
        font: str = ...,
        font_desc: Pango.FontDescription = ...,
        foreground: str = ...,
        foreground_rgba: Gdk.RGBA = ...,
        foreground_set: bool = ...,
        language: str = ...,
        language_set: bool = ...,
        markup: str = ...,
        max_width_chars: int = ...,
        placeholder_text: str = ...,
        rise: int = ...,
        rise_set: bool = ...,
        scale: float = ...,
        scale_set: bool = ...,
        single_paragraph_mode: bool = ...,
        size: int = ...,
        size_points: float = ...,
        size_set: bool = ...,
        stretch: Pango.Stretch = ...,
        stretch_set: bool = ...,
        strikethrough: bool = ...,
        strikethrough_set: bool = ...,
        style: Pango.Style = ...,
        style_set: bool = ...,
        text: str = ...,
        underline: Pango.Underline = ...,
        underline_set: bool = ...,
        variant: Pango.Variant = ...,
        variant_set: bool = ...,
        weight: int = ...,
        weight_set: bool = ...,
        width_chars: int = ...,
        wrap_mode: Pango.WrapMode = ...,
        wrap_width: int = ...,
        cell_background: str = ...,
        cell_background_rgba: Gdk.RGBA = ...,
        cell_background_set: bool = ...,
        height: int = ...,
        is_expanded: bool = ...,
        is_expander: bool = ...,
        mode: CellRendererMode = ...,
        sensitive: bool = ...,
        visible: bool = ...,
        width: int = ...,
        xalign: float = ...,
        xpad: int = ...,
        yalign: float = ...,
        ypad: int = ...,
    ): ...
    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> CellRendererCombo:
        """
        Creates a new `GtkCellRendererCombo`.
        Adjust how text is drawn using object properties.
        Object properties can be set globally (with g_object_set()).
        Also, with `GtkTreeViewColumn`, you can bind a property to a value
        in a `GtkTreeModel`. For example, you can bind the “text” property
        on the cell renderer to a string value in the model, thus rendering
        a different string in each row of the `GtkTreeView`.

        Parameters:


        Returns:
            CellRenderer: the new cell renderer

        """
        ...

@deprecated(
    "List views use widgets to display their contents. You should use [class@Gtk.Image] for icons, and [class@Gtk.Picture] for images"
)
class CellRendererPixbuf(CellRenderer):
    """
    Renders a pixbuf in a cell

    A `GtkCellRendererPixbuf` can be used to render an image in a cell. It allows
    to render either a given `GdkPixbuf` (set via the
    `GtkCellRendererPixbuf:pixbuf` property) or a named icon (set via the
    `GtkCellRendererPixbuf:icon-name` property).

    To support the tree view, `GtkCellRendererPixbuf` also supports rendering two
    alternative pixbufs, when the `GtkCellRenderer:is-expander` property is %TRUE.
    If the `GtkCellRenderer:is-expanded property` is %TRUE and the
    `GtkCellRendererPixbuf:pixbuf-expander-open` property is set to a pixbuf, it
    renders that pixbuf, if the `GtkCellRenderer:is-expanded` property is %FALSE
    and the `GtkCellRendererPixbuf:pixbuf-expander-closed` property is set to a
    pixbuf, it renders that one.

    :Constructors:

    ::

        CellRendererPixbuf(**properties)
        new() -> Gtk.CellRenderer

    Object GtkCellRendererPixbuf

    Properties from GtkCellRendererPixbuf:
      pixbuf -> GdkPixbuf: pixbuf
      pixbuf-expander-open -> GdkPixbuf: pixbuf-expander-open
      pixbuf-expander-closed -> GdkPixbuf: pixbuf-expander-closed
      texture -> GdkTexture: texture
      icon-size -> GtkIconSize: icon-size
      icon-name -> gchararray: icon-name
      gicon -> GIcon: gicon

    Signals from GtkCellRenderer:
      editing-canceled ()
      editing-started (GtkCellEditable, gchararray)

    Properties from GtkCellRenderer:
      mode -> GtkCellRendererMode: mode
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      xpad -> guint: xpad
      ypad -> guint: ypad
      width -> gint: width
      height -> gint: height
      is-expander -> gboolean: is-expander
      is-expanded -> gboolean: is-expanded
      cell-background -> gchararray: cell-background
      cell-background-rgba -> GdkRGBA: cell-background-rgba
      cell-background-set -> gboolean: cell-background-set
      editing -> gboolean: editing

    Signals from GObject:
      notify (GParam)
    """

    class Props(CellRenderer.Props):
        gicon: Gio.Icon
        """
        The GIcon representing the icon to display.
        If the icon theme is changed, the image will be updated
        automatically.
        """
        icon_name: str
        """
        The name of the themed icon to display.
        This property only has an effect if not overridden by the \"pixbuf\" property.
        """
        icon_size: IconSize
        """
        The `GtkIconSize` value that specifies the size of the rendered icon.
        """
        pixbuf_expander_closed: GdkPixbuf.Pixbuf
        pixbuf_expander_open: GdkPixbuf.Pixbuf
        texture: Gdk.Texture
        pixbuf: GdkPixbuf.Pixbuf

    props: Props = ...
    def __init__(
        self,
        gicon: Gio.Icon = ...,
        icon_name: str = ...,
        icon_size: IconSize = ...,
        pixbuf: GdkPixbuf.Pixbuf = ...,
        pixbuf_expander_closed: GdkPixbuf.Pixbuf = ...,
        pixbuf_expander_open: GdkPixbuf.Pixbuf = ...,
        texture: Gdk.Texture = ...,
        cell_background: str = ...,
        cell_background_rgba: Gdk.RGBA = ...,
        cell_background_set: bool = ...,
        height: int = ...,
        is_expanded: bool = ...,
        is_expander: bool = ...,
        mode: CellRendererMode = ...,
        sensitive: bool = ...,
        visible: bool = ...,
        width: int = ...,
        xalign: float = ...,
        xpad: int = ...,
        yalign: float = ...,
        ypad: int = ...,
    ): ...
    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> CellRendererPixbuf:
        """
        Creates a new `GtkCellRendererPixbuf`. Adjust rendering
        parameters using object properties. Object properties can be set
        globally (with g_object_set()). Also, with `GtkTreeViewColumn`, you
        can bind a property to a value in a `GtkTreeModel`. For example, you
        can bind the “pixbuf” property on the cell renderer to a pixbuf value
        in the model, thus rendering a different image in each row of the
        `GtkTreeView`.

        Parameters:


        Returns:
            CellRenderer: the new cell renderer

        """
        ...

class CellRendererPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

@deprecated(
    "List views use widgets to display their contents. You should use [class@Gtk.ProgressBar] instead"
)
class CellRendererProgress(CellRenderer, Orientable):
    """
    Renders numbers as progress bars

    `GtkCellRendererProgress` renders a numeric value as a progress par in a cell.
    Additionally, it can display a text on top of the progress bar.

    :Constructors:

    ::

        CellRendererProgress(**properties)
        new() -> Gtk.CellRenderer

    Object GtkCellRendererProgress

    Properties from GtkCellRendererProgress:
      value -> gint: value
      text -> gchararray: text
      pulse -> gint: pulse
      text-xalign -> gfloat: text-xalign
      text-yalign -> gfloat: text-yalign
      inverted -> gboolean: inverted

    Signals from GtkCellRenderer:
      editing-canceled ()
      editing-started (GtkCellEditable, gchararray)

    Properties from GtkCellRenderer:
      mode -> GtkCellRendererMode: mode
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      xpad -> guint: xpad
      ypad -> guint: ypad
      width -> gint: width
      height -> gint: height
      is-expander -> gboolean: is-expander
      is-expanded -> gboolean: is-expanded
      cell-background -> gchararray: cell-background
      cell-background-rgba -> GdkRGBA: cell-background-rgba
      cell-background-set -> gboolean: cell-background-set
      editing -> gboolean: editing

    Signals from GObject:
      notify (GParam)
    """

    class Props(CellRenderer.Props, Orientable.Props):
        inverted: bool
        pulse: int
        """
        Setting this to a non-negative value causes the cell renderer to
        enter \"activity mode\", where a block bounces back and forth to
        indicate that some progress is made, without specifying exactly how
        much.

        Each increment of the property causes the block to move by a little
        bit.

        To indicate that the activity has not started yet, set the property
        to zero. To indicate completion, set the property to %G_MAXINT.
        """
        text: str
        """
        The \"text\" property determines the label which will be drawn
        over the progress bar. Setting this property to %NULL causes the default
        label to be displayed. Setting this property to an empty string causes
        no label to be displayed.
        """
        text_xalign: float
        """
        The \"text-xalign\" property controls the horizontal alignment of the
        text in the progress bar. Valid values range from 0 (left) to 1
        (right). Reserved for RTL layouts.
        """
        text_yalign: float
        """
        The \"text-yalign\" property controls the vertical alignment of the
        text in the progress bar. Valid values range from 0 (top) to 1
        (bottom).
        """
        value: int
        """
        The \"value\" property determines the percentage to which the
        progress bar will be \"filled in\".
        """

    props: Props = ...
    def __init__(
        self,
        inverted: bool = ...,
        pulse: int = ...,
        text: str = ...,
        text_xalign: float = ...,
        text_yalign: float = ...,
        value: int = ...,
        cell_background: str = ...,
        cell_background_rgba: Gdk.RGBA = ...,
        cell_background_set: bool = ...,
        height: int = ...,
        is_expanded: bool = ...,
        is_expander: bool = ...,
        mode: CellRendererMode = ...,
        sensitive: bool = ...,
        visible: bool = ...,
        width: int = ...,
        xalign: float = ...,
        xpad: int = ...,
        yalign: float = ...,
        ypad: int = ...,
        orientation: Orientation = ...,
    ): ...
    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> CellRendererProgress:
        """
        Creates a new `GtkCellRendererProgress`.

        Parameters:


        Returns:
            CellRenderer: the new cell renderer

        """
        ...

@deprecated(
    "List views use widgets to display their contents. You should use [class@Gtk.SpinButton] instead"
)
class CellRendererSpin(CellRendererText):
    """
    Renders a spin button in a cell

    `GtkCellRendererSpin` renders text in a cell like `GtkCellRendererText` from
    which it is derived. But while `GtkCellRendererText` offers a simple entry to
    edit the text, `GtkCellRendererSpin` offers a `GtkSpinButton` widget. Of course,
    that means that the text has to be parseable as a floating point number.

    The range of the spinbutton is taken from the adjustment property of the
    cell renderer, which can be set explicitly or mapped to a column in the
    tree model, like all properties of cell renders. `GtkCellRendererSpin`
    also has properties for the `GtkCellRendererSpin:climb-rate` and the number
    of `GtkCellRendererSpin:digits` to display. Other `GtkSpinButton` properties
    can be set in a handler for the `GtkCellRenderer::editing-started` signal.

    :Constructors:

    ::

        CellRendererSpin(**properties)
        new() -> Gtk.CellRenderer

    Object GtkCellRendererSpin

    Properties from GtkCellRendererSpin:
      adjustment -> GtkAdjustment: adjustment
      climb-rate -> gdouble: climb-rate
      digits -> guint: digits

    Signals from GtkCellRendererText:
      edited (gchararray, gchararray)

    Properties from GtkCellRendererText:
      text -> gchararray: text
      markup -> gchararray: markup
      attributes -> PangoAttrList: attributes
      single-paragraph-mode -> gboolean: single-paragraph-mode
      width-chars -> gint: width-chars
      max-width-chars -> gint: max-width-chars
      wrap-width -> gint: wrap-width
      alignment -> PangoAlignment: alignment
      placeholder-text -> gchararray: placeholder-text
      background -> gchararray: background
      foreground -> gchararray: foreground
      background-rgba -> GdkRGBA: background-rgba
      foreground-rgba -> GdkRGBA: foreground-rgba
      font -> gchararray: font
      font-desc -> PangoFontDescription: font-desc
      family -> gchararray: family
      style -> PangoStyle: style
      variant -> PangoVariant: variant
      weight -> gint: weight
      stretch -> PangoStretch: stretch
      size -> gint: size
      size-points -> gdouble: size-points
      scale -> gdouble: scale
      editable -> gboolean: editable
      strikethrough -> gboolean: strikethrough
      underline -> PangoUnderline: underline
      rise -> gint: rise
      language -> gchararray: language
      ellipsize -> PangoEllipsizeMode: ellipsize
      wrap-mode -> PangoWrapMode: wrap-mode
      background-set -> gboolean: background-set
      foreground-set -> gboolean: foreground-set
      family-set -> gboolean: family-set
      style-set -> gboolean: style-set
      variant-set -> gboolean: variant-set
      weight-set -> gboolean: weight-set
      stretch-set -> gboolean: stretch-set
      size-set -> gboolean: size-set
      scale-set -> gboolean: scale-set
      editable-set -> gboolean: editable-set
      strikethrough-set -> gboolean: strikethrough-set
      underline-set -> gboolean: underline-set
      rise-set -> gboolean: rise-set
      language-set -> gboolean: language-set
      ellipsize-set -> gboolean: ellipsize-set
      align-set -> gboolean: align-set

    Signals from GtkCellRenderer:
      editing-canceled ()
      editing-started (GtkCellEditable, gchararray)

    Properties from GtkCellRenderer:
      mode -> GtkCellRendererMode: mode
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      xpad -> guint: xpad
      ypad -> guint: ypad
      width -> gint: width
      height -> gint: height
      is-expander -> gboolean: is-expander
      is-expanded -> gboolean: is-expanded
      cell-background -> gchararray: cell-background
      cell-background-rgba -> GdkRGBA: cell-background-rgba
      cell-background-set -> gboolean: cell-background-set
      editing -> gboolean: editing

    Signals from GObject:
      notify (GParam)
    """

    class Props(CellRendererText.Props):
        adjustment: Adjustment
        """
        The adjustment that holds the value of the spinbutton.
        This must be non-%NULL for the cell renderer to be editable.
        """
        climb_rate: float
        """
        The acceleration rate when you hold down a button.
        """
        digits: int
        """
        The number of decimal places to display.
        """

    props: Props = ...
    def __init__(
        self,
        adjustment: Adjustment = ...,
        climb_rate: float = ...,
        digits: int = ...,
        align_set: bool = ...,
        alignment: Pango.Alignment = ...,
        attributes: Pango.AttrList = ...,
        background: str = ...,
        background_rgba: Gdk.RGBA = ...,
        background_set: bool = ...,
        editable: bool = ...,
        editable_set: bool = ...,
        ellipsize: Pango.EllipsizeMode = ...,
        ellipsize_set: bool = ...,
        family: str = ...,
        family_set: bool = ...,
        font: str = ...,
        font_desc: Pango.FontDescription = ...,
        foreground: str = ...,
        foreground_rgba: Gdk.RGBA = ...,
        foreground_set: bool = ...,
        language: str = ...,
        language_set: bool = ...,
        markup: str = ...,
        max_width_chars: int = ...,
        placeholder_text: str = ...,
        rise: int = ...,
        rise_set: bool = ...,
        scale: float = ...,
        scale_set: bool = ...,
        single_paragraph_mode: bool = ...,
        size: int = ...,
        size_points: float = ...,
        size_set: bool = ...,
        stretch: Pango.Stretch = ...,
        stretch_set: bool = ...,
        strikethrough: bool = ...,
        strikethrough_set: bool = ...,
        style: Pango.Style = ...,
        style_set: bool = ...,
        text: str = ...,
        underline: Pango.Underline = ...,
        underline_set: bool = ...,
        variant: Pango.Variant = ...,
        variant_set: bool = ...,
        weight: int = ...,
        weight_set: bool = ...,
        width_chars: int = ...,
        wrap_mode: Pango.WrapMode = ...,
        wrap_width: int = ...,
        cell_background: str = ...,
        cell_background_rgba: Gdk.RGBA = ...,
        cell_background_set: bool = ...,
        height: int = ...,
        is_expanded: bool = ...,
        is_expander: bool = ...,
        mode: CellRendererMode = ...,
        sensitive: bool = ...,
        visible: bool = ...,
        width: int = ...,
        xalign: float = ...,
        xpad: int = ...,
        yalign: float = ...,
        ypad: int = ...,
    ): ...
    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> CellRendererSpin:
        """
        Creates a new `GtkCellRendererSpin`.

        Parameters:


        Returns:
            CellRenderer: a new `GtkCellRendererSpin`

        """
        ...

@deprecated(
    "List views use widgets to display their contents. You should use [class@Gtk.Spinner] instead"
)
class CellRendererSpinner(CellRenderer):
    """
    Renders a spinning animation in a cell

    `GtkCellRendererSpinner` renders a spinning animation in a cell, very
    similar to `GtkSpinner`. It can often be used as an alternative
    to a `GtkCellRendererProgress` for displaying indefinite activity,
    instead of actual progress.

    To start the animation in a cell, set the `GtkCellRendererSpinner:active`
    property to %TRUE and increment the `GtkCellRendererSpinner:pulse` property
    at regular intervals. The usual way to set the cell renderer properties
    for each cell is to bind them to columns in your tree model using e.g.
    gtk_tree_view_column_add_attribute().

    :Constructors:

    ::

        CellRendererSpinner(**properties)
        new() -> Gtk.CellRenderer

    Object GtkCellRendererSpinner

    Properties from GtkCellRendererSpinner:
      active -> gboolean: active
      pulse -> guint: pulse
      size -> GtkIconSize: size

    Signals from GtkCellRenderer:
      editing-canceled ()
      editing-started (GtkCellEditable, gchararray)

    Properties from GtkCellRenderer:
      mode -> GtkCellRendererMode: mode
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      xpad -> guint: xpad
      ypad -> guint: ypad
      width -> gint: width
      height -> gint: height
      is-expander -> gboolean: is-expander
      is-expanded -> gboolean: is-expanded
      cell-background -> gchararray: cell-background
      cell-background-rgba -> GdkRGBA: cell-background-rgba
      cell-background-set -> gboolean: cell-background-set
      editing -> gboolean: editing

    Signals from GObject:
      notify (GParam)
    """

    class Props(CellRenderer.Props):
        active: bool
        pulse: int
        """
        Pulse of the spinner. Increment this value to draw the next frame of the
        spinner animation. Usually, you would update this value in a timeout.

        By default, the `GtkSpinner` widget draws one full cycle of the animation,
        consisting of 12 frames, in 750 milliseconds.
        """
        size: IconSize
        """
        The `GtkIconSize` value that specifies the size of the rendered spinner.
        """

    props: Props = ...
    def __init__(
        self,
        active: bool = ...,
        pulse: int = ...,
        size: IconSize = ...,
        cell_background: str = ...,
        cell_background_rgba: Gdk.RGBA = ...,
        cell_background_set: bool = ...,
        height: int = ...,
        is_expanded: bool = ...,
        is_expander: bool = ...,
        mode: CellRendererMode = ...,
        sensitive: bool = ...,
        visible: bool = ...,
        width: int = ...,
        xalign: float = ...,
        xpad: int = ...,
        yalign: float = ...,
        ypad: int = ...,
    ): ...
    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> CellRendererSpinner:
        """
        Returns a new cell renderer which will show a spinner to indicate
        activity.

        Parameters:


        Returns:
            CellRenderer: a new `GtkCellRenderer`

        """
        ...

@deprecated(
    "List views use widgets to display their contents. You should use [class@Gtk.Inscription] or [class@Gtk.Label] instead"
)
class CellRendererText(CellRenderer):
    """
    Renders text in a cell

    A `GtkCellRendererText` renders a given text in its cell, using the font, color and
    style information provided by its properties. The text will be ellipsized if it is
    too long and the `GtkCellRendererText:ellipsize` property allows it.

    If the `GtkCellRenderer:mode` is %GTK_CELL_RENDERER_MODE_EDITABLE,
    the `GtkCellRendererText` allows to edit its text using an entry.

    :Constructors:

    ::

        CellRendererText(**properties)
        new() -> Gtk.CellRenderer

    Object GtkCellRendererText

    Signals from GtkCellRendererText:
      edited (gchararray, gchararray)

    Properties from GtkCellRendererText:
      text -> gchararray: text
      markup -> gchararray: markup
      attributes -> PangoAttrList: attributes
      single-paragraph-mode -> gboolean: single-paragraph-mode
      width-chars -> gint: width-chars
      max-width-chars -> gint: max-width-chars
      wrap-width -> gint: wrap-width
      alignment -> PangoAlignment: alignment
      placeholder-text -> gchararray: placeholder-text
      background -> gchararray: background
      foreground -> gchararray: foreground
      background-rgba -> GdkRGBA: background-rgba
      foreground-rgba -> GdkRGBA: foreground-rgba
      font -> gchararray: font
      font-desc -> PangoFontDescription: font-desc
      family -> gchararray: family
      style -> PangoStyle: style
      variant -> PangoVariant: variant
      weight -> gint: weight
      stretch -> PangoStretch: stretch
      size -> gint: size
      size-points -> gdouble: size-points
      scale -> gdouble: scale
      editable -> gboolean: editable
      strikethrough -> gboolean: strikethrough
      underline -> PangoUnderline: underline
      rise -> gint: rise
      language -> gchararray: language
      ellipsize -> PangoEllipsizeMode: ellipsize
      wrap-mode -> PangoWrapMode: wrap-mode
      background-set -> gboolean: background-set
      foreground-set -> gboolean: foreground-set
      family-set -> gboolean: family-set
      style-set -> gboolean: style-set
      variant-set -> gboolean: variant-set
      weight-set -> gboolean: weight-set
      stretch-set -> gboolean: stretch-set
      size-set -> gboolean: size-set
      scale-set -> gboolean: scale-set
      editable-set -> gboolean: editable-set
      strikethrough-set -> gboolean: strikethrough-set
      underline-set -> gboolean: underline-set
      rise-set -> gboolean: rise-set
      language-set -> gboolean: language-set
      ellipsize-set -> gboolean: ellipsize-set
      align-set -> gboolean: align-set

    Signals from GtkCellRenderer:
      editing-canceled ()
      editing-started (GtkCellEditable, gchararray)

    Properties from GtkCellRenderer:
      mode -> GtkCellRendererMode: mode
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      xpad -> guint: xpad
      ypad -> guint: ypad
      width -> gint: width
      height -> gint: height
      is-expander -> gboolean: is-expander
      is-expanded -> gboolean: is-expanded
      cell-background -> gchararray: cell-background
      cell-background-rgba -> GdkRGBA: cell-background-rgba
      cell-background-set -> gboolean: cell-background-set
      editing -> gboolean: editing

    Signals from GObject:
      notify (GParam)
    """

    class Props(CellRenderer.Props):
        align_set: bool
        alignment: Pango.Alignment
        """
        Specifies how to align the lines of text with respect to each other.

        Note that this property describes how to align the lines of text in
        case there are several of them. The \"xalign\" property of `GtkCellRenderer`,
        on the other hand, sets the horizontal alignment of the whole text.
        """
        attributes: Pango.AttrList
        background_rgba: Gdk.RGBA
        """
        Background color as a `GdkRGBA`
        """
        background_set: bool
        editable: bool
        editable_set: bool
        ellipsize: Pango.EllipsizeMode
        """
        Specifies the preferred place to ellipsize the string, if the cell renderer
        does not have enough room to display the entire string. Setting it to
        %PANGO_ELLIPSIZE_NONE turns off ellipsizing. See the wrap-width property
        for another way of making the text fit into a given width.
        """
        ellipsize_set: bool
        family: str
        family_set: bool
        font: str
        font_desc: Pango.FontDescription
        foreground_rgba: Gdk.RGBA
        """
        Foreground color as a `GdkRGBA`
        """
        foreground_set: bool
        language: str
        language_set: bool
        max_width_chars: int
        """
        The desired maximum width of the cell, in characters. If this property
        is set to -1, the width will be calculated automatically.

        For cell renderers that ellipsize or wrap text; this property
        controls the maximum reported width of the cell. The
        cell should not receive any greater allocation unless it is
        set to expand in its `GtkCellLayout` and all of the cell's siblings
        have received their natural width.
        """
        placeholder_text: str
        """
        The text that will be displayed in the `GtkCellRenderer` if
        `GtkCellRendererText:editable` is %TRUE and the cell is empty.
        """
        rise: int
        rise_set: bool
        scale: float
        scale_set: bool
        single_paragraph_mode: bool
        size: int
        size_points: float
        size_set: bool
        stretch: Pango.Stretch
        stretch_set: bool
        strikethrough: bool
        strikethrough_set: bool
        style: Pango.Style
        style_set: bool
        text: str
        underline: Pango.Underline
        underline_set: bool
        variant: Pango.Variant
        variant_set: bool
        weight: int
        weight_set: bool
        width_chars: int
        """
        The desired width of the cell, in characters. If this property is set to
        -1, the width will be calculated automatically, otherwise the cell will
        request either 3 characters or the property value, whichever is greater.
        """
        wrap_mode: Pango.WrapMode
        """
        Specifies how to break the string into multiple lines, if the cell
        renderer does not have enough room to display the entire string.
        This property has no effect unless the wrap-width property is set.
        """
        wrap_width: int
        """
        Specifies the minimum width at which the text is wrapped. The wrap-mode property can
        be used to influence at what character positions the line breaks can be placed.
        Setting wrap-width to -1 turns wrapping off.
        """
        background: str
        foreground: str
        markup: str

    props: Props = ...
    parent: CellRenderer = ...
    def __init__(
        self,
        align_set: bool = ...,
        alignment: Pango.Alignment = ...,
        attributes: Pango.AttrList = ...,
        background: str = ...,
        background_rgba: Gdk.RGBA = ...,
        background_set: bool = ...,
        editable: bool = ...,
        editable_set: bool = ...,
        ellipsize: Pango.EllipsizeMode = ...,
        ellipsize_set: bool = ...,
        family: str = ...,
        family_set: bool = ...,
        font: str = ...,
        font_desc: Pango.FontDescription = ...,
        foreground: str = ...,
        foreground_rgba: Gdk.RGBA = ...,
        foreground_set: bool = ...,
        language: str = ...,
        language_set: bool = ...,
        markup: str = ...,
        max_width_chars: int = ...,
        placeholder_text: str = ...,
        rise: int = ...,
        rise_set: bool = ...,
        scale: float = ...,
        scale_set: bool = ...,
        single_paragraph_mode: bool = ...,
        size: int = ...,
        size_points: float = ...,
        size_set: bool = ...,
        stretch: Pango.Stretch = ...,
        stretch_set: bool = ...,
        strikethrough: bool = ...,
        strikethrough_set: bool = ...,
        style: Pango.Style = ...,
        style_set: bool = ...,
        text: str = ...,
        underline: Pango.Underline = ...,
        underline_set: bool = ...,
        variant: Pango.Variant = ...,
        variant_set: bool = ...,
        weight: int = ...,
        weight_set: bool = ...,
        width_chars: int = ...,
        wrap_mode: Pango.WrapMode = ...,
        wrap_width: int = ...,
        cell_background: str = ...,
        cell_background_rgba: Gdk.RGBA = ...,
        cell_background_set: bool = ...,
        height: int = ...,
        is_expanded: bool = ...,
        is_expander: bool = ...,
        mode: CellRendererMode = ...,
        sensitive: bool = ...,
        visible: bool = ...,
        width: int = ...,
        xalign: float = ...,
        xpad: int = ...,
        yalign: float = ...,
        ypad: int = ...,
    ): ...
    def do_edited(self, path: str, new_text: str) -> None: ...
    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> CellRendererText:
        """
        Creates a new `GtkCellRendererText`. Adjust how text is drawn using
        object properties. Object properties can be
        set globally (with g_object_set()). Also, with `GtkTreeViewColumn`,
        you can bind a property to a value in a `GtkTreeModel`. For example,
        you can bind the “text” property on the cell renderer to a string
        value in the model, thus rendering a different string in each row
        of the `GtkTreeView`.

        Parameters:


        Returns:
            CellRenderer: the new cell renderer

        """
        ...

    @deprecated("This method is deprecated")
    def set_fixed_height_from_font(self, number_of_rows: int) -> None:
        """
        Sets the height of a renderer to explicitly be determined by the “font” and
        “y_pad” property set on it. Further changes in these properties do not
        affect the height, so they must be accompanied by a subsequent call to this
        function. Using this function is inflexible, and should really only be used
        if calculating the size of a cell is too slow (ie, a massive number of cells
        displayed). If @number_of_rows is -1, then the fixed height is unset, and
        the height is determined by the properties again.

        Parameters:
            number_of_rows: Number of rows of text each cell renderer is allocated, or -1

        Returns:

        """
        ...

class CellRendererTextClass(GObject.GPointer):
    """
    :Constructors:

    ::

        CellRendererTextClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: CellRendererClass = ...
    edited: Callable[[CellRendererText, str, str], None] = ...
    padding: list[None] = ...

@deprecated(
    "List views use widgets to display their contents. You should use [class@Gtk.ToggleButton] instead"
)
class CellRendererToggle(CellRenderer):
    """
    Renders a toggle button in a cell

    `GtkCellRendererToggle` renders a toggle button in a cell. The
    button is drawn as a radio or a checkbutton, depending on the
    `GtkCellRendererToggle:radio` property.
    When activated, it emits the `GtkCellRendererToggle::toggled` signal.

    :Constructors:

    ::

        CellRendererToggle(**properties)
        new() -> Gtk.CellRenderer

    Object GtkCellRendererToggle

    Signals from GtkCellRendererToggle:
      toggled (gchararray)

    Properties from GtkCellRendererToggle:
      activatable -> gboolean: activatable
      active -> gboolean: active
      radio -> gboolean: radio
      inconsistent -> gboolean: inconsistent

    Signals from GtkCellRenderer:
      editing-canceled ()
      editing-started (GtkCellEditable, gchararray)

    Properties from GtkCellRenderer:
      mode -> GtkCellRendererMode: mode
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      xpad -> guint: xpad
      ypad -> guint: ypad
      width -> gint: width
      height -> gint: height
      is-expander -> gboolean: is-expander
      is-expanded -> gboolean: is-expanded
      cell-background -> gchararray: cell-background
      cell-background-rgba -> GdkRGBA: cell-background-rgba
      cell-background-set -> gboolean: cell-background-set
      editing -> gboolean: editing

    Signals from GObject:
      notify (GParam)
    """

    class Props(CellRenderer.Props):
        activatable: bool
        active: bool
        inconsistent: bool
        radio: bool

    props: Props = ...
    def __init__(
        self,
        activatable: bool = ...,
        active: bool = ...,
        inconsistent: bool = ...,
        radio: bool = ...,
        cell_background: str = ...,
        cell_background_rgba: Gdk.RGBA = ...,
        cell_background_set: bool = ...,
        height: int = ...,
        is_expanded: bool = ...,
        is_expander: bool = ...,
        mode: CellRendererMode = ...,
        sensitive: bool = ...,
        visible: bool = ...,
        width: int = ...,
        xalign: float = ...,
        xpad: int = ...,
        yalign: float = ...,
        ypad: int = ...,
    ): ...
    @deprecated("This method is deprecated")
    def get_activatable(self) -> bool:
        """
        Returns whether the cell renderer is activatable. See
        gtk_cell_renderer_toggle_set_activatable().

        Parameters:


        Returns:
            bool: %TRUE if the cell renderer is activatable.

        """
        ...

    @deprecated("This method is deprecated")
    def get_active(self) -> bool:
        """
        Returns whether the cell renderer is active. See
        gtk_cell_renderer_toggle_set_active().

        Parameters:


        Returns:
            bool: %TRUE if the cell renderer is active.

        """
        ...

    @deprecated("This method is deprecated")
    def get_radio(self) -> bool:
        """
        Returns whether we’re rendering radio toggles rather than checkboxes.

        Parameters:


        Returns:
            bool: %TRUE if we’re rendering radio toggles rather than checkboxes

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> CellRendererToggle:
        """
        Creates a new `GtkCellRendererToggle`. Adjust rendering
        parameters using object properties. Object properties can be set
        globally (with g_object_set()). Also, with `GtkTreeViewColumn`, you
        can bind a property to a value in a `GtkTreeModel`. For example, you
        can bind the “active” property on the cell renderer to a boolean value
        in the model, thus causing the check button to reflect the state of
        the model.

        Parameters:


        Returns:
            CellRenderer: the new cell renderer

        """
        ...

    @deprecated("This method is deprecated")
    def set_activatable(self, setting: bool) -> None:
        """
        Makes the cell renderer activatable.

        Parameters:
            setting: the value to set.

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_active(self, setting: bool) -> None:
        """
        Activates or deactivates a cell renderer.

        Parameters:
            setting: the value to set.

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_radio(self, radio: bool) -> None:
        """
        If @radio is %TRUE, the cell renderer renders a radio toggle
        (i.e. a toggle in a group of mutually-exclusive toggles).
        If %FALSE, it renders a check toggle (a standalone boolean option).
        This can be set globally for the cell renderer, or changed just
        before rendering each cell in the model (for `GtkTreeView`, you set
        up a per-row setting using `GtkTreeViewColumn` to associate model
        columns with cell renderer properties).

        Parameters:
            radio: %TRUE to make the toggle look like a radio button

        Returns:

        """
        ...

@deprecated(
    "List views use widgets to display their contents. You can use [class@Gtk.Box] instead"
)
class CellView(Widget, Accessible, Buildable, CellLayout, ConstraintTarget, Orientable):
    """
    A widget displaying a single row of a GtkTreeModel

    A `GtkCellView` displays a single row of a `GtkTreeModel` using a `GtkCellArea`
    and `GtkCellAreaContext`. A `GtkCellAreaContext` can be provided to the
    `GtkCellView` at construction time in order to keep the cellview in context
    of a group of cell views, this ensures that the renderers displayed will
    be properly aligned with each other (like the aligned cells in the menus
    of `GtkComboBox`).

    `GtkCellView` is `GtkOrientable` in order to decide in which orientation
    the underlying `GtkCellAreaContext` should be allocated. Taking the `GtkComboBox`
    menu as an example, cellviews should be oriented horizontally if the menus are
    listed top-to-bottom and thus all share the same width but may have separate
    individual heights (left-to-right menus should be allocated vertically since
    they all share the same height but may have variable widths).

    ## CSS nodes

    GtkCellView has a single CSS node with name cellview.

    :Constructors:

    ::

        CellView(**properties)
        new() -> Gtk.Widget
        new_with_context(area:Gtk.CellArea, context:Gtk.CellAreaContext) -> Gtk.Widget
        new_with_markup(markup:str) -> Gtk.Widget
        new_with_text(text:str) -> Gtk.Widget
        new_with_texture(texture:Gdk.Texture) -> Gtk.Widget

    Object GtkCellView

    Properties from GtkCellView:
      model -> GtkTreeModel: model
      cell-area -> GtkCellArea: cell-area
      cell-area-context -> GtkCellAreaContext: cell-area-context
      draw-sensitive -> gboolean: draw-sensitive
      fit-model -> gboolean: fit-model

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        CellLayout.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        cell_area: CellArea
        """
        The `GtkCellArea` rendering cells

        If no area is specified when creating the cell view with gtk_cell_view_new_with_context()
        a horizontally oriented `GtkCellArea`Box will be used.

        since 3.0
        """
        cell_area_context: CellAreaContext
        """
        The `GtkCellAreaContext` used to compute the geometry of the cell view.

        A group of cell views can be assigned the same context in order to
        ensure the sizes and cell alignments match across all the views with
        the same context.

        `GtkComboBox` menus uses this to assign the same context to all cell views
        in the menu items for a single menu (each submenu creates its own
        context since the size of each submenu does not depend on parent
        or sibling menus).

        since 3.0
        """
        draw_sensitive: bool
        """
        Whether all cells should be draw as sensitive for this view regardless
        of the actual cell properties (used to make menus with submenus appear
        sensitive when the items in submenus might be insensitive).

        since 3.0
        """
        fit_model: bool
        """
        Whether the view should request enough space to always fit
        the size of every row in the model (used by the combo box to
        ensure the combo box size doesn't change when different items
        are selected).

        since 3.0
        """
        model: Optional[TreeModel]
        """
        The model for cell view

        since 2.10
        """

    props: Props = ...
    def __init__(
        self,
        cell_area: CellArea = ...,
        cell_area_context: CellAreaContext = ...,
        draw_sensitive: bool = ...,
        fit_model: bool = ...,
        model: Optional[TreeModel] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    @deprecated("This method is deprecated")
    def get_displayed_row(self) -> Optional[TreePath]:
        """
        Returns a `GtkTreePath` referring to the currently
        displayed row. If no row is currently displayed,
        %NULL is returned.

        Parameters:


        Returns:
            Optional[TreePath]: the currently displayed row

        """
        ...

    @deprecated("This method is deprecated")
    def get_draw_sensitive(self) -> bool:
        """
        Gets whether @cell_view is configured to draw all of its
        cells in a sensitive state.

        Parameters:


        Returns:
            bool: whether @cell_view draws all of its
        cells in a sensitive state

        """
        ...

    @deprecated("This method is deprecated")
    def get_fit_model(self) -> bool:
        """
        Gets whether @cell_view is configured to request space
        to fit the entire `GtkTreeModel`.

        Parameters:


        Returns:
            bool: whether @cell_view requests space to fit
        the entire `GtkTreeModel`.

        """
        ...

    @deprecated("This method is deprecated")
    def get_model(self) -> Optional[TreeModel]:
        """
        Returns the model for @cell_view. If no model is used %NULL is
        returned.

        Parameters:


        Returns:
            Optional[TreeModel]: a `GtkTreeModel` used

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> CellView:
        """
        Creates a new `GtkCellView` widget.

        Parameters:


        Returns:
            Widget: A newly created `GtkCellView` widget.

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new_with_context(cls, area: CellArea, context: CellAreaContext) -> CellView:
        """
        Creates a new `GtkCellView` widget with a specific `GtkCellArea`
        to layout cells and a specific `GtkCellAreaContext`.

        Specifying the same context for a handful of cells lets
        the underlying area synchronize the geometry for those cells,
        in this way alignments with cellviews for other rows are
        possible.

        Parameters:
            area: the `GtkCellArea` to layout cells
            context: the `GtkCellAreaContext` in which to calculate cell geometry

        Returns:
            Widget: A newly created `GtkCellView` widget.

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new_with_markup(cls, markup: str) -> CellView:
        """
        Creates a new `GtkCellView` widget, adds a `GtkCellRendererText`
        to it, and makes it show @markup. The text can be marked up with
        the [Pango text markup language](https://docs.gtk.org/Pango/pango_markup.html).

        Parameters:
            markup: the text to display in the cell view

        Returns:
            Widget: A newly created `GtkCellView` widget.

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new_with_text(cls, text: str) -> CellView:
        """
        Creates a new `GtkCellView` widget, adds a `GtkCellRendererText`
        to it, and makes it show @text.

        Parameters:
            text: the text to display in the cell view

        Returns:
            Widget: A newly created `GtkCellView` widget.

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new_with_texture(cls, texture: Gdk.Texture) -> CellView:
        """
        Creates a new `GtkCellView` widget, adds a `GtkCellRendererPixbuf`
        to it, and makes it show @texture.

        Parameters:
            texture: the image to display in the cell view

        Returns:
            Widget: A newly created `GtkCellView` widget.

        """
        ...

    @deprecated("This method is deprecated")
    def set_displayed_row(self, path: Optional[TreePath] = None) -> None:
        """
        Sets the row of the model that is currently displayed
        by the `GtkCellView`. If the path is unset, then the
        contents of the cellview “stick” at their last value;
        this is not normally a desired result, but may be
        a needed intermediate state if say, the model for
        the `GtkCellView` becomes temporarily empty.

        Parameters:
            path: a `GtkTreePath` or %NULL to unset.

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_draw_sensitive(self, draw_sensitive: bool) -> None:
        """
        Sets whether @cell_view should draw all of its
        cells in a sensitive state, this is used by `GtkComboBox` menus
        to ensure that rows with insensitive cells that contain
        children appear sensitive in the parent menu item.

        Parameters:
            draw_sensitive: whether to draw all cells in a sensitive state.

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_fit_model(self, fit_model: bool) -> None:
        """
        Sets whether @cell_view should request space to fit the entire `GtkTreeModel`.

        This is used by `GtkComboBox` to ensure that the cell view displayed on
        the combo box’s button always gets enough space and does not resize
        when selection changes.

        Parameters:
            fit_model: whether @cell_view should request space for the whole model.

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_model(self, model: Optional[TreeModel] = None) -> None:
        """
        Sets the model for @cell_view. If @cell_view already has a model
        set, it will remove it before setting the new model. If @model is
        %NULL, then it will unset the old model.

        Parameters:
            model: a `GtkTreeModel`

        Returns:

        """
        ...

class CenterBox(Widget, Accessible, Buildable, ConstraintTarget, Orientable):
    """
    `GtkCenterBox` arranges three children in a row, keeping the middle child
    centered as well as possible.

    ![An example GtkCenterBox](centerbox.png)

    To add children to `GtkCenterBox`, use [method@Gtk.CenterBox.set_start_widget],
    [method@Gtk.CenterBox.set_center_widget] and
    [method@Gtk.CenterBox.set_end_widget].

    The sizing and positioning of children can be influenced with the
    align and expand properties of the children.

    # GtkCenterBox as GtkBuildable

    The `GtkCenterBox` implementation of the `GtkBuildable` interface
    supports placing children in the 3 positions by specifying “start”, “center”
    or “end” as the “type” attribute of a `<child>` element.

    # CSS nodes

    `GtkCenterBox` uses a single CSS node with the name “box”,

    The first child of the `GtkCenterBox` will be allocated depending on the
    text direction, i.e. in left-to-right layouts it will be allocated on the
    left and in right-to-left layouts on the right.

    In vertical orientation, the nodes of the children are arranged from top to
    bottom.

    # Accessibility

    Until GTK 4.10, `GtkCenterBox` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.

    Starting from GTK 4.12, `GtkCenterBox` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.

    :Constructors:

    ::

        CenterBox(**properties)
        new() -> Gtk.Widget

    Object GtkCenterBox

    Properties from GtkCenterBox:
      start-widget -> GtkWidget: start-widget
      center-widget -> GtkWidget: center-widget
      end-widget -> GtkWidget: end-widget
      baseline-position -> GtkBaselinePosition: baseline-position
      shrink-center-last -> gboolean: shrink-center-last

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        baseline_position: BaselinePosition
        """
        The position of the baseline aligned widget if extra space is available.
        """
        center_widget: Optional[Widget]
        """
        The widget that is placed at the center position.
        """
        end_widget: Optional[Widget]
        """
        The widget that is placed at the end position.

        In vertical orientation, the end position is at the bottom.
        In horizontal orientation, the end position is at the trailing
        edge wrt. to the text direction.
        """
        shrink_center_last: bool
        """
        Whether to shrink the center widget after other children.

        By default, when there's no space to give all three children their
        natural widths, the start and end widgets start shrinking and the
        center child keeps natural width until they reach minimum width.

        If set to `FALSE`, start and end widgets keep natural width and the
        center widget starts shrinking instead.
        """
        start_widget: Optional[Widget]
        """
        The widget that is placed at the start position.

        In vertical orientation, the start position is at the top.
        In horizontal orientation, the start position is at the leading
        edge wrt. to the text direction.
        """

    props: Props = ...
    def __init__(
        self,
        baseline_position: BaselinePosition = ...,
        center_widget: Optional[Widget] = ...,
        end_widget: Optional[Widget] = ...,
        shrink_center_last: bool = ...,
        start_widget: Optional[Widget] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def get_baseline_position(self) -> BaselinePosition:
        """
        Gets the value set by gtk_center_box_set_baseline_position().

        Parameters:


        Returns:
            BaselinePosition: the baseline position

        """
        ...

    def get_center_widget(self) -> Optional[Widget]:
        """
        Gets the center widget, or %NULL if there is none.

        Parameters:


        Returns:
            Optional[Widget]: the center widget.

        """
        ...

    def get_end_widget(self) -> Optional[Widget]:
        """
        Gets the end widget, or %NULL if there is none.

        Parameters:


        Returns:
            Optional[Widget]: the end widget.

        """
        ...

    def get_shrink_center_last(self) -> bool:
        """
        Gets whether @self shrinks the center widget after other children.

        Parameters:


        Returns:
            bool: whether to shrink the center widget after others

        """
        ...

    def get_start_widget(self) -> Optional[Widget]:
        """
        Gets the start widget, or %NULL if there is none.

        Parameters:


        Returns:
            Optional[Widget]: the start widget.

        """
        ...

    @classmethod
    def new(cls) -> CenterBox:
        """
        Creates a new `GtkCenterBox`.

        Parameters:


        Returns:
            Widget: the new `GtkCenterBox`.

        """
        ...

    def set_baseline_position(self, position: BaselinePosition) -> None:
        """
        Sets the baseline position of a center box.

        This affects only horizontal boxes with at least one baseline
        aligned child. If there is more vertical space available than
        requested, and the baseline is not allocated by the parent then
        @position is used to allocate the baseline wrt. the extra space
        available.

        Parameters:
            position: a `GtkBaselinePosition`

        Returns:

        """
        ...

    def set_center_widget(self, child: Optional[Widget] = None) -> None:
        """
        Sets the center widget.

        To remove the existing center widget, pass %NULL.

        Parameters:
            child: the new center widget

        Returns:

        """
        ...

    def set_end_widget(self, child: Optional[Widget] = None) -> None:
        """
        Sets the end widget.

        To remove the existing end widget, pass %NULL.

        Parameters:
            child: the new end widget

        Returns:

        """
        ...

    def set_shrink_center_last(self, shrink_center_last: bool) -> None:
        """
        Sets whether to shrink the center widget after other children.

        By default, when there's no space to give all three children their
        natural widths, the start and end widgets start shrinking and the
        center child keeps natural width until they reach minimum width.

        If set to `FALSE`, start and end widgets keep natural width and the
        center widget starts shrinking instead.

        Parameters:
            shrink_center_last: whether to shrink the center widget after others

        Returns:

        """
        ...

    def set_start_widget(self, child: Optional[Widget] = None) -> None:
        """
        Sets the start widget.

        To remove the existing start widget, pass %NULL.

        Parameters:
            child: the new start widget

        Returns:

        """
        ...

class CenterBoxClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class CenterLayout(LayoutManager):
    """
    `GtkCenterLayout` is a layout manager that manages up to three children.

    The start widget is allocated at the start of the layout (left in
    left-to-right locales and right in right-to-left ones), and the end
    widget at the end.

    The center widget is centered regarding the full width of the layout's.

    :Constructors:

    ::

        CenterLayout(**properties)
        new() -> Gtk.LayoutManager

    Object GtkCenterLayout

    Properties from GtkCenterLayout:
      shrink-center-last -> gboolean: shrink-center-last

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutManager.Props):
        shrink_center_last: bool
        """
        Whether to shrink the center widget after other children.

        By default, when there's no space to give all three children their
        natural widths, the start and end widgets start shrinking and the
        center child keeps natural width until they reach minimum width.

        If set to `FALSE`, start and end widgets keep natural width and the
        center widget starts shrinking instead.
        """

    props: Props = ...
    def __init__(self, shrink_center_last: bool = ...): ...
    def get_baseline_position(self) -> BaselinePosition:
        """
        Returns the baseline position of the layout.

        Parameters:


        Returns:
            BaselinePosition: The current baseline position of @self.

        """
        ...

    def get_center_widget(self) -> Optional[Widget]:
        """
        Returns the center widget of the layout.

        Parameters:


        Returns:
            Optional[Widget]: the current center widget of @self

        """
        ...

    def get_end_widget(self) -> Optional[Widget]:
        """
        Returns the end widget of the layout.

        Parameters:


        Returns:
            Optional[Widget]: the current end widget of @self

        """
        ...

    def get_orientation(self) -> Orientation:
        """
        Gets the current orienration of the layout manager.

        Parameters:


        Returns:
            Orientation: The current orientation of @self

        """
        ...

    def get_shrink_center_last(self) -> bool:
        """
        Gets whether @self shrinks the center widget after other children.

        Parameters:


        Returns:
            bool: whether to shrink the center widget after others

        """
        ...

    def get_start_widget(self) -> Optional[Widget]:
        """
        Returns the start widget of the layout.

        Parameters:


        Returns:
            Optional[Widget]: The current start widget of @self

        """
        ...

    @classmethod
    def new(cls) -> CenterLayout:
        """
        Creates a new `GtkCenterLayout`.

        Parameters:


        Returns:
            LayoutManager: the newly created `GtkCenterLayout`

        """
        ...

    def set_baseline_position(self, baseline_position: BaselinePosition) -> None:
        """
        Sets the new baseline position of @self

        Parameters:
            baseline_position: the new baseline position

        Returns:

        """
        ...

    def set_center_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Sets the new center widget of @self.

        To remove the existing center widget, pass %NULL.

        Parameters:
            widget: the new center widget

        Returns:

        """
        ...

    def set_end_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Sets the new end widget of @self.

        To remove the existing center widget, pass %NULL.

        Parameters:
            widget: the new end widget

        Returns:

        """
        ...

    def set_orientation(self, orientation: Orientation) -> None:
        """
        Sets the orientation of @self.

        Parameters:
            orientation: the new orientation

        Returns:

        """
        ...

    def set_shrink_center_last(self, shrink_center_last: bool) -> None:
        """
        Sets whether to shrink the center widget after other children.

        By default, when there's no space to give all three children their
        natural widths, the start and end widgets start shrinking and the
        center child keeps natural width until they reach minimum width.

        If set to `FALSE`, start and end widgets keep natural width and the
        center widget starts shrinking instead.

        Parameters:
            shrink_center_last: whether to shrink the center widget after others

        Returns:

        """
        ...

    def set_start_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Sets the new start widget of @self.

        To remove the existing start widget, pass %NULL.

        Parameters:
            widget: the new start widget

        Returns:

        """
        ...

class CenterLayoutClass(GObject.GPointer):
    """
    :Constructors:

    ::

        CenterLayoutClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutManagerClass = ...

class CheckButton(Widget, Accessible, Actionable, Buildable, ConstraintTarget):
    """
    A `GtkCheckButton` places a label next to an indicator.

    ![Example GtkCheckButtons](check-button.png)

    A `GtkCheckButton` is created by calling either [ctor@Gtk.CheckButton.new]
    or [ctor@Gtk.CheckButton.new_with_label].

    The state of a `GtkCheckButton` can be set specifically using
    [method@Gtk.CheckButton.set_active], and retrieved using
    [method@Gtk.CheckButton.get_active].

    # Inconsistent state

    In addition to \"on\" and \"off\", check buttons can be an
    \"in between\" state that is neither on nor off. This can be used
    e.g. when the user has selected a range of elements (such as some
    text or spreadsheet cells) that are affected by a check button,
    and the current values in that range are inconsistent.

    To set a `GtkCheckButton` to inconsistent state, use
    [method@Gtk.CheckButton.set_inconsistent].

    # Grouping

    Check buttons can be grouped together, to form mutually exclusive
    groups - only one of the buttons can be toggled at a time, and toggling
    another one will switch the currently toggled one off.

    Grouped check buttons use a different indicator, and are commonly referred
    to as *radio buttons*.

    ![Example GtkCheckButtons](radio-button.png)

    To add a `GtkCheckButton` to a group, use [method@Gtk.CheckButton.set_group].

    When the code must keep track of the state of a group of radio buttons, it
    is recommended to keep track of such state through a stateful
    `GAction` with a target for each button. Using the `toggled` signals to keep
    track of the group changes and state is discouraged.

    # CSS nodes

    ```
    checkbutton[.text-button]
    ├── check
    ╰── [label]
    ```

    A `GtkCheckButton` has a main node with name checkbutton. If the
    [property@Gtk.CheckButton:label] or [property@Gtk.CheckButton:child]
    properties are set, it contains a child widget. The indicator node
    is named check when no group is set, and radio if the checkbutton
    is grouped together with other checkbuttons.

    # Accessibility

    `GtkCheckButton` uses the %GTK_ACCESSIBLE_ROLE_CHECKBOX role.

    :Constructors:

    ::

        CheckButton(**properties)
        new() -> Gtk.Widget
        new_with_label(label:str=None) -> Gtk.Widget
        new_with_mnemonic(label:str=None) -> Gtk.Widget

    Object GtkCheckButton

    Signals from GtkCheckButton:
      activate ()
      toggled ()

    Properties from GtkCheckButton:
      active -> gboolean: active
      group -> GtkCheckButton: group
      label -> gchararray: label
      inconsistent -> gboolean: inconsistent
      use-underline -> gboolean: use-underline
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Actionable.Props,
        Buildable.Props,
        ConstraintTarget.Props,
    ):
        active: bool
        """
        If the check button is active.

        Setting `active` to %TRUE will add the `:checked:` state to both
        the check button and the indicator CSS node.
        """
        child: Optional[Widget]
        """
        The child widget.
        """
        inconsistent: bool
        """
        If the check button is in an “in between” state.

        The inconsistent state only affects visual appearance,
        not the semantics of the button.
        """
        label: Optional[str]
        """
        Text of the label inside the check button, if it contains a label widget.
        """
        use_underline: bool
        """
        If set, an underline in the text indicates that the following
        character is to be used as mnemonic.
        """
        group: Optional[CheckButton]
        """
        The check button whose group this widget belongs to.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        active: bool = ...,
        child: Optional[Widget] = ...,
        group: Optional[CheckButton] = ...,
        inconsistent: bool = ...,
        label: Optional[str] = ...,
        use_underline: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        action_name: Optional[str] = ...,
        action_target: GLib.Variant = ...,
    ): ...
    def do_activate(self) -> None: ...
    def do_toggled(self) -> None: ...
    def get_active(self) -> bool:
        """
        Returns whether the check button is active.

        Parameters:


        Returns:
            bool: whether the check button is active

        """
        ...

    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @button or `NULL` if [property@CheckButton:label] is set.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @button

        """
        ...

    def get_inconsistent(self) -> bool:
        """
        Returns whether the check button is in an inconsistent state.

        Parameters:


        Returns:
            bool: %TRUE if @check_button is currently in an inconsistent state

        """
        ...

    def get_label(self) -> Optional[str]:
        """
        Returns the label of the check button or `NULL` if [property@CheckButton:child] is set.

        Parameters:


        Returns:
            Optional[str]: The label @self shows next
        to the indicator. If no label is shown, %NULL will be returned.

        """
        ...

    def get_use_underline(self) -> bool:
        """
        Returns whether underlines in the label indicate mnemonics.

        Parameters:


        Returns:
            bool: The value of the [property@Gtk.CheckButton:use-underline] property.
        See [method@Gtk.CheckButton.set_use_underline] for details on how to set
        a new value.

        """
        ...

    @classmethod
    def new(cls) -> CheckButton:
        """
        Creates a new `GtkCheckButton`.

        Parameters:


        Returns:
            Widget: a new `GtkCheckButton`

        """
        ...

    @classmethod
    def new_with_label(cls, label: Optional[str] = None) -> CheckButton:
        """
        Creates a new `GtkCheckButton` with the given text.

        Parameters:
            label: the text for the check button.

        Returns:
            Widget: a new `GtkCheckButton`

        """
        ...

    @classmethod
    def new_with_mnemonic(cls, label: Optional[str] = None) -> CheckButton:
        """
        Creates a new `GtkCheckButton` with the given text and a mnemonic.

        Parameters:
            label: The text of the button, with an underscore
        in front of the mnemonic character

        Returns:
            Widget: a new `GtkCheckButton`

        """
        ...

    def set_active(self, setting: bool) -> None:
        """
        Changes the check buttons active state.

        Parameters:
            setting: the new value to set

        Returns:

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @button.

        Note that by using this API, you take full responsibility for setting
        up the proper accessibility label and description information for @button.
        Most likely, you'll either set the accessibility label or description
        for @button explicitly, or you'll set a labelled-by or described-by
        relations from @child to @button.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_group(self, group: Optional[CheckButton] = None) -> None:
        """
        Adds @self to the group of @group.

        In a group of multiple check buttons, only one button can be active
        at a time. The behavior of a checkbutton in a group is also commonly
        known as a *radio button*.

        Setting the group of a check button also changes the css name of the
        indicator widget's CSS node to 'radio'.

        Setting up groups in a cycle leads to undefined behavior.

        Note that the same effect can be achieved via the [iface@Gtk.Actionable]
        API, by using the same action with parameter type and state type 's'
        for all buttons in the group, and giving each button its own target
        value.

        Parameters:
            group: another `GtkCheckButton` to
        form a group with

        Returns:

        """
        ...

    def set_inconsistent(self, inconsistent: bool) -> None:
        """
        Sets the `GtkCheckButton` to inconsistent state.

        You should turn off the inconsistent state again if the user checks
        the check button. This has to be done manually.

        Parameters:
            inconsistent: %TRUE if state is inconsistent

        Returns:

        """
        ...

    def set_label(self, label: Optional[str] = None) -> None:
        """
        Sets the text of @self.

        If [property@Gtk.CheckButton:use-underline] is %TRUE, an underscore
        in @label is interpreted as mnemonic indicator, see
        [method@Gtk.CheckButton.set_use_underline] for details on this behavior.

        Parameters:
            label: The text shown next to the indicator, or %NULL
        to show no text

        Returns:

        """
        ...

    def set_use_underline(self, setting: bool) -> None:
        """
        Sets whether underlines in the label indicate mnemonics.

        If @setting is %TRUE, an underscore character in @self's label
        indicates a mnemonic accelerator key. This behavior is similar
        to [property@Gtk.Label:use-underline].

        Parameters:
            setting: the new value to set

        Returns:

        """
        ...

class CheckButtonClass(GObject.GPointer):
    """
    :Constructors:

    ::

        CheckButtonClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    toggled: Callable[[CheckButton], None] = ...
    activate: Callable[[CheckButton], None] = ...
    padding: list[None] = ...

class ClosureExpression(Expression):
    """
    An expression using a custom `GClosure` to compute the value from
    its parameters.

    :Constructors:

    ::

        ClosureExpression(**properties)
        new(value_type:GType, closure:GObject.Closure, params:list=None) -> Gtk.ClosureExpression
    """

    class Props(Expression.Props): ...

    @classmethod
    def new(
        cls,
        value_type: Type,
        closure: Callable[..., Any],
        params: Optional[Sequence[Expression]] = None,
    ) -> ClosureExpression:
        """
        Creates a `GtkExpression` that calls `closure` when it is evaluated.

        `closure` is called with the `this` object and the results of evaluating
        the `params` expressions.

        Parameters:
            value_type: the type of the value that this expression evaluates to
            closure: closure to call when evaluating this expression. If closure is floating, it is adopted
            params: expressions for each parameter

        Returns:
            ClosureExpression: a new `GtkExpression`

        """
        ...

@deprecated("Use [class@Gtk.ColorDialogButton] instead")
class ColorButton(Widget, Accessible, Buildable, ColorChooser, ConstraintTarget):
    """
    The `GtkColorButton` allows to open a color chooser dialog to change
    the color.

    ![An example GtkColorButton](color-button.png)

    It is suitable widget for selecting a color in a preference dialog.

    # CSS nodes

    ```
    colorbutton
    ╰── button.color
    ╰── [content]
    ```

    `GtkColorButton` has a single CSS node with name colorbutton which
    contains a button node. To differentiate it from a plain `GtkButton`,
    it gets the .color style class.

    :Constructors:

    ::

        ColorButton(**properties)
        new() -> Gtk.Widget
        new_with_rgba(rgba:Gdk.RGBA) -> Gtk.Widget

    Object GtkColorButton

    Signals from GtkColorButton:
      activate ()
      color-set ()

    Properties from GtkColorButton:
      title -> gchararray: title
      show-editor -> gboolean: show-editor
      modal -> gboolean: modal

    Signals from GtkColorChooser:
      color-activated (GdkRGBA)

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ColorChooser.Props,
        ConstraintTarget.Props,
    ):
        modal: bool
        """
        Whether the color chooser dialog should be modal.
        """
        show_editor: bool
        """
        Whether the color chooser should open in editor mode.

        This property should be used in cases where the palette
        in the editor would be redundant, such as when the color
        button is already part of a palette.
        """
        title: str
        """
        The title of the color chooser dialog
        """

    props: Props = ...
    def __init__(
        self,
        modal: bool = ...,
        show_editor: bool = ...,
        title: str = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        rgba: Gdk.RGBA = ...,
        use_alpha: bool = ...,
    ): ...
    @deprecated("Use [class@Gtk.ColorDialogButton] instead")
    def get_modal(self) -> bool:
        """
        Gets whether the dialog is modal.

        Parameters:


        Returns:
            bool: %TRUE if the dialog is modal

        """
        ...

    @deprecated("Use [class@Gtk.ColorDialogButton] instead")
    def get_title(self) -> str:
        """
        Gets the title of the color chooser dialog.

        Parameters:


        Returns:
            str: An internal string, do not free the return value

        """
        ...

    @deprecated("Use [class@Gtk.ColorDialogButton] instead")
    @classmethod
    def new(cls) -> ColorButton:
        """
        Creates a new color button.

        This returns a widget in the form of a small button containing
        a swatch representing the current selected color. When the button
        is clicked, a color chooser dialog will open, allowing the user
        to select a color. The swatch will be updated to reflect the new
        color when the user finishes.

        Parameters:


        Returns:
            Widget: a new color button

        """
        ...

    @classmethod
    def new_with_rgba(cls, rgba: Gdk.RGBA) -> ColorButton:
        """
        Creates a new color button showing the given color.

        Parameters:
            rgba: A `GdkRGBA` to set the current color with

        Returns:
            Widget: a new color button

        """
        ...

    @deprecated("Use [class@Gtk.ColorDialogButton] instead")
    def set_modal(self, modal: bool) -> None:
        """
        Sets whether the dialog should be modal.

        Parameters:
            modal: %TRUE to make the dialog modal

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ColorDialogButton] instead")
    def set_title(self, title: str) -> None:
        """
        Sets the title for the color chooser dialog.

        Parameters:
            title: String containing new window title

        Returns:

        """
        ...

@deprecated(
    "Use [class@Gtk.ColorDialog] and [class@Gtk.ColorDialogButton] instead of widgets implementing `GtkColorChooser`"
)
class ColorChooser(GObject.GInterface):
    """
    `GtkColorChooser` is an interface that is implemented by widgets
    for choosing colors.

    Depending on the situation, colors may be allowed to have alpha (translucency).

    In GTK, the main widgets that implement this interface are
    [class@Gtk.ColorChooserWidget], [class@Gtk.ColorChooserDialog] and
    [class@Gtk.ColorButton].



    Interface GtkColorChooser

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def __init__(self, rgba: Gdk.RGBA = ..., use_alpha: bool = ...): ...
    @deprecated("Use [class@Gtk.ColorDialog] instead")
    def add_palette(
        self,
        orientation: Orientation,
        colors_per_line: int,
        colors: Optional[Sequence[Gdk.RGBA]] = None,
    ) -> None:
        """
        Adds a palette to the color chooser.

        If @orientation is horizontal, the colors are grouped in rows,
        with @colors_per_line colors in each row. If @horizontal is %FALSE,
        the colors are grouped in columns instead.

        The default color palette of [class@Gtk.ColorChooserWidget] has
        45 colors, organized in columns of 5 colors (this includes some
        grays).

        The layout of the color chooser widget works best when the
        palettes have 9-10 columns.

        Calling this function for the first time has the side effect
        of removing the default color palette from the color chooser.

        If @colors is %NULL, removes all previously added palettes.

        Parameters:
            orientation: %GTK_ORIENTATION_HORIZONTAL if the palette should
        be displayed in rows, %GTK_ORIENTATION_VERTICAL for columns
            colors_per_line: the number of colors to show in each row/column
            colors: the colors of the palette

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ColorDialog] instead")
    def get_rgba(self) -> Gdk.RGBA:
        """
        Gets the currently-selected color.

        Parameters:


        Returns:
            Gdk.RGBA: a `GdkRGBA` to fill in with the current color
        """
        ...

    @deprecated("Use [class@Gtk.ColorDialog] instead")
    def get_use_alpha(self) -> bool:
        """
        Returns whether the color chooser shows the alpha channel.

        Parameters:


        Returns:
            bool: %TRUE if the color chooser uses the alpha channel,
        %FALSE if not

        """
        ...

    @deprecated("Use [class@Gtk.ColorDialog] instead")
    def set_rgba(self, color: Gdk.RGBA) -> None:
        """
        Sets the color.

        Parameters:
            color: the new color

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ColorDialog] instead")
    def set_use_alpha(self, use_alpha: bool) -> None:
        """
        Sets whether or not the color chooser should use the alpha channel.

        Parameters:
            use_alpha: %TRUE if color chooser should use alpha channel, %FALSE if not

        Returns:

        """
        ...

@deprecated("Use [class@Gtk.ColorDialog] instead")
class ColorChooserDialog(
    Dialog,
    Accessible,
    Buildable,
    ColorChooser,
    ConstraintTarget,
    Native,
    Root,
    ShortcutManager,
):
    """
    A dialog for choosing a color.

    ![An example GtkColorChooserDialog](colorchooser.png)

    `GtkColorChooserDialog` implements the [iface@Gtk.ColorChooser] interface
    and does not provide much API of its own.

    To create a `GtkColorChooserDialog`, use [ctor@Gtk.ColorChooserDialog.new].

    To change the initially selected color, use
    [method@Gtk.ColorChooser.set_rgba]. To get the selected color use
    [method@Gtk.ColorChooser.get_rgba].

    `GtkColorChooserDialog` has been deprecated in favor of [class@Gtk.ColorDialog].

    ## CSS nodes

    `GtkColorChooserDialog` has a single CSS node with the name `window` and style
    class `.colorchooser`.

    :Constructors:

    ::

        ColorChooserDialog(**properties)
        new(title:str=None, parent:Gtk.Window=None) -> Gtk.Widget

    Object GtkColorChooserDialog

    Properties from GtkColorChooserDialog:
      show-editor -> gboolean: show-editor

    Signals from GtkColorChooser:
      color-activated (GdkRGBA)

    Signals from GtkDialog:
      response (gint)
      close ()

    Properties from GtkDialog:
      use-header-bar -> gint: use-header-bar

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Dialog.Props,
        Accessible.Props,
        Buildable.Props,
        ColorChooser.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ):
        show_editor: bool

    props: Props = ...
    def __init__(
        self,
        show_editor: bool = ...,
        use_header_bar: int = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        rgba: Gdk.RGBA = ...,
        use_alpha: bool = ...,
    ): ...
    @deprecated("Use [class@Gtk.ColorDialog] instead")
    @classmethod
    def new(
        cls, title: Optional[str] = None, parent: Optional[Window] = None
    ) -> ColorChooserDialog:
        """
        Creates a new `GtkColorChooserDialog`.

        Parameters:
            title: Title of the dialog
            parent: Transient parent of the dialog

        Returns:
            Widget: a new `GtkColorChooserDialog`

        """
        ...

class ColorChooserInterface(GObject.GPointer):
    """
    :Constructors:

    ::

        ColorChooserInterface()
    """

    class Props(GObject.GPointer.Props): ...
    base_interface: GObject.TypeInterface = ...
    get_rgba: Callable[[ColorChooser], Gdk.RGBA] = ...
    set_rgba: Callable[[ColorChooser, Gdk.RGBA], None] = ...
    add_palette: Callable[
        [ColorChooser, Orientation, int, Optional[Sequence[Gdk.RGBA]]], None
    ] = ...
    color_activated: Callable[[ColorChooser, Gdk.RGBA], None] = ...
    padding: list[None] = ...

@deprecated("Direct use of `GtkColorChooserWidget` is deprecated.")
class ColorChooserWidget(Widget, Accessible, Buildable, ColorChooser, ConstraintTarget):
    """
    The `GtkColorChooserWidget` widget lets the user select a color.

    By default, the chooser presents a predefined palette of colors,
    plus a small number of settable custom colors. It is also possible
    to select a different color with the single-color editor.

    To enter the single-color editing mode, use the context menu of any
    color of the palette, or use the '+' button to add a new custom color.

    The chooser automatically remembers the last selection, as well
    as custom colors.

    To create a `GtkColorChooserWidget`, use [ctor@Gtk.ColorChooserWidget.new].

    To change the initially selected color, use
    [method@Gtk.ColorChooser.set_rgba]. To get the selected color use
    [method@Gtk.ColorChooser.get_rgba].

    The `GtkColorChooserWidget` is used in the [class@Gtk.ColorChooserDialog]
    to provide a dialog for selecting colors.

    # CSS names

    `GtkColorChooserWidget` has a single CSS node with name colorchooser.

    :Constructors:

    ::

        ColorChooserWidget(**properties)
        new() -> Gtk.Widget

    Object GtkColorChooserWidget

    Properties from GtkColorChooserWidget:
      show-editor -> gboolean: show-editor

    Signals from GtkColorChooser:
      color-activated (GdkRGBA)

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ColorChooser.Props,
        ConstraintTarget.Props,
    ):
        show_editor: bool
        """
        %TRUE when the color chooser is showing the single-color editor.

        It can be set to switch the color chooser into single-color editing mode.
        """

    props: Props = ...
    def __init__(
        self,
        show_editor: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        rgba: Gdk.RGBA = ...,
        use_alpha: bool = ...,
    ): ...
    @classmethod
    def new(cls) -> ColorChooserWidget:
        """
        Creates a new `GtkColorChooserWidget`.

        Parameters:


        Returns:
            Widget: a new `GtkColorChooserWidget`

        """
        ...

class ColorDialog(GObject.Object):
    """
    A `GtkColorDialog` object collects the arguments that
    are needed to present a color chooser dialog to the
    user, such as a title for the dialog and whether it
    should be modal.

    The dialog is shown with the [method@Gtk.ColorDialog.choose_rgba]
    function. This API follows the GIO async pattern, and the
    result can be obtained by calling
    [method@Gtk.ColorDialog.choose_rgba_finish].

    See [class@Gtk.ColorDialogButton] for a convenient control
    that uses `GtkColorDialog` and presents the results.

    :Constructors:

    ::

        ColorDialog(**properties)
        new() -> Gtk.ColorDialog

    Object GtkColorDialog

    Properties from GtkColorDialog:
      title -> gchararray: title
      modal -> gboolean: modal
      with-alpha -> gboolean: with-alpha

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        modal: bool
        """
        Whether the color chooser dialog is modal.
        """
        title: str
        """
        A title that may be shown on the color chooser
        dialog that is presented by [method@Gtk.ColorDialog.choose_rgba].
        """
        with_alpha: bool
        """
        Whether colors may have alpha (translucency).

        When with-alpha is %FALSE, the color that is selected
        will be forced to have alpha == 1.
        """

    props: Props = ...
    def __init__(self, modal: bool = ..., title: str = ..., with_alpha: bool = ...): ...
    def choose_rgba(
        self,
        parent: Optional[Window] = None,
        initial_color: Optional[Gdk.RGBA] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function initiates a color choice operation by
        presenting a color chooser dialog to the user.

        The @callback will be called when the dialog is dismissed.
        It should call [method@Gtk.ColorDialog.choose_rgba_finish]
        to obtain the result.

        Parameters:
            parent: the parent `GtkWindow`
            initial_color: the color to select initially
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def choose_rgba_finish(self, result: Gio.AsyncResult) -> Optional[Gdk.RGBA]:
        """
        Finishes the [method@Gtk.ColorDialog.choose_rgba] call and
        returns the resulting color.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            Optional[Gdk.RGBA]: the selected color, or
        `NULL` and @error is set

        """
        ...

    def get_modal(self) -> bool:
        """
        Returns whether the color chooser dialog
        blocks interaction with the parent window
        while it is presented.

        Parameters:


        Returns:
            bool: `TRUE` if the color chooser dialog is modal

        """
        ...

    def get_title(self) -> str:
        """
        Returns the title that will be shown on the
        color chooser dialog.

        Parameters:


        Returns:
            str: the title

        """
        ...

    def get_with_alpha(self) -> bool:
        """
        Returns whether colors may have alpha.

        Parameters:


        Returns:
            bool: `TRUE` if colors may have alpha

        """
        ...

    @classmethod
    def new(cls) -> ColorDialog:
        """
        Creates a new `GtkColorDialog` object.

        Parameters:


        Returns:
            ColorDialog: the new `GtkColorDialog`

        """
        ...

    def set_modal(self, modal: bool) -> None:
        """
        Sets whether the color chooser dialog
        blocks interaction with the parent window
        while it is presented.

        Parameters:
            modal: the new value

        Returns:

        """
        ...

    def set_title(self, title: str) -> None:
        """
        Sets the title that will be shown on the
        color chooser dialog.

        Parameters:
            title: the new title

        Returns:

        """
        ...

    def set_with_alpha(self, with_alpha: bool) -> None:
        """
        Sets whether colors may have alpha.

        Parameters:
            with_alpha: the new value

        Returns:

        """
        ...

class ColorDialogButton(Widget, Accessible, Buildable, ConstraintTarget):
    """
    The `GtkColorDialogButton` is a wrapped around a [class@Gtk.ColorDialog]
    and allows to open a color chooser dialog to change the color.

    ![An example GtkColorDialogButton](color-button.png)

    It is suitable widget for selecting a color in a preference dialog.

    # CSS nodes

    ```
    colorbutton
    ╰── button.color
    ╰── [content]
    ```

    `GtkColorDialogButton` has a single CSS node with name colorbutton which
    contains a button node. To differentiate it from a plain `GtkButton`,
    it gets the .color style class.

    :Constructors:

    ::

        ColorDialogButton(**properties)
        new(dialog:Gtk.ColorDialog=None) -> Gtk.Widget

    Object GtkColorDialogButton

    Signals from GtkColorDialogButton:
      activate ()

    Properties from GtkColorDialogButton:
      dialog -> GtkColorDialog: dialog
      rgba -> GdkRGBA: rgba

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        dialog: Optional[ColorDialog]
        """
        The `GtkColorDialog` that contains parameters for
        the color chooser dialog.
        """
        rgba: Gdk.RGBA
        """
        The selected color.

        This property can be set to give the button its initial
        color, and it will be updated to reflect the users choice
        in the color chooser dialog.

        Listen to `notify::rgba` to get informed about changes
        to the buttons color.
        """

    props: Props = ...
    def __init__(
        self,
        dialog: ColorDialog = ...,
        rgba: Gdk.RGBA = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_dialog(self) -> Optional[ColorDialog]:
        """
        Returns the `GtkColorDialog` of @self.

        Parameters:


        Returns:
            Optional[ColorDialog]: the `GtkColorDialog`

        """
        ...

    def get_rgba(self) -> Gdk.RGBA:
        """
        Returns the color of the button.

        This function is what should be used to obtain
        the color that was chosen by the user. To get
        informed about changes, listen to \"notify::color\".

        Parameters:


        Returns:
            Gdk.RGBA: the color

        """
        ...

    @classmethod
    def new(cls, dialog: Optional[ColorDialog] = None) -> ColorDialogButton:
        """
        Creates a new `GtkColorDialogButton` with the
        given `GtkColorDialog`.

        You can pass `NULL` to this function and set a `GtkColorDialog`
        later. The button will be insensitive until that happens.

        Parameters:
            dialog: the `GtkColorDialog` to use

        Returns:
            Widget: the new `GtkColorDialogButton`

        """
        ...

    def set_dialog(self, dialog: ColorDialog) -> None:
        """
        Sets a `GtkColorDialog` object to use for
        creating the color chooser dialog that is
        presented when the user clicks the button.

        Parameters:
            dialog: the new `GtkColorDialog`

        Returns:

        """
        ...

    def set_rgba(self, color: Gdk.RGBA) -> None:
        """
        Sets the color of the button.

        Parameters:
            color: the new color

        Returns:

        """
        ...

class ColorDialogButtonClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ColorDialogButtonClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class ColorDialogClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ColorDialogClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class ColumnView(Widget, Accessible, Buildable, ConstraintTarget, Scrollable):
    """
    `GtkColumnView` presents a large dynamic list of items using multiple columns
    with headers.

    `GtkColumnView` uses the factories of its columns to generate a cell widget for
    each column, for each visible item and displays them together as the row for
    this item.

    The [property@Gtk.ColumnView:show-row-separators] and
    [property@Gtk.ColumnView:show-column-separators] properties offer a simple way
    to display separators between the rows or columns.

    `GtkColumnView` allows the user to select items according to the selection
    characteristics of the model. For models that allow multiple selected items,
    it is possible to turn on *rubberband selection*, using
    [property@Gtk.ColumnView:enable-rubberband].

    The column view supports sorting that can be customized by the user by
    clicking on column headers. To set this up, the `GtkSorter` returned by
    [method@Gtk.ColumnView.get_sorter] must be attached to a sort model for the
    data that the view is showing, and the columns must have sorters attached to
    them by calling [method@Gtk.ColumnViewColumn.set_sorter]. The initial sort
    order can be set with [method@Gtk.ColumnView.sort_by_column].

    The column view also supports interactive resizing and reordering of
    columns, via Drag-and-Drop of the column headers. This can be enabled or
    disabled with the [property@Gtk.ColumnView:reorderable] and
    [property@Gtk.ColumnViewColumn:resizable] properties.

    To learn more about the list widget framework, see the
    [overview](section-list-widget.html).

    # CSS nodes

    ```
    columnview[.column-separators][.rich-list][.navigation-sidebar][.data-table]
    ├── header
    │ ├── <column header>
    ┊ ┊
    │ ╰── <column header>
    │
    ├── listview
    │
    ┊
    ╰── [rubberband]
    ```

    `GtkColumnView` uses a single CSS node named columnview. It may carry the
    .column-separators style class, when [property@Gtk.ColumnView:show-column-separators]
    property is set. Header widgets appear below a node with name header.
    The rows are contained in a `GtkListView` widget, so there is a listview
    node with the same structure as for a standalone `GtkListView` widget.
    If [property@Gtk.ColumnView:show-row-separators] is set, it will be passed
    on to the list view, causing its CSS node to carry the .separators style class.
    For rubberband selection, a node with name rubberband is used.

    The main columnview node may also carry style classes to select
    the style of [list presentation](section-list-widget.html#list-styles):
    .rich-list, .navigation-sidebar or .data-table.

    # Accessibility

    `GtkColumnView` uses the %GTK_ACCESSIBLE_ROLE_TREE_GRID role, header title
    widgets are using the %GTK_ACCESSIBLE_ROLE_COLUMN_HEADER role. The row widgets
    are using the %GTK_ACCESSIBLE_ROLE_ROW role, and individual cells are using
    the %GTK_ACCESSIBLE_ROLE_GRID_CELL role

    :Constructors:

    ::

        ColumnView(**properties)
        new(model:Gtk.SelectionModel=None) -> Gtk.Widget

    Object GtkColumnView

    Signals from GtkColumnView:
      activate (guint)

    Properties from GtkColumnView:
      columns -> GListModel: columns
      enable-rubberband -> gboolean: enable-rubberband
      header-factory -> GtkListItemFactory: header-factory
      model -> GtkSelectionModel: model
      reorderable -> gboolean: reorderable
      row-factory -> GtkListItemFactory: row-factory
      show-row-separators -> gboolean: show-row-separators
      show-column-separators -> gboolean: show-column-separators
      single-click-activate -> gboolean: single-click-activate
      sorter -> GtkSorter: sorter
      tab-behavior -> GtkListTabBehavior: tab-behavior

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Scrollable.Props,
    ):
        columns: Gio.ListModel
        """
        The list of columns.
        """
        enable_rubberband: bool
        """
        Allow rubberband selection.
        """
        header_factory: Optional[ListItemFactory]
        """
        Factory for creating header widgets.
        """
        model: Optional[SelectionModel]
        """
        Model for the items displayed.
        """
        reorderable: bool
        """
        Whether columns are reorderable.
        """
        row_factory: Optional[ListItemFactory]
        """
        The factory used for configuring rows.
        """
        show_column_separators: bool
        """
        Show separators between columns.
        """
        show_row_separators: bool
        """
        Show separators between rows.
        """
        single_click_activate: bool
        """
        Activate rows on single click and select them on hover.
        """
        sorter: Optional[Sorter]
        """
        Sorter with the sorting choices of the user.
        """
        tab_behavior: ListTabBehavior
        """
        Behavior of the <kbd>Tab</kbd> key
        """

    props: Props = ...
    def __init__(
        self,
        enable_rubberband: bool = ...,
        header_factory: Optional[ListItemFactory] = ...,
        model: Optional[SelectionModel] = ...,
        reorderable: bool = ...,
        row_factory: Optional[ListItemFactory] = ...,
        show_column_separators: bool = ...,
        show_row_separators: bool = ...,
        single_click_activate: bool = ...,
        tab_behavior: ListTabBehavior = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        hadjustment: Optional[Adjustment] = ...,
        hscroll_policy: ScrollablePolicy = ...,
        vadjustment: Optional[Adjustment] = ...,
        vscroll_policy: ScrollablePolicy = ...,
    ): ...
    def append_column(self, column: ColumnViewColumn) -> None:
        """
        Appends the @column to the end of the columns in @self.

        Parameters:
            column: a `GtkColumnViewColumn` that hasn't been added to a
        `GtkColumnView` yet

        Returns:

        """
        ...

    def get_columns(self) -> Gio.ListModel:
        """
        Gets the list of columns in this column view.

        This list is constant over the lifetime of @self and can be used to
        monitor changes to the columns of @self by connecting to the
        ::items-changed signal.

        Parameters:


        Returns:
            Gio.ListModel: The list managing the columns

        """
        ...

    def get_enable_rubberband(self) -> bool:
        """
        Returns whether rows can be selected by dragging with the mouse.

        Parameters:


        Returns:
            bool: %TRUE if rubberband selection is enabled

        """
        ...

    def get_header_factory(self) -> Optional[ListItemFactory]:
        """
        Gets the factory that's currently used to populate section headers.

        Parameters:


        Returns:
            Optional[ListItemFactory]: The factory in use

        """
        ...

    def get_model(self) -> Optional[SelectionModel]:
        """
        Gets the model that's currently used to read the items displayed.

        Parameters:


        Returns:
            Optional[SelectionModel]: The model in use

        """
        ...

    def get_reorderable(self) -> bool:
        """
        Returns whether columns are reorderable.

        Parameters:


        Returns:
            bool: %TRUE if columns are reorderable

        """
        ...

    def get_row_factory(self) -> Optional[ListItemFactory]:
        """
        Gets the factory set via [method@Gtk.ColumnView.set_row_factory].

        Parameters:


        Returns:
            Optional[ListItemFactory]: The factory

        """
        ...

    def get_show_column_separators(self) -> bool:
        """
        Returns whether the list should show separators
        between columns.

        Parameters:


        Returns:
            bool: %TRUE if the list shows column separators

        """
        ...

    def get_show_row_separators(self) -> bool:
        """
        Returns whether the list should show separators
        between rows.

        Parameters:


        Returns:
            bool: %TRUE if the list shows separators

        """
        ...

    def get_single_click_activate(self) -> bool:
        """
        Returns whether rows will be activated on single click and
        selected on hover.

        Parameters:


        Returns:
            bool: %TRUE if rows are activated on single click

        """
        ...

    def get_sorter(self) -> Optional[Sorter]:
        """
        Returns a special sorter that reflects the users sorting
        choices in the column view.

        To allow users to customizable sorting by clicking on column
        headers, this sorter needs to be set on the sort model underneath
        the model that is displayed by the view.

        See [method@Gtk.ColumnViewColumn.set_sorter] for setting up
        per-column sorting.

        Here is an example:
        ```c
        gtk_column_view_column_set_sorter (column, sorter);
        gtk_column_view_append_column (view, column);
        sorter = g_object_ref (gtk_column_view_get_sorter (view)));
        model = gtk_sort_list_model_new (store, sorter);
        selection = gtk_no_selection_new (model);
        gtk_column_view_set_model (view, selection);
        ```

        Parameters:


        Returns:
            Optional[Sorter]: the `GtkSorter` of @self

        """
        ...

    def get_tab_behavior(self) -> ListTabBehavior:
        """
        Gets the behavior set for the <kbd>Tab</kbd> key.

        Parameters:


        Returns:
            ListTabBehavior: The behavior of the <kbd>Tab</kbd> key

        """
        ...

    def insert_column(self, position: int, column: ColumnViewColumn) -> None:
        """
        Inserts a column at the given position in the columns of @self.

        If @column is already a column of @self, it will be repositioned.

        Parameters:
            position: the position to insert @column at
            column: the `GtkColumnViewColumn` to insert

        Returns:

        """
        ...

    @classmethod
    def new(cls, model: Optional[SelectionModel] = None) -> ColumnView:
        """
        Creates a new `GtkColumnView`.

        You most likely want to call [method@Gtk.ColumnView.append_column]
        to add columns next.

        Parameters:
            model: the list model to use

        Returns:
            Widget: a new `GtkColumnView`

        """
        ...

    def remove_column(self, column: ColumnViewColumn) -> None:
        """
        Removes the @column from the list of columns of @self.

        Parameters:
            column: a `GtkColumnViewColumn` that's part of @self

        Returns:

        """
        ...

    def scroll_to(
        self,
        pos: int,
        column: Optional[ColumnViewColumn],
        flags: ListScrollFlags,
        scroll: Optional[ScrollInfo] = None,
    ) -> None:
        """
        Scroll to the row at the given position - or cell if a column is
        given - and performs the actions specified in @flags.

        This function works no matter if the listview is shown or focused.
        If it isn't, then the changes will take effect once that happens.

        Parameters:
            pos: position of the item
            column: The column to scroll to
        or %NULL to not scroll columns.
            flags: actions to perform
            scroll: details of how to perform
        the scroll operation or %NULL to scroll into view

        Returns:

        """
        ...

    def set_enable_rubberband(self, enable_rubberband: bool) -> None:
        """
        Sets whether selections can be changed by dragging with the mouse.

        Parameters:
            enable_rubberband: %TRUE to enable rubberband selection

        Returns:

        """
        ...

    def set_header_factory(self, factory: Optional[ListItemFactory] = None) -> None:
        """
        Sets the `GtkListItemFactory` to use for populating the
        [class@Gtk.ListHeader] objects used in section headers.

        If this factory is set to %NULL, the list will not show
        section headers.

        Parameters:
            factory: the factory to use

        Returns:

        """
        ...

    def set_model(self, model: Optional[SelectionModel] = None) -> None:
        """
        Sets the model to use.

        This must be a [iface@Gtk.SelectionModel].

        Parameters:
            model: the model to use

        Returns:

        """
        ...

    def set_reorderable(self, reorderable: bool) -> None:
        """
        Sets whether columns should be reorderable by dragging.

        Parameters:
            reorderable: whether columns should be reorderable

        Returns:

        """
        ...

    def set_row_factory(self, factory: Optional[ListItemFactory] = None) -> None:
        """
        Sets the factory used for configuring rows. The factory must be for configuring
        [class@Gtk.ColumnViewRow] objects.

        If this factory is not set - which is the default - then the defaults will be used.

        This factory is not used to set the widgets displayed in the individual cells. For
        that see [method@GtkColumnViewColumn.set_factory] and [class@GtkColumnViewCell].

        Parameters:
            factory: The row factory

        Returns:

        """
        ...

    def set_show_column_separators(self, show_column_separators: bool) -> None:
        """
        Sets whether the list should show separators
        between columns.

        Parameters:
            show_column_separators: %TRUE to show column separators

        Returns:

        """
        ...

    def set_show_row_separators(self, show_row_separators: bool) -> None:
        """
        Sets whether the list should show separators
        between rows.

        Parameters:
            show_row_separators: %TRUE to show row separators

        Returns:

        """
        ...

    def set_single_click_activate(self, single_click_activate: bool) -> None:
        """
        Sets whether rows should be activated on single click and
        selected on hover.

        Parameters:
            single_click_activate: %TRUE to activate items on single click

        Returns:

        """
        ...

    def set_tab_behavior(self, tab_behavior: ListTabBehavior) -> None:
        """
        Sets the behavior of the <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keys.

        Parameters:
            tab_behavior: The desired tab behavior

        Returns:

        """
        ...

    def sort_by_column(
        self, column: Optional[ColumnViewColumn], direction: SortType
    ) -> None:
        """
        Sets the sorting of the view.

        This function should be used to set up the initial sorting.
        At runtime, users can change the sorting of a column view
        by clicking on the list headers.

        This call only has an effect if the sorter returned by
        [method@Gtk.ColumnView.get_sorter] is set on a sort model,
        and [method@Gtk.ColumnViewColumn.set_sorter] has been called
        on @column to associate a sorter with the column.

        If @column is %NULL, the view will be unsorted.

        Parameters:
            column: the `GtkColumnViewColumn` to sort by
            direction: the direction to sort in

        Returns:

        """
        ...

class ColumnViewCell(ListItem):
    """
    `GtkColumnViewCell` is used by [class@Gtk.ColumnViewColumn] to represent items
    in a cell in [class@Gtk.ColumnView].

    The `GtkColumnViewCell`s are managed by the columnview widget (with its factory)
    and cannot be created by applications, but they need to be populated
    by application code. This is done by calling [method@Gtk.ColumnViewCell.set_child].

    `GtkColumnViewCell`s exist in 2 stages:

    1. The unbound stage where the listitem is not currently connected to
    an item in the list. In that case, the [property@Gtk.ColumnViewCell:item]
    property is set to %NULL.

    2. The bound stage where the listitem references an item from the list.
    The [property@Gtk.ColumnViewCell:item] property is not %NULL.

    :Constructors:

    ::

        ColumnViewCell(**properties)

    Object GtkColumnViewCell

    Properties from GtkColumnViewCell:
      child -> GtkWidget: child
      focusable -> gboolean: focusable
      item -> GObject: item
      position -> guint: position
      selected -> gboolean: selected

    Properties from GtkListItem:
      accessible-description -> gchararray: accessible-description
      accessible-label -> gchararray: accessible-label
      activatable -> gboolean: activatable
      child -> GtkWidget: child
      focusable -> gboolean: focusable
      item -> GObject: item
      position -> guint: position
      selectable -> gboolean: selectable
      selected -> gboolean: selected

    Signals from GObject:
      notify (GParam)
    """

    class Props(ListItem.Props):
        child: Optional[Widget]
        """
        Widget used for display.
        """
        focusable: bool
        """
        If the item can be focused with the keyboard.
        """
        item: Optional[GObject.Object]
        """
        Displayed item.
        """
        position: int
        """
        Position of the item.
        """
        selected: bool
        """
        If the item is currently selected.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        focusable: bool = ...,
        accessible_description: str = ...,
        accessible_label: str = ...,
        activatable: bool = ...,
        selectable: bool = ...,
    ): ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child previously set via gtk_column_view_cell_set_child() or
        %NULL if none was set.

        Parameters:


        Returns:
            Optional[Widget]: The child

        """
        ...

    def get_focusable(self) -> bool:
        """
        Checks if a list item has been set to be focusable via
        gtk_column_view_cell_set_focusable().

        Parameters:


        Returns:
            bool: %TRUE if the item is focusable

        """
        ...

    def get_item(self) -> Optional[GObject.Object]:
        """
        Gets the model item that associated with @self.

        If @self is unbound, this function returns %NULL.

        Parameters:


        Returns:
            Optional[GObject.Object]: The item displayed

        """
        ...

    def get_position(self) -> int:
        """
        Gets the position in the model that @self currently displays.

        If @self is unbound, %GTK_INVALID_LIST_POSITION is returned.

        Parameters:


        Returns:
            int: The position of this item

        """
        ...

    def get_selected(self) -> bool:
        """
        Checks if the item is displayed as selected.

        The selected state is maintained by the liste widget and its model
        and cannot be set otherwise.

        Parameters:


        Returns:
            bool: %TRUE if the item is selected.

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child to be used for this listitem.

        This function is typically called by applications when
        setting up a listitem so that the widget can be reused when
        binding it multiple times.

        Parameters:
            child: The list item's child or %NULL to unset

        Returns:

        """
        ...

    def set_focusable(self, focusable: bool) -> None:
        """
        Sets @self to be focusable.

        If an item is focusable, it can be focused using the keyboard.
        This works similar to [method@Gtk.Widget.set_focusable].

        Note that if items are not focusable, the keyboard cannot be used to activate
        them and selecting only works if one of the listitem's children is focusable.

        By default, list items are focusable.

        Parameters:
            focusable: if the item should be focusable

        Returns:

        """
        ...

class ColumnViewCellClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ColumnViewClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ColumnViewColumn(GObject.Object):
    """
    `GtkColumnViewColumn` represents the columns being added to a `GtkColumnView`.

    The main ingredient for a `GtkColumnViewColumn` is the `GtkListItemFactory`
    that tells the columnview how to create cells for this column from items in
    the model.

    Columns have a title, and can optionally have a header menu set
    with [method@Gtk.ColumnViewColumn.set_header_menu].

    A sorter can be associated with a column using
    [method@Gtk.ColumnViewColumn.set_sorter], to let users influence sorting
    by clicking on the column header.

    :Constructors:

    ::

        ColumnViewColumn(**properties)
        new(title:str=None, factory:Gtk.ListItemFactory=None) -> Gtk.ColumnViewColumn

    Object GtkColumnViewColumn

    Properties from GtkColumnViewColumn:
      column-view -> GtkColumnView: column-view
      factory -> GtkListItemFactory: factory
      title -> gchararray: title
      sorter -> GtkSorter: sorter
      visible -> gboolean: visible
      header-menu -> GMenuModel: header-menu
      resizable -> gboolean: resizable
      expand -> gboolean: expand
      fixed-width -> gint: fixed-width
      id -> gchararray: id

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        column_view: Optional[ColumnView]
        """
        The `GtkColumnView` this column is a part of.
        """
        expand: bool
        """
        Column gets share of extra width allocated to the view.
        """
        factory: Optional[ListItemFactory]
        """
        Factory for populating list items.
        """
        fixed_width: int
        """
        If not -1, this is the width that the column is allocated,
        regardless of the size of its content.
        """
        header_menu: Optional[Gio.MenuModel]
        """
        Menu model used to create the context menu for the column header.
        """
        id: Optional[str]
        """
        An ID for the column.

        GTK is not currently using the ID for anything, but
        it can be used by applications when saving column view
        configurations.

        It is up to applications to ensure uniqueness of IDs.
        """
        resizable: bool
        """
        Whether this column is resizable.
        """
        sorter: Optional[Sorter]
        """
        Sorter for sorting items according to this column.
        """
        title: Optional[str]
        """
        Title displayed in the header.
        """
        visible: bool
        """
        Whether this column is visible.
        """

    props: Props = ...
    def __init__(
        self,
        expand: bool = ...,
        factory: Optional[ListItemFactory] = ...,
        fixed_width: int = ...,
        header_menu: Optional[Gio.MenuModel] = ...,
        id: Optional[str] = ...,
        resizable: bool = ...,
        sorter: Optional[Sorter] = ...,
        title: Optional[str] = ...,
        visible: bool = ...,
    ): ...
    def get_column_view(self) -> Optional[ColumnView]:
        """
        Gets the column view that's currently displaying this column.

        If @self has not been added to a column view yet, %NULL is returned.

        Parameters:


        Returns:
            Optional[ColumnView]: The column view displaying @self.

        """
        ...

    def get_expand(self) -> bool:
        """
        Returns whether this column should expand.

        Parameters:


        Returns:
            bool: %TRUE if this column expands

        """
        ...

    def get_factory(self) -> Optional[ListItemFactory]:
        """
        Gets the factory that's currently used to populate list items for
        this column.

        Parameters:


        Returns:
            Optional[ListItemFactory]: The factory in use

        """
        ...

    def get_fixed_width(self) -> int:
        """
        Gets the fixed width of the column.

        Parameters:


        Returns:
            int: the fixed with of the column

        """
        ...

    def get_header_menu(self) -> Optional[Gio.MenuModel]:
        """
        Gets the menu model that is used to create the context menu
        for the column header.

        Parameters:


        Returns:
            Optional[Gio.MenuModel]: the `GMenuModel`

        """
        ...

    def get_id(self) -> Optional[str]:
        """
        Returns the ID set with gtk_column_view_column_set_id().

        Parameters:


        Returns:
            Optional[str]: The column's ID

        """
        ...

    def get_resizable(self) -> bool:
        """
        Returns whether this column is resizable.

        Parameters:


        Returns:
            bool: %TRUE if this column is resizable

        """
        ...

    def get_sorter(self) -> Optional[Sorter]:
        """
        Returns the sorter that is associated with the column.

        Parameters:


        Returns:
            Optional[Sorter]: the `GtkSorter` of @self

        """
        ...

    def get_title(self) -> Optional[str]:
        """
        Returns the title set with gtk_column_view_column_set_title().

        Parameters:


        Returns:
            Optional[str]: The column's title

        """
        ...

    def get_visible(self) -> bool:
        """
        Returns whether this column is visible.

        Parameters:


        Returns:
            bool: %TRUE if this column is visible

        """
        ...

    @classmethod
    def new(
        cls, title: Optional[str] = None, factory: Optional[ListItemFactory] = None
    ) -> ColumnViewColumn:
        """
        Creates a new `GtkColumnViewColumn` that uses the given @factory for
        mapping items to widgets.

        You most likely want to call [method@Gtk.ColumnView.append_column] next.

        The function takes ownership of the argument, so you can write code like:

        ```c
        column = gtk_column_view_column_new (_(\"Name\"),
        gtk_builder_list_item_factory_new_from_resource (\"/name.ui\"));
        ```

        Parameters:
            title: Title to use for this column
            factory: The factory to populate items with

        Returns:
            ColumnViewColumn: a new `GtkColumnViewColumn` using the given @factory

        """
        ...

    def set_expand(self, expand: bool) -> None:
        """
        Sets the column to take available extra space.

        The extra space is shared equally amongst all columns that
        have the expand set to %TRUE.

        Parameters:
            expand: %TRUE if this column should expand to fill available sace

        Returns:

        """
        ...

    def set_factory(self, factory: Optional[ListItemFactory] = None) -> None:
        """
        Sets the `GtkListItemFactory` to use for populating list items for this
        column.

        Parameters:
            factory: the factory to use

        Returns:

        """
        ...

    def set_fixed_width(self, fixed_width: int) -> None:
        """
        If @fixed_width is not -1, sets the fixed width of @column;
        otherwise unsets it.

        Setting a fixed width overrides the automatically calculated
        width. Interactive resizing also sets the “fixed-width” property.

        Parameters:
            fixed_width: the new fixed width, or -1

        Returns:

        """
        ...

    def set_header_menu(self, menu: Optional[Gio.MenuModel] = None) -> None:
        """
        Sets the menu model that is used to create the context menu
        for the column header.

        Parameters:
            menu: a `GMenuModel`

        Returns:

        """
        ...

    def set_id(self, id: Optional[str] = None) -> None:
        """
        Sets the id of this column.

        GTK makes no use of this, but applications can use it when
        storing column view configuration.

        It is up to callers to ensure uniqueness of IDs.

        Parameters:
            id: ID to use for this column

        Returns:

        """
        ...

    def set_resizable(self, resizable: bool) -> None:
        """
        Sets whether this column should be resizable by dragging.

        Parameters:
            resizable: whether this column should be resizable

        Returns:

        """
        ...

    def set_sorter(self, sorter: Optional[Sorter] = None) -> None:
        """
        Associates a sorter with the column.

        If @sorter is %NULL, the column will not let users change
        the sorting by clicking on its header.

        This sorter can be made active by clicking on the column
        header, or by calling [method@Gtk.ColumnView.sort_by_column].

        See [method@Gtk.ColumnView.get_sorter] for the necessary steps
        for setting up customizable sorting for [class@Gtk.ColumnView].

        Parameters:
            sorter: the `GtkSorter` to associate with @column

        Returns:

        """
        ...

    def set_title(self, title: Optional[str] = None) -> None:
        """
        Sets the title of this column.

        The title is displayed in the header of a `GtkColumnView`
        for this column and is therefore user-facing text that should
        be translated.

        Parameters:
            title: Title to use for this column

        Returns:

        """
        ...

    def set_visible(self, visible: bool) -> None:
        """
        Sets whether this column should be visible in views.

        Parameters:
            visible: whether this column should be visible

        Returns:

        """
        ...

class ColumnViewColumnClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ColumnViewRow(GObject.Object):
    """
    `GtkColumnViewRow` is used by [class@Gtk.ColumnView] to allow configuring
    how rows are displayed.

    It is not used to set the widgets displayed in the individual cells. For that
    see [method@GtkColumnViewColumn.set_factory] and [class@GtkColumnViewCell].

    :Constructors:

    ::

        ColumnViewRow(**properties)

    Object GtkColumnViewRow

    Properties from GtkColumnViewRow:
      accessible-description -> gchararray: accessible-description
      accessible-label -> gchararray: accessible-label
      activatable -> gboolean: activatable
      focusable -> gboolean: focusable
      item -> GObject: item
      position -> guint: position
      selectable -> gboolean: selectable
      selected -> gboolean: selected

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        accessible_description: str
        """
        The accessible description to set on the row.
        """
        accessible_label: str
        """
        The accessible label to set on the row.
        """
        activatable: bool
        """
        If the row can be activated by the user.
        """
        focusable: bool
        """
        If the row can be focused with the keyboard.
        """
        item: Optional[GObject.Object]
        """
        The item for this row.
        """
        position: int
        """
        Position of the row.
        """
        selectable: bool
        """
        If the row can be selected by the user.
        """
        selected: bool
        """
        If the item in the row is currently selected.
        """

    props: Props = ...
    def __init__(
        self,
        accessible_description: str = ...,
        accessible_label: str = ...,
        activatable: bool = ...,
        focusable: bool = ...,
        selectable: bool = ...,
    ): ...
    def get_accessible_description(self) -> str:
        """
        Gets the accessible description of @self.

        Parameters:


        Returns:
            str: the accessible description

        """
        ...

    def get_accessible_label(self) -> str:
        """
        Gets the accessible label of @self.

        Parameters:


        Returns:
            str: the accessible label

        """
        ...

    def get_activatable(self) -> bool:
        """
        Checks if the row has been set to be activatable via
        gtk_column_view_row_set_activatable().

        Parameters:


        Returns:
            bool: %TRUE if the row is activatable

        """
        ...

    def get_focusable(self) -> bool:
        """
        Checks if a row item has been set to be focusable via
        gtk_column_view_row_set_focusable().

        Parameters:


        Returns:
            bool: %TRUE if the row is focusable

        """
        ...

    def get_item(self) -> Optional[GObject.Object]:
        """
        Gets the model item that associated with @self.

        If @self is unbound, this function returns %NULL.

        Parameters:


        Returns:
            Optional[GObject.Object]: The item displayed

        """
        ...

    def get_position(self) -> int:
        """
        Gets the position in the model that @self currently displays.

        If @self is unbound, %GTK_INVALID_LIST_POSITION is returned.

        Parameters:


        Returns:
            int: The position of this row

        """
        ...

    def get_selectable(self) -> bool:
        """
        Checks if the row has been set to be selectable via
        gtk_column_view_row_set_selectable().

        Do not confuse this function with [method@Gtk.ColumnViewRow.get_selected].

        Parameters:


        Returns:
            bool: %TRUE if the row is selectable

        """
        ...

    def get_selected(self) -> bool:
        """
        Checks if the item is selected that this row corresponds to.

        The selected state is maintained by the list widget and its model
        and cannot be set otherwise.

        Parameters:


        Returns:
            bool: %TRUE if the item is selected.

        """
        ...

    def set_accessible_description(self, description: str) -> None:
        """
        Sets the accessible description for the row,
        which may be used by e.g. screen readers.

        Parameters:
            description: the description

        Returns:

        """
        ...

    def set_accessible_label(self, label: str) -> None:
        """
        Sets the accessible label for the row,
        which may be used by e.g. screen readers.

        Parameters:
            label: the label

        Returns:

        """
        ...

    def set_activatable(self, activatable: bool) -> None:
        """
        Sets @self to be activatable.

        If a row is activatable, double-clicking on the row, using
        the Return key or calling gtk_widget_activate() will activate
        the row. Activating instructs the containing columnview to
        emit the [signal@Gtk.ColumnView::activate] signal.

        By default, row are activatable.

        Parameters:
            activatable: if the row should be activatable

        Returns:

        """
        ...

    def set_focusable(self, focusable: bool) -> None:
        """
        Sets @self to be focusable.

        If a row is focusable, it can be focused using the keyboard.
        This works similar to [method@Gtk.Widget.set_focusable].

        Note that if row are not focusable, the contents of cells can still be focused if
        they are focusable.

        By default, rows are focusable.

        Parameters:
            focusable: if the row should be focusable

        Returns:

        """
        ...

    def set_selectable(self, selectable: bool) -> None:
        """
        Sets @self to be selectable.

        If a row is selectable, clicking on the row or using the keyboard
        will try to select or unselect the row. Whether this succeeds is up to
        the model to determine, as it is managing the selected state.

        Note that this means that making a row non-selectable has no
        influence on the selected state at all. A non-selectable row
        may still be selected.

        By default, rows are selectable.

        Parameters:
            selectable: if the row should be selectable

        Returns:

        """
        ...

class ColumnViewRowClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ColumnViewSorter(Sorter):
    """
    `GtkColumnViewSorter` is a sorter implementation that
    is geared towards the needs of `GtkColumnView`.

    The sorter returned by [method@Gtk.ColumnView.get_sorter] is
    a `GtkColumnViewSorter`.

    In column views, sorting can be configured by associating
    sorters with columns, and users can invert sort order by clicking
    on column headers. The API of `GtkColumnViewSorter` is designed
    to allow saving and restoring this configuration.

    If you are only interested in the primary sort column (i.e. the
    column where a sort indicator is shown in the header), then
    you can just look at [property@Gtk.ColumnViewSorter:primary-sort-column]
    and [property@Gtk.ColumnViewSorter:primary-sort-order].

    If you want to store the full sort configuration, including
    secondary sort columns that are used for tie breaking, then
    you can use [method@Gtk.ColumnViewSorter.get_nth_sort_column].
    To get notified about changes, use [signal@Gtk.Sorter::changed].

    To restore a saved sort configuration on a `GtkColumnView`,
    use code like:

    ```
    sorter = gtk_column_view_get_sorter (view);
    for (i = gtk_column_view_sorter_get_n_sort_columns (sorter) - 1; i >= 0; i--)
    {
    column = gtk_column_view_sorter_get_nth_sort_column (sorter, i, &order);
    gtk_column_view_sort_by_column (view, column, order);
    }
    ```

    :Constructors:

    ::

        ColumnViewSorter(**properties)

    Object GtkColumnViewSorter

    Properties from GtkColumnViewSorter:
      primary-sort-column -> GtkColumnViewColumn: primary-sort-column
      primary-sort-order -> GtkSortType: primary-sort-order

    Signals from GtkSorter:
      changed (GtkSorterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Sorter.Props):
        primary_sort_column: Optional[ColumnViewColumn]
        """
        The primary sort column.

        The primary sort column is the one that displays the triangle
        in a column view header.
        """
        primary_sort_order: SortType
        """
        The primary sort order.

        The primary sort order determines whether the triangle displayed
        in the column view header of the primary sort column points upwards
        or downwards.
        """

    props: Props = ...
    def get_n_sort_columns(self) -> int:
        """
        Returns the number of columns by which the sorter sorts.

        If the sorter of the primary sort column does not determine
        a total order, then the secondary sorters are consulted to
        break the ties.

        Use the [signal@Gtk.Sorter::changed] signal to get notified
        when the number of sort columns changes.

        Parameters:


        Returns:
            int: the number of sort columns

        """
        ...

    def get_nth_sort_column(
        self, position: int
    ) -> Tuple[Optional[ColumnViewColumn], SortType]:
        """
        Gets the @position'th sort column and its associated sort order.

        Use the [signal@Gtk.Sorter::changed] signal to get notified
        when sort columns change.

        Parameters:
            position: the position of the sort column to retrieve (0 for the
        primary sort column)

        Returns:
            Optional[ColumnViewColumn]: the @positions sort column
            SortType: return location for the sort order
        """
        ...

    def get_primary_sort_column(self) -> Optional[ColumnViewColumn]:
        """
        Returns the primary sort column.

        The primary sort column is the one that displays the triangle
        in a column view header.

        Parameters:


        Returns:
            Optional[ColumnViewColumn]: the primary sort column

        """
        ...

    def get_primary_sort_order(self) -> SortType:
        """
        Returns the primary sort order.

        The primary sort order determines whether the triangle displayed
        in the column view header of the primary sort column points upwards
        or downwards.

        If there is no primary sort column, then this function returns
        `GTK_SORT_ASCENDING`.

        Parameters:


        Returns:
            SortType: the primary sort order

        """
        ...

class ColumnViewSorterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ColumnViewSorterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: SorterClass = ...

@deprecated("Use [class@Gtk.DropDown] instead")
class ComboBox(
    Widget, Accessible, Buildable, CellEditable, CellLayout, ConstraintTarget
):
    """
    A `GtkComboBox` is a widget that allows the user to choose from a list of
    valid choices.

    ![An example GtkComboBox](combo-box.png)

    The `GtkComboBox` displays the selected choice; when activated, the
    `GtkComboBox` displays a popup which allows the user to make a new choice.

    The `GtkComboBox` uses the model-view pattern; the list of valid choices
    is specified in the form of a tree model, and the display of the choices
    can be adapted to the data in the model by using cell renderers, as you
    would in a tree view. This is possible since `GtkComboBox` implements the
    [iface@Gtk.CellLayout] interface. The tree model holding the valid
    choices is not restricted to a flat list, it can be a real tree, and the
    popup will reflect the tree structure.

    To allow the user to enter values not in the model, the
    [property@Gtk.ComboBox:has-entry] property allows the `GtkComboBox` to
    contain a [class@Gtk.Entry]. This entry can be accessed by calling
    [method@Gtk.ComboBox.get_child] on the combo box.

    For a simple list of textual choices, the model-view API of `GtkComboBox`
    can be a bit overwhelming. In this case, [class@Gtk.ComboBoxText] offers
    a simple alternative. Both `GtkComboBox` and `GtkComboBoxText` can contain
    an entry.

    ## CSS nodes

    ```
    combobox
    ├── box.linked
    │ ╰── button.combo
    │ ╰── box
    │ ├── cellview
    │ ╰── arrow
    ╰── window.popup
    ```

    A normal combobox contains a box with the .linked class, a button
    with the .combo class and inside those buttons, there are a cellview and
    an arrow.

    ```
    combobox
    ├── box.linked
    │ ├── entry.combo
    │ ╰── button.combo
    │ ╰── box
    │ ╰── arrow
    ╰── window.popup
    ```

    A `GtkComboBox` with an entry has a single CSS node with name combobox.
    It contains a box with the .linked class. That box contains an entry and
    a button, both with the .combo class added. The button also contains another
    node with name arrow.

    ## Accessibility

    `GtkComboBox` uses the %GTK_ACCESSIBLE_ROLE_COMBO_BOX role.

    :Constructors:

    ::

        ComboBox(**properties)
        new() -> Gtk.Widget
        new_with_entry() -> Gtk.Widget
        new_with_model(model:Gtk.TreeModel) -> Gtk.Widget
        new_with_model_and_entry(model:Gtk.TreeModel) -> Gtk.Widget

    Object GtkComboBox

    Signals from GtkComboBox:
      changed ()
      activate ()
      move-active (GtkScrollType)
      popup ()
      popdown () -> gboolean
      format-entry-text (gchararray) -> gchararray

    Properties from GtkComboBox:
      model -> GtkTreeModel: model
      active -> gint: active
      has-frame -> gboolean: has-frame
      popup-shown -> gboolean: popup-shown
      button-sensitivity -> GtkSensitivityType: button-sensitivity
      has-entry -> gboolean: has-entry
      entry-text-column -> gint: entry-text-column
      popup-fixed-width -> gboolean: popup-fixed-width
      id-column -> gint: id-column
      active-id -> gchararray: active-id
      child -> GtkWidget: child

    Signals from GtkCellEditable:
      editing-done ()
      remove-widget ()

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        CellEditable.Props,
        CellLayout.Props,
        ConstraintTarget.Props,
    ):
        active: int
        """
        The item which is currently active.

        If the model is a non-flat treemodel, and the active item is not an
        immediate child of the root of the tree, this property has the value
        `gtk_tree_path_get_indices (path)[0]`, where `path` is the
        [struct@Gtk.TreePath] of the active item.
        """
        active_id: Optional[str]
        """
        The value of the ID column of the active row.
        """
        button_sensitivity: SensitivityType
        """
        Whether the dropdown button is sensitive when
        the model is empty.
        """
        child: Optional[Widget]
        """
        The child widget.
        """
        entry_text_column: int
        """
        The model column to associate with strings from the entry.

        This is property only relevant if the combo was created with
        [property@Gtk.ComboBox:has-entry] is %TRUE.
        """
        has_entry: bool
        """
        Whether the combo box has an entry.
        """
        has_frame: bool
        """
        The `has-frame` property controls whether a frame is drawn around the entry.
        """
        id_column: int
        """
        The model column that provides string IDs for the values
        in the model, if != -1.
        """
        model: Optional[TreeModel]
        """
        The model from which the combo box takes its values.
        """
        popup_fixed_width: bool
        """
        Whether the popup's width should be a fixed width matching the
        allocated width of the combo box.
        """
        popup_shown: bool
        """
        Whether the combo boxes dropdown is popped up.

        Note that this property is mainly useful, because
        it allows you to connect to notify::popup-shown.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        active: int = ...,
        active_id: Optional[str] = ...,
        button_sensitivity: SensitivityType = ...,
        child: Optional[Widget] = ...,
        entry_text_column: int = ...,
        has_entry: bool = ...,
        has_frame: bool = ...,
        id_column: int = ...,
        model: Optional[TreeModel] = ...,
        popup_fixed_width: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        editing_canceled: bool = ...,
    ): ...
    def do_activate(self) -> None: ...
    def do_changed(self) -> None: ...
    def do_format_entry_text(self, path: str) -> str: ...
    @deprecated("Use [class@Gtk.DropDown]")
    def get_active(self) -> int:
        """
        Returns the index of the currently active item.

        If the model is a non-flat treemodel, and the active item is not
        an immediate child of the root of the tree, this function returns
        `gtk_tree_path_get_indices (path)[0]`, where `path` is the
        [struct@Gtk.TreePath] of the active item.

        Parameters:


        Returns:
            int: An integer which is the index of the currently active item,
        or -1 if there’s no active item

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def get_active_id(self) -> Optional[str]:
        """
        Returns the ID of the active row of @combo_box.

        This value is taken from the active row and the column specified
        by the [property@Gtk.ComboBox:id-column] property of @combo_box
        (see [method@Gtk.ComboBox.set_id_column]).

        The returned value is an interned string which means that you can
        compare the pointer by value to other interned strings and that you
        must not free it.

        If the [property@Gtk.ComboBox:id-column] property of @combo_box is
        not set, or if no row is active, or if the active row has a %NULL
        ID value, then %NULL is returned.

        Parameters:


        Returns:
            Optional[str]: the ID of the active row

        """
        ...

    def get_active_iter(self) -> Optional[TreeIter]:  # CHECK Wrapped function
        """
        Sets @iter to point to the currently active item.

        If no item is active, @iter is left unchanged.

        Parameters:


        Returns:
            TreeIter: A `GtkTreeIter`
        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def get_button_sensitivity(self) -> SensitivityType:
        """
        Returns whether the combo box sets the dropdown button
        sensitive or not when there are no items in the model.

        Parameters:


        Returns:
            SensitivityType: %GTK_SENSITIVITY_ON if the dropdown button
        is sensitive when the model is empty, %GTK_SENSITIVITY_OFF
        if the button is always insensitive or %GTK_SENSITIVITY_AUTO
        if it is only sensitive as long as the model has one item to
        be selected.

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @combo_box.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @combo_box

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def get_entry_text_column(self) -> int:
        """
        Returns the column which @combo_box is using to get the strings
        from to display in the internal entry.

        Parameters:


        Returns:
            int: A column in the data source model of @combo_box.

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def get_has_entry(self) -> bool:
        """
        Returns whether the combo box has an entry.

        Parameters:


        Returns:
            bool: whether there is an entry in @combo_box.

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def get_id_column(self) -> int:
        """
        Returns the column which @combo_box is using to get string IDs
        for values from.

        Parameters:


        Returns:
            int: A column in the data source model of @combo_box.

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def get_model(self) -> Optional[TreeModel]:
        """
        Returns the `GtkTreeModel` of @combo_box.

        Parameters:


        Returns:
            Optional[TreeModel]: A `GtkTreeModel` which was passed
        during construction.

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def get_popup_fixed_width(self) -> bool:
        """
        Gets whether the popup uses a fixed width.

        Parameters:


        Returns:
            bool: %TRUE if the popup uses a fixed width

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    @classmethod
    def new(cls) -> ComboBox:
        """
        Creates a new empty `GtkComboBox`.

        Parameters:


        Returns:
            Widget: A new `GtkComboBox`

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    @classmethod
    def new_with_entry(cls) -> ComboBox:
        """
        Creates a new empty `GtkComboBox` with an entry.

        In order to use a combo box with entry, you need to tell it
        which column of the model contains the text for the entry
        by calling [method@Gtk.ComboBox.set_entry_text_column].

        Parameters:


        Returns:
            Widget: A new `GtkComboBox`

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    @classmethod
    def new_with_model(cls, model: TreeModel) -> ComboBox:
        """
        Creates a new `GtkComboBox` with a model.

        Parameters:
            model: a `GtkTreeModel`

        Returns:
            Widget: A new `GtkComboBox`

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    @classmethod
    def new_with_model_and_entry(cls, model: TreeModel) -> ComboBox:
        """
        Creates a new empty `GtkComboBox` with an entry and a model.

        See also [ctor@Gtk.ComboBox.new_with_entry].

        Parameters:
            model: A `GtkTreeModel`

        Returns:
            Widget: A new `GtkComboBox`

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def popdown(self) -> None:
        """
        Hides the menu or dropdown list of @combo_box.

        This function is mostly intended for use by accessibility technologies;
        applications should have little use for it.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def popup(self) -> None:
        """
        Pops up the menu or dropdown list of @combo_box.

        This function is mostly intended for use by accessibility technologies;
        applications should have little use for it.

        Before calling this, @combo_box must be mapped, or nothing will happen.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def popup_for_device(self, device: Gdk.Device) -> None:
        """
        Pops up the menu of @combo_box.

        Note that currently this does not do anything with the device, as it was
        previously only used for list-mode combo boxes, and those were removed
        in GTK 4. However, it is retained in case similar functionality is added
        back later.

        Parameters:
            device: a `GdkDevice`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def set_active(self, index_: int) -> None:
        """
        Sets the active item of @combo_box to be the item at @index.

        Parameters:
            index_: An index in the model passed during construction,
        or -1 to have no active item

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def set_active_id(self, active_id: Optional[str] = None) -> bool:
        """
        Changes the active row of @combo_box to the one that has an ID equal to
        @active_id.

        If @active_id is %NULL, the active row is unset. Rows having
        a %NULL ID string cannot be made active by this function.

        If the [property@Gtk.ComboBox:id-column] property of @combo_box is
        unset or if no row has the given ID then the function does nothing
        and returns %FALSE.

        Parameters:
            active_id: the ID of the row to select

        Returns:
            bool: %TRUE if a row with a matching ID was found. If a %NULL
        @active_id was given to unset the active row, the function
        always returns %TRUE.

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def set_active_iter(self, iter: Optional[TreeIter] = None) -> None:
        """
        Sets the current active item to be the one referenced by @iter.

        If @iter is %NULL, the active item is unset.

        Parameters:
            iter: The `GtkTreeIter`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def set_button_sensitivity(self, sensitivity: SensitivityType) -> None:
        """
        Sets whether the dropdown button of the combo box should update
        its sensitivity depending on the model contents.

        Parameters:
            sensitivity: specify the sensitivity of the dropdown button

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @combo_box.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def set_entry_text_column(self, text_column: int) -> None:
        """
        Sets the model column which @combo_box should use to get strings
        from to be @text_column.

        For this column no separate
        [class@Gtk.CellRenderer] is needed.

        The column @text_column in the model of @combo_box must be of
        type %G_TYPE_STRING.

        This is only relevant if @combo_box has been created with
        [property@Gtk.ComboBox:has-entry] as %TRUE.

        Parameters:
            text_column: A column in @model to get the strings from for
        the internal entry

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def set_id_column(self, id_column: int) -> None:
        """
        Sets the model column which @combo_box should use to get string IDs
        for values from.

        The column @id_column in the model of @combo_box must be of type
        %G_TYPE_STRING.

        Parameters:
            id_column: A column in @model to get string IDs for values from

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def set_model(self, model: Optional[TreeModel] = None) -> None:
        """
        Sets the model used by @combo_box to be @model.

        Will unset a previously set model (if applicable). If model is %NULL,
        then it will unset the model.

        Note that this function does not clear the cell renderers, you have to
        call [method@Gtk.CellLayout.clear] yourself if you need to set up different
        cell renderers for the new model.

        Parameters:
            model: A `GtkTreeModel`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def set_popup_fixed_width(self, fixed: bool) -> None:
        """
        Specifies whether the popup’s width should be a fixed width.

        If @fixed is %TRUE, the popup's width is set to match the
        allocated width of the combo box.

        Parameters:
            fixed: whether to use a fixed popup width

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def set_row_separator_func(
        self, func: Optional[Callable[..., bool]] = None, *data: Any
    ) -> None:
        """
        Sets the row separator function, which is used to determine
        whether a row should be drawn as a separator.

        If the row separator function is %NULL, no separators are drawn.
        This is the default value.

        Parameters:
            func: a `GtkTreeViewRowSeparatorFunc`
            data: user data to pass to @func

        Returns:

        """
        ...

class ComboBoxClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ComboBoxClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    changed: Callable[[ComboBox], None] = ...
    format_entry_text: Callable[[ComboBox, str], str] = ...
    activate: Callable[[ComboBox], None] = ...
    padding: list[None] = ...

@deprecated("Use [class@Gtk.DropDown] with a [class@Gtk.StringList] instead")
class ComboBoxText(
    ComboBox, Accessible, Buildable, CellEditable, CellLayout, ConstraintTarget
):
    """
    A `GtkComboBoxText` is a simple variant of `GtkComboBox` for text-only
    use cases.

    ![An example GtkComboBoxText](combo-box-text.png)

    `GtkComboBoxText` hides the model-view complexity of `GtkComboBox`.

    To create a `GtkComboBoxText`, use [ctor@Gtk.ComboBoxText.new] or
    [ctor@Gtk.ComboBoxText.new_with_entry].

    You can add items to a `GtkComboBoxText` with
    [method@Gtk.ComboBoxText.append_text],
    [method@Gtk.ComboBoxText.insert_text] or
    [method@Gtk.ComboBoxText.prepend_text] and remove options with
    [method@Gtk.ComboBoxText.remove].

    If the `GtkComboBoxText` contains an entry (via the
    [property@Gtk.ComboBox:has-entry] property), its contents can be retrieved
    using [method@Gtk.ComboBoxText.get_active_text].

    You should not call [method@Gtk.ComboBox.set_model] or attempt to pack more
    cells into this combo box via its [iface@Gtk.CellLayout] interface.

    ## GtkComboBoxText as GtkBuildable

    The `GtkComboBoxText` implementation of the `GtkBuildable` interface supports
    adding items directly using the `<items>` element and specifying `<item>`
    elements for each item. Each `<item>` element can specify the “id”
    corresponding to the appended text and also supports the regular
    translation attributes “translatable”, “context” and “comments”.

    Here is a UI definition fragment specifying `GtkComboBoxText` items:
    ```xml
    <object class=\"GtkComboBoxText\">
    <items>
    <item translatable=\"yes\" id=\"factory\">Factory</item>
    <item translatable=\"yes\" id=\"home\">Home</item>
    <item translatable=\"yes\" id=\"subway\">Subway</item>
    </items>
    </object>
    ```

    ## CSS nodes

    ```
    combobox
    ╰── box.linked
    ├── entry.combo
    ├── button.combo
    ╰── window.popup
    ```

    `GtkComboBoxText` has a single CSS node with name combobox. It adds
    the style class .combo to the main CSS nodes of its entry and button
    children, and the .linked class to the node of its internal box.

    :Constructors:

    ::

        ComboBoxText(**properties)
        new() -> Gtk.Widget
        new_with_entry() -> Gtk.Widget

    Object GtkComboBoxText

    Signals from GtkCellEditable:
      editing-done ()
      remove-widget ()

    Signals from GtkComboBox:
      changed ()
      activate ()
      move-active (GtkScrollType)
      popup ()
      popdown () -> gboolean
      format-entry-text (gchararray) -> gchararray

    Properties from GtkComboBox:
      model -> GtkTreeModel: model
      active -> gint: active
      has-frame -> gboolean: has-frame
      popup-shown -> gboolean: popup-shown
      button-sensitivity -> GtkSensitivityType: button-sensitivity
      has-entry -> gboolean: has-entry
      entry-text-column -> gint: entry-text-column
      popup-fixed-width -> gboolean: popup-fixed-width
      id-column -> gint: id-column
      active-id -> gchararray: active-id
      child -> GtkWidget: child

    Signals from GtkCellEditable:
      editing-done ()
      remove-widget ()

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        ComboBox.Props,
        Accessible.Props,
        Buildable.Props,
        CellEditable.Props,
        CellLayout.Props,
        ConstraintTarget.Props,
    ): ...

    def __init__(
        self,
        active: int = ...,
        active_id: Optional[str] = ...,
        button_sensitivity: SensitivityType = ...,
        child: Optional[Widget] = ...,
        entry_text_column: int = ...,
        has_entry: bool = ...,
        has_frame: bool = ...,
        id_column: int = ...,
        model: Optional[TreeModel] = ...,
        popup_fixed_width: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        editing_canceled: bool = ...,
    ): ...
    @deprecated("Use [class@Gtk.DropDown]")
    def append(self, id: Optional[str], text: str) -> None:
        """
        Appends @text to the list of strings stored in @combo_box.

        If @id is non-%NULL then it is used as the ID of the row.

        This is the same as calling [method@Gtk.ComboBoxText.insert]
        with a position of -1.

        Parameters:
            id: a string ID for this value
            text: A string

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def append_text(self, text: str) -> None:
        """
        Appends @text to the list of strings stored in @combo_box.

        This is the same as calling [method@Gtk.ComboBoxText.insert_text]
        with a position of -1.

        Parameters:
            text: A string

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def get_active_text(self) -> Optional[str]:
        """
        Returns the currently active string in @combo_box.

        If no row is currently selected, %NULL is returned.
        If @combo_box contains an entry, this function will
        return its contents (which will not necessarily
        be an item from the list).

        Parameters:


        Returns:
            Optional[str]: a newly allocated
        string containing the currently active text.
        Must be freed with g_free().

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def insert(self, position: int, id: Optional[str], text: str) -> None:
        """
        Inserts @text at @position in the list of strings stored in @combo_box.

        If @id is non-%NULL then it is used as the ID of the row.
        See [property@Gtk.ComboBox:id-column].

        If @position is negative then @text is appended.

        Parameters:
            position: An index to insert @text
            id: a string ID for this value
            text: A string to display

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def insert_text(self, position: int, text: str) -> None:
        """
        Inserts @text at @position in the list of strings stored in @combo_box.

        If @position is negative then @text is appended.

        This is the same as calling [method@Gtk.ComboBoxText.insert]
        with a %NULL ID string.

        Parameters:
            position: An index to insert @text
            text: A string

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    @classmethod
    def new(cls) -> ComboBoxText:
        """
        Creates a new `GtkComboBoxText`.

        Parameters:


        Returns:
            Widget: A new `GtkComboBoxText`

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    @classmethod
    def new_with_entry(cls) -> ComboBoxText:
        """
        Creates a new `GtkComboBoxText` with an entry.

        Parameters:


        Returns:
            Widget: a new `GtkComboBoxText`

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def prepend(self, id: Optional[str], text: str) -> None:
        """
        Prepends @text to the list of strings stored in @combo_box.

        If @id is non-%NULL then it is used as the ID of the row.

        This is the same as calling [method@Gtk.ComboBoxText.insert]
        with a position of 0.

        Parameters:
            id: a string ID for this value
            text: a string

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def prepend_text(self, text: str) -> None:
        """
        Prepends @text to the list of strings stored in @combo_box.

        This is the same as calling [method@Gtk.ComboBoxText.insert_text]
        with a position of 0.

        Parameters:
            text: A string

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def remove(self, position: int) -> None:
        """
        Removes the string at @position from @combo_box.

        Parameters:
            position: Index of the item to remove

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.DropDown]")
    def remove_all(self) -> None:
        """
        Removes all the text entries from the combo box.

        Parameters:


        Returns:

        """
        ...

class ConstantExpression(Expression):
    """
    A constant value in a `GtkExpression`.

    :Constructors:

    ::

        ConstantExpression(**properties)
        new_for_value(value:GObject.Value) -> Gtk.ConstantExpression
    """

    class Props(Expression.Props): ...

    def get_value(self) -> Any:
        """
        Gets the value that a constant expression evaluates to.

        Parameters:


        Returns:
            Any: the value

        """
        ...

    @classmethod
    def new_for_value(cls, value: Any) -> ConstantExpression:
        """
        Creates an expression that always evaluates to the given `value`.

        Parameters:
            value: a `GValue`

        Returns:
            ConstantExpression: a new `GtkExpression`

        """
        ...

class Constraint(GObject.Object):
    """
    `GtkConstraint` describes a constraint between attributes of two widgets,
    expressed as a linear equation.

    The typical equation for a constraint is:

    ```
    target.target_attr = source.source_attr × multiplier + constant
    ```

    Each `GtkConstraint` is part of a system that will be solved by a
    [class@Gtk.ConstraintLayout] in order to allocate and position each
    child widget or guide.

    The source and target, as well as their attributes, of a `GtkConstraint`
    instance are immutable after creation.

    :Constructors:

    ::

        Constraint(**properties)
        new(target:Gtk.ConstraintTarget=None, target_attribute:Gtk.ConstraintAttribute, relation:Gtk.ConstraintRelation, source:Gtk.ConstraintTarget=None, source_attribute:Gtk.ConstraintAttribute, multiplier:float, constant:float, strength:int) -> Gtk.Constraint
        new_constant(target:Gtk.ConstraintTarget=None, target_attribute:Gtk.ConstraintAttribute, relation:Gtk.ConstraintRelation, constant:float, strength:int) -> Gtk.Constraint

    Object GtkConstraint

    Properties from GtkConstraint:
      target -> GtkConstraintTarget: target
      target-attribute -> GtkConstraintAttribute: target-attribute
      relation -> GtkConstraintRelation: relation
      source -> GtkConstraintTarget: source
      source-attribute -> GtkConstraintAttribute: source-attribute
      multiplier -> gdouble: multiplier
      constant -> gdouble: constant
      strength -> gint: strength

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        constant: float
        """
        The constant value to be added to the [property@Gtk.Constraint:source-attribute].
        """
        multiplier: float
        """
        The multiplication factor to be applied to
        the [property@Gtk.Constraint:source-attribute].
        """
        relation: ConstraintRelation
        """
        The order relation between the terms of the constraint.
        """
        source: Optional[ConstraintTarget]
        """
        The source of the constraint.

        The constraint will set the [property@Gtk.Constraint:target-attribute]
        property of the target using the [property@Gtk.Constraint:source-attribute]
        property of the source.
        """
        source_attribute: ConstraintAttribute
        """
        The attribute of the [property@Gtk.Constraint:source] read by the
        constraint.
        """
        strength: int
        """
        The strength of the constraint.

        The strength can be expressed either using one of the symbolic values
        of the [enum@Gtk.ConstraintStrength] enumeration, or any positive integer
        value.
        """
        target: Optional[ConstraintTarget]
        """
        The target of the constraint.

        The constraint will set the [property@Gtk.Constraint:target-attribute]
        property of the target using the [property@Gtk.Constraint:source-attribute]
        property of the source widget.
        """
        target_attribute: ConstraintAttribute
        """
        The attribute of the [property@Gtk.Constraint:target] set by the constraint.
        """

    props: Props = ...
    def __init__(
        self,
        constant: float = ...,
        multiplier: float = ...,
        relation: ConstraintRelation = ...,
        source: ConstraintTarget = ...,
        source_attribute: ConstraintAttribute = ...,
        strength: int = ...,
        target: ConstraintTarget = ...,
        target_attribute: ConstraintAttribute = ...,
    ): ...
    def get_constant(self) -> float:
        """
        Retrieves the constant factor added to the source attributes' value.

        Parameters:


        Returns:
            float: a constant factor

        """
        ...

    def get_multiplier(self) -> float:
        """
        Retrieves the multiplication factor applied to the source
        attribute's value.

        Parameters:


        Returns:
            float: a multiplication factor

        """
        ...

    def get_relation(self) -> ConstraintRelation:
        """
        The order relation between the terms of the constraint.

        Parameters:


        Returns:
            ConstraintRelation: a relation type

        """
        ...

    def get_source(self) -> Optional[ConstraintTarget]:
        """
        Retrieves the [iface@Gtk.ConstraintTarget] used as the source for the
        constraint.

        If the source is set to `NULL` at creation, the constraint will use
        the widget using the [class@Gtk.ConstraintLayout] as the source.

        Parameters:


        Returns:
            Optional[ConstraintTarget]: the source of the constraint

        """
        ...

    def get_source_attribute(self) -> ConstraintAttribute:
        """
        Retrieves the attribute of the source to be read by the constraint.

        Parameters:


        Returns:
            ConstraintAttribute: the source's attribute

        """
        ...

    def get_strength(self) -> int:
        """
        Retrieves the strength of the constraint.

        Parameters:


        Returns:
            int: the strength value

        """
        ...

    def get_target(self) -> Optional[ConstraintTarget]:
        """
        Retrieves the [iface@Gtk.ConstraintTarget] used as the target for
        the constraint.

        If the targe is set to `NULL` at creation, the constraint will use
        the widget using the [class@Gtk.ConstraintLayout] as the target.

        Parameters:


        Returns:
            Optional[ConstraintTarget]: a `GtkConstraintTarget`

        """
        ...

    def get_target_attribute(self) -> ConstraintAttribute:
        """
        Retrieves the attribute of the target to be set by the constraint.

        Parameters:


        Returns:
            ConstraintAttribute: the target's attribute

        """
        ...

    def is_attached(self) -> bool:
        """
        Checks whether the constraint is attached to a [class@Gtk.ConstraintLayout],
        and it is contributing to the layout.

        Parameters:


        Returns:
            bool: `TRUE` if the constraint is attached

        """
        ...

    def is_constant(self) -> bool:
        """
        Checks whether the constraint describes a relation between an attribute
        on the [property@Gtk.Constraint:target] and a constant value.

        Parameters:


        Returns:
            bool: `TRUE` if the constraint is a constant relation

        """
        ...

    def is_required(self) -> bool:
        """
        Checks whether the constraint is a required relation for solving the
        constraint layout.

        Parameters:


        Returns:
            bool: %TRUE if the constraint is required

        """
        ...

    @classmethod
    def new(
        cls,
        target: Optional[ConstraintTarget],
        target_attribute: ConstraintAttribute,
        relation: ConstraintRelation,
        source: Optional[ConstraintTarget],
        source_attribute: ConstraintAttribute,
        multiplier: float,
        constant: float,
        strength: int,
    ) -> Constraint:
        """
        Creates a new constraint representing a relation between a layout
        attribute on a source and a layout attribute on a target.

        Parameters:
            target: the target of the constraint
            target_attribute: the attribute of `target` to be set
            relation: the relation equivalence between `target_attribute` and `source_attribute`
            source: the source of the constraint
            source_attribute: the attribute of `source` to be read
            multiplier: a multiplication factor to be applied to `source_attribute`
            constant: a constant factor to be added to `source_attribute`
            strength: the strength of the constraint

        Returns:
            Constraint: the newly created constraint

        """
        ...

    @classmethod
    def new_constant(
        cls,
        target: Optional[ConstraintTarget],
        target_attribute: ConstraintAttribute,
        relation: ConstraintRelation,
        constant: float,
        strength: int,
    ) -> Constraint:
        """
        Creates a new constraint representing a relation between a layout
        attribute on a target and a constant value.

        Parameters:
            target: a the target of the constraint
            target_attribute: the attribute of `target` to be set
            relation: the relation equivalence between `target_attribute` and `constant`
            constant: a constant factor to be set on `target_attribute`
            strength: the strength of the constraint

        Returns:
            Constraint: the newly created constraint

        """
        ...

class ConstraintClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ConstraintClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class ConstraintGuide(GObject.Object, ConstraintTarget):
    """
    A `GtkConstraintGuide` is an invisible layout element in a
    `GtkConstraintLayout`.

    The `GtkConstraintLayout` treats guides like widgets. They
    can be used as the source or target of a `GtkConstraint`.

    Guides have a minimum, maximum and natural size. Depending
    on the constraints that are applied, they can act like a
    guideline that widgets can be aligned to, or like *flexible
    space*.

    Unlike a `GtkWidget`, a `GtkConstraintGuide` will not be drawn.

    :Constructors:

    ::

        ConstraintGuide(**properties)
        new() -> Gtk.ConstraintGuide

    Object GtkConstraintGuide

    Properties from GtkConstraintGuide:
      min-width -> gint: min-width
      min-height -> gint: min-height
      nat-width -> gint: nat-width
      nat-height -> gint: nat-height
      max-width -> gint: max-width
      max-height -> gint: max-height
      strength -> GtkConstraintStrength: strength
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, ConstraintTarget.Props):
        max_height: int
        """
        The maximum height of the guide.
        """
        max_width: int
        """
        The maximum width of the guide.
        """
        min_height: int
        """
        The minimum height of the guide.
        """
        min_width: int
        """
        The minimum width of the guide.
        """
        name: Optional[str]
        """
        A name that identifies the `GtkConstraintGuide`, for debugging.
        """
        nat_height: int
        """
        The preferred, or natural, height of the guide.
        """
        nat_width: int
        """
        The preferred, or natural, width of the guide.
        """
        strength: ConstraintStrength
        """
        The `GtkConstraintStrength` to be used for the constraint on
        the natural size of the guide.
        """

    props: Props = ...
    def __init__(
        self,
        max_height: int = ...,
        max_width: int = ...,
        min_height: int = ...,
        min_width: int = ...,
        name: Optional[str] = ...,
        nat_height: int = ...,
        nat_width: int = ...,
        strength: ConstraintStrength = ...,
    ): ...
    def get_max_size(self) -> Tuple[int, int]:
        """
        Gets the maximum size of @guide.

        Parameters:


        Returns:
            int: return location for the maximum width
            int: return location for the maximum height
        """
        ...

    def get_min_size(self) -> Tuple[int, int]:
        """
        Gets the minimum size of @guide.

        Parameters:


        Returns:
            int: return location for the minimum width
            int: return location for the minimum height
        """
        ...

    def get_name(self) -> Optional[str]:
        """
        Retrieves the name set using gtk_constraint_guide_set_name().

        Parameters:


        Returns:
            Optional[str]: the name of the guide

        """
        ...

    def get_nat_size(self) -> Tuple[int, int]:
        """
        Gets the natural size of @guide.

        Parameters:


        Returns:
            int: return location for the natural width
            int: return location for the natural height
        """
        ...

    def get_strength(self) -> ConstraintStrength:
        """
        Retrieves the strength set using gtk_constraint_guide_set_strength().

        Parameters:


        Returns:
            ConstraintStrength: the strength of the constraint on the natural size

        """
        ...

    @classmethod
    def new(cls) -> ConstraintGuide:
        """
        Creates a new `GtkConstraintGuide` object.

        Parameters:


        Returns:
            ConstraintGuide: a new `GtkConstraintGuide` object.

        """
        ...

    def set_max_size(self, width: int, height: int) -> None:
        """
        Sets the maximum size of @guide.

        If @guide is attached to a `GtkConstraintLayout`,
        the constraints will be updated to reflect the new size.

        Parameters:
            width: the new maximum width, or -1 to not change it
            height: the new maximum height, or -1 to not change it

        Returns:

        """
        ...

    def set_min_size(self, width: int, height: int) -> None:
        """
        Sets the minimum size of @guide.

        If @guide is attached to a `GtkConstraintLayout`,
        the constraints will be updated to reflect the new size.

        Parameters:
            width: the new minimum width, or -1 to not change it
            height: the new minimum height, or -1 to not change it

        Returns:

        """
        ...

    def set_name(self, name: Optional[str] = None) -> None:
        """
        Sets a name for the given `GtkConstraintGuide`.

        The name is useful for debugging purposes.

        Parameters:
            name: a name for the @guide

        Returns:

        """
        ...

    def set_nat_size(self, width: int, height: int) -> None:
        """
        Sets the natural size of @guide.

        If @guide is attached to a `GtkConstraintLayout`,
        the constraints will be updated to reflect the new size.

        Parameters:
            width: the new natural width, or -1 to not change it
            height: the new natural height, or -1 to not change it

        Returns:

        """
        ...

    def set_strength(self, strength: ConstraintStrength) -> None:
        """
        Sets the strength of the constraint on the natural size of the
        given `GtkConstraintGuide`.

        Parameters:
            strength: the strength of the constraint

        Returns:

        """
        ...

class ConstraintGuideClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ConstraintGuideClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class ConstraintLayout(LayoutManager, Buildable):
    """
    A layout manager using constraints to describe relations between widgets.

    `GtkConstraintLayout` is a layout manager that uses relations between
    widget attributes, expressed via [class@Gtk.Constraint] instances, to
    measure and allocate widgets.

    ### How do constraints work

    Constraints are objects defining the relationship between attributes
    of a widget; you can read the description of the [class@Gtk.Constraint]
    class to have a more in depth definition.

    By taking multiple constraints and applying them to the children of
    a widget using `GtkConstraintLayout`, it's possible to describe
    complex layout policies; each constraint applied to a child or to the parent
    widgets contributes to the full description of the layout, in terms of
    parameters for resolving the value of each attribute.

    It is important to note that a layout is defined by the totality of
    constraints; removing a child, or a constraint, from an existing layout
    without changing the remaining constraints may result in an unstable
    or unsolvable layout.

    Constraints have an implicit \"reading order\"; you should start describing
    each edge of each child, as well as their relationship with the parent
    container, from the top left (or top right, in RTL languages), horizontally
    first, and then vertically.

    A constraint-based layout with too few constraints can become \"unstable\",
    that is: have more than one solution. The behavior of an unstable layout
    is undefined.

    A constraint-based layout with conflicting constraints may be unsolvable,
    and lead to an unstable layout. You can use the [property@Gtk.Constraint:strength]
    property of [class@Gtk.Constraint] to \"nudge\" the layout towards a solution.

    ### GtkConstraintLayout as GtkBuildable

    `GtkConstraintLayout` implements the [iface@Gtk.Buildable] interface and
    has a custom \"constraints\" element which allows describing constraints in
    a [class@Gtk.Builder] UI file.

    An example of a UI definition fragment specifying a constraint:

    ```xml
    <object class=\"GtkConstraintLayout\">
    <constraints>
    <constraint target=\"button\" target-attribute=\"start\"
    relation=\"eq\"
    source=\"super\" source-attribute=\"start\"
    constant=\"12\"
    strength=\"required\" />
    <constraint target=\"button\" target-attribute=\"width\"
    relation=\"ge\"
    constant=\"250\"
    strength=\"strong\" />
    </constraints>
    </object>
    ```

    The definition above will add two constraints to the GtkConstraintLayout:

    - a required constraint between the leading edge of \"button\" and
    the leading edge of the widget using the constraint layout, plus
    12 pixels
    - a strong, constant constraint making the width of \"button\" greater
    than, or equal to 250 pixels

    The \"target\" and \"target-attribute\" attributes are required.

    The \"source\" and \"source-attribute\" attributes of the \"constraint\"
    element are optional; if they are not specified, the constraint is
    assumed to be a constant.

    The \"relation\" attribute is optional; if not specified, the constraint
    is assumed to be an equality.

    The \"strength\" attribute is optional; if not specified, the constraint
    is assumed to be required.

    The \"source\" and \"target\" attributes can be set to \"super\" to indicate
    that the constraint target is the widget using the GtkConstraintLayout.

    There can be \"constant\" and \"multiplier\" attributes.

    Additionally, the \"constraints\" element can also contain a description
    of the `GtkConstraintGuides` used by the layout:

    ```xml
    <constraints>
    <guide min-width=\"100\" max-width=\"500\" name=\"hspace\"/>
    <guide min-height=\"64\" nat-height=\"128\" name=\"vspace\" strength=\"strong\"/>
    </constraints>
    ```

    The \"guide\" element has the following optional attributes:

    - \"min-width\", \"nat-width\", and \"max-width\", describe the minimum,
    natural, and maximum width of the guide, respectively
    - \"min-height\", \"nat-height\", and \"max-height\", describe the minimum,
    natural, and maximum height of the guide, respectively
    - \"strength\" describes the strength of the constraint on the natural
    size of the guide; if not specified, the constraint is assumed to
    have a medium strength
    - \"name\" describes a name for the guide, useful when debugging

    ### Using the Visual Format Language

    Complex constraints can be described using a compact syntax called VFL,
    or *Visual Format Language*.

    The Visual Format Language describes all the constraints on a row or
    column, typically starting from the leading edge towards the trailing
    one. Each element of the layout is composed by \"views\", which identify
    a [iface@Gtk.ConstraintTarget].

    For instance:

    ```
    [button]-[textField]
    ```

    Describes a constraint that binds the trailing edge of \"button\" to the
    leading edge of \"textField\", leaving a default space between the two.

    Using VFL is also possible to specify predicates that describe constraints
    on attributes like width and height:

    ```
    // Width must be greater than, or equal to 50
    [button(>=50)]

    // Width of button1 must be equal to width of button2
    [button1(==button2)]
    ```

    The default orientation for a VFL description is horizontal, unless
    otherwise specified:

    ```
    // horizontal orientation, default attribute: width
    H:[button(>=150)]

    // vertical orientation, default attribute: height
    V:[button1(==button2)]
    ```

    It's also possible to specify multiple predicates, as well as their
    strength:

    ```
    // minimum width of button must be 150
    // natural width of button can be 250
    [button(>=150@required, ==250@medium)]
    ```

    Finally, it's also possible to use simple arithmetic operators:

    ```
    // width of button1 must be equal to width of button2
    // divided by 2 plus 12
    [button1(button2 / 2 + 12)]
    ```

    :Constructors:

    ::

        ConstraintLayout(**properties)
        new() -> Gtk.LayoutManager

    Object GtkConstraintLayout

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutManager.Props, Buildable.Props): ...

    def add_constraint(self, constraint: Constraint) -> None:
        """
        Adds a constraint to the layout manager.

        The [property@Gtk.Constraint:source] and [property@Gtk.Constraint:target]
        properties of `constraint` can be:

        - set to `NULL` to indicate that the constraint refers to the
        widget using `layout`
        - set to the [class@Gtk.Widget] using `layout`
        - set to a child of the [class@Gtk.Widget] using `layout`
        - set to a [class@Gtk.ConstraintGuide] that is part of `layout`

        The @layout acquires the ownership of @constraint after calling
        this function.

        Parameters:
            constraint: a [class@Gtk.Constraint]

        Returns:

        """
        ...

    def add_constraints_from_description(
        self,
        lines: Sequence[str],
        hspacing: int,
        vspacing: int,
        views: dict[str, ConstraintTarget],
    ) -> list[Constraint]:
        """
        Creates a list of constraints from a VFL description.

        This function is a convenience wrapper around
        [method@Gtk.ConstraintLayout.add_constraints_from_descriptionv], using
        variadic arguments to populate the view/target map.

        Parameters:
            lines: an array of Visual Format Language lines
        defining a set of constraints
            hspacing: default horizontal spacing value, or -1 for the fallback value
            vspacing: default vertical spacing value, or -1 for the fallback value
            views:

        Returns:
            list[Constraint]: the list of
        [class@Gtk.Constraint]s that were added to the layout

        """
        ...

    def add_guide(self, guide: ConstraintGuide) -> None:
        """
        Adds a guide to `layout`.

        A guide can be used as the source or target of constraints,
        like a widget, but it is not visible.

        The `layout` acquires the ownership of `guide` after calling
        this function.

        Parameters:
            guide: a [class@Gtk.ConstraintGuide] object

        Returns:

        """
        ...

    @classmethod
    def new(cls) -> ConstraintLayout:
        """
        Creates a new `GtkConstraintLayout` layout manager.

        Parameters:


        Returns:
            LayoutManager: the newly created `GtkConstraintLayout`

        """
        ...

    def observe_constraints(self) -> Gio.ListModel:
        """
        Returns a `GListModel` to track the constraints that are
        part of the layout.

        Calling this function will enable extra internal bookkeeping
        to track constraints and emit signals on the returned listmodel.
        It may slow down operations a lot.

        Applications should try hard to avoid calling this function
        because of the slowdowns.

        Parameters:


        Returns:
            Gio.ListModel: a
        `GListModel` tracking the layout's constraints

        """
        ...

    def observe_guides(self) -> Gio.ListModel:
        """
        Returns a `GListModel` to track the guides that are
        part of the layout.

        Calling this function will enable extra internal bookkeeping
        to track guides and emit signals on the returned listmodel.
        It may slow down operations a lot.

        Applications should try hard to avoid calling this function
        because of the slowdowns.

        Parameters:


        Returns:
            Gio.ListModel: a
        `GListModel` tracking the layout's guides

        """
        ...

    def remove_all_constraints(self) -> None:
        """
        Removes all constraints from the layout manager.

        Parameters:


        Returns:

        """
        ...

    def remove_constraint(self, constraint: Constraint) -> None:
        """
        Removes `constraint` from the layout manager,
        so that it no longer influences the layout.

        Parameters:
            constraint: a [class@Gtk.Constraint]

        Returns:

        """
        ...

    def remove_guide(self, guide: ConstraintGuide) -> None:
        """
        Removes `guide` from the layout manager,
        so that it no longer influences the layout.

        Parameters:
            guide: a [class@Gtk.ConstraintGuide] object

        Returns:

        """
        ...

class ConstraintLayoutChild(LayoutChild):
    """
    `GtkLayoutChild` subclass for children in a `GtkConstraintLayout`.

    :Constructors:

    ::

        ConstraintLayoutChild(**properties)

    Object GtkConstraintLayoutChild

    Properties from GtkLayoutChild:
      layout-manager -> GtkLayoutManager: layout-manager
      child-widget -> GtkWidget: child-widget

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutChild.Props): ...

    def __init__(
        self, child_widget: Widget = ..., layout_manager: LayoutManager = ...
    ): ...

class ConstraintLayoutChildClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ConstraintLayoutChildClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutChildClass = ...

class ConstraintLayoutClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ConstraintLayoutClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutManagerClass = ...

class ConstraintTarget(GObject.GInterface):
    """
    The `GtkConstraintTarget` interface is implemented by objects that
    can be used as source or target in `GtkConstraint`s.

    Besides `GtkWidget`, it is also implemented by `GtkConstraintGuide`.



    Interface GtkConstraintTarget

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

class ConstraintTargetInterface(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class CssLocation(GObject.GPointer):
    """
    :Constructors:

    ::

        CssLocation()
    """

    class Props(GObject.GPointer.Props): ...
    bytes: int = ...
    chars: int = ...
    lines: int = ...
    line_bytes: int = ...
    line_chars: int = ...

class CssProvider(GObject.Object, StyleProvider):
    """
    `GtkCssProvider` is an object implementing the `GtkStyleProvider` interface
    for CSS.

    It is able to parse CSS-like input in order to style widgets.

    An application can make GTK parse a specific CSS style sheet by calling
    [method@Gtk.CssProvider.load_from_file] or
    [method@Gtk.CssProvider.load_from_resource]
    and adding the provider with [method@Gtk.StyleContext.add_provider] or
    [func@Gtk.StyleContext.add_provider_for_display].

    In addition, certain files will be read when GTK is initialized.
    First, the file `$XDG_CONFIG_HOME/gtk-4.0/gtk.css` is loaded if it
    exists. Then, GTK loads the first existing file among
    `XDG_DATA_HOME/themes/THEME/gtk-VERSION/gtk-VARIANT.css`,
    `$HOME/.themes/THEME/gtk-VERSION/gtk-VARIANT.css`,
    `$XDG_DATA_DIRS/themes/THEME/gtk-VERSION/gtk-VARIANT.css` and
    `DATADIR/share/themes/THEME/gtk-VERSION/gtk-VARIANT.css`,
    where `THEME` is the name of the current theme (see the
    [property@Gtk.Settings:gtk-theme-name] setting), `VARIANT` is the
    variant to load (see the
    [property@Gtk.Settings:gtk-application-prefer-dark-theme] setting),
    `DATADIR` is the prefix configured when GTK was compiled (unless
    overridden by the `GTK_DATA_PREFIX` environment variable), and
    `VERSION` is the GTK version number. If no file is found for the
    current version, GTK tries older versions all the way back to 4.0.

    To track errors while loading CSS, connect to the
    [signal@Gtk.CssProvider::parsing-error] signal.

    :Constructors:

    ::

        CssProvider(**properties)
        new() -> Gtk.CssProvider

    Object GtkCssProvider

    Signals from GtkCssProvider:
      parsing-error (GtkCssSection, GError)

    Signals from GtkStyleProvider:
      gtk-private-changed ()

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, StyleProvider.Props): ...
    parent_instance: GObject.Object = ...
    def load_from_bytes(self, data: GLib.Bytes) -> None:
        """
        Loads @data into @css_provider.

        This clears any previously loaded information.

        Parameters:
            data: `GBytes` containing the data to load

        Returns:

        """
        ...

    def load_from_data(self, text, length=-1): ...  # FIXME Function
    def load_from_file(self, file: Gio.File) -> None:
        """
        Loads the data contained in @file into @css_provider.

        This clears any previously loaded information.

        Parameters:
            file: `GFile` pointing to a file to load

        Returns:

        """
        ...

    def load_from_path(self, path: str) -> None:
        """
        Loads the data contained in @path into @css_provider.

        This clears any previously loaded information.

        Parameters:
            path: the path of a filename to load, in the GLib filename encoding

        Returns:

        """
        ...

    def load_from_resource(self, resource_path: str) -> None:
        """
        Loads the data contained in the resource at @resource_path into
        the @css_provider.

        This clears any previously loaded information.

        Parameters:
            resource_path: a `GResource` resource path

        Returns:

        """
        ...

    def load_from_string(self, string: str) -> None:
        """
        Loads @string into @css_provider.

        This clears any previously loaded information.

        Parameters:
            string: the CSS to load

        Returns:

        """
        ...

    def load_named(self, name: str, variant: Optional[str] = None) -> None:
        """
        Loads a theme from the usual theme paths.

        The actual process of finding the theme might change between
        releases, but it is guaranteed that this function uses the same
        mechanism to load the theme that GTK uses for loading its own theme.

        Parameters:
            name: A theme name
            variant: variant to load, for example, \"dark\", or
        %NULL for the default

        Returns:

        """
        ...

    @classmethod
    def new(cls) -> CssProvider:
        """
        Returns a newly created `GtkCssProvider`.

        Parameters:


        Returns:
            CssProvider: A new `GtkCssProvider`

        """
        ...

    def to_string(self) -> str:
        """
        Converts the @provider into a string representation in CSS
        format.

        Using [method@Gtk.CssProvider.load_from_data] with the return
        value from this function on a new provider created with
        [ctor@Gtk.CssProvider.new] will basically create a duplicate
        of this @provider.

        Parameters:


        Returns:
            str: a new string representing the @provider.

        """
        ...

class CssProviderClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class CssProviderPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class CssSection(GObject.GBoxed):
    """
    Defines a part of a CSS document.

    Because sections are nested into one another, you can use
    [method@CssSection.get_parent] to get the containing region.

    :Constructors:

    ::

        new(file:Gio.File=None, start:Gtk.CssLocation, end:Gtk.CssLocation) -> Gtk.CssSection
    """

    class Props(GObject.GBoxed.Props): ...

    def get_end_location(self) -> CssLocation:
        """
        Returns the location in the CSS document where this section ends.

        Parameters:


        Returns:
            CssLocation: The end location of
        this section

        """
        ...

    def get_file(self) -> Optional[Gio.File]:
        """
        Gets the file that @section was parsed from.

        If no such file exists, for example because the CSS was loaded via
        [method@Gtk.CssProvider.load_from_data], then `NULL` is returned.

        Parameters:


        Returns:
            Optional[Gio.File]: the `GFile` from which the `section`
        was parsed

        """
        ...

    def get_parent(self) -> Optional[CssSection]:
        """
        Gets the parent section for the given `section`.

        The parent section is the section that contains this `section`. A special
        case are sections of type `GTK_CSS_SECTION_DOCUMEN`T. Their parent will
        either be `NULL` if they are the original CSS document that was loaded by
        [method@Gtk.CssProvider.load_from_file] or a section of type
        `GTK_CSS_SECTION_IMPORT` if it was loaded with an `@import` rule from
        a different file.

        Parameters:


        Returns:
            Optional[CssSection]: the parent section

        """
        ...

    def get_start_location(self) -> CssLocation:
        """
        Returns the location in the CSS document where this section starts.

        Parameters:


        Returns:
            CssLocation: The start location of
        this section

        """
        ...

    @classmethod
    def new(
        cls, file: Optional[Gio.File], start: CssLocation, end: CssLocation
    ) -> CssSection:
        """
        Creates a new `GtkCssSection` referring to the section
        in the given `file` from the `start` location to the
        `end` location.

        Parameters:
            file: The file this section refers to
            start: The start location
            end: The end location

        Returns:
            CssSection: a new `GtkCssSection`

        """
        ...

    def print_(self, string: GLib.String) -> None: ...
    def ref(self) -> CssSection:
        """
        Increments the reference count on `section`.

        Parameters:


        Returns:
            CssSection: the CSS section itself.

        """
        ...

    def to_string(self) -> str:
        """
        Prints the section into a human-readable text form using
        [method@Gtk.CssSection.print].

        Parameters:


        Returns:
            str: A new string.

        """
        ...

    def unref(self) -> None:
        """
        Decrements the reference count on `section`, freeing the
        structure if the reference count reaches 0.

        Parameters:


        Returns:

        """
        ...

class CssStyleChange(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class CustomFilter(Filter):
    """
    `GtkCustomFilter` determines whether to include items with a callback.

    :Constructors:

    ::

        CustomFilter(**properties)
        new(match_func:Gtk.CustomFilterFunc=None, user_data=None) -> Gtk.CustomFilter

    Object GtkCustomFilter

    Signals from GtkFilter:
      changed (GtkFilterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Filter.Props): ...

    @classmethod
    def new(
        cls, match_func: Optional[Callable[..., bool]] = None, *user_data: Any
    ) -> CustomFilter:
        """
        Creates a new filter using the given @match_func to filter
        items.

        If @match_func is %NULL, the filter matches all items.

        If the filter func changes its filtering behavior,
        gtk_filter_changed() needs to be called.

        Parameters:
            match_func: function to filter items
            user_data: user data to pass to @match_func

        Returns:
            CustomFilter: a new `GtkCustomFilter`

        """
        ...

    def set_filter_func(
        self, match_func: Optional[Callable[..., bool]] = None, *user_data: Any
    ) -> None:
        """
        Sets the function used for filtering items.

        If @match_func is %NULL, the filter matches all items.

        If the filter func changes its filtering behavior,
        gtk_filter_changed() needs to be called.

        If a previous function was set, its @user_destroy will be
        called now.

        Parameters:
            match_func: function to filter items
            user_data: user data to pass to @match_func

        Returns:

        """
        ...

class CustomFilterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        CustomFilterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: FilterClass = ...

class CustomLayout(LayoutManager):
    """
    `GtkCustomLayout` uses closures for size negotiation.

    A `GtkCustomLayout `uses closures matching to the old `GtkWidget`
    virtual functions for size negotiation, as a convenience API to
    ease the porting towards the corresponding `GtkLayoutManager
    virtual functions.

    :Constructors:

    ::

        CustomLayout(**properties)
        new(request_mode:Gtk.CustomRequestModeFunc=None, measure:Gtk.CustomMeasureFunc, allocate:Gtk.CustomAllocateFunc) -> Gtk.LayoutManager

    Object GtkCustomLayout

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutManager.Props): ...

    @classmethod
    def new(
        cls,
        request_mode: Optional[Callable[[Widget], SizeRequestMode]],
        measure: Callable[[Widget, Orientation, int], Tuple[int, int, int, int]],
        allocate: Callable[[Widget, int, int, int], None],
    ) -> CustomLayout:
        """
        Creates a new legacy layout manager.

        Legacy layout managers map to the old `GtkWidget` size negotiation
        virtual functions, and are meant to be used during the transition
        from layout containers to layout manager delegates.

        Parameters:
            request_mode: a function to retrieve
        the `GtkSizeRequestMode` of the widget using the layout; the
        default request mode is %GTK_SIZE_REQUEST_CONSTANT_SIZE
            measure: a function to measure the widget using the layout manager
            allocate: a function to allocate the children of the widget using
        the layout manager

        Returns:
            LayoutManager: the newly created `GtkCustomLayout`

        """
        ...

class CustomLayoutClass(GObject.GPointer):
    """
    :Constructors:

    ::

        CustomLayoutClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutManagerClass = ...

class CustomSorter(Sorter):
    """
    `GtkCustomSorter` is a `GtkSorter` implementation that sorts via a callback
    function.

    :Constructors:

    ::

        CustomSorter(**properties)
        new(sort_func:GLib.CompareDataFunc=None, user_data=None) -> Gtk.CustomSorter

    Object GtkCustomSorter

    Signals from GtkSorter:
      changed (GtkSorterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Sorter.Props): ...

    def new(sort_func, user_data=None): ...  # FIXME Function
    def set_sort_func(self, sort_func, user_data=None): ...  # FIXME Function

class CustomSorterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        CustomSorterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: SorterClass = ...

@deprecated("Use [class@Gtk.Window] instead")
class Dialog(
    Window, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager
):
    """
    Dialogs are a convenient way to prompt the user for a small amount
    of input.

    ![An example GtkDialog](dialog.png)

    Typical uses are to display a message, ask a question, or anything else
    that does not require extensive effort on the user’s part.

    The main area of a `GtkDialog` is called the \"content area\", and is yours
    to populate with widgets such a `GtkLabel` or `GtkEntry`, to present
    your information, questions, or tasks to the user.

    In addition, dialogs allow you to add \"action widgets\". Most commonly,
    action widgets are buttons. Depending on the platform, action widgets may
    be presented in the header bar at the top of the window, or at the bottom
    of the window. To add action widgets, create your `GtkDialog` using
    [ctor@Gtk.Dialog.new_with_buttons], or use
    [method@Gtk.Dialog.add_button], [method@Gtk.Dialog.add_buttons],
    or [method@Gtk.Dialog.add_action_widget].

    `GtkDialogs` uses some heuristics to decide whether to add a close
    button to the window decorations. If any of the action buttons use
    the response ID %GTK_RESPONSE_CLOSE or %GTK_RESPONSE_CANCEL, the
    close button is omitted.

    Clicking a button that was added as an action widget will emit the
    [signal@Gtk.Dialog::response] signal with a response ID that you specified.
    GTK will never assign a meaning to positive response IDs; these are
    entirely user-defined. But for convenience, you can use the response
    IDs in the [enum@Gtk.ResponseType] enumeration (these all have values
    less than zero). If a dialog receives a delete event, the
    [signal@Gtk.Dialog::response] signal will be emitted with the
    %GTK_RESPONSE_DELETE_EVENT response ID.

    Dialogs are created with a call to [ctor@Gtk.Dialog.new] or
    [ctor@Gtk.Dialog.new_with_buttons]. The latter is recommended; it allows
    you to set the dialog title, some convenient flags, and add buttons.

    A “modal” dialog (that is, one which freezes the rest of the application
    from user input), can be created by calling [method@Gtk.Window.set_modal]
    on the dialog. When using [ctor@Gtk.Dialog.new_with_buttons], you can also
    pass the %GTK_DIALOG_MODAL flag to make a dialog modal.

    For the simple dialog in the following example, a [class@Gtk.MessageDialog]
    would save some effort. But you’d need to create the dialog contents manually
    if you had more than a simple message in the dialog.

    An example for simple `GtkDialog` usage:

    ```c
    // Function to open a dialog box with a message
    void
    quick_message (GtkWindow *parent, char *message)
    {
    GtkWidget *dialog, *label, *content_area;
    GtkDialogFlags flags;

    // Create the widgets
    flags = GTK_DIALOG_DESTROY_WITH_PARENT;
    dialog = gtk_dialog_new_with_buttons (\"Message\",
    parent,
    flags,
    _(\"_OK\"),
    GTK_RESPONSE_NONE,
    NULL);
    content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));
    label = gtk_label_new (message);

    // Ensure that the dialog box is destroyed when the user responds

    g_signal_connect_swapped (dialog,
    \"response\",
    G_CALLBACK (gtk_window_destroy),
    dialog);

    // Add the label, and show everything we’ve added

    gtk_box_append (GTK_BOX (content_area), label);
    gtk_widget_show (dialog);
    }
    ```

    # GtkDialog as GtkBuildable

    The `GtkDialog` implementation of the `GtkBuildable` interface exposes the
    @content_area as an internal child with the name “content_area”.

    `GtkDialog` supports a custom `<action-widgets>` element, which can contain
    multiple `<action-widget>` elements. The “response” attribute specifies a
    numeric response, and the content of the element is the id of widget
    (which should be a child of the dialogs @action_area). To mark a response
    as default, set the “default” attribute of the `<action-widget>` element
    to true.

    `GtkDialog` supports adding action widgets by specifying “action” as
    the “type” attribute of a `<child>` element. The widget will be added
    either to the action area or the headerbar of the dialog, depending
    on the “use-header-bar” property. The response id has to be associated
    with the action widget using the `<action-widgets>` element.

    An example of a `GtkDialog` UI definition fragment:

    ```xml
    <object class=\"GtkDialog\" id=\"dialog1\">
    <child type=\"action\">
    <object class=\"GtkButton\" id=\"button_cancel\"/>
    </child>
    <child type=\"action\">
    <object class=\"GtkButton\" id=\"button_ok\">
    </object>
    </child>
    <action-widgets>
    <action-widget response=\"cancel\">button_cancel</action-widget>
    <action-widget response=\"ok\" default=\"true\">button_ok</action-widget>
    </action-widgets>
    </object>
    ```

    # Accessibility

    `GtkDialog` uses the %GTK_ACCESSIBLE_ROLE_DIALOG role.

    :Constructors:

    ::

        Dialog(**properties)
        new() -> Gtk.Widget

    Object GtkDialog

    Signals from GtkDialog:
      response (gint)
      close ()

    Properties from GtkDialog:
      use-header-bar -> gint: use-header-bar

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Window.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ):
        use_header_bar: int
        """
        %TRUE if the dialog uses a headerbar for action buttons
        instead of the action-area.

        For technical reasons, this property is declared as an integer
        property, but you should only set it to %TRUE or %FALSE.

        ## Creating a dialog with headerbar

        Builtin `GtkDialog` subclasses such as [class@Gtk.ColorChooserDialog]
        set this property according to platform conventions (using the
        [property@Gtk.Settings:gtk-dialogs-use-header] setting).

        Here is how you can achieve the same:

        ```c
        g_object_get (settings, \"gtk-dialogs-use-header\", &header, NULL);
        dialog = g_object_new (GTK_TYPE_DIALOG, header, TRUE, NULL);
        ```
        """

    props: Props = ...
    parent_instance: Window = ...
    def __init__(
        self,
        use_header_bar: int = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    @deprecated("Use [class@Gtk.Window] instead")
    def add_action_widget(self, child: Widget, response_id: int) -> None:
        """
        Adds an activatable widget to the action area of a `GtkDialog`.

        GTK connects a signal handler that will emit the
        [signal@Gtk.Dialog::response] signal on the dialog when the widget
        is activated. The widget is appended to the end of the dialog’s action
        area.

        If you want to add a non-activatable widget, simply pack it into
        the @action_area field of the `GtkDialog` struct.

        Parameters:
            child: an activatable widget
            response_id: response ID for @child

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.Window] instead")
    def add_button(self, button_text: str, response_id: int) -> Widget:
        """
        Adds a button with the given text.

        GTK arranges things so that clicking the button will emit the
        [signal@Gtk.Dialog::response] signal with the given @response_id.
        The button is appended to the end of the dialog’s action area.
        The button widget is returned, but usually you don’t need it.

        Parameters:
            button_text: text of button
            response_id: response ID for the button

        Returns:
            Widget: the `GtkButton` widget that was added

        """
        ...

    def add_buttons(self, *args): ...  # FIXME Function
    def do_close(self) -> None: ...
    def do_response(self, response_id: int) -> None:
        """
        Emits the ::response signal with the given response ID.

        Used to indicate that the user has responded to the dialog in some way.

        Parameters:
            response_id: response ID

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.Window] instead")
    def get_content_area(self) -> Box:
        """
        Returns the content area of @dialog.

        Parameters:


        Returns:
            Box: the content area `GtkBox`.

        """
        ...

    @deprecated("Use [class@Gtk.Window] instead")
    def get_header_bar(self) -> HeaderBar:
        """
        Returns the header bar of @dialog.

        Note that the headerbar is only used by the dialog if the
        [property@Gtk.Dialog:use-header-bar] property is %TRUE.

        Parameters:


        Returns:
            HeaderBar: the header bar

        """
        ...

    @deprecated("Use [class@Gtk.Window] instead")
    def get_response_for_widget(self, widget: Widget) -> int:
        """
        Gets the response id of a widget in the action area
        of a dialog.

        Parameters:
            widget: a widget in the action area of @dialog

        Returns:
            int: the response id of @widget, or %GTK_RESPONSE_NONE
        if @widget doesn’t have a response id set.

        """
        ...

    @deprecated("Use [class@Gtk.Window] instead")
    def get_widget_for_response(self, response_id: int) -> Optional[Widget]:
        """
        Gets the widget button that uses the given response ID in the action area
        of a dialog.

        Parameters:
            response_id: the response ID used by the @dialog widget

        Returns:
            Optional[Widget]: the @widget button that uses the given
        @response_id

        """
        ...

    @deprecated("Use [class@Gtk.Window] instead")
    @classmethod
    def new(cls) -> Dialog:
        """
        Creates a new dialog box.

        Widgets should not be packed into the `GtkWindow`
        directly, but into the @content_area and @action_area,
        as described above.

        Parameters:


        Returns:
            Widget: the new dialog as a `GtkWidget`

        """
        ...

    @deprecated("Use [class@Gtk.Window] instead")
    def response(self, response_id: int) -> None:
        """
        Emits the ::response signal with the given response ID.

        Used to indicate that the user has responded to the dialog in some way.

        Parameters:
            response_id: response ID

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.Window] instead")
    def set_default_response(self, response_id: int) -> None:
        """
        Sets the default widget for the dialog based on the response ID.

        Pressing “Enter” normally activates the default widget.

        Parameters:
            response_id: a response ID

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.Window] instead")
    def set_response_sensitive(self, response_id: int, setting: bool) -> None:
        """
        A convenient way to sensitize/desensitize dialog buttons.

        Calls `gtk_widget_set_sensitive (widget, @setting)`
        for each widget in the dialog’s action area with the given @response_id.

        Parameters:
            response_id: a response ID
            setting: %TRUE for sensitive

        Returns:

        """
        ...

class DialogClass(GObject.GPointer):
    """
    :Constructors:

    ::

        DialogClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WindowClass = ...
    response: Callable[[Dialog, int], None] = ...
    close: Callable[[Dialog], None] = ...
    padding: list[None] = ...

class DirectoryList(GObject.Object, Gio.ListModel):
    """
    `GtkDirectoryList` is a list model that wraps g_file_enumerate_children_async().

    It presents a `GListModel` and fills it asynchronously with the `GFileInfo`s
    returned from that function.

    Enumeration will start automatically when a the
    [property@Gtk.DirectoryList:file] property is set.

    While the `GtkDirectoryList` is being filled, the
    [property@Gtk.DirectoryList:loading] property will be set to %TRUE. You can
    listen to that property if you want to show information like a `GtkSpinner`
    or a \"Loading...\" text.

    If loading fails at any point, the [property@Gtk.DirectoryList:error]
    property will be set to give more indication about the failure.

    The `GFileInfo`s returned from a `GtkDirectoryList` have the \"standard::file\"
    attribute set to the `GFile` they refer to. This way you can get at the file
    that is referred to in the same way you would via g_file_enumerator_get_child().
    This means you do not need access to the `GtkDirectoryList`, but can access
    the `GFile` directly from the `GFileInfo` when operating with a `GtkListView`
    or similar.

    :Constructors:

    ::

        DirectoryList(**properties)
        new(attributes:str=None, file:Gio.File=None) -> Gtk.DirectoryList

    Object GtkDirectoryList

    Properties from GtkDirectoryList:
      attributes -> gchararray: attributes
      error -> GError: error
      file -> GFile: file
      io-priority -> gint: io-priority
      item-type -> GType: item-type
      loading -> gboolean: loading
      monitored -> gboolean: monitored
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gio.ListModel.Props):
        attributes: Optional[str]
        """
        The attributes to query.
        """
        error: Optional[GLib.Error]
        """
        Error encountered while loading files.
        """
        file: Optional[Gio.File]
        """
        File to query.
        """
        io_priority: int
        """
        Priority used when loading.
        """
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        loading: bool
        """
        %TRUE if files are being loaded.
        """
        monitored: bool
        """
        %TRUE if the directory is monitored for changed.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """

    props: Props = ...
    def __init__(
        self,
        attributes: Optional[str] = ...,
        file: Optional[Gio.File] = ...,
        io_priority: int = ...,
        monitored: bool = ...,
    ): ...
    def get_attributes(self) -> Optional[str]:
        """
        Gets the attributes queried on the children.

        Parameters:


        Returns:
            Optional[str]: The queried attributes

        """
        ...

    def get_error(self) -> Optional[GLib.Error]:
        """
        Gets the loading error, if any.

        If an error occurs during the loading process, the loading process
        will finish and this property allows querying the error that happened.
        This error will persist until a file is loaded again.

        An error being set does not mean that no files were loaded, and all
        successfully queried files will remain in the list.

        Parameters:


        Returns:
            Optional[GLib.Error]: The loading error or %NULL if
        loading finished successfully

        """
        ...

    def get_file(self) -> Optional[Gio.File]:
        """
        Gets the file whose children are currently enumerated.

        Parameters:


        Returns:
            Optional[Gio.File]: The file whose children are enumerated

        """
        ...

    def get_io_priority(self) -> int:
        """
        Gets the IO priority set via gtk_directory_list_set_io_priority().

        Parameters:


        Returns:
            int: The IO priority.

        """
        ...

    def get_monitored(self) -> bool:
        """
        Returns whether the directory list is monitoring
        the directory for changes.

        Parameters:


        Returns:
            bool: %TRUE if the directory is monitored

        """
        ...

    def is_loading(self) -> bool:
        """
        Returns %TRUE if the children enumeration is currently in
        progress.

        Files will be added to @self from time to time while loading is
        going on. The order in which are added is undefined and may change
        in between runs.

        Parameters:


        Returns:
            bool: %TRUE if @self is loading

        """
        ...

    @classmethod
    def new(
        cls, attributes: Optional[str] = None, file: Optional[Gio.File] = None
    ) -> DirectoryList:
        """
        Creates a new `GtkDirectoryList`.

        The `GtkDirectoryList` is querying the given @file
        with the given @attributes.

        Parameters:
            attributes: The attributes to query with
            file: The file to query

        Returns:
            DirectoryList: a new `GtkDirectoryList`

        """
        ...

    def set_attributes(self, attributes: Optional[str] = None) -> None:
        """
        Sets the @attributes to be enumerated and starts the enumeration.

        If @attributes is %NULL, the list of file infos will still be created, it will just
        not contain any extra attributes.

        Parameters:
            attributes: the attributes to enumerate

        Returns:

        """
        ...

    def set_file(self, file: Optional[Gio.File] = None) -> None:
        """
        Sets the @file to be enumerated and starts the enumeration.

        If @file is %NULL, the result will be an empty list.

        Parameters:
            file: the `GFile` to be enumerated

        Returns:

        """
        ...

    def set_io_priority(self, io_priority: int) -> None:
        """
        Sets the IO priority to use while loading directories.

        Setting the priority while @self is loading will reprioritize the
        ongoing load as soon as possible.

        The default IO priority is %G_PRIORITY_DEFAULT, which is higher than
        the GTK redraw priority. If you are loading a lot of directories in
        parallel, lowering it to something like %G_PRIORITY_DEFAULT_IDLE
        may increase responsiveness.

        Parameters:
            io_priority: IO priority to use

        Returns:

        """
        ...

    def set_monitored(self, monitored: bool) -> None:
        """
        Sets whether the directory list will monitor the directory
        for changes.

        If monitoring is enabled, the ::items-changed signal will
        be emitted when the directory contents change.


        When monitoring is turned on after the initial creation
        of the directory list, the directory is reloaded to avoid
        missing files that appeared between the initial loading
        and when monitoring was turned on.

        Parameters:
            monitored: %TRUE to monitor the directory for changes

        Returns:

        """
        ...

class DirectoryListClass(GObject.GPointer):
    """
    :Constructors:

    ::

        DirectoryListClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class DragIcon(Widget, Accessible, Buildable, ConstraintTarget, Native, Root):
    """
    `GtkDragIcon` is a `GtkRoot` implementation for drag icons.

    A drag icon moves with the pointer during a Drag-and-Drop operation
    and is destroyed when the drag ends.

    To set up a drag icon and associate it with an ongoing drag operation,
    use [func@Gtk.DragIcon.get_for_drag] to get the icon for a drag. You can
    then use it like any other widget and use [method@Gtk.DragIcon.set_child]
    to set whatever widget should be used for the drag icon.

    Keep in mind that drag icons do not allow user input.

    :Constructors:

    ::

        DragIcon(**properties)

    Object GtkDragIcon

    Properties from GtkDragIcon:
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
    ):
        child: Optional[Widget]
        """
        The widget to display as drag icon.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    @staticmethod
    def create_widget_for_value(value: Any) -> Optional[Widget]:
        """
        Creates a widget that can be used as a drag icon for the given
        @value.

        Supported types include strings, `GdkRGBA` and `GtkTextBuffer`.
        If GTK does not know how to create a widget for a given value,
        it will return %NULL.

        This method is used to set the default drag icon on drag-and-drop
        operations started by `GtkDragSource`, so you don't need to set
        a drag icon using this function there.

        Parameters:
            value: a `GValue`

        Returns:
            Optional[Widget]: A new `GtkWidget`
        for displaying @value as a drag icon.

        """
        ...

    def get_child(self) -> Optional[Widget]:
        """
        Gets the widget currently used as drag icon.

        Parameters:


        Returns:
            Optional[Widget]: The drag icon

        """
        ...

    @staticmethod
    def get_for_drag(drag: Gdk.Drag) -> Widget:
        """
        Gets the `GtkDragIcon` in use with @drag.

        If no drag icon exists yet, a new one will be created
        and shown.

        Parameters:
            drag: a `GdkDrag`

        Returns:
            Widget: the `GtkDragIcon`

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the widget to display as the drag icon.

        Parameters:
            child: a `GtkWidget`

        Returns:

        """
        ...

    @staticmethod
    def set_from_paintable(
        drag: Gdk.Drag, paintable: Gdk.Paintable, hot_x: int, hot_y: int
    ) -> None:
        """
        Creates a `GtkDragIcon` that shows @paintable, and associates
        it with the drag operation.

        The hotspot position on the paintable is aligned with the
        hotspot of the cursor.

        Parameters:
            drag: a `GdkDrag`
            paintable: a `GdkPaintable` to display
            hot_x: X coordinate of the hotspot
            hot_y: Y coordinate of the hotspot

        Returns:

        """
        ...

class DragIconClass(GObject.GPointer):
    """
    :Constructors:

    ::

        DragIconClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class DragSource(GestureSingle):
    """
    `GtkDragSource` is an event controller to initiate Drag-And-Drop operations.

    `GtkDragSource` can be set up with the necessary
    ingredients for a DND operation ahead of time. This includes
    the source for the data that is being transferred, in the form
    of a [class@Gdk.ContentProvider], the desired action, and the icon to
    use during the drag operation. After setting it up, the drag
    source must be added to a widget as an event controller, using
    [method@Gtk.Widget.add_controller].

    ```c
    static void
    my_widget_init (MyWidget *self)
    {
    GtkDragSource *drag_source = gtk_drag_source_new ();

    g_signal_connect (drag_source, \"prepare\", G_CALLBACK (on_drag_prepare), self);
    g_signal_connect (drag_source, \"drag-begin\", G_CALLBACK (on_drag_begin), self);

    gtk_widget_add_controller (GTK_WIDGET (self), GTK_EVENT_CONTROLLER (drag_source));
    }
    ```

    Setting up the content provider and icon ahead of time only makes
    sense when the data does not change. More commonly, you will want
    to set them up just in time. To do so, `GtkDragSource` has
    [signal@Gtk.DragSource::prepare] and [signal@Gtk.DragSource::drag-begin]
    signals.

    The ::prepare signal is emitted before a drag is started, and
    can be used to set the content provider and actions that the
    drag should be started with.

    ```c
    static GdkContentProvider *
    on_drag_prepare (GtkDragSource *source,
    double x,
    double y,
    MyWidget *self)
    {
    // This widget supports two types of content: GFile objects
    // and GdkPixbuf objects; GTK will handle the serialization
    // of these types automatically
    GFile *file = my_widget_get_file (self);
    GdkPixbuf *pixbuf = my_widget_get_pixbuf (self);

    return gdk_content_provider_new_union ((GdkContentProvider *[2]) {
    gdk_content_provider_new_typed (G_TYPE_FILE, file),
    gdk_content_provider_new_typed (GDK_TYPE_PIXBUF, pixbuf),
    }, 2);
    }
    ```

    The ::drag-begin signal is emitted after the `GdkDrag` object has
    been created, and can be used to set up the drag icon.

    ```c
    static void
    on_drag_begin (GtkDragSource *source,
    GdkDrag *drag,
    MyWidget *self)
    {
    // Set the widget as the drag icon
    GdkPaintable *paintable = gtk_widget_paintable_new (GTK_WIDGET (self));
    gtk_drag_source_set_icon (source, paintable, 0, 0);
    g_object_unref (paintable);
    }
    ```

    During the DND operation, `GtkDragSource` emits signals that
    can be used to obtain updates about the status of the operation,
    but it is not normally necessary to connect to any signals,
    except for one case: when the supported actions include
    %GDK_ACTION_MOVE, you need to listen for the
    [signal@Gtk.DragSource::drag-end] signal and delete the
    data after it has been transferred.

    :Constructors:

    ::

        DragSource(**properties)
        new() -> Gtk.DragSource

    Object GtkDragSource

    Signals from GtkDragSource:
      prepare (gdouble, gdouble) -> GdkContentProvider
      drag-begin (GdkDrag)
      drag-end (GdkDrag, gboolean)
      drag-cancel (GdkDrag, GdkDragCancelReason) -> gboolean

    Properties from GtkDragSource:
      content -> GdkContentProvider: content
      actions -> GdkDragAction: actions

    Properties from GtkGestureSingle:
      touch-only -> gboolean: touch-only
      exclusive -> gboolean: exclusive
      button -> guint: button

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(GestureSingle.Props):
        actions: Gdk.DragAction
        """
        The actions that are supported by drag operations from the source.

        Note that you must handle the [signal@Gtk.DragSource::drag-end] signal
        if the actions include %GDK_ACTION_MOVE.
        """
        content: Optional[Gdk.ContentProvider]
        """
        The data that is offered by drag operations from this source.
        """

    props: Props = ...
    def __init__(
        self,
        actions: Gdk.DragAction = ...,
        content: Optional[Gdk.ContentProvider] = ...,
        button: int = ...,
        exclusive: bool = ...,
        touch_only: bool = ...,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def drag_cancel(self) -> None:
        """
        Cancels a currently ongoing drag operation.

        Parameters:


        Returns:

        """
        ...

    def get_actions(self) -> Gdk.DragAction:
        """
        Gets the actions that are currently set on the `GtkDragSource`.

        Parameters:


        Returns:
            Gdk.DragAction: the actions set on @source

        """
        ...

    def get_content(self) -> Optional[Gdk.ContentProvider]:
        """
        Gets the current content provider of a `GtkDragSource`.

        Parameters:


        Returns:
            Optional[Gdk.ContentProvider]: the `GdkContentProvider` of @source

        """
        ...

    def get_drag(self) -> Optional[Gdk.Drag]:
        """
        Returns the underlying `GdkDrag` object for an ongoing drag.

        Parameters:


        Returns:
            Optional[Gdk.Drag]: the `GdkDrag` of the current
        drag operation

        """
        ...

    @classmethod
    def new(cls) -> DragSource:
        """
        Creates a new `GtkDragSource` object.

        Parameters:


        Returns:
            DragSource: the new `GtkDragSource`

        """
        ...

    def set_actions(self, actions: Gdk.DragAction) -> None:
        """
        Sets the actions on the `GtkDragSource`.

        During a DND operation, the actions are offered to potential
        drop targets. If @actions include %GDK_ACTION_MOVE, you need
        to listen to the [signal@Gtk.DragSource::drag-end] signal and
        handle @delete_data being %TRUE.

        This function can be called before a drag is started,
        or in a handler for the [signal@Gtk.DragSource::prepare] signal.

        Parameters:
            actions: the actions to offer

        Returns:

        """
        ...

    def set_content(self, content: Optional[Gdk.ContentProvider] = None) -> None:
        """
        Sets a content provider on a `GtkDragSource`.

        When the data is requested in the cause of a DND operation,
        it will be obtained from the content provider.

        This function can be called before a drag is started,
        or in a handler for the [signal@Gtk.DragSource::prepare] signal.

        You may consider setting the content provider back to
        %NULL in a [signal@Gtk.DragSource::drag-end] signal handler.

        Parameters:
            content: a `GdkContentProvider`

        Returns:

        """
        ...

    def set_icon(
        self, paintable: Optional[Gdk.Paintable], hot_x: int, hot_y: int
    ) -> None:
        """
        Sets a paintable to use as icon during DND operations.

        The hotspot coordinates determine the point on the icon
        that gets aligned with the hotspot of the cursor.

        If @paintable is %NULL, a default icon is used.

        This function can be called before a drag is started, or in
        a [signal@Gtk.DragSource::prepare] or
        [signal@Gtk.DragSource::drag-begin] signal handler.

        Parameters:
            paintable: the `GdkPaintable` to use as icon
            hot_x: the hotspot X coordinate on the icon
            hot_y: the hotspot Y coordinate on the icon

        Returns:

        """
        ...

class DragSourceClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class DrawingArea(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkDrawingArea` is a widget that allows drawing with cairo.

    ![An example GtkDrawingArea](drawingarea.png)

    It’s essentially a blank widget; you can draw on it. After
    creating a drawing area, the application may want to connect to:

    - The [signal@Gtk.Widget::realize] signal to take any necessary actions
    when the widget is instantiated on a particular display.
    (Create GDK resources in response to this signal.)

    - The [signal@Gtk.DrawingArea::resize] signal to take any necessary
    actions when the widget changes size.

    - Call [method@Gtk.DrawingArea.set_draw_func] to handle redrawing the
    contents of the widget.

    The following code portion demonstrates using a drawing
    area to display a circle in the normal widget foreground
    color.

    ## Simple GtkDrawingArea usage

    ```c
    static void
    draw_function (GtkDrawingArea *area,
    cairo_t *cr,
    int width,
    int height,
    gpointer data)
    {
    GdkRGBA color;

    cairo_arc (cr,
    width / 2.0, height / 2.0,
    MIN (width, height) / 2.0,
    0, 2 * G_PI);

    gtk_widget_get_color (GTK_WIDGET (area),
    &color);
    gdk_cairo_set_source_rgba (cr, &color);

    cairo_fill (cr);
    }

    int
    main (int argc, char **argv)
    {
    gtk_init ();

    GtkWidget *area = gtk_drawing_area_new ();
    gtk_drawing_area_set_content_width (GTK_DRAWING_AREA (area), 100);
    gtk_drawing_area_set_content_height (GTK_DRAWING_AREA (area), 100);
    gtk_drawing_area_set_draw_func (GTK_DRAWING_AREA (area),
    draw_function,
    NULL, NULL);
    return 0;
    }
    ```

    The draw function is normally called when a drawing area first comes
    onscreen, or when it’s covered by another window and then uncovered.
    You can also force a redraw by adding to the “damage region” of the
    drawing area’s window using [method@Gtk.Widget.queue_draw].
    This will cause the drawing area to call the draw function again.

    The available routines for drawing are documented in the
    [Cairo documentation](https://www.cairographics.org/manual/); GDK
    offers additional API to integrate with Cairo, like [func@Gdk.cairo_set_source_rgba]
    or [func@Gdk.cairo_set_source_pixbuf].

    To receive mouse events on a drawing area, you will need to use
    event controllers. To receive keyboard events, you will need to set
    the “can-focus” property on the drawing area, and you should probably
    draw some user-visible indication that the drawing area is focused.

    If you need more complex control over your widget, you should consider
    creating your own `GtkWidget` subclass.

    :Constructors:

    ::

        DrawingArea(**properties)
        new() -> Gtk.Widget

    Object GtkDrawingArea

    Signals from GtkDrawingArea:
      resize (gint, gint)

    Properties from GtkDrawingArea:
      content-width -> gint: content-width
      content-height -> gint: content-height

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        content_height: int
        """
        The content height.
        """
        content_width: int
        """
        The content width.
        """

    props: Props = ...
    widget: Widget = ...
    def __init__(
        self,
        content_height: int = ...,
        content_width: int = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def do_resize(self, width: int, height: int) -> None: ...
    def get_content_height(self) -> int:
        """
        Retrieves the content height of the `GtkDrawingArea`.

        Parameters:


        Returns:
            int: The height requested for content of the drawing area

        """
        ...

    def get_content_width(self) -> int:
        """
        Retrieves the content width of the `GtkDrawingArea`.

        Parameters:


        Returns:
            int: The width requested for content of the drawing area

        """
        ...

    @classmethod
    def new(cls) -> DrawingArea:
        """
        Creates a new drawing area.

        Parameters:


        Returns:
            Widget: a new `GtkDrawingArea`

        """
        ...

    def set_content_height(self, height: int) -> None:
        """
        Sets the desired height of the contents of the drawing area.

        Note that because widgets may be allocated larger sizes than they
        requested, it is possible that the actual height passed to your draw
        function is larger than the height set here. You can use
        [method@Gtk.Widget.set_valign] to avoid that.

        If the height is set to 0 (the default), the drawing area may disappear.

        Parameters:
            height: the height of contents

        Returns:

        """
        ...

    def set_content_width(self, width: int) -> None:
        """
        Sets the desired width of the contents of the drawing area.

        Note that because widgets may be allocated larger sizes than they
        requested, it is possible that the actual width passed to your draw
        function is larger than the width set here. You can use
        [method@Gtk.Widget.set_halign] to avoid that.

        If the width is set to 0 (the default), the drawing area may disappear.

        Parameters:
            width: the width of contents

        Returns:

        """
        ...

    def set_draw_func(
        self, draw_func: Optional[Callable[..., None]] = None, *user_data: Any
    ) -> None:
        """
        Setting a draw function is the main thing you want to do when using
        a drawing area.

        The draw function is called whenever GTK needs to draw the contents
        of the drawing area to the screen.

        The draw function will be called during the drawing stage of GTK.
        In the drawing stage it is not allowed to change properties of any
        GTK widgets or call any functions that would cause any properties
        to be changed. You should restrict yourself exclusively to drawing
        your contents in the draw function.

        If what you are drawing does change, call [method@Gtk.Widget.queue_draw]
        on the drawing area. This will cause a redraw and will call @draw_func again.

        Parameters:
            draw_func: callback that lets you draw
        the drawing area's contents
            user_data: user data passed to @draw_func

        Returns:

        """
        ...

class DrawingAreaClass(GObject.GPointer):
    """
    :Constructors:

    ::

        DrawingAreaClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    resize: Callable[[DrawingArea, int, int], None] = ...
    padding: list[None] = ...

class DropControllerMotion(EventController):
    """
    `GtkDropControllerMotion` is an event controller tracking
    the pointer during Drag-and-Drop operations.

    It is modeled after [class@Gtk.EventControllerMotion] so if you
    have used that, this should feel really familiar.

    This controller is not able to accept drops, use [class@Gtk.DropTarget]
    for that purpose.

    :Constructors:

    ::

        DropControllerMotion(**properties)
        new() -> Gtk.EventController

    Object GtkDropControllerMotion

    Signals from GtkDropControllerMotion:
      enter (gdouble, gdouble)
      leave ()
      motion (gdouble, gdouble)

    Properties from GtkDropControllerMotion:
      contains-pointer -> gboolean: contains-pointer
      drop -> GdkDrop: drop
      is-pointer -> gboolean: is-pointer

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props):
        contains_pointer: bool
        """
        Whether the pointer of a Drag-and-Drop operation is in
        the controller's widget or a descendant.

        See also [property@Gtk.DropControllerMotion:is-pointer].

        When handling crossing events, this property is updated
        before [signal@Gtk.DropControllerMotion::enter], but after
        [signal@Gtk.DropControllerMotion::leave] is emitted.
        """
        drop: Optional[Gdk.Drop]
        """
        The ongoing drop operation over the controller's widget or
        its descendant.

        If no drop operation is going on, this property returns %NULL.

        The event controller should not modify the @drop, but it might
        want to query its properties.

        When handling crossing events, this property is updated
        before [signal@Gtk.DropControllerMotion::enter], but after
        [signal@Gtk.DropControllerMotion::leave] is emitted.
        """
        is_pointer: bool
        """
        Whether the pointer is in the controllers widget itself,
        as opposed to in a descendent widget.

        See also [property@Gtk.DropControllerMotion:contains-pointer].

        When handling crossing events, this property is updated
        before [signal@Gtk.DropControllerMotion::enter], but after
        [signal@Gtk.DropControllerMotion::leave] is emitted.
        """

    props: Props = ...
    def __init__(
        self,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def contains_pointer(self) -> bool:
        """
        Returns if a Drag-and-Drop operation is within the widget
        @self or one of its children.

        Parameters:


        Returns:
            bool: %TRUE if a dragging pointer is within @self or one of its children.

        """
        ...

    def get_drop(self) -> Optional[Gdk.Drop]:
        """
        Returns the `GdkDrop` of a current Drag-and-Drop operation
        over the widget of @self.

        Parameters:


        Returns:
            Optional[Gdk.Drop]: The `GdkDrop` currently
        happening within @self

        """
        ...

    def is_pointer(self) -> bool:
        """
        Returns if a Drag-and-Drop operation is within the widget
        @self, not one of its children.

        Parameters:


        Returns:
            bool: %TRUE if a dragging pointer is within @self but
        not one of its children

        """
        ...

    @classmethod
    def new(cls) -> DropControllerMotion:
        """
        Creates a new event controller that will handle pointer motion
        events during drag and drop.

        Parameters:


        Returns:
            EventController: a new `GtkDropControllerMotion`

        """
        ...

class DropControllerMotionClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class DropDown(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkDropDown` is a widget that allows the user to choose an item
    from a list of options.

    ![An example GtkDropDown](drop-down.png)

    The `GtkDropDown` displays the [selected][property@Gtk.DropDown:selected]
    choice.

    The options are given to `GtkDropDown` in the form of `GListModel`
    and how the individual options are represented is determined by
    a [class@Gtk.ListItemFactory]. The default factory displays simple strings,
    and adds a checkmark to the selected item in the popup.

    To set your own factory, use [method@Gtk.DropDown.set_factory]. It is
    possible to use a separate factory for the items in the popup, with
    [method@Gtk.DropDown.set_list_factory].

    `GtkDropDown` knows how to obtain strings from the items in a
    [class@Gtk.StringList]; for other models, you have to provide an expression
    to find the strings via [method@Gtk.DropDown.set_expression].

    `GtkDropDown` can optionally allow search in the popup, which is
    useful if the list of options is long. To enable the search entry,
    use [method@Gtk.DropDown.set_enable_search].

    Here is a UI definition example for `GtkDropDown` with a simple model:

    ```xml
    <object class=\"GtkDropDown\">
    <property name=\"model\">
    <object class=\"GtkStringList\">
    <items>
    <item translatable=\"yes\">Factory</item>
    <item translatable=\"yes\">Home</item>
    <item translatable=\"yes\">Subway</item>
    </items>
    </object>
    </property>
    </object>
    ```

    To learn more about the list widget framework, see the
    [overview](section-list-widget.html).

    ## CSS nodes

    `GtkDropDown` has a single CSS node with name dropdown,
    with the button and popover nodes as children.

    ## Accessibility

    `GtkDropDown` uses the %GTK_ACCESSIBLE_ROLE_COMBO_BOX role.

    :Constructors:

    ::

        DropDown(**properties)
        new(model:Gio.ListModel=None, expression:Gtk.Expression=None) -> Gtk.Widget
        new_from_strings(strings:list) -> Gtk.Widget

    Object GtkDropDown

    Signals from GtkDropDown:
      activate ()

    Properties from GtkDropDown:
      factory -> GtkListItemFactory: factory
      header-factory -> GtkListItemFactory: header-factory
      list-factory -> GtkListItemFactory: list-factory
      model -> GListModel: model
      selected -> guint: selected
      selected-item -> GObject: selected-item
      enable-search -> gboolean: enable-search
      expression -> GtkExpression: expression
      show-arrow -> gboolean: show-arrow
      search-match-mode -> GtkStringFilterMatchMode: search-match-mode

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        enable_search: bool
        """
        Whether to show a search entry in the popup.

        Note that search requires [property@Gtk.DropDown:expression]
        to be set.
        """
        expression: Optional[Expression]
        """
        An expression to evaluate to obtain strings to match against the search
        term.

        See [property@Gtk.DropDown:enable-search] for how to enable search.
        If [property@Gtk.DropDown:factory] is not set, the expression is also
        used to bind strings to labels produced by a default factory.
        """
        factory: Optional[ListItemFactory]
        """
        Factory for populating list items.
        """
        header_factory: Optional[ListItemFactory]
        """
        The factory for creating header widgets for the popup.
        """
        list_factory: Optional[ListItemFactory]
        """
        The factory for populating list items in the popup.

        If this is not set, [property@Gtk.DropDown:factory] is used.
        """
        model: Optional[Gio.ListModel]
        """
        Model for the displayed items.
        """
        search_match_mode: StringFilterMatchMode
        """
        The match mode for the search filter.
        """
        selected: int
        """
        The position of the selected item.

        If no item is selected, the property has the value
        %GTK_INVALID_LIST_POSITION.
        """
        selected_item: Optional[GObject.Object]
        """
        The selected item.
        """
        show_arrow: bool
        """
        Whether to show an arrow within the GtkDropDown widget.
        """

    props: Props = ...
    def __init__(
        self,
        enable_search: bool = ...,
        expression: Optional[Expression] = ...,
        factory: Optional[ListItemFactory] = ...,
        header_factory: Optional[ListItemFactory] = ...,
        list_factory: Optional[ListItemFactory] = ...,
        model: Optional[Gio.ListModel] = ...,
        search_match_mode: StringFilterMatchMode = ...,
        selected: int = ...,
        show_arrow: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_enable_search(self) -> bool:
        """
        Returns whether search is enabled.

        Parameters:


        Returns:
            bool: %TRUE if the popup includes a search entry

        """
        ...

    def get_expression(self) -> Optional[Expression]:
        """
        Gets the expression set that is used to obtain strings from items.

        See [method@Gtk.DropDown.set_expression].

        Parameters:


        Returns:
            Optional[Expression]: a `GtkExpression`

        """
        ...

    def get_factory(self) -> Optional[ListItemFactory]:
        """
        Gets the factory that's currently used to populate list items.

        The factory returned by this function is always used for the
        item in the button. It is also used for items in the popup
        if [property@Gtk.DropDown:list-factory] is not set.

        Parameters:


        Returns:
            Optional[ListItemFactory]: The factory in use

        """
        ...

    def get_header_factory(self) -> Optional[ListItemFactory]:
        """
        Gets the factory that's currently used to create header widgets for the popup.

        Parameters:


        Returns:
            Optional[ListItemFactory]: The factory in use

        """
        ...

    def get_list_factory(self) -> Optional[ListItemFactory]:
        """
        Gets the factory that's currently used to populate list items in the popup.

        Parameters:


        Returns:
            Optional[ListItemFactory]: The factory in use

        """
        ...

    def get_model(self) -> Optional[Gio.ListModel]:
        """
        Gets the model that provides the displayed items.

        Parameters:


        Returns:
            Optional[Gio.ListModel]: The model in use

        """
        ...

    def get_search_match_mode(self) -> StringFilterMatchMode:
        """
        Returns the match mode that the search filter is using.

        Parameters:


        Returns:
            StringFilterMatchMode: the match mode of the search filter

        """
        ...

    def get_selected(self) -> int:
        """
        Gets the position of the selected item.

        Parameters:


        Returns:
            int: the position of the selected item, or %GTK_INVALID_LIST_POSITION
        if not item is selected

        """
        ...

    def get_selected_item(self) -> Optional[GObject.Object]:
        """
        Gets the selected item. If no item is selected, %NULL is returned.

        Parameters:


        Returns:
            Optional[GObject.Object]: The selected item

        """
        ...

    def get_show_arrow(self) -> bool:
        """
        Returns whether to show an arrow within the widget.

        Parameters:


        Returns:
            bool: %TRUE if an arrow will be shown.

        """
        ...

    @classmethod
    def new(
        cls,
        model: Optional[Gio.ListModel] = None,
        expression: Optional[Expression] = None,
    ) -> DropDown:
        """
        Creates a new `GtkDropDown`.

        You may want to call [method@Gtk.DropDown.set_factory]
        to set up a way to map its items to widgets.

        Parameters:
            model: the model to use
            expression: the expression to use

        Returns:
            Widget: a new `GtkDropDown`

        """
        ...

    @classmethod
    def new_from_strings(cls, strings: Sequence[str]) -> DropDown:
        """
        Creates a new `GtkDropDown` that is populated with
        the strings.

        Parameters:
            strings: The strings to put in the dropdown

        Returns:
            Widget: a new `GtkDropDown`

        """
        ...

    def set_enable_search(self, enable_search: bool) -> None:
        """
        Sets whether a search entry will be shown in the popup that
        allows to search for items in the list.

        Note that [property@Gtk.DropDown:expression] must be set for
        search to work.

        Parameters:
            enable_search: whether to enable search

        Returns:

        """
        ...

    def set_expression(self, expression: Optional[Expression] = None) -> None:
        """
        Sets the expression that gets evaluated to obtain strings from items.

        This is used for search in the popup. The expression must have
        a value type of %G_TYPE_STRING.

        Parameters:
            expression: a `GtkExpression`

        Returns:

        """
        ...

    def set_factory(self, factory: Optional[ListItemFactory] = None) -> None:
        """
        Sets the `GtkListItemFactory` to use for populating list items.

        Parameters:
            factory: the factory to use

        Returns:

        """
        ...

    def set_header_factory(self, factory: Optional[ListItemFactory] = None) -> None:
        """
        Sets the `GtkListItemFactory` to use for creating header widgets for the popup.

        Parameters:
            factory: the factory to use

        Returns:

        """
        ...

    def set_list_factory(self, factory: Optional[ListItemFactory] = None) -> None:
        """
        Sets the `GtkListItemFactory` to use for populating list items in the popup.

        Parameters:
            factory: the factory to use

        Returns:

        """
        ...

    def set_model(self, model: Optional[Gio.ListModel] = None) -> None:
        """
        Sets the `GListModel` to use.

        Parameters:
            model: the model to use

        Returns:

        """
        ...

    def set_search_match_mode(self, search_match_mode: StringFilterMatchMode) -> None:
        """
        Sets the match mode for the search filter.

        Parameters:
            search_match_mode: the new match mode

        Returns:

        """
        ...

    def set_selected(self, position: int) -> None:
        """
        Selects the item at the given position.

        Parameters:
            position: the position of the item to select, or %GTK_INVALID_LIST_POSITION

        Returns:

        """
        ...

    def set_show_arrow(self, show_arrow: bool) -> None:
        """
        Sets whether an arrow will be displayed within the widget.

        Parameters:
            show_arrow: whether to show an arrow within the widget

        Returns:

        """
        ...

class DropDownClass(GObject.GPointer):
    """
    :Constructors:

    ::

        DropDownClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class DropTarget(EventController):
    """
    `GtkDropTarget` is an event controller to receive Drag-and-Drop operations.

    The most basic way to use a `GtkDropTarget` to receive drops on a
    widget is to create it via [ctor@Gtk.DropTarget.new], passing in the
    `GType` of the data you want to receive and connect to the
    [signal@Gtk.DropTarget::drop] signal to receive the data:

    ```c
    static gboolean
    on_drop (GtkDropTarget *target,
    const GValue *value,
    double x,
    double y,
    gpointer data)
    {
    MyWidget *self = data;

    // Call the appropriate setter depending on the type of data
    // that we received
    if (G_VALUE_HOLDS (value, G_TYPE_FILE))
    my_widget_set_file (self, g_value_get_object (value));
    else if (G_VALUE_HOLDS (value, GDK_TYPE_PIXBUF))
    my_widget_set_pixbuf (self, g_value_get_object (value));
    else
    return FALSE;

    return TRUE;
    }

    static void
    my_widget_init (MyWidget *self)
    {
    GtkDropTarget *target =
    gtk_drop_target_new (G_TYPE_INVALID, GDK_ACTION_COPY);

    // This widget accepts two types of drop types: GFile objects
    // and GdkPixbuf objects
    gtk_drop_target_set_gtypes (target, (GTypes [2]) {
    G_TYPE_FILE,
    GDK_TYPE_PIXBUF,
    }, 2);

    g_signal_connect (target, \"drop\", G_CALLBACK (on_drop), self);
    gtk_widget_add_controller (GTK_WIDGET (self), GTK_EVENT_CONTROLLER (target));
    }
    ```

    `GtkDropTarget` supports more options, such as:

    * rejecting potential drops via the [signal@Gtk.DropTarget::accept] signal
    and the [method@Gtk.DropTarget.reject] function to let other drop
    targets handle the drop
    * tracking an ongoing drag operation before the drop via the
    [signal@Gtk.DropTarget::enter], [signal@Gtk.DropTarget::motion] and
    [signal@Gtk.DropTarget::leave] signals
    * configuring how to receive data by setting the
    [property@Gtk.DropTarget:preload] property and listening for its
    availability via the [property@Gtk.DropTarget:value] property

    However, `GtkDropTarget` is ultimately modeled in a synchronous way
    and only supports data transferred via `GType`. If you want full control
    over an ongoing drop, the [class@Gtk.DropTargetAsync] object gives you
    this ability.

    While a pointer is dragged over the drop target's widget and the drop
    has not been rejected, that widget will receive the
    %GTK_STATE_FLAG_DROP_ACTIVE state, which can be used to style the widget.

    If you are not interested in receiving the drop, but just want to update
    UI state during a Drag-and-Drop operation (e.g. switching tabs), you can
    use [class@Gtk.DropControllerMotion].

    :Constructors:

    ::

        DropTarget(**properties)
        new(type:GType, actions:Gdk.DragAction) -> Gtk.DropTarget

    Object GtkDropTarget

    Signals from GtkDropTarget:
      drop (GValue, gdouble, gdouble) -> gboolean
      enter (gdouble, gdouble) -> GdkDragAction
      leave ()
      motion (gdouble, gdouble) -> GdkDragAction
      accept (GdkDrop) -> gboolean

    Properties from GtkDropTarget:
      actions -> GdkDragAction: actions
      current-drop -> GdkDrop: current-drop
      drop -> GdkDrop: drop
      formats -> GdkContentFormats: formats
      preload -> gboolean: preload
      value -> GValue: value

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props):
        actions: Gdk.DragAction
        """
        The `GdkDragActions` that this drop target supports.
        """
        current_drop: Optional[Gdk.Drop]
        """
        The `GdkDrop` that is currently being performed.
        """
        formats: Optional[Gdk.ContentFormats]
        """
        The `GdkContentFormats` that determine the supported data formats.
        """
        preload: bool
        """
        Whether the drop data should be preloaded when the pointer is only
        hovering over the widget but has not been released.

        Setting this property allows finer grained reaction to an ongoing
        drop at the cost of loading more data.

        The default value for this property is %FALSE to avoid downloading
        huge amounts of data by accident.

        For example, if somebody drags a full document of gigabytes of text
        from a text editor across a widget with a preloading drop target,
        this data will be downloaded, even if the data is ultimately dropped
        elsewhere.

        For a lot of data formats, the amount of data is very small (like
        %GDK_TYPE_RGBA), so enabling this property does not hurt at all.
        And for local-only Drag-and-Drop operations, no data transfer is done,
        so enabling it there is free.
        """
        value: Optional[Any]
        """
        The value for this drop operation.

        This is %NULL if the data has not been loaded yet or no drop
        operation is going on.

        Data may be available before the [signal@Gtk.DropTarget::drop]
        signal gets emitted - for example when the [property@Gtk.DropTarget:preload]
        property is set. You can use the ::notify signal to be notified
        of available data.
        """

    props: Props = ...
    def __init__(
        self,
        actions: Gdk.DragAction = ...,
        formats: Gdk.ContentFormats = ...,
        preload: bool = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_actions(self) -> Gdk.DragAction:
        """
        Gets the actions that this drop target supports.

        Parameters:


        Returns:
            Gdk.DragAction: the actions that this drop target supports

        """
        ...

    def get_current_drop(self) -> Optional[Gdk.Drop]:
        """
        Gets the currently handled drop operation.

        If no drop operation is going on, %NULL is returned.

        Parameters:


        Returns:
            Optional[Gdk.Drop]: The current drop

        """
        ...

    @deprecated("Use [method@Gtk.DropTarget.get_current_drop] instead")
    def get_drop(self) -> Optional[Gdk.Drop]:
        """
        Gets the currently handled drop operation.

        If no drop operation is going on, %NULL is returned.

        Parameters:


        Returns:
            Optional[Gdk.Drop]: The current drop

        """
        ...

    def get_formats(self) -> Optional[Gdk.ContentFormats]:
        """
        Gets the data formats that this drop target accepts.

        If the result is %NULL, all formats are expected to be supported.

        Parameters:


        Returns:
            Optional[Gdk.ContentFormats]: the supported data formats

        """
        ...

    def get_gtypes(self) -> Optional[list[Type]]:
        """
        Gets the list of supported `GType`s that can be dropped on the target.

        If no types have been set, `NULL` will be returned.

        Parameters:


        Returns:
            Optional[list[Type]]:
        the `G_TYPE_INVALID`-terminated array of types included in
        formats

        """
        ...

    def get_preload(self) -> bool:
        """
        Gets whether data should be preloaded on hover.

        Parameters:


        Returns:
            bool: %TRUE if drop data should be preloaded

        """
        ...

    def get_value(self) -> Optional[Any]:
        """
        Gets the current drop data, as a `GValue`.

        Parameters:


        Returns:
            Optional[Any]: The current drop data

        """
        ...

    @classmethod
    def new(cls, type: Type, actions: Gdk.DragAction) -> DropTarget:
        """
        Creates a new `GtkDropTarget` object.

        If the drop target should support more than 1 type, pass
        %G_TYPE_INVALID for @type and then call
        [method@Gtk.DropTarget.set_gtypes].

        Parameters:
            type: The supported type or %G_TYPE_INVALID
            actions: the supported actions

        Returns:
            DropTarget: the new `GtkDropTarget`

        """
        ...

    def reject(self) -> None:
        """
        Rejects the ongoing drop operation.

        If no drop operation is ongoing, i.e when [property@Gtk.DropTarget:current-drop]
        is %NULL, this function does nothing.

        This function should be used when delaying the decision
        on whether to accept a drag or not until after reading
        the data.

        Parameters:


        Returns:

        """
        ...

    def set_actions(self, actions: Gdk.DragAction) -> None:
        """
        Sets the actions that this drop target supports.

        Parameters:
            actions: the supported actions

        Returns:

        """
        ...

    def set_gtypes(self, types: Optional[Sequence[Type]] = None) -> None:
        """
        Sets the supported `GTypes` for this drop target.

        Parameters:
            types: all supported `GType`s
        that can be dropped on the target

        Returns:

        """
        ...

    def set_preload(self, preload: bool) -> None:
        """
        Sets whether data should be preloaded on hover.

        Parameters:
            preload: %TRUE to preload drop data

        Returns:

        """
        ...

class DropTargetAsync(EventController):
    """
    `GtkDropTargetAsync` is an event controller to receive Drag-and-Drop
    operations, asynchronously.

    It is the more complete but also more complex method of handling drop
    operations compared to [class@Gtk.DropTarget], and you should only use
    it if `GtkDropTarget` doesn't provide all the features you need.

    To use a `GtkDropTargetAsync` to receive drops on a widget, you create
    a `GtkDropTargetAsync` object, configure which data formats and actions
    you support, connect to its signals, and then attach it to the widget
    with [method@Gtk.Widget.add_controller].

    During a drag operation, the first signal that a `GtkDropTargetAsync`
    emits is [signal@Gtk.DropTargetAsync::accept], which is meant to determine
    whether the target is a possible drop site for the ongoing drop. The
    default handler for the ::accept signal accepts the drop if it finds
    a compatible data format and an action that is supported on both sides.

    If it is, and the widget becomes a target, you will receive a
    [signal@Gtk.DropTargetAsync::drag-enter] signal, followed by
    [signal@Gtk.DropTargetAsync::drag-motion] signals as the pointer moves,
    optionally a [signal@Gtk.DropTargetAsync::drop] signal when a drop happens,
    and finally a [signal@Gtk.DropTargetAsync::drag-leave] signal when the
    pointer moves off the widget.

    The ::drag-enter and ::drag-motion handler return a `GdkDragAction`
    to update the status of the ongoing operation. The ::drop handler
    should decide if it ultimately accepts the drop and if it does, it
    should initiate the data transfer and finish the operation by calling
    [method@Gdk.Drop.finish].

    Between the ::drag-enter and ::drag-leave signals the widget is a
    current drop target, and will receive the %GTK_STATE_FLAG_DROP_ACTIVE
    state, which can be used by themes to style the widget as a drop target.

    :Constructors:

    ::

        DropTargetAsync(**properties)
        new(formats:Gdk.ContentFormats=None, actions:Gdk.DragAction) -> Gtk.DropTargetAsync

    Object GtkDropTargetAsync

    Signals from GtkDropTargetAsync:
      drop (GdkDrop, gdouble, gdouble) -> gboolean
      accept (GdkDrop) -> gboolean
      drag-enter (GdkDrop, gdouble, gdouble) -> GdkDragAction
      drag-motion (GdkDrop, gdouble, gdouble) -> GdkDragAction
      drag-leave (GdkDrop)

    Properties from GtkDropTargetAsync:
      actions -> GdkDragAction: actions
      formats -> GdkContentFormats: formats

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props):
        actions: Gdk.DragAction
        """
        The `GdkDragActions` that this drop target supports.
        """
        formats: Optional[Gdk.ContentFormats]
        """
        The `GdkContentFormats` that determines the supported data formats.
        """

    props: Props = ...
    def __init__(
        self,
        actions: Gdk.DragAction = ...,
        formats: Optional[Gdk.ContentFormats] = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_actions(self) -> Gdk.DragAction:
        """
        Gets the actions that this drop target supports.

        Parameters:


        Returns:
            Gdk.DragAction: the actions that this drop target supports

        """
        ...

    def get_formats(self) -> Optional[Gdk.ContentFormats]:
        """
        Gets the data formats that this drop target accepts.

        If the result is %NULL, all formats are expected to be supported.

        Parameters:


        Returns:
            Optional[Gdk.ContentFormats]: the supported data formats

        """
        ...

    @classmethod
    def new(
        cls, formats: Optional[Gdk.ContentFormats], actions: Gdk.DragAction
    ) -> DropTargetAsync:
        """
        Creates a new `GtkDropTargetAsync` object.

        Parameters:
            formats: the supported data formats
            actions: the supported actions

        Returns:
            DropTargetAsync: the new `GtkDropTargetAsync`

        """
        ...

    def reject_drop(self, drop: Gdk.Drop) -> None:
        """
        Sets the @drop as not accepted on this drag site.

        This function should be used when delaying the decision
        on whether to accept a drag or not until after reading
        the data.

        Parameters:
            drop: the `GdkDrop` of an ongoing drag operation

        Returns:

        """
        ...

    def set_actions(self, actions: Gdk.DragAction) -> None:
        """
        Sets the actions that this drop target supports.

        Parameters:
            actions: the supported actions

        Returns:

        """
        ...

    def set_formats(self, formats: Optional[Gdk.ContentFormats] = None) -> None:
        """
        Sets the data formats that this drop target will accept.

        Parameters:
            formats: the supported data formats or %NULL for any format

        Returns:

        """
        ...

class DropTargetAsyncClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class DropTargetClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class Editable(GObject.GInterface):
    """
    `GtkEditable` is an interface for text editing widgets.

    Typical examples of editable widgets are [class@Gtk.Entry] and
    [class@Gtk.SpinButton]. It contains functions for generically manipulating
    an editable widget, a large number of action signals used for key bindings,
    and several signals that an application can connect to modify the behavior
    of a widget.

    As an example of the latter usage, by connecting the following handler to
    [signal@Gtk.Editable::insert-text], an application can convert all entry
    into a widget into uppercase.

    ## Forcing entry to uppercase.

    ```c
    #include <ctype.h>

    void
    insert_text_handler (GtkEditable *editable,
    const char *text,
    int length,
    int *position,
    gpointer data)
    {
    char *result = g_utf8_strup (text, length);

    g_signal_handlers_block_by_func (editable,
    (gpointer) insert_text_handler, data);
    gtk_editable_insert_text (editable, result, length, position);
    g_signal_handlers_unblock_by_func (editable,
    (gpointer) insert_text_handler, data);

    g_signal_stop_emission_by_name (editable, \"insert_text\");

    g_free (result);
    }
    ```

    ## Implementing GtkEditable

    The most likely scenario for implementing `GtkEditable` on your own widget
    is that you will embed a `GtkText` inside a complex widget, and want to
    delegate the editable functionality to that text widget. `GtkEditable`
    provides some utility functions to make this easy.

    In your class_init function, call [func@Gtk.Editable.install_properties],
    passing the first available property ID:

    ```c
    static void
    my_class_init (MyClass *class)
    {
    ...
    g_object_class_install_properties (object_class, NUM_PROPERTIES, props);
    gtk_editable_install_properties (object_clas, NUM_PROPERTIES);
    ...
    }
    ```

    In your interface_init function for the `GtkEditable` interface, provide
    an implementation for the get_delegate vfunc that returns your text widget:

    ```c
    GtkEditable *
    get_editable_delegate (GtkEditable *editable)
    {
    return GTK_EDITABLE (MY_WIDGET (editable)->text_widget);
    }

    static void
    my_editable_init (GtkEditableInterface *iface)
    {
    iface->get_delegate = get_editable_delegate;
    }
    ```

    You don't need to provide any other vfuncs. The default implementations
    work by forwarding to the delegate that the GtkEditableInterface.get_delegate()
    vfunc returns.

    In your instance_init function, create your text widget, and then call
    [method@Gtk.Editable.init_delegate]:

    ```c
    static void
    my_widget_init (MyWidget *self)
    {
    ...
    self->text_widget = gtk_text_new ();
    gtk_editable_init_delegate (GTK_EDITABLE (self));
    ...
    }
    ```

    In your dispose function, call [method@Gtk.Editable.finish_delegate] before
    destroying your text widget:

    ```c
    static void
    my_widget_dispose (GObject *object)
    {
    ...
    gtk_editable_finish_delegate (GTK_EDITABLE (self));
    g_clear_pointer (&self->text_widget, gtk_widget_unparent);
    ...
    }
    ```

    Finally, use [func@Gtk.Editable.delegate_set_property] in your `set_property`
    function (and similar for `get_property`), to set the editable properties:

    ```c
    ...
    if (gtk_editable_delegate_set_property (object, prop_id, value, pspec))
    return;

    switch (prop_id)
    ...
    ```

    It is important to note that if you create a `GtkEditable` that uses
    a delegate, the low level [signal@Gtk.Editable::insert-text] and
    [signal@Gtk.Editable::delete-text] signals will be propagated from the
    \"wrapper\" editable to the delegate, but they will not be propagated from
    the delegate to the \"wrapper\" editable, as they would cause an infinite
    recursion. If you wish to connect to the [signal@Gtk.Editable::insert-text]
    and [signal@Gtk.Editable::delete-text] signals, you will need to connect
    to them on the delegate obtained via [method@Gtk.Editable.get_delegate].



    Interface GtkEditable

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def __init__(
        self,
        editable: bool = ...,
        enable_undo: bool = ...,
        max_width_chars: int = ...,
        text: str = ...,
        width_chars: int = ...,
        xalign: float = ...,
    ): ...
    def delegate_get_accessible_platform_state(
        self, state: AccessiblePlatformState
    ) -> bool:
        """
        Retrieves the accessible platform state from the editable delegate.

        This is an helper function to retrieve the accessible state for
        `GtkEditable` interface implementations using a delegate pattern.

        You should call this function in your editable widget implementation
        of the [vfunc@Gtk.Accessible.get_platform_state] virtual function, for
        instance:

        ```c
        static void
        accessible_interface_init (GtkAccessibleInterface *iface)
        {
        iface->get_platform_state = your_editable_get_accessible_platform_state;
        }

        static gboolean
        your_editable_get_accessible_platform_state (GtkAccessible *accessible,
        GtkAccessiblePlatformState state)
        {
        return gtk_editable_delegate_get_accessible_platform_state (GTK_EDITABLE (accessible), state);
        }
        ```

        Parameters:
            state: what kind of accessible state to retrieve

        Returns:
            bool: Not documented

        """
        ...

    @staticmethod
    def delegate_get_property(
        object: GObject.Object, prop_id: int, value: Any, pspec: GObject.ParamSpec
    ) -> bool:
        """
        Gets a property of the `GtkEditable` delegate for @object.

        This is helper function that should be called in the `get_property`
        function of your `GtkEditable` implementation, before handling your
        own properties.

        Parameters:
            object: a `GObject`
            prop_id: a property ID
            value: value to set
            pspec: the `GParamSpec` for the property

        Returns:
            bool: %TRUE if the property was found

        """
        ...

    @staticmethod
    def delegate_set_property(
        object: GObject.Object, prop_id: int, value: Any, pspec: GObject.ParamSpec
    ) -> bool:
        """
        Sets a property on the `GtkEditable` delegate for @object.

        This is a helper function that should be called in the `set_property`
        function of your `GtkEditable` implementation, before handling your
        own properties.

        Parameters:
            object: a `GObject`
            prop_id: a property ID
            value: value to set
            pspec: the `GParamSpec` for the property

        Returns:
            bool: %TRUE if the property was found

        """
        ...

    def delete_selection(self) -> None:
        """
        Deletes the currently selected text of the editable.

        This call doesn’t do anything if there is no selected text.

        Parameters:


        Returns:

        """
        ...

    def delete_text(self, start_pos: int, end_pos: int) -> None:
        """
        Deletes a sequence of characters.

        The characters that are deleted are those characters at positions
        from @start_pos up to, but not including @end_pos. If @end_pos is
        negative, then the characters deleted are those from @start_pos to
        the end of the text.

        Note that the positions are specified in characters, not bytes.

        Parameters:
            start_pos: start position
            end_pos: end position

        Returns:

        """
        ...

    def finish_delegate(self) -> None:
        """
        Undoes the setup done by [method@Gtk.Editable.init_delegate].

        This is a helper function that should be called from dispose,
        before removing the delegate object.

        Parameters:


        Returns:

        """
        ...

    def get_alignment(self) -> float:
        """
        Gets the alignment of the editable.

        Parameters:


        Returns:
            float: the alignment

        """
        ...

    def get_chars(self, start_pos: int, end_pos: int) -> str:
        """
        Retrieves a sequence of characters.

        The characters that are retrieved are those characters at positions
        from @start_pos up to, but not including @end_pos. If @end_pos is negative,
        then the characters retrieved are those characters from @start_pos to
        the end of the text.

        Note that positions are specified in characters, not bytes.

        Parameters:
            start_pos: start of text
            end_pos: end of text

        Returns:
            str: a pointer to the contents of the widget as a
        string. This string is allocated by the `GtkEditable` implementation
        and should be freed by the caller.

        """
        ...

    def get_delegate(self) -> Optional[Editable]:
        """
        Gets the `GtkEditable` that @editable is delegating its
        implementation to.

        Typically, the delegate is a [class@Gtk.Text] widget.

        Parameters:


        Returns:
            Optional[Editable]: the delegate `GtkEditable`

        """
        ...

    def get_editable(self) -> bool:
        """
        Retrieves whether @editable is editable.

        Parameters:


        Returns:
            bool: %TRUE if @editable is editable.

        """
        ...

    def get_enable_undo(self) -> bool:
        """
        Gets if undo/redo actions are enabled for @editable

        Parameters:


        Returns:
            bool: %TRUE if undo is enabled

        """
        ...

    def get_max_width_chars(self) -> int:
        """
        Retrieves the desired maximum width of @editable, in characters.

        Parameters:


        Returns:
            int: the maximum width of the entry, in characters

        """
        ...

    def get_position(self) -> int:
        """
        Retrieves the current position of the cursor relative
        to the start of the content of the editable.

        Note that this position is in characters, not in bytes.

        Parameters:


        Returns:
            int: the cursor position

        """
        ...

    def get_selection_bounds(
        self,
    ) -> Tuple[int, int] | Tuple[()]:  # CHECK Wrapped function
        """
        Retrieves the selection bound of the editable.

        @start_pos will be filled with the start of the selection and
        @end_pos with end. If no text was selected both will be identical
        and %FALSE will be returned.

        Note that positions are specified in characters, not bytes.

        Parameters:


        Returns:
            int: location to store the starting position
            int: location to store the end position
        """
        ...

    def get_text(self) -> str:
        """
        Retrieves the contents of @editable.

        The returned string is owned by GTK and must not be modified or freed.

        Parameters:


        Returns:
            str: a pointer to the contents of the editable

        """
        ...

    def get_width_chars(self) -> int:
        """
        Gets the number of characters of space reserved
        for the contents of the editable.

        Parameters:


        Returns:
            int: number of chars to request space for, or negative if unset

        """
        ...

    def init_delegate(self) -> None:
        """
        Sets up a delegate for `GtkEditable`.

        This is assuming that the get_delegate vfunc in the `GtkEditable`
        interface has been set up for the @editable's type.

        This is a helper function that should be called in instance init,
        after creating the delegate object.

        Parameters:


        Returns:

        """
        ...

    def insert_text(self, text, position): ...  # FIXME Function
    @staticmethod
    def install_properties(object_class: GObject.ObjectClass, first_prop: int) -> int:
        """
        Overrides the `GtkEditable` properties for @class.

        This is a helper function that should be called in class_init,
        after installing your own properties.

        Note that your class must have \"text\", \"cursor-position\",
        \"selection-bound\", \"editable\", \"width-chars\", \"max-width-chars\",
        \"xalign\" and \"enable-undo\" properties for this function to work.

        To handle the properties in your set_property and get_property
        functions, you can either use [func@Gtk.Editable.delegate_set_property]
        and [func@Gtk.Editable.delegate_get_property] (if you are using
        a delegate), or remember the @first_prop offset and add it to the
        values in the [enum@Gtk.EditableProperties] enumeration to get the
        property IDs for these properties.

        Parameters:
            object_class: a `GObjectClass`
            first_prop: property ID to use for the first property

        Returns:
            int: the number of properties that were installed

        """
        ...

    def select_region(self, start_pos: int, end_pos: int) -> None:
        """
        Selects a region of text.

        The characters that are selected are those characters at positions
        from @start_pos up to, but not including @end_pos. If @end_pos is
        negative, then the characters selected are those characters from
        @start_pos to the end of the text.

        Note that positions are specified in characters, not bytes.

        Parameters:
            start_pos: start of region
            end_pos: end of region

        Returns:

        """
        ...

    def set_alignment(self, xalign: float) -> None:
        """
        Sets the alignment for the contents of the editable.

        This controls the horizontal positioning of the contents when
        the displayed text is shorter than the width of the editable.

        Parameters:
            xalign: The horizontal alignment, from 0 (left) to 1 (right).
        Reversed for RTL layouts

        Returns:

        """
        ...

    def set_editable(self, is_editable: bool) -> None:
        """
        Determines if the user can edit the text in the editable widget.

        Parameters:
            is_editable: %TRUE if the user is allowed to edit the text
        in the widget

        Returns:

        """
        ...

    def set_enable_undo(self, enable_undo: bool) -> None:
        """
        If enabled, changes to @editable will be saved for undo/redo
        actions.

        This results in an additional copy of text changes and are not
        stored in secure memory. As such, undo is forcefully disabled
        when [property@Gtk.Text:visibility] is set to %FALSE.

        Parameters:
            enable_undo: if undo/redo should be enabled

        Returns:

        """
        ...

    def set_max_width_chars(self, n_chars: int) -> None:
        """
        Sets the desired maximum width in characters of @editable.

        Parameters:
            n_chars: the new desired maximum width, in characters

        Returns:

        """
        ...

    def set_position(self, position: int) -> None:
        """
        Sets the cursor position in the editable to the given value.

        The cursor is displayed before the character with the given (base 0)
        index in the contents of the editable. The value must be less than
        or equal to the number of characters in the editable. A value of -1
        indicates that the position should be set after the last character
        of the editable. Note that @position is in characters, not in bytes.

        Parameters:
            position: the position of the cursor

        Returns:

        """
        ...

    def set_text(self, text: str) -> None:
        """
        Sets the text in the editable to the given value.

        This is replacing the current contents.

        Parameters:
            text: the text to set

        Returns:

        """
        ...

    def set_width_chars(self, n_chars: int) -> None:
        """
        Changes the size request of the editable to be about the
        right size for @n_chars characters.

        Note that it changes the size request, the size can still
        be affected by how you pack the widget into containers.
        If @n_chars is -1, the size reverts to the default size.

        Parameters:
            n_chars: width in chars

        Returns:

        """
        ...

class EditableInterface(GObject.GPointer):
    """
    :Constructors:

    ::

        EditableInterface()
    """

    class Props(GObject.GPointer.Props): ...
    base_iface: GObject.TypeInterface = ...
    insert_text: Callable[[Editable, str, int], int] = ...
    delete_text: Callable[[Editable, int, int], None] = ...
    changed: Callable[[Editable], None] = ...
    get_text: Callable[[Editable], str] = ...
    do_insert_text: Callable[[Editable, str, int], int] = ...
    do_delete_text: Callable[[Editable, int, int], None] = ...
    get_selection_bounds: Callable[[Editable], Tuple[bool, int, int]] = ...
    set_selection_bounds: Callable[[Editable, int, int], None] = ...
    get_delegate: Callable[[Editable], Optional[Editable]] = ...

class EditableLabel(Widget, Accessible, Buildable, ConstraintTarget, Editable):
    """
    A `GtkEditableLabel` is a label that allows users to
    edit the text by switching to an “edit mode”.

    ![An example GtkEditableLabel](editable-label.png)

    `GtkEditableLabel` does not have API of its own, but it
    implements the [iface@Gtk.Editable] interface.

    The default bindings for activating the edit mode is
    to click or press the Enter key. The default bindings
    for leaving the edit mode are the Enter key (to save
    the results) or the Escape key (to cancel the editing).

    # CSS nodes

    ```
    editablelabel[.editing]
    ╰── stack
    ├── label
    ╰── text
    ```

    `GtkEditableLabel` has a main node with the name editablelabel.
    When the entry is in editing mode, it gets the .editing style
    class.

    For all the subnodes added to the text node in various situations,
    see [class@Gtk.Text].

    :Constructors:

    ::

        EditableLabel(**properties)
        new(str:str) -> Gtk.Widget

    Object GtkEditableLabel

    Properties from GtkEditableLabel:
      editing -> gboolean: editing

    Signals from GtkEditable:
      changed ()
      insert-text (gchararray, gint, gpointer)
      delete-text (gint, gint)

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Editable.Props,
    ):
        editing: bool
        """
        This property is %TRUE while the widget is in edit mode.
        """

    props: Props = ...
    def __init__(
        self,
        editing: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        editable: bool = ...,
        enable_undo: bool = ...,
        max_width_chars: int = ...,
        text: str = ...,
        width_chars: int = ...,
        xalign: float = ...,
    ): ...
    def get_editing(self) -> bool:
        """
        Returns whether the label is currently in “editing mode”.

        Parameters:


        Returns:
            bool: %TRUE if @self is currently in editing mode

        """
        ...

    @classmethod
    def new(cls, str: str) -> EditableLabel:
        """
        Creates a new `GtkEditableLabel` widget.

        Parameters:
            str: the text for the label

        Returns:
            Widget: the new `GtkEditableLabel`

        """
        ...

    def start_editing(self) -> None:
        """
        Switches the label into “editing mode”.

        Parameters:


        Returns:

        """
        ...

    def stop_editing(self, commit: bool) -> None:
        """
        Switches the label out of “editing mode”.

        If @commit is %TRUE, the resulting text is kept as the
        [property@Gtk.Editable:text] property value, otherwise the
        resulting text is discarded and the label will keep its
        previous [property@Gtk.Editable:text] property value.

        Parameters:
            commit: whether to set the edited text on the label

        Returns:

        """
        ...

class EditableLabelClass(GObject.GPointer):
    """
    :Constructors:

    ::

        EditableLabelClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class EmojiChooser(
    Popover, Accessible, Buildable, ConstraintTarget, Native, ShortcutManager
):
    """
    The `GtkEmojiChooser` is used by text widgets such as `GtkEntry` or
    `GtkTextView` to let users insert Emoji characters.

    ![An example GtkEmojiChooser](emojichooser.png)

    `GtkEmojiChooser` emits the [signal@Gtk.EmojiChooser::emoji-picked]
    signal when an Emoji is selected.

    # CSS nodes

    ```
    popover
    ├── box.emoji-searchbar
    │ ╰── entry.search
    ╰── box.emoji-toolbar
    ├── button.image-button.emoji-section
    ├── ...
    ╰── button.image-button.emoji-section
    ```

    Every `GtkEmojiChooser` consists of a main node called popover.
    The contents of the popover are largely implementation defined
    and supposed to inherit general styles.
    The top searchbar used to search emoji and gets the .emoji-searchbar
    style class itself.
    The bottom toolbar used to switch between different emoji categories
    consists of buttons with the .emoji-section style class and gets the
    .emoji-toolbar style class itself.

    :Constructors:

    ::

        EmojiChooser(**properties)
        new() -> Gtk.Widget

    Object GtkEmojiChooser

    Signals from GtkEmojiChooser:
      emoji-picked (gchararray)

    Signals from GtkPopover:
      closed ()
      activate-default ()

    Properties from GtkPopover:
      pointing-to -> GdkRectangle: pointing-to
      position -> GtkPositionType: position
      autohide -> gboolean: autohide
      default-widget -> GtkWidget: default-widget
      has-arrow -> gboolean: has-arrow
      mnemonics-visible -> gboolean: mnemonics-visible
      child -> GtkWidget: child
      cascade-popdown -> gboolean: cascade-popdown

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Popover.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        ShortcutManager.Props,
    ): ...

    def __init__(
        self,
        autohide: bool = ...,
        cascade_popdown: bool = ...,
        child: Optional[Widget] = ...,
        default_widget: Optional[Widget] = ...,
        has_arrow: bool = ...,
        mnemonics_visible: bool = ...,
        pointing_to: Optional[Gdk.Rectangle] = ...,
        position: PositionType = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    @classmethod
    def new(cls) -> EmojiChooser:
        """
        Creates a new `GtkEmojiChooser`.

        Parameters:


        Returns:
            Widget: a new `GtkEmojiChooser`

        """
        ...

class EmojiChooserClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class Entry(Widget, Accessible, Buildable, CellEditable, ConstraintTarget, Editable):
    """
    `GtkEntry` is a single line text entry widget.

    ![An example GtkEntry](entry.png)

    A fairly large set of key bindings are supported by default. If the
    entered text is longer than the allocation of the widget, the widget
    will scroll so that the cursor position is visible.

    When using an entry for passwords and other sensitive information, it
    can be put into “password mode” using [method@Gtk.Entry.set_visibility].
    In this mode, entered text is displayed using a “invisible” character.
    By default, GTK picks the best invisible character that is available
    in the current font, but it can be changed with
    [method@Gtk.Entry.set_invisible_char].

    `GtkEntry` has the ability to display progress or activity
    information behind the text. To make an entry display such information,
    use [method@Gtk.Entry.set_progress_fraction] or
    [method@Gtk.Entry.set_progress_pulse_step].

    Additionally, `GtkEntry` can show icons at either side of the entry.
    These icons can be activatable by clicking, can be set up as drag source
    and can have tooltips. To add an icon, use
    [method@Gtk.Entry.set_icon_from_gicon] or one of the various other functions
    that set an icon from an icon name or a paintable. To trigger an action when
    the user clicks an icon, connect to the [signal@Gtk.Entry::icon-press] signal.
    To allow DND operations from an icon, use
    [method@Gtk.Entry.set_icon_drag_source]. To set a tooltip on an icon, use
    [method@Gtk.Entry.set_icon_tooltip_text] or the corresponding function
    for markup.

    Note that functionality or information that is only available by clicking
    on an icon in an entry may not be accessible at all to users which are not
    able to use a mouse or other pointing device. It is therefore recommended
    that any such functionality should also be available by other means, e.g.
    via the context menu of the entry.

    # CSS nodes

    ```
    entry[.flat][.warning][.error]
    ├── text[.readonly]
    ├── image.left
    ├── image.right
    ╰── [progress[.pulse]]
    ```

    `GtkEntry` has a main node with the name entry. Depending on the properties
    of the entry, the style classes .read-only and .flat may appear. The style
    classes .warning and .error may also be used with entries.

    When the entry shows icons, it adds subnodes with the name image and the
    style class .left or .right, depending on where the icon appears.

    When the entry shows progress, it adds a subnode with the name progress.
    The node has the style class .pulse when the shown progress is pulsing.

    For all the subnodes added to the text node in various situations,
    see [class@Gtk.Text].

    # GtkEntry as GtkBuildable

    The `GtkEntry` implementation of the `GtkBuildable` interface supports a
    custom `<attributes>` element, which supports any number of `<attribute>`
    elements. The `<attribute>` element has attributes named “name“, “value“,
    “start“ and “end“ and allows you to specify `PangoAttribute` values for
    this label.

    An example of a UI definition fragment specifying Pango attributes:
    ```xml
    <object class=\"GtkEntry\">
    <attributes>
    <attribute name=\"weight\" value=\"PANGO_WEIGHT_BOLD\"/>
    <attribute name=\"background\" value=\"red\" start=\"5\" end=\"10\"/>
    </attributes>
    </object>
    ```

    The start and end attributes specify the range of characters to which the
    Pango attribute applies. If start and end are not specified, the attribute
    is applied to the whole text. Note that specifying ranges does not make much
    sense with translatable attributes. Use markup embedded in the translatable
    content instead.

    # Accessibility

    `GtkEntry` uses the %GTK_ACCESSIBLE_ROLE_TEXT_BOX role.

    :Constructors:

    ::

        Entry(**properties)
        new() -> Gtk.Widget
        new_with_buffer(buffer:Gtk.EntryBuffer) -> Gtk.Widget

    Object GtkEntry

    Signals from GtkEntry:
      activate ()
      icon-press (GtkEntryIconPosition)
      icon-release (GtkEntryIconPosition)

    Properties from GtkEntry:
      buffer -> GtkEntryBuffer: buffer
      max-length -> gint: max-length
      visibility -> gboolean: visibility
      has-frame -> gboolean: has-frame
      invisible-char -> guint: invisible-char
      activates-default -> gboolean: activates-default
      scroll-offset -> gint: scroll-offset
      truncate-multiline -> gboolean: truncate-multiline
      overwrite-mode -> gboolean: overwrite-mode
      text-length -> guint: text-length
      invisible-char-set -> gboolean: invisible-char-set
      progress-fraction -> gdouble: progress-fraction
      progress-pulse-step -> gdouble: progress-pulse-step
      primary-icon-paintable -> GdkPaintable: primary-icon-paintable
      secondary-icon-paintable -> GdkPaintable: secondary-icon-paintable
      primary-icon-name -> gchararray: primary-icon-name
      secondary-icon-name -> gchararray: secondary-icon-name
      primary-icon-gicon -> GIcon: primary-icon-gicon
      secondary-icon-gicon -> GIcon: secondary-icon-gicon
      primary-icon-storage-type -> GtkImageType: primary-icon-storage-type
      secondary-icon-storage-type -> GtkImageType: secondary-icon-storage-type
      primary-icon-activatable -> gboolean: primary-icon-activatable
      secondary-icon-activatable -> gboolean: secondary-icon-activatable
      primary-icon-sensitive -> gboolean: primary-icon-sensitive
      secondary-icon-sensitive -> gboolean: secondary-icon-sensitive
      primary-icon-tooltip-text -> gchararray: primary-icon-tooltip-text
      secondary-icon-tooltip-text -> gchararray: secondary-icon-tooltip-text
      primary-icon-tooltip-markup -> gchararray: primary-icon-tooltip-markup
      secondary-icon-tooltip-markup -> gchararray: secondary-icon-tooltip-markup
      im-module -> gchararray: im-module
      placeholder-text -> gchararray: placeholder-text
      completion -> GtkEntryCompletion: completion
      input-purpose -> GtkInputPurpose: input-purpose
      input-hints -> GtkInputHints: input-hints
      attributes -> PangoAttrList: attributes
      tabs -> PangoTabArray: tabs
      extra-menu -> GMenuModel: extra-menu
      show-emoji-icon -> gboolean: show-emoji-icon
      enable-emoji-completion -> gboolean: enable-emoji-completion

    Signals from GtkEditable:
      changed ()
      insert-text (gchararray, gint, gpointer)
      delete-text (gint, gint)

    Signals from GtkCellEditable:
      editing-done ()
      remove-widget ()

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        CellEditable.Props,
        ConstraintTarget.Props,
        Editable.Props,
    ):
        activates_default: bool
        """
        Whether to activate the default widget when Enter is pressed.
        """
        attributes: Optional[Pango.AttrList]
        """
        A list of Pango attributes to apply to the text of the entry.

        This is mainly useful to change the size or weight of the text.

        The `PangoAttribute`'s @start_index and @end_index must refer to the
        [class@Gtk.EntryBuffer] text, i.e. without the preedit string.
        """
        buffer: EntryBuffer
        """
        The buffer object which actually stores the text.
        """
        completion: Optional[EntryCompletion]
        """
        The auxiliary completion object to use with the entry.
        """
        enable_emoji_completion: bool
        """
        Whether to suggest Emoji replacements for :-delimited names
        like `:heart:`.
        """
        extra_menu: Optional[Gio.MenuModel]
        """
        A menu model whose contents will be appended to the context menu.
        """
        has_frame: bool
        """
        Whether the entry should draw a frame.
        """
        im_module: str
        """
        Which IM (input method) module should be used for this entry.

        See [class@Gtk.IMContext].

        Setting this to a non-%NULL value overrides the system-wide IM
        module setting. See the GtkSettings [property@Gtk.Settings:gtk-im-module]
        property.
        """
        input_hints: InputHints
        """
        Additional hints that allow input methods to fine-tune their behavior.

        Also see [property@Gtk.Entry:input-purpose]
        """
        input_purpose: InputPurpose
        """
        The purpose of this text field.

        This property can be used by on-screen keyboards and other input
        methods to adjust their behaviour.

        Note that setting the purpose to %GTK_INPUT_PURPOSE_PASSWORD or
        %GTK_INPUT_PURPOSE_PIN is independent from setting
        [property@Gtk.Entry:visibility].
        """
        invisible_char: int
        """
        The character to use when masking entry contents (“password mode”).
        """
        invisible_char_set: bool
        """
        Whether the invisible char has been set for the `GtkEntry`.
        """
        max_length: int
        """
        Maximum number of characters for this entry.
        """
        overwrite_mode: bool
        """
        If text is overwritten when typing in the `GtkEntry`.
        """
        placeholder_text: Optional[str]
        """
        The text that will be displayed in the `GtkEntry` when it is empty
        and unfocused.
        """
        primary_icon_activatable: bool
        """
        Whether the primary icon is activatable.

        GTK emits the [signal@Gtk.Entry::icon-press] and
        [signal@Gtk.Entry::icon-release] signals only on sensitive,
        activatable icons.

        Sensitive, but non-activatable icons can be used for purely
        informational purposes.
        """
        primary_icon_gicon: Gio.Icon
        """
        The `GIcon` to use for the primary icon for the entry.
        """
        primary_icon_name: str
        """
        The icon name to use for the primary icon for the entry.
        """
        primary_icon_paintable: Gdk.Paintable
        """
        A `GdkPaintable` to use as the primary icon for the entry.
        """
        primary_icon_sensitive: bool
        """
        Whether the primary icon is sensitive.

        An insensitive icon appears grayed out. GTK does not emit the
        [signal@Gtk.Entry::icon-press] and [signal@Gtk.Entry::icon-release]
        signals and does not allow DND from insensitive icons.

        An icon should be set insensitive if the action that would trigger
        when clicked is currently not available.
        """
        primary_icon_storage_type: ImageType
        """
        The representation which is used for the primary icon of the entry.
        """
        primary_icon_tooltip_markup: str
        """
        The contents of the tooltip on the primary icon, with markup.

        Also see [method@Gtk.Entry.set_icon_tooltip_markup].
        """
        primary_icon_tooltip_text: str
        """
        The contents of the tooltip on the primary icon.

        Also see [method@Gtk.Entry.set_icon_tooltip_text].
        """
        progress_fraction: float
        """
        The current fraction of the task that's been completed.
        """
        progress_pulse_step: float
        """
        The fraction of total entry width to move the progress
        bouncing block for each pulse.

        See [method@Gtk.Entry.progress_pulse].
        """
        scroll_offset: int
        """
        Number of pixels of the entry scrolled off the screen to the left.
        """
        secondary_icon_activatable: bool
        """
        Whether the secondary icon is activatable.

        GTK emits the [signal@Gtk.Entry::icon-press] and
        [signal@Gtk.Entry::icon-release] signals only on sensitive,
        activatable icons.

        Sensitive, but non-activatable icons can be used for purely
        informational purposes.
        """
        secondary_icon_gicon: Gio.Icon
        """
        The `GIcon` to use for the secondary icon for the entry.
        """
        secondary_icon_name: str
        """
        The icon name to use for the secondary icon for the entry.
        """
        secondary_icon_paintable: Gdk.Paintable
        """
        A `GdkPaintable` to use as the secondary icon for the entry.
        """
        secondary_icon_sensitive: bool
        """
        Whether the secondary icon is sensitive.

        An insensitive icon appears grayed out. GTK does not emit the
        [signal@Gtk.Entry::icon-press[ and [signal@Gtk.Entry::icon-release]
        signals and does not allow DND from insensitive icons.

        An icon should be set insensitive if the action that would trigger
        when clicked is currently not available.
        """
        secondary_icon_storage_type: ImageType
        """
        The representation which is used for the secondary icon of the entry.
        """
        secondary_icon_tooltip_markup: str
        """
        The contents of the tooltip on the secondary icon, with markup.

        Also see [method@Gtk.Entry.set_icon_tooltip_markup].
        """
        secondary_icon_tooltip_text: str
        """
        The contents of the tooltip on the secondary icon.

        Also see [method@Gtk.Entry.set_icon_tooltip_text].
        """
        show_emoji_icon: bool
        tabs: Optional[Pango.TabArray]
        text_length: int
        """
        The length of the text in the `GtkEntry`.
        """
        truncate_multiline: bool
        """
        When %TRUE, pasted multi-line text is truncated to the first line.
        """
        visibility: bool
        """
        Whether the entry should show the “invisible char” instead of the
        actual text (“password mode”).
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        activates_default: bool = ...,
        attributes: Pango.AttrList = ...,
        buffer: EntryBuffer = ...,
        completion: Optional[EntryCompletion] = ...,
        enable_emoji_completion: bool = ...,
        extra_menu: Optional[Gio.MenuModel] = ...,
        has_frame: bool = ...,
        im_module: str = ...,
        input_hints: InputHints = ...,
        input_purpose: InputPurpose = ...,
        invisible_char: int = ...,
        invisible_char_set: bool = ...,
        max_length: int = ...,
        overwrite_mode: bool = ...,
        placeholder_text: Optional[str] = ...,
        primary_icon_activatable: bool = ...,
        primary_icon_gicon: Gio.Icon = ...,
        primary_icon_name: str = ...,
        primary_icon_paintable: Gdk.Paintable = ...,
        primary_icon_sensitive: bool = ...,
        primary_icon_tooltip_markup: str = ...,
        primary_icon_tooltip_text: str = ...,
        progress_fraction: float = ...,
        progress_pulse_step: float = ...,
        secondary_icon_activatable: bool = ...,
        secondary_icon_gicon: Gio.Icon = ...,
        secondary_icon_name: str = ...,
        secondary_icon_paintable: Gdk.Paintable = ...,
        secondary_icon_sensitive: bool = ...,
        secondary_icon_tooltip_markup: str = ...,
        secondary_icon_tooltip_text: str = ...,
        show_emoji_icon: bool = ...,
        tabs: Optional[Pango.TabArray] = ...,
        truncate_multiline: bool = ...,
        visibility: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        editing_canceled: bool = ...,
        editable: bool = ...,
        enable_undo: bool = ...,
        max_width_chars: int = ...,
        text: str = ...,
        width_chars: int = ...,
        xalign: float = ...,
    ): ...
    def do_activate(self) -> None: ...
    def get_activates_default(self) -> bool:
        """
        Retrieves the value set by gtk_entry_set_activates_default().

        Parameters:


        Returns:
            bool: %TRUE if the entry will activate the default widget

        """
        ...

    def get_alignment(self) -> float:
        """
        Gets the value set by gtk_entry_set_alignment().

        See also: [property@Gtk.Editable:xalign]

        Parameters:


        Returns:
            float: the alignment

        """
        ...

    def get_attributes(self) -> Optional[Pango.AttrList]:
        """
        Gets the attribute list of the `GtkEntry`.

        See [method@Gtk.Entry.set_attributes].

        Parameters:


        Returns:
            Optional[Pango.AttrList]: the attribute list

        """
        ...

    def get_buffer(self) -> EntryBuffer:
        """
        Get the `GtkEntryBuffer` object which holds the text for
        this widget.

        Parameters:


        Returns:
            EntryBuffer: A `GtkEntryBuffer` object.

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_completion(self) -> Optional[EntryCompletion]:
        """
        Returns the auxiliary completion object currently
        in use by @entry.

        Parameters:


        Returns:
            Optional[EntryCompletion]: The auxiliary
        completion object currently in use by @entry

        """
        ...

    def get_current_icon_drag_source(self) -> int:
        """
        Returns the index of the icon which is the source of the
        current DND operation, or -1.

        Parameters:


        Returns:
            int: index of the icon which is the source of the
        current DND operation, or -1.

        """
        ...

    def get_extra_menu(self) -> Optional[Gio.MenuModel]:
        """
        Gets the menu model set with gtk_entry_set_extra_menu().

        Parameters:


        Returns:
            Optional[Gio.MenuModel]: the menu model

        """
        ...

    def get_has_frame(self) -> bool:
        """
        Gets the value set by gtk_entry_set_has_frame().

        Parameters:


        Returns:
            bool: whether the entry has a beveled frame

        """
        ...

    def get_icon_activatable(self, icon_pos: EntryIconPosition) -> bool:
        """
        Returns whether the icon is activatable.

        Parameters:
            icon_pos: Icon position

        Returns:
            bool: %TRUE if the icon is activatable.

        """
        ...

    def get_icon_area(self, icon_pos: EntryIconPosition) -> Gdk.Rectangle:
        """
        Gets the area where entry’s icon at @icon_pos is drawn.

        This function is useful when drawing something to the
        entry in a draw callback.

        If the entry is not realized or has no icon at the given
        position, @icon_area is filled with zeros. Otherwise,
        @icon_area will be filled with the icon's allocation,
        relative to @entry's allocation.

        Parameters:
            icon_pos: Icon position

        Returns:
            Gdk.Rectangle: Return location for the icon’s area
        """
        ...

    def get_icon_at_pos(self, x: int, y: int) -> int:
        """
        Finds the icon at the given position and return its index.

        The position’s coordinates are relative to the @entry’s
        top left corner. If @x, @y doesn’t lie inside an icon,
        -1 is returned. This function is intended for use in a
        [signal@Gtk.Widget::query-tooltip] signal handler.

        Parameters:
            x: the x coordinate of the position to find, relative to @entry
            y: the y coordinate of the position to find, relative to @entry

        Returns:
            int: the index of the icon at the given position, or -1

        """
        ...

    def get_icon_gicon(self, icon_pos: EntryIconPosition) -> Optional[Gio.Icon]:
        """
        Retrieves the `GIcon` used for the icon.

        %NULL will be returned if there is no icon or if the icon was
        set by some other method (e.g., by `GdkPaintable` or icon name).

        Parameters:
            icon_pos: Icon position

        Returns:
            Optional[Gio.Icon]: A `GIcon`

        """
        ...

    def get_icon_name(self, icon_pos: EntryIconPosition) -> Optional[str]:
        """
        Retrieves the icon name used for the icon.

        %NULL is returned if there is no icon or if the icon was set
        by some other method (e.g., by `GdkPaintable` or gicon).

        Parameters:
            icon_pos: Icon position

        Returns:
            Optional[str]: An icon name

        """
        ...

    def get_icon_paintable(
        self, icon_pos: EntryIconPosition
    ) -> Optional[Gdk.Paintable]:
        """
        Retrieves the `GdkPaintable` used for the icon.

        If no `GdkPaintable` was used for the icon, %NULL is returned.

        Parameters:
            icon_pos: Icon position

        Returns:
            Optional[Gdk.Paintable]: A `GdkPaintable`
        if no icon is set for this position or the icon set is not
        a `GdkPaintable`.

        """
        ...

    def get_icon_sensitive(self, icon_pos: EntryIconPosition) -> bool:
        """
        Returns whether the icon appears sensitive or insensitive.

        Parameters:
            icon_pos: Icon position

        Returns:
            bool: %TRUE if the icon is sensitive.

        """
        ...

    def get_icon_storage_type(self, icon_pos: EntryIconPosition) -> ImageType:
        """
        Gets the type of representation being used by the icon
        to store image data.

        If the icon has no image data, the return value will
        be %GTK_IMAGE_EMPTY.

        Parameters:
            icon_pos: Icon position

        Returns:
            ImageType: image representation being used

        """
        ...

    def get_icon_tooltip_markup(self, icon_pos: EntryIconPosition) -> Optional[str]:
        """
        Gets the contents of the tooltip on the icon at the specified
        position in @entry.

        Parameters:
            icon_pos: the icon position

        Returns:
            Optional[str]: the tooltip text

        """
        ...

    def get_icon_tooltip_text(self, icon_pos: EntryIconPosition) -> Optional[str]:
        """
        Gets the contents of the tooltip on the icon at the specified
        position in @entry.

        Parameters:
            icon_pos: the icon position

        Returns:
            Optional[str]: the tooltip text

        """
        ...

    def get_input_hints(self) -> InputHints:
        """
        Gets the input hints of this `GtkEntry`.

        Parameters:


        Returns:
            InputHints: the input hints

        """
        ...

    def get_input_purpose(self) -> InputPurpose:
        """
        Gets the input purpose of the `GtkEntry`.

        Parameters:


        Returns:
            InputPurpose: the input purpose

        """
        ...

    def get_invisible_char(self) -> str:
        """
        Retrieves the character displayed in place of the actual text
        in “password mode”.

        Parameters:


        Returns:
            str: the current invisible char, or 0, if the entry does not
        show invisible text at all.

        """
        ...

    def get_max_length(self) -> int:
        """
        Retrieves the maximum allowed length of the text in @entry.

        See [method@Gtk.Entry.set_max_length].

        Parameters:


        Returns:
            int: the maximum allowed number of characters
        in `GtkEntry`, or 0 if there is no maximum.

        """
        ...

    def get_overwrite_mode(self) -> bool:
        """
        Gets whether the `GtkEntry` is in overwrite mode.

        Parameters:


        Returns:
            bool: whether the text is overwritten when typing.

        """
        ...

    def get_placeholder_text(self) -> Optional[str]:
        """
        Retrieves the text that will be displayed when @entry
        is empty and unfocused

        Parameters:


        Returns:
            Optional[str]: a pointer to the
        placeholder text as a string. This string points to
        internally allocated storage in the widget and must
        not be freed, modified or stored. If no placeholder
        text has been set, %NULL will be returned.

        """
        ...

    def get_progress_fraction(self) -> float:
        """
        Returns the current fraction of the task that’s been completed.

        See [method@Gtk.Entry.set_progress_fraction].

        Parameters:


        Returns:
            float: a fraction from 0.0 to 1.0

        """
        ...

    def get_progress_pulse_step(self) -> float:
        """
        Retrieves the pulse step set with
        gtk_entry_set_progress_pulse_step().

        Parameters:


        Returns:
            float: a fraction from 0.0 to 1.0

        """
        ...

    def get_tabs(self) -> Optional[Pango.TabArray]:
        """
        Gets the tabstops of the `GtkEntry`.

        See [method@Gtk.Entry.set_tabs].

        Parameters:


        Returns:
            Optional[Pango.TabArray]: the tabstops

        """
        ...

    def get_text_length(self) -> int:
        """
        Retrieves the current length of the text in @entry.

        This is equivalent to getting @entry's `GtkEntryBuffer`
        and calling [method@Gtk.EntryBuffer.get_length] on it.

        Parameters:


        Returns:
            int: the current number of characters
        in `GtkEntry`, or 0 if there are none.

        """
        ...

    def get_visibility(self) -> bool:
        """
        Retrieves whether the text in @entry is visible.

        See [method@Gtk.Entry.set_visibility].

        Parameters:


        Returns:
            bool: %TRUE if the text is currently visible

        """
        ...

    def grab_focus_without_selecting(self) -> bool:
        """
        Causes @entry to have keyboard focus.

        It behaves like [method@Gtk.Widget.grab_focus], except that it doesn't
        select the contents of the entry. You only want to call this on some
        special entries which the user usually doesn't want to replace all text
        in, such as search-as-you-type entries.

        Parameters:


        Returns:
            bool: %TRUE if focus is now inside @self

        """
        ...

    @classmethod
    def new(cls) -> Entry:
        """
        Creates a new entry.

        Parameters:


        Returns:
            Widget: a new `GtkEntry`.

        """
        ...

    @classmethod
    def new_with_buffer(cls, buffer: EntryBuffer) -> Entry:
        """
        Creates a new entry with the specified text buffer.

        Parameters:
            buffer: The buffer to use for the new `GtkEntry`.

        Returns:
            Widget: a new `GtkEntry`

        """
        ...

    def progress_pulse(self) -> None:
        """
        Indicates that some progress is made, but you don’t
        know how much.

        Causes the entry’s progress indicator to enter “activity
        mode”, where a block bounces back and forth. Each call to
        gtk_entry_progress_pulse() causes the block to move by a
        little bit (the amount of movement per pulse is determined
        by [method@Gtk.Entry.set_progress_pulse_step]).

        Parameters:


        Returns:

        """
        ...

    def reset_im_context(self) -> None:
        """
        Reset the input method context of the entry if needed.

        This can be necessary in the case where modifying the buffer
        would confuse on-going input method behavior.

        Parameters:


        Returns:

        """
        ...

    def set_activates_default(self, setting: bool) -> None:
        """
        Sets whether pressing Enter in the @entry will activate the default
        widget for the window containing the entry.

        This usually means that the dialog containing the entry will be closed,
        since the default widget is usually one of the dialog buttons.

        Parameters:
            setting: %TRUE to activate window’s default widget on Enter keypress

        Returns:

        """
        ...

    def set_alignment(self, xalign: float) -> None:
        """
        Sets the alignment for the contents of the entry.

        This controls the horizontal positioning of the contents when
        the displayed text is shorter than the width of the entry.

        See also: [property@Gtk.Editable:xalign]

        Parameters:
            xalign: The horizontal alignment, from 0 (left) to 1 (right).
        Reversed for RTL layouts

        Returns:

        """
        ...

    def set_attributes(self, attrs: Pango.AttrList) -> None:
        """
        Sets a `PangoAttrList`.

        The attributes in the list are applied to the entry text.

        Since the attributes will be applied to text that changes
        as the user types, it makes most sense to use attributes
        with unlimited extent.

        Parameters:
            attrs: a `PangoAttrList`

        Returns:

        """
        ...

    def set_buffer(self, buffer: EntryBuffer) -> None:
        """
        Set the `GtkEntryBuffer` object which holds the text for
        this widget.

        Parameters:
            buffer: a `GtkEntryBuffer`

        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def set_completion(self, completion: Optional[EntryCompletion] = None) -> None:
        """
        Sets @completion to be the auxiliary completion object
        to use with @entry.

        All further configuration of the completion mechanism is
        done on @completion using the `GtkEntryCompletion` API.
        Completion is disabled if @completion is set to %NULL.

        Parameters:
            completion: The `GtkEntryCompletion`

        Returns:

        """
        ...

    def set_extra_menu(self, model: Optional[Gio.MenuModel] = None) -> None:
        """
        Sets a menu model to add when constructing
        the context menu for @entry.

        Parameters:
            model: a `GMenuModel`

        Returns:

        """
        ...

    def set_has_frame(self, setting: bool) -> None:
        """
        Sets whether the entry has a beveled frame around it.

        Parameters:
            setting: new value

        Returns:

        """
        ...

    def set_icon_activatable(
        self, icon_pos: EntryIconPosition, activatable: bool
    ) -> None:
        """
        Sets whether the icon is activatable.

        Parameters:
            icon_pos: Icon position
            activatable: %TRUE if the icon should be activatable

        Returns:

        """
        ...

    def set_icon_drag_source(
        self,
        icon_pos: EntryIconPosition,
        provider: Gdk.ContentProvider,
        actions: Gdk.DragAction,
    ) -> None:
        """
        Sets up the icon at the given position as drag source.

        This makes it so that GTK will start a drag
        operation when the user clicks and drags the icon.

        Parameters:
            icon_pos: icon position
            provider: a `GdkContentProvider`
            actions: a bitmask of the allowed drag actions

        Returns:

        """
        ...

    def set_icon_from_gicon(
        self, icon_pos: EntryIconPosition, icon: Optional[Gio.Icon] = None
    ) -> None:
        """
        Sets the icon shown in the entry at the specified position
        from the current icon theme.

        If the icon isn’t known, a “broken image” icon will be
        displayed instead.

        If @icon is %NULL, no icon will be shown in the
        specified position.

        Parameters:
            icon_pos: The position at which to set the icon
            icon: The icon to set

        Returns:

        """
        ...

    def set_icon_from_icon_name(
        self, icon_pos: EntryIconPosition, icon_name: Optional[str] = None
    ) -> None:
        """
        Sets the icon shown in the entry at the specified position
        from the current icon theme.

        If the icon name isn’t known, a “broken image” icon will be
        displayed instead.

        If @icon_name is %NULL, no icon will be shown in the
        specified position.

        Parameters:
            icon_pos: The position at which to set the icon
            icon_name: An icon name

        Returns:

        """
        ...

    def set_icon_from_paintable(
        self, icon_pos: EntryIconPosition, paintable: Optional[Gdk.Paintable] = None
    ) -> None:
        """
        Sets the icon shown in the specified position using a `GdkPaintable`.

        If @paintable is %NULL, no icon will be shown in the specified position.

        Parameters:
            icon_pos: Icon position
            paintable: A `GdkPaintable`

        Returns:

        """
        ...

    def set_icon_sensitive(self, icon_pos: EntryIconPosition, sensitive: bool) -> None:
        """
        Sets the sensitivity for the specified icon.

        Parameters:
            icon_pos: Icon position
            sensitive: Specifies whether the icon should appear
        sensitive or insensitive

        Returns:

        """
        ...

    def set_icon_tooltip_markup(
        self, icon_pos: EntryIconPosition, tooltip: Optional[str] = None
    ) -> None:
        """
        Sets @tooltip as the contents of the tooltip for the icon at
        the specified position.

        @tooltip is assumed to be marked up with Pango Markup.

        Use %NULL for @tooltip to remove an existing tooltip.

        See also [method@Gtk.Widget.set_tooltip_markup] and
        [method@Gtk.Entry.set_icon_tooltip_text].

        Parameters:
            icon_pos: the icon position
            tooltip: the contents of the tooltip for the icon

        Returns:

        """
        ...

    def set_icon_tooltip_text(
        self, icon_pos: EntryIconPosition, tooltip: Optional[str] = None
    ) -> None:
        """
        Sets @tooltip as the contents of the tooltip for the icon
        at the specified position.

        Use %NULL for @tooltip to remove an existing tooltip.

        See also [method@Gtk.Widget.set_tooltip_text] and
        [method@Gtk.Entry.set_icon_tooltip_markup].

        If you unset the widget tooltip via
        [method@Gtk.Widget.set_tooltip_text] or
        [method@Gtk.Widget.set_tooltip_markup], this sets
        [property@Gtk.Widget:has-tooltip] to %FALSE, which suppresses
        icon tooltips too. You can resolve this by then calling
        [method@Gtk.Widget.set_has_tooltip] to set
        [property@Gtk.Widget:has-tooltip] back to %TRUE, or
        setting at least one non-empty tooltip on any icon
        achieves the same result.

        Parameters:
            icon_pos: the icon position
            tooltip: the contents of the tooltip for the icon

        Returns:

        """
        ...

    def set_input_hints(self, hints: InputHints) -> None:
        """
        Set additional hints which allow input methods to
        fine-tune their behavior.

        Parameters:
            hints: the hints

        Returns:

        """
        ...

    def set_input_purpose(self, purpose: InputPurpose) -> None:
        """
        Sets the input purpose which can be used by input methods
        to adjust their behavior.

        Parameters:
            purpose: the purpose

        Returns:

        """
        ...

    def set_invisible_char(self, ch: str) -> None:
        """
        Sets the character to use in place of the actual text
        in “password mode”.

        See [method@Gtk.Entry.set_visibility] for how to enable
        “password mode”.

        By default, GTK picks the best invisible char available in
        the current font. If you set the invisible char to 0, then
        the user will get no feedback at all; there will be no text
        on the screen as they type.

        Parameters:
            ch: a Unicode character

        Returns:

        """
        ...

    def set_max_length(self, max: int) -> None:
        """
        Sets the maximum allowed length of the contents of the widget.

        If the current contents are longer than the given length, then
        they will be truncated to fit. The length is in characters.

        This is equivalent to getting @entry's `GtkEntryBuffer` and
        calling [method@Gtk.EntryBuffer.set_max_length] on it.

        Parameters:
            max: the maximum length of the entry, or 0 for no maximum.
        (other than the maximum length of entries.) The value passed in will
        be clamped to the range 0-65536.

        Returns:

        """
        ...

    def set_overwrite_mode(self, overwrite: bool) -> None:
        """
        Sets whether the text is overwritten when typing in the `GtkEntry`.

        Parameters:
            overwrite: new value

        Returns:

        """
        ...

    def set_placeholder_text(self, text: Optional[str] = None) -> None:
        """
        Sets text to be displayed in @entry when it is empty.

        This can be used to give a visual hint of the expected
        contents of the `GtkEntry`.

        Parameters:
            text: a string to be displayed when @entry is empty and unfocused

        Returns:

        """
        ...

    def set_progress_fraction(self, fraction: float) -> None:
        """
        Causes the entry’s progress indicator to “fill in” the given
        fraction of the bar.

        The fraction should be between 0.0 and 1.0, inclusive.

        Parameters:
            fraction: fraction of the task that’s been completed

        Returns:

        """
        ...

    def set_progress_pulse_step(self, fraction: float) -> None:
        """
        Sets the fraction of total entry width to move the progress
        bouncing block for each pulse.

        Use [method@Gtk.Entry.progress_pulse] to pulse
        the progress.

        Parameters:
            fraction: fraction between 0.0 and 1.0

        Returns:

        """
        ...

    def set_tabs(self, tabs: Optional[Pango.TabArray] = None) -> None:
        """
        Sets a `PangoTabArray`.

        The tabstops in the array are applied to the entry text.

        Parameters:
            tabs: a `PangoTabArray`

        Returns:

        """
        ...

    def set_visibility(self, visible: bool) -> None:
        """
        Sets whether the contents of the entry are visible or not.

        When visibility is set to %FALSE, characters are displayed
        as the invisible char, and will also appear that way when
        the text in the entry widget is copied elsewhere.

        By default, GTK picks the best invisible character available
        in the current font, but it can be changed with
        [method@Gtk.Entry.set_invisible_char].

        Note that you probably want to set [property@Gtk.Entry:input-purpose]
        to %GTK_INPUT_PURPOSE_PASSWORD or %GTK_INPUT_PURPOSE_PIN to
        inform input methods about the purpose of this entry,
        in addition to setting visibility to %FALSE.

        Parameters:
            visible: %TRUE if the contents of the entry are displayed as plaintext

        Returns:

        """
        ...

    def unset_invisible_char(self) -> None:
        """
        Unsets the invisible char, so that the default invisible char
        is used again. See [method@Gtk.Entry.set_invisible_char].

        Parameters:


        Returns:

        """
        ...

class EntryBuffer(GObject.Object):
    """
    A `GtkEntryBuffer` hold the text displayed in a `GtkText` widget.

    A single `GtkEntryBuffer` object can be shared by multiple widgets
    which will then share the same text content, but not the cursor
    position, visibility attributes, icon etc.

    `GtkEntryBuffer` may be derived from. Such a derived class might allow
    text to be stored in an alternate location, such as non-pageable memory,
    useful in the case of important passwords. Or a derived class could
    integrate with an application’s concept of undo/redo.

    :Constructors:

    ::

        EntryBuffer(**properties)
        new(initial_chars:str=None, n_initial_chars:int) -> Gtk.EntryBuffer

    Object GtkEntryBuffer

    Signals from GtkEntryBuffer:
      inserted-text (guint, gchararray, guint)
      deleted-text (guint, guint)

    Properties from GtkEntryBuffer:
      text -> gchararray: text
      length -> guint: length
      max-length -> gint: max-length

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        length: int
        """
        The length (in characters) of the text in buffer.
        """
        max_length: int
        """
        The maximum length (in characters) of the text in the buffer.
        """
        text: str
        """
        The contents of the buffer.
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    def __init__(self, max_length: int = ..., text: str = ...): ...
    def delete_text(self, position: int, n_chars: int) -> int:
        """
        Deletes a sequence of characters from the buffer.

        @n_chars characters are deleted starting at @position.
        If @n_chars is negative, then all characters until the
        end of the text are deleted.

        If @position or @n_chars are out of bounds, then they
        are coerced to sane values.

        Note that the positions are specified in characters,
        not bytes.

        Parameters:
            position: position at which to delete text
            n_chars: number of characters to delete

        Returns:
            int: The number of characters deleted.

        """
        ...

    def do_delete_text(self, position: int, n_chars: int) -> int:
        """
        Deletes a sequence of characters from the buffer.

        @n_chars characters are deleted starting at @position.
        If @n_chars is negative, then all characters until the
        end of the text are deleted.

        If @position or @n_chars are out of bounds, then they
        are coerced to sane values.

        Note that the positions are specified in characters,
        not bytes.

        Parameters:
            position: position at which to delete text
            n_chars: number of characters to delete

        Returns:
            int: The number of characters deleted.

        """
        ...

    def do_deleted_text(self, position: int, n_chars: int) -> None: ...
    def do_get_length(self) -> int:
        """
        Retrieves the length in characters of the buffer.

        Parameters:


        Returns:
            int: The number of characters in the buffer.

        """
        ...

    def do_get_text(self, n_bytes: int) -> str: ...
    def do_insert_text(self, position: int, chars: str, n_chars: int) -> int:
        """
        Inserts @n_chars characters of @chars into the contents of the
        buffer, at position @position.

        If @n_chars is negative, then characters from chars will be inserted
        until a null-terminator is found. If @position or @n_chars are out of
        bounds, or the maximum buffer text length is exceeded, then they are
        coerced to sane values.

        Note that the position and length are in characters, not in bytes.

        Parameters:
            position: the position at which to insert text.
            chars: the text to insert into the buffer.
            n_chars: the length of the text in characters, or -1

        Returns:
            int: The number of characters actually inserted.

        """
        ...

    def do_inserted_text(self, position: int, chars: str, n_chars: int) -> None: ...
    def emit_deleted_text(self, position: int, n_chars: int) -> None:
        """
        Used when subclassing `GtkEntryBuffer`.

        Parameters:
            position: position at which text was deleted
            n_chars: number of characters deleted

        Returns:

        """
        ...

    def emit_inserted_text(self, position: int, chars: str, n_chars: int) -> None:
        """
        Used when subclassing `GtkEntryBuffer`.

        Parameters:
            position: position at which text was inserted
            chars: text that was inserted
            n_chars: number of characters inserted

        Returns:

        """
        ...

    def get_bytes(self) -> int:
        """
        Retrieves the length in bytes of the buffer.

        See [method@Gtk.EntryBuffer.get_length].

        Parameters:


        Returns:
            int: The byte length of the buffer.

        """
        ...

    def get_length(self) -> int:
        """
        Retrieves the length in characters of the buffer.

        Parameters:


        Returns:
            int: The number of characters in the buffer.

        """
        ...

    def get_max_length(self) -> int:
        """
        Retrieves the maximum allowed length of the text in @buffer.

        Parameters:


        Returns:
            int: the maximum allowed number of characters
        in `GtkEntryBuffer`, or 0 if there is no maximum.

        """
        ...

    def get_text(self) -> str:
        """
        Retrieves the contents of the buffer.

        The memory pointer returned by this call will not change
        unless this object emits a signal, or is finalized.

        Parameters:


        Returns:
            str: a pointer to the contents of the widget as a
        string. This string points to internally allocated storage
        in the buffer and must not be freed, modified or stored.

        """
        ...

    def insert_text(self, position: int, chars: str, n_chars: int) -> int:
        """
        Inserts @n_chars characters of @chars into the contents of the
        buffer, at position @position.

        If @n_chars is negative, then characters from chars will be inserted
        until a null-terminator is found. If @position or @n_chars are out of
        bounds, or the maximum buffer text length is exceeded, then they are
        coerced to sane values.

        Note that the position and length are in characters, not in bytes.

        Parameters:
            position: the position at which to insert text.
            chars: the text to insert into the buffer.
            n_chars: the length of the text in characters, or -1

        Returns:
            int: The number of characters actually inserted.

        """
        ...

    @classmethod
    def new(cls, initial_chars: Optional[str], n_initial_chars: int) -> EntryBuffer:
        """
        Create a new `GtkEntryBuffer` object.

        Optionally, specify initial text to set in the buffer.

        Parameters:
            initial_chars: initial buffer text
            n_initial_chars: number of characters in @initial_chars, or -1

        Returns:
            EntryBuffer: A new `GtkEntryBuffer` object.

        """
        ...

    def set_max_length(self, max_length: int) -> None:
        """
        Sets the maximum allowed length of the contents of the buffer.

        If the current contents are longer than the given length, then
        they will be truncated to fit.

        Parameters:
            max_length: the maximum length of the entry buffer, or 0 for no maximum.
        (other than the maximum length of entries.) The value passed in will
        be clamped to the range 0-65536.

        Returns:

        """
        ...

    def set_text(self, chars: str, n_chars: int) -> None:
        """
        Sets the text in the buffer.

        This is roughly equivalent to calling
        [method@Gtk.EntryBuffer.delete_text] and
        [method@Gtk.EntryBuffer.insert_text].

        Note that @n_chars is in characters, not in bytes.

        Parameters:
            chars: the new text
            n_chars: the number of characters in @text, or -1

        Returns:

        """
        ...

class EntryBufferClass(GObject.GPointer):
    """
    :Constructors:

    ::

        EntryBufferClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    inserted_text: Callable[[EntryBuffer, int, str, int], None] = ...
    deleted_text: Callable[[EntryBuffer, int, int], None] = ...
    get_text: Callable[[EntryBuffer, int], str] = ...
    get_length: Callable[[EntryBuffer], int] = ...
    insert_text: Callable[[EntryBuffer, int, str, int], int] = ...
    delete_text: Callable[[EntryBuffer, int, int], int] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...
    _gtk_reserved5: None = ...
    _gtk_reserved6: None = ...
    _gtk_reserved7: None = ...
    _gtk_reserved8: None = ...

class EntryClass(GObject.GPointer):
    """
    Class structure for `GtkEntry`. All virtual functions have a default
    implementation. Derived classes may set the virtual function pointers for the
    signal handlers to %NULL, but must keep @get_text_area_size and
    @get_frame_size non-%NULL; either use the default implementation, or provide
    a custom one.

    :Constructors:

    ::

        EntryClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    activate: Callable[[Entry], None] = ...
    padding: list[None] = ...

@deprecated("This class is deprecated")
class EntryCompletion(GObject.Object, Buildable, CellLayout):
    """
    `GtkEntryCompletion` is an auxiliary object to provide completion functionality
    for `GtkEntry`.

    It implements the [iface@Gtk.CellLayout] interface, to allow the user
    to add extra cells to the `GtkTreeView` with completion matches.

    “Completion functionality” means that when the user modifies the text
    in the entry, `GtkEntryCompletion` checks which rows in the model match
    the current content of the entry, and displays a list of matches.
    By default, the matching is done by comparing the entry text
    case-insensitively against the text column of the model (see
    [method@Gtk.EntryCompletion.set_text_column]), but this can be overridden
    with a custom match function (see [method@Gtk.EntryCompletion.set_match_func]).

    When the user selects a completion, the content of the entry is
    updated. By default, the content of the entry is replaced by the
    text column of the model, but this can be overridden by connecting
    to the [signal@Gtk.EntryCompletion::match-selected] signal and updating the
    entry in the signal handler. Note that you should return %TRUE from
    the signal handler to suppress the default behaviour.

    To add completion functionality to an entry, use
    [method@Gtk.Entry.set_completion].

    `GtkEntryCompletion` uses a [class@Gtk.TreeModelFilter] model to
    represent the subset of the entire model that is currently matching.
    While the `GtkEntryCompletion` signals
    [signal@Gtk.EntryCompletion::match-selected] and
    [signal@Gtk.EntryCompletion::cursor-on-match] take the original model
    and an iter pointing to that model as arguments, other callbacks and
    signals (such as `GtkCellLayoutDataFunc` or
    [signal@Gtk.CellArea::apply-attributes)]
    will generally take the filter model as argument. As long as you are
    only calling [method@Gtk.TreeModel.get], this will make no difference to
    you. If for some reason, you need the original model, use
    [method@Gtk.TreeModelFilter.get_model]. Don’t forget to use
    [method@Gtk.TreeModelFilter.convert_iter_to_child_iter] to obtain a
    matching iter.

    :Constructors:

    ::

        EntryCompletion(**properties)
        new() -> Gtk.EntryCompletion
        new_with_area(area:Gtk.CellArea) -> Gtk.EntryCompletion

    Object GtkEntryCompletion

    Signals from GtkEntryCompletion:
      insert-prefix (gchararray) -> gboolean
      match-selected (GtkTreeModel, GtkTreeIter) -> gboolean
      cursor-on-match (GtkTreeModel, GtkTreeIter) -> gboolean
      no-matches ()

    Properties from GtkEntryCompletion:
      model -> GtkTreeModel: model
      minimum-key-length -> gint: minimum-key-length
      text-column -> gint: text-column
      inline-completion -> gboolean: inline-completion
      popup-completion -> gboolean: popup-completion
      popup-set-width -> gboolean: popup-set-width
      popup-single-match -> gboolean: popup-single-match
      inline-selection -> gboolean: inline-selection
      cell-area -> GtkCellArea: cell-area

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Buildable.Props, CellLayout.Props):
        cell_area: CellArea
        """
        The `GtkCellArea` used to layout cell renderers in the treeview column.

        If no area is specified when creating the entry completion with
        [ctor@Gtk.EntryCompletion.new_with_area], a horizontally oriented
        [class@Gtk.CellAreaBox] will be used.
        """
        inline_completion: bool
        """
        Determines whether the common prefix of the possible completions
        should be inserted automatically in the entry.

        Note that this requires text-column to be set, even if you are
        using a custom match function.
        """
        inline_selection: bool
        """
        Determines whether the possible completions on the popup
        will appear in the entry as you navigate through them.
        """
        minimum_key_length: int
        model: Optional[TreeModel]
        popup_completion: bool
        """
        Determines whether the possible completions should be
        shown in a popup window.
        """
        popup_set_width: bool
        """
        Determines whether the completions popup window will be
        resized to the width of the entry.
        """
        popup_single_match: bool
        """
        Determines whether the completions popup window will shown
        for a single possible completion.

        You probably want to set this to %FALSE if you are using
        [property@Gtk.EntryCompletion:inline-completion].
        """
        text_column: int
        """
        The column of the model containing the strings.

        Note that the strings must be UTF-8.
        """

    props: Props = ...
    def __init__(
        self,
        cell_area: CellArea = ...,
        inline_completion: bool = ...,
        inline_selection: bool = ...,
        minimum_key_length: int = ...,
        model: Optional[TreeModel] = ...,
        popup_completion: bool = ...,
        popup_set_width: bool = ...,
        popup_single_match: bool = ...,
        text_column: int = ...,
    ): ...
    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def complete(self) -> None:
        """
        Requests a completion operation, or in other words a refiltering of the
        current list with completions, using the current key.

        The completion list view will be updated accordingly.

        Parameters:


        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def compute_prefix(self, key: str) -> Optional[str]:
        """
        Computes the common prefix that is shared by all rows in @completion
        that start with @key.

        If no row matches @key, %NULL will be returned.
        Note that a text column must have been set for this function to work,
        see [method@Gtk.EntryCompletion.set_text_column] for details.

        Parameters:
            key: The text to complete for

        Returns:
            Optional[str]: The common prefix all rows
        starting with @key

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_completion_prefix(self) -> Optional[str]:
        """
        Get the original text entered by the user that triggered
        the completion or %NULL if there’s no completion ongoing.

        Parameters:


        Returns:
            Optional[str]: the prefix for the current completion

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_entry(self) -> Widget:
        """
        Gets the entry @completion has been attached to.

        Parameters:


        Returns:
            Widget: The entry @completion has been attached to

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_inline_completion(self) -> bool:
        """
        Returns whether the common prefix of the possible completions should
        be automatically inserted in the entry.

        Parameters:


        Returns:
            bool: %TRUE if inline completion is turned on

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_inline_selection(self) -> bool:
        """
        Returns %TRUE if inline-selection mode is turned on.

        Parameters:


        Returns:
            bool: %TRUE if inline-selection mode is on

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_minimum_key_length(self) -> int:
        """
        Returns the minimum key length as set for @completion.

        Parameters:


        Returns:
            int: The currently used minimum key length

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_model(self) -> Optional[TreeModel]:
        """
        Returns the model the `GtkEntryCompletion` is using as data source.

        Returns %NULL if the model is unset.

        Parameters:


        Returns:
            Optional[TreeModel]: A `GtkTreeModel`

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_popup_completion(self) -> bool:
        """
        Returns whether the completions should be presented in a popup window.

        Parameters:


        Returns:
            bool: %TRUE if popup completion is turned on

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_popup_set_width(self) -> bool:
        """
        Returns whether the completion popup window will be resized to the
        width of the entry.

        Parameters:


        Returns:
            bool: %TRUE if the popup window will be resized to the width of
        the entry

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_popup_single_match(self) -> bool:
        """
        Returns whether the completion popup window will appear even if there is
        only a single match.

        Parameters:


        Returns:
            bool: %TRUE if the popup window will appear regardless of the
        number of matches

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def get_text_column(self) -> int:
        """
        Returns the column in the model of @completion to get strings from.

        Parameters:


        Returns:
            int: the column containing the strings

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def insert_prefix(self) -> None:
        """
        Requests a prefix insertion.

        Parameters:


        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    @classmethod
    def new(cls) -> EntryCompletion:
        """
        Creates a new `GtkEntryCompletion` object.

        Parameters:


        Returns:
            EntryCompletion: A newly created `GtkEntryCompletion` object

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    @classmethod
    def new_with_area(cls, area: CellArea) -> EntryCompletion:
        """
        Creates a new `GtkEntryCompletion` object using the
        specified @area.

        The `GtkCellArea` is used to layout cells in the underlying
        `GtkTreeViewColumn` for the drop-down menu.

        Parameters:
            area: the `GtkCellArea` used to layout cells

        Returns:
            EntryCompletion: A newly created `GtkEntryCompletion` object

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def set_inline_completion(self, inline_completion: bool) -> None:
        """
        Sets whether the common prefix of the possible completions should
        be automatically inserted in the entry.

        Parameters:
            inline_completion: %TRUE to do inline completion

        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def set_inline_selection(self, inline_selection: bool) -> None:
        """
        Sets whether it is possible to cycle through the possible completions
        inside the entry.

        Parameters:
            inline_selection: %TRUE to do inline selection

        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def set_match_func(self, func: Callable[..., bool], *func_data: Any) -> None:
        """
        Sets the match function for @completion to be @func.

        The match function is used to determine if a row should or
        should not be in the completion list.

        Parameters:
            func: the `GtkEntryCompletion`MatchFunc to use
            func_data: user data for @func

        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def set_minimum_key_length(self, length: int) -> None:
        """
        Requires the length of the search key for @completion to be at least
        @length.

        This is useful for long lists, where completing using a small
        key takes a lot of time and will come up with meaningless results anyway
        (ie, a too large dataset).

        Parameters:
            length: the minimum length of the key in order to start completing

        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def set_model(self, model: Optional[TreeModel] = None) -> None:
        """
        Sets the model for a `GtkEntryCompletion`.

        If @completion already has a model set, it will remove it
        before setting the new model. If model is %NULL, then it
        will unset the model.

        Parameters:
            model: the `GtkTreeModel`

        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def set_popup_completion(self, popup_completion: bool) -> None:
        """
        Sets whether the completions should be presented in a popup window.

        Parameters:
            popup_completion: %TRUE to do popup completion

        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def set_popup_set_width(self, popup_set_width: bool) -> None:
        """
        Sets whether the completion popup window will be resized to be the same
        width as the entry.

        Parameters:
            popup_set_width: %TRUE to make the width of the popup the same as the entry

        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def set_popup_single_match(self, popup_single_match: bool) -> None:
        """
        Sets whether the completion popup window will appear even if there is
        only a single match.

        You may want to set this to %FALSE if you
        are using [property@Gtk.EntryCompletion:inline-completion].

        Parameters:
            popup_single_match: %TRUE if the popup should appear even for a single match

        Returns:

        """
        ...

    @deprecated("GtkEntryCompletion will be removed in GTK 5.")
    def set_text_column(self, column: int) -> None:
        """
        Convenience function for setting up the most used case of this code: a
        completion list with just strings.

        This function will set up @completion
        to have a list displaying all (and just) strings in the completion list,
        and to get those strings from @column in the model of @completion.

        This functions creates and adds a `GtkCellRendererText` for the selected
        column. If you need to set the text column, but don't want the cell
        renderer, use g_object_set() to set the
        [property@Gtk.EntryCompletion:text-column] property directly.

        Parameters:
            column: the column in the model of @completion to get strings from

        Returns:

        """
        ...

class EventController(GObject.Object):
    """
    `GtkEventController` is the base class for event controllers.

    These are ancillary objects associated to widgets, which react
    to `GdkEvents`, and possibly trigger actions as a consequence.

    Event controllers are added to a widget with
    [method@Gtk.Widget.add_controller]. It is rarely necessary to
    explicitly remove a controller with [method@Gtk.Widget.remove_controller].

    See the chapter on [input handling](input-handling.html) for
    an overview of the basic concepts, such as the capture and bubble
    phases of event propagation.

    :Constructors:

    ::

        EventController(**properties)

    Object GtkEventController

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        name: Optional[str]
        """
        The name for this controller, typically used for debugging purposes.
        """
        propagation_limit: PropagationLimit
        """
        The limit for which events this controller will handle.
        """
        propagation_phase: PropagationPhase
        """
        The propagation phase at which this controller will handle events.
        """
        widget: Widget
        """
        The widget receiving the `GdkEvents` that the controller will handle.
        """

    props: Props = ...
    def __init__(
        self,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_current_event(self) -> Optional[Gdk.Event]:
        """
        Returns the event that is currently being handled by the controller.

        At other times, %NULL is returned.

        Parameters:


        Returns:
            Optional[Gdk.Event]: the event that is currently
        handled by @controller

        """
        ...

    def get_current_event_device(self) -> Optional[Gdk.Device]:
        """
        Returns the device of the event that is currently being
        handled by the controller.

        At other times, %NULL is returned.

        Parameters:


        Returns:
            Optional[Gdk.Device]: device of the event is
        currently handled by @controller

        """
        ...

    def get_current_event_state(self) -> Gdk.ModifierType:
        """
        Returns the modifier state of the event that is currently being
        handled by the controller.

        At other times, 0 is returned.

        Parameters:


        Returns:
            Gdk.ModifierType: modifier state of the event is currently handled by @controller

        """
        ...

    def get_current_event_time(self) -> int:
        """
        Returns the timestamp of the event that is currently being
        handled by the controller.

        At other times, 0 is returned.

        Parameters:


        Returns:
            int: timestamp of the event is currently handled by @controller

        """
        ...

    def get_name(self) -> Optional[str]:
        """
        Gets the name of @controller.

        Parameters:


        Returns:
            Optional[str]: The controller name

        """
        ...

    def get_propagation_limit(self) -> PropagationLimit:
        """
        Gets the propagation limit of the event controller.

        Parameters:


        Returns:
            PropagationLimit: the propagation limit

        """
        ...

    def get_propagation_phase(self) -> PropagationPhase:
        """
        Gets the propagation phase at which @controller handles events.

        Parameters:


        Returns:
            PropagationPhase: the propagation phase

        """
        ...

    def get_widget(self) -> Widget:
        """
        Returns the `GtkWidget` this controller relates to.

        Parameters:


        Returns:
            Widget: a `GtkWidget`

        """
        ...

    def reset(self) -> None:
        """
        Resets the @controller to a clean state.

        Parameters:


        Returns:

        """
        ...

    def set_name(self, name: Optional[str] = None) -> None:
        """
        Sets a name on the controller that can be used for debugging.

        Parameters:
            name: a name for @controller

        Returns:

        """
        ...

    def set_propagation_limit(self, limit: PropagationLimit) -> None:
        """
        Sets the event propagation limit on the event controller.

        If the limit is set to %GTK_LIMIT_SAME_NATIVE, the controller
        won't handle events that are targeted at widgets on a different
        surface, such as popovers.

        Parameters:
            limit: the propagation limit

        Returns:

        """
        ...

    def set_propagation_phase(self, phase: PropagationPhase) -> None:
        """
        Sets the propagation phase at which a controller handles events.

        If @phase is %GTK_PHASE_NONE, no automatic event handling will be
        performed, but other additional gesture maintenance will.

        Parameters:
            phase: a propagation phase

        Returns:

        """
        ...

    def set_static_name(self, name: Optional[str] = None) -> None:
        """
        Sets a name on the controller that can be used for debugging.

        Parameters:
            name: a name for @controller, must be a static string

        Returns:

        """
        ...

class EventControllerClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class EventControllerFocus(EventController):
    """
    `GtkEventControllerFocus` is an event controller to keep track of
    keyboard focus.

    The event controller offers [signal@Gtk.EventControllerFocus::enter]
    and [signal@Gtk.EventControllerFocus::leave] signals, as well as
    [property@Gtk.EventControllerFocus:is-focus] and
    [property@Gtk.EventControllerFocus:contains-focus] properties
    which are updated to reflect focus changes inside the widget hierarchy
    that is rooted at the controllers widget.

    :Constructors:

    ::

        EventControllerFocus(**properties)
        new() -> Gtk.EventController

    Object GtkEventControllerFocus

    Signals from GtkEventControllerFocus:
      enter ()
      leave ()

    Properties from GtkEventControllerFocus:
      is-focus -> gboolean: is-focus
      contains-focus -> gboolean: contains-focus

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props):
        contains_focus: bool
        """
        %TRUE if focus is contained in the controllers widget.

        See [property@Gtk.EventControllerFocus:is-focus] for whether
        the focus is in the widget itself or inside a descendent.

        When handling focus events, this property is updated
        before [signal@Gtk.EventControllerFocus::enter] or
        [signal@Gtk.EventControllerFocus::leave] are emitted.
        """
        is_focus: bool
        """
        %TRUE if focus is in the controllers widget itself,
        as opposed to in a descendent widget.

        See also [property@Gtk.EventControllerFocus:contains-focus].

        When handling focus events, this property is updated
        before [signal@Gtk.EventControllerFocus::enter] or
        [signal@Gtk.EventControllerFocus::leave] are emitted.
        """

    props: Props = ...
    def __init__(
        self,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def contains_focus(self) -> bool:
        """
        Returns %TRUE if focus is within @self or one of its children.

        Parameters:


        Returns:
            bool: %TRUE if focus is within @self or one of its children

        """
        ...

    def is_focus(self) -> bool:
        """
        Returns %TRUE if focus is within @self, but not one of its children.

        Parameters:


        Returns:
            bool: %TRUE if focus is within @self, but not one of its children

        """
        ...

    @classmethod
    def new(cls) -> EventControllerFocus:
        """
        Creates a new event controller that will handle focus events.

        Parameters:


        Returns:
            EventController: a new `GtkEventControllerFocus`

        """
        ...

class EventControllerFocusClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class EventControllerKey(EventController):
    """
    `GtkEventControllerKey` is an event controller that provides access
    to key events.

    :Constructors:

    ::

        EventControllerKey(**properties)
        new() -> Gtk.EventController

    Object GtkEventControllerKey

    Signals from GtkEventControllerKey:
      modifiers (GdkModifierType) -> gboolean
      key-pressed (guint, guint, GdkModifierType) -> gboolean
      key-released (guint, guint, GdkModifierType)
      im-update ()

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props): ...

    def __init__(
        self,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def forward(self, widget: Widget) -> bool:
        """
        Forwards the current event of this @controller to a @widget.

        This function can only be used in handlers for the
        [signal@Gtk.EventControllerKey::key-pressed],
        [signal@Gtk.EventControllerKey::key-released]
        or [signal@Gtk.EventControllerKey::modifiers] signals.

        Parameters:
            widget: a `GtkWidget`

        Returns:
            bool: whether the @widget handled the event

        """
        ...

    def get_group(self) -> int:
        """
        Gets the key group of the current event of this @controller.

        See [method@Gdk.KeyEvent.get_layout].

        Parameters:


        Returns:
            int: the key group

        """
        ...

    def get_im_context(self) -> Optional[IMContext]:
        """
        Gets the input method context of the key @controller.

        Parameters:


        Returns:
            Optional[IMContext]: the `GtkIMContext`

        """
        ...

    @classmethod
    def new(cls) -> EventControllerKey:
        """
        Creates a new event controller that will handle key events.

        Parameters:


        Returns:
            EventController: a new `GtkEventControllerKey`

        """
        ...

    def set_im_context(self, im_context: Optional[IMContext] = None) -> None:
        """
        Sets the input method context of the key @controller.

        Parameters:
            im_context: a `GtkIMContext`

        Returns:

        """
        ...

class EventControllerKeyClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class EventControllerLegacy(EventController):
    """
    `GtkEventControllerLegacy` is an event controller that provides raw
    access to the event stream.

    It should only be used as a last resort if none of the other event
    controllers or gestures do the job.

    :Constructors:

    ::

        EventControllerLegacy(**properties)
        new() -> Gtk.EventController

    Object GtkEventControllerLegacy

    Signals from GtkEventControllerLegacy:
      event (GdkEvent) -> gboolean

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props): ...

    def __init__(
        self,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    @classmethod
    def new(cls) -> EventControllerLegacy:
        """
        Creates a new legacy event controller.

        Parameters:


        Returns:
            EventController: the newly created event controller.

        """
        ...

class EventControllerLegacyClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class EventControllerMotion(EventController):
    """
    `GtkEventControllerMotion` is an event controller tracking the pointer
    position.

    The event controller offers [signal@Gtk.EventControllerMotion::enter]
    and [signal@Gtk.EventControllerMotion::leave] signals, as well as
    [property@Gtk.EventControllerMotion:is-pointer] and
    [property@Gtk.EventControllerMotion:contains-pointer] properties
    which are updated to reflect changes in the pointer position as it
    moves over the widget.

    :Constructors:

    ::

        EventControllerMotion(**properties)
        new() -> Gtk.EventController

    Object GtkEventControllerMotion

    Signals from GtkEventControllerMotion:
      enter (gdouble, gdouble)
      leave ()
      motion (gdouble, gdouble)

    Properties from GtkEventControllerMotion:
      is-pointer -> gboolean: is-pointer
      contains-pointer -> gboolean: contains-pointer

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props):
        contains_pointer: bool
        """
        Whether the pointer is in the controllers widget or a descendant.

        See also [property@Gtk.EventControllerMotion:is-pointer].

        When handling crossing events, this property is updated
        before [signal@Gtk.EventControllerMotion::enter], but after
        [signal@Gtk.EventControllerMotion::leave] is emitted.
        """
        is_pointer: bool
        """
        Whether the pointer is in the controllers widget itself,
        as opposed to in a descendent widget.

        See also [property@Gtk.EventControllerMotion:contains-pointer].

        When handling crossing events, this property is updated
        before [signal@Gtk.EventControllerMotion::enter], but after
        [signal@Gtk.EventControllerMotion::leave] is emitted.
        """

    props: Props = ...
    def __init__(
        self,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def contains_pointer(self) -> bool:
        """
        Returns if a pointer is within @self or one of its children.

        Parameters:


        Returns:
            bool: %TRUE if a pointer is within @self or one of its children

        """
        ...

    def is_pointer(self) -> bool:
        """
        Returns if a pointer is within @self, but not one of its children.

        Parameters:


        Returns:
            bool: %TRUE if a pointer is within @self but not one of its children

        """
        ...

    @classmethod
    def new(cls) -> EventControllerMotion:
        """
        Creates a new event controller that will handle motion events.

        Parameters:


        Returns:
            EventController: a new `GtkEventControllerMotion`

        """
        ...

class EventControllerMotionClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class EventControllerScroll(EventController):
    """
    `GtkEventControllerScroll` is an event controller that handles scroll
    events.

    It is capable of handling both discrete and continuous scroll
    events from mice or touchpads, abstracting them both with the
    [signal@Gtk.EventControllerScroll::scroll] signal. Deltas in
    the discrete case are multiples of 1.

    In the case of continuous scroll events, `GtkEventControllerScroll`
    encloses all [signal@Gtk.EventControllerScroll::scroll] emissions
    between two [signal@Gtk.EventControllerScroll::scroll-begin] and
    [signal@Gtk.EventControllerScroll::scroll-end] signals.

    The behavior of the event controller can be modified by the flags
    given at creation time, or modified at a later point through
    [method@Gtk.EventControllerScroll.set_flags] (e.g. because the scrolling
    conditions of the widget changed).

    The controller can be set up to emit motion for either/both vertical
    and horizontal scroll events through %GTK_EVENT_CONTROLLER_SCROLL_VERTICAL,
    %GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL and %GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES.
    If any axis is disabled, the respective [signal@Gtk.EventControllerScroll::scroll]
    delta will be 0. Vertical scroll events will be translated to horizontal
    motion for the devices incapable of horizontal scrolling.

    The event controller can also be forced to emit discrete events on all
    devices through %GTK_EVENT_CONTROLLER_SCROLL_DISCRETE. This can be used
    to implement discrete actions triggered through scroll events (e.g.
    switching across combobox options).

    The %GTK_EVENT_CONTROLLER_SCROLL_KINETIC flag toggles the emission of the
    [signal@Gtk.EventControllerScroll::decelerate] signal, emitted at the end
    of scrolling with two X/Y velocity arguments that are consistent with the
    motion that was received.

    :Constructors:

    ::

        EventControllerScroll(**properties)
        new(flags:Gtk.EventControllerScrollFlags) -> Gtk.EventController

    Object GtkEventControllerScroll

    Signals from GtkEventControllerScroll:
      scroll-begin ()
      scroll (gdouble, gdouble) -> gboolean
      scroll-end ()
      decelerate (gdouble, gdouble)

    Properties from GtkEventControllerScroll:
      flags -> GtkEventControllerScrollFlags: flags

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props):
        flags: EventControllerScrollFlags
        """
        The flags affecting event controller behavior.
        """

    props: Props = ...
    def __init__(
        self,
        flags: EventControllerScrollFlags = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_flags(self) -> EventControllerScrollFlags:
        """
        Gets the flags conditioning the scroll controller behavior.

        Parameters:


        Returns:
            EventControllerScrollFlags: the controller flags.

        """
        ...

    def get_unit(self) -> Gdk.ScrollUnit:
        """
        Gets the scroll unit of the last
        [signal@Gtk.EventControllerScroll::scroll] signal received.

        Always returns %GDK_SCROLL_UNIT_WHEEL if the
        %GTK_EVENT_CONTROLLER_SCROLL_DISCRETE flag is set.

        Parameters:


        Returns:
            Gdk.ScrollUnit: the scroll unit.

        """
        ...

    @classmethod
    def new(cls, flags: EventControllerScrollFlags) -> EventControllerScroll:
        """
        Creates a new event controller that will handle scroll events.

        Parameters:
            flags: flags affecting the controller behavior

        Returns:
            EventController: a new `GtkEventControllerScroll`

        """
        ...

    def set_flags(self, flags: EventControllerScrollFlags) -> None:
        """
        Sets the flags conditioning scroll controller behavior.

        Parameters:
            flags: flags affecting the controller behavior

        Returns:

        """
        ...

class EventControllerScrollClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class EveryFilter(MultiFilter, Gio.ListModel, Buildable):
    """
    `GtkEveryFilter` matches an item when each of its filters matches.

    To add filters to a `GtkEveryFilter`, use [method@Gtk.MultiFilter.append].

    :Constructors:

    ::

        EveryFilter(**properties)
        new() -> Gtk.EveryFilter

    Object GtkEveryFilter

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Properties from GtkMultiFilter:
      item-type -> GType: item-type
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkFilter:
      changed (GtkFilterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(MultiFilter.Props, Gio.ListModel.Props, Buildable.Props): ...

    @classmethod
    def new(cls) -> EveryFilter:
        """
        Creates a new empty \"every\" filter.

        Use [method@Gtk.MultiFilter.append] to add filters to it.

        This filter matches an item if each of the filters added to it
        matches the item. In particular, this means that if no filter
        has been added to it, the filter matches every item.

        Parameters:


        Returns:
            EveryFilter: a new `GtkEveryFilter`

        """
        ...

class EveryFilterClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class Expander(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkExpander` allows the user to reveal its child by clicking
    on an expander triangle.

    ![An example GtkExpander](expander.png)

    This is similar to the triangles used in a `GtkTreeView`.

    Normally you use an expander as you would use a frame; you create
    the child widget and use [method@Gtk.Expander.set_child] to add it
    to the expander. When the expander is toggled, it will take care of
    showing and hiding the child automatically.

    # Special Usage

    There are situations in which you may prefer to show and hide the
    expanded widget yourself, such as when you want to actually create
    the widget at expansion time. In this case, create a `GtkExpander`
    but do not add a child to it. The expander widget has an
    [property@Gtk.Expander:expanded] property which can be used to
    monitor its expansion state. You should watch this property with
    a signal connection as follows:

    ```c
    static void
    expander_callback (GObject *object,
    GParamSpec *param_spec,
    gpointer user_data)
    {
    GtkExpander *expander;

    expander = GTK_EXPANDER (object);

    if (gtk_expander_get_expanded (expander))
    {
    // Show or create widgets
    }
    else
    {
    // Hide or destroy widgets
    }
    }

    static void
    create_expander (void)
    {
    GtkWidget *expander = gtk_expander_new_with_mnemonic (\"_More Options\");
    g_signal_connect (expander, \"notify::expanded\",
    G_CALLBACK (expander_callback), NULL);

    // ...
    }
    ```

    # GtkExpander as GtkBuildable

    The `GtkExpander` implementation of the `GtkBuildable` interface supports
    placing a child in the label position by specifying “label” as the
    “type” attribute of a `<child>` element. A normal content child can be
    specified without specifying a `<child>` type attribute.

    An example of a UI definition fragment with GtkExpander:

    ```xml
    <object class=\"GtkExpander\">
    <child type=\"label\">
    <object class=\"GtkLabel\" id=\"expander-label\"/>
    </child>
    <child>
    <object class=\"GtkEntry\" id=\"expander-content\"/>
    </child>
    </object>
    ```

    # CSS nodes

    ```
    expander-widget
    ╰── box
    ├── title
    │ ├── expander
    │ ╰── <label widget>
    ╰── <child>
    ```

    `GtkExpander` has a main node `expander-widget`, and subnode `box` containing
    the title and child widget. The box subnode `title` contains node `expander`,
    i.e. the expand/collapse arrow; then the label widget if any. The arrow of an
    expander that is showing its child gets the `:checked` pseudoclass set on it.

    # Accessibility

    `GtkExpander` uses the %GTK_ACCESSIBLE_ROLE_BUTTON role.

    :Constructors:

    ::

        Expander(**properties)
        new(label:str=None) -> Gtk.Widget
        new_with_mnemonic(label:str=None) -> Gtk.Widget

    Object GtkExpander

    Signals from GtkExpander:
      activate ()

    Properties from GtkExpander:
      expanded -> gboolean: expanded
      label -> gchararray: label
      use-underline -> gboolean: use-underline
      use-markup -> gboolean: use-markup
      label-widget -> GtkWidget: label-widget
      resize-toplevel -> gboolean: resize-toplevel
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        child: Optional[Widget]
        """
        The child widget.
        """
        expanded: bool
        """
        Whether the expander has been opened to reveal the child.
        """
        label: Optional[str]
        """
        The text of the expanders label.
        """
        label_widget: Optional[Widget]
        """
        A widget to display instead of the usual expander label.
        """
        resize_toplevel: bool
        """
        When this property is %TRUE, the expander will resize the toplevel
        widget containing the expander upon expanding and collapsing.
        """
        use_markup: bool
        """
        Whether the text in the label is Pango markup.
        """
        use_underline: bool
        """
        Whether an underline in the text indicates a mnemonic.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        expanded: bool = ...,
        label: Optional[str] = ...,
        label_widget: Optional[Widget] = ...,
        resize_toplevel: bool = ...,
        use_markup: bool = ...,
        use_underline: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @expander.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @expander

        """
        ...

    def get_expanded(self) -> bool:
        """
        Queries a `GtkExpander` and returns its current state.

        Returns %TRUE if the child widget is revealed.

        Parameters:


        Returns:
            bool: the current state of the expander

        """
        ...

    def get_label(self) -> Optional[str]:
        """
        Fetches the text from a label widget.

        This is including any embedded underlines indicating mnemonics and
        Pango markup, as set by [method@Gtk.Expander.set_label]. If the label
        text has not been set the return value will be %NULL. This will be the
        case if you create an empty button with gtk_button_new() to use as a
        container.

        Parameters:


        Returns:
            Optional[str]: The text of the label widget. This string is owned
        by the widget and must not be modified or freed.

        """
        ...

    def get_label_widget(self) -> Optional[Widget]:
        """
        Retrieves the label widget for the frame.

        Parameters:


        Returns:
            Optional[Widget]: the label widget

        """
        ...

    def get_resize_toplevel(self) -> bool:
        """
        Returns whether the expander will resize the toplevel widget
        containing the expander upon resizing and collapsing.

        Parameters:


        Returns:
            bool: the “resize toplevel” setting.

        """
        ...

    def get_use_markup(self) -> bool:
        """
        Returns whether the label’s text is interpreted as Pango markup.

        Parameters:


        Returns:
            bool: %TRUE if the label’s text will be parsed for markup

        """
        ...

    def get_use_underline(self) -> bool:
        """
        Returns whether an underline in the text indicates a mnemonic.

        Parameters:


        Returns:
            bool: %TRUE if an embedded underline in the expander
        label indicates the mnemonic accelerator keys

        """
        ...

    @classmethod
    def new(cls, label: Optional[str] = None) -> Expander:
        """
        Creates a new expander using @label as the text of the label.

        Parameters:
            label: the text of the label

        Returns:
            Widget: a new `GtkExpander` widget.

        """
        ...

    @classmethod
    def new_with_mnemonic(cls, label: Optional[str] = None) -> Expander:
        """
        Creates a new expander using @label as the text of the label.

        If characters in @label are preceded by an underscore, they are
        underlined. If you need a literal underscore character in a label,
        use “__” (two underscores). The first underlined character represents
        a keyboard accelerator called a mnemonic.

        Pressing Alt and that key activates the button.

        Parameters:
            label: the text of the label with an underscore
        in front of the mnemonic character

        Returns:
            Widget: a new `GtkExpander` widget.

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @expander.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_expanded(self, expanded: bool) -> None:
        """
        Sets the state of the expander.

        Set to %TRUE, if you want the child widget to be revealed,
        and %FALSE if you want the child widget to be hidden.

        Parameters:
            expanded: whether the child widget is revealed

        Returns:

        """
        ...

    def set_label(self, label: Optional[str] = None) -> None:
        """
        Sets the text of the label of the expander to @label.

        This will also clear any previously set labels.

        Parameters:
            label: a string

        Returns:

        """
        ...

    def set_label_widget(self, label_widget: Optional[Widget] = None) -> None:
        """
        Set the label widget for the expander.

        This is the widget that will appear embedded alongside
        the expander arrow.

        Parameters:
            label_widget: the new label widget

        Returns:

        """
        ...

    def set_resize_toplevel(self, resize_toplevel: bool) -> None:
        """
        Sets whether the expander will resize the toplevel widget
        containing the expander upon resizing and collapsing.

        Parameters:
            resize_toplevel: whether to resize the toplevel

        Returns:

        """
        ...

    def set_use_markup(self, use_markup: bool) -> None:
        """
        Sets whether the text of the label contains Pango markup.

        Parameters:
            use_markup: %TRUE if the label’s text should be parsed for markup

        Returns:

        """
        ...

    def set_use_underline(self, use_underline: bool) -> None:
        """
        If true, an underline in the text indicates a mnemonic.

        Parameters:
            use_underline: %TRUE if underlines in the text indicate mnemonics

        Returns:

        """
        ...

class Expression:
    """
    `GtkExpression` provides a way to describe references to values.

    An important aspect of expressions is that the value can be obtained
    from a source that is several steps away. For example, an expression
    may describe ‘the value of property A of `object1`, which is itself the
    value of a property of `object2`’. And `object1` may not even exist yet
    at the time that the expression is created. This is contrast to `GObject`
    property bindings, which can only create direct connections between
    the properties of two objects that must both exist for the duration
    of the binding.

    An expression needs to be \"evaluated\" to obtain the value that it currently
    refers to. An evaluation always happens in the context of a current object
    called `this` (it mirrors the behavior of object-oriented languages),
    which may or may not influence the result of the evaluation. Use
    [method@Gtk.Expression.evaluate] for evaluating an expression.

    Various methods for defining expressions exist, from simple constants via
    [ctor@Gtk.ConstantExpression.new] to looking up properties in a `GObject`
    (even recursively) via [ctor@Gtk.PropertyExpression.new] or providing
    custom functions to transform and combine expressions via
    [ctor@Gtk.ClosureExpression.new].

    Here is an example of a complex expression:

    ```c
    color_expr = gtk_property_expression_new (GTK_TYPE_LIST_ITEM,
    NULL, \"item\");
    expression = gtk_property_expression_new (GTK_TYPE_COLOR,
    color_expr, \"name\");
    ```

    when evaluated with `this` being a `GtkListItem`, it will obtain the
    \"item\" property from the `GtkListItem`, and then obtain the \"name\" property
    from the resulting object (which is assumed to be of type `GTK_TYPE_COLOR`).

    A more concise way to describe this would be

    ```
    this->item->name
    ```

    The most likely place where you will encounter expressions is in the context
    of list models and list widgets using them. For example, `GtkDropDown` is
    evaluating a `GtkExpression` to obtain strings from the items in its model
    that it can then use to match against the contents of its search entry.
    `GtkStringFilter` is using a `GtkExpression` for similar reasons.

    By default, expressions are not paying attention to changes and evaluation is
    just a snapshot of the current state at a given time. To get informed about
    changes, an expression needs to be \"watched\" via a [struct@Gtk.ExpressionWatch],
    which will cause a callback to be called whenever the value of the expression may
    have changed; [method@Gtk.Expression.watch] starts watching an expression, and
    [method@Gtk.ExpressionWatch.unwatch] stops.

    Watches can be created for automatically updating the property of an object,
    similar to GObject's `GBinding` mechanism, by using [method@Gtk.Expression.bind].

    ## GtkExpression in GObject properties

    In order to use a `GtkExpression` as a `GObject` property, you must use the
    [id@gtk_param_spec_expression] when creating a `GParamSpec` to install in the
    `GObject` class being defined; for instance:

    ```c
    obj_props[PROP_EXPRESSION] =
    gtk_param_spec_expression (\"expression\",
    \"Expression\",
    \"The expression used by the widget\",
    G_PARAM_READWRITE |
    G_PARAM_STATIC_STRINGS |
    G_PARAM_EXPLICIT_NOTIFY);
    ```

    When implementing the `GObjectClass.set_property` and `GObjectClass.get_property`
    virtual functions, you must use [id@gtk_value_get_expression], to retrieve the
    stored `GtkExpression` from the `GValue` container, and [id@gtk_value_set_expression],
    to store the `GtkExpression` into the `GValue`; for instance:

    ```c
    // in set_property()...
    case PROP_EXPRESSION:
    foo_widget_set_expression (foo, gtk_value_get_expression (value));
    break;

    // in get_property()...
    case PROP_EXPRESSION:
    gtk_value_set_expression (value, foo->expression);
    break;
    ```

    ## GtkExpression in .ui files

    `GtkBuilder` has support for creating expressions. The syntax here can be used where
    a `GtkExpression` object is needed like in a `<property>` tag for an expression
    property, or in a `<binding name=\"property\">` tag to bind a property to an expression.

    To create a property expression, use the `<lookup>` element. It can have a `type`
    attribute to specify the object type, and a `name` attribute to specify the property
    to look up. The content of `<lookup>` can either be an element specfiying the expression
    to use the object, or a string that specifies the name of the object to use.

    Example:

    ```xml
    <lookup name='search'>string_filter</lookup>
    ```

    To create a constant expression, use the `<constant>` element. If the type attribute
    is specified, the element content is interpreted as a value of that type. Otherwise,
    it is assumed to be an object. For instance:

    ```xml
    <constant>string_filter</constant>
    <constant type='gchararray'>Hello, world</constant>
    ```

    To create a closure expression, use the `<closure>` element. The `type` and `function`
    attributes specify what function to use for the closure, the content of the element
    contains the expressions for the parameters. For instance:

    ```xml
    <closure type='gchararray' function='combine_args_somehow'>
    <constant type='gchararray'>File size:</constant>
    <lookup type='GFile' name='size'>myfile</lookup>
    </closure>
    ```

    :Constructors:

    ::

        Expression(**properties)
    """

    class Props: ...

    def bind(
        self,
        target: GObject.Object,
        property: str,
        this_: Optional[GObject.Object] = None,
    ) -> ExpressionWatch:
        """
        Bind `target`'s property named `property` to `self`.

        The value that `self` evaluates to is set via `g_object_set()` on
        `target`. This is repeated whenever `self` changes to ensure that
        the object's property stays synchronized with `self`.

        If `self`'s evaluation fails, `target`'s `property` is not updated.
        You can ensure that this doesn't happen by using a fallback
        expression.

        Note that this function takes ownership of `self`. If you want
        to keep it around, you should [method@Gtk.Expression.ref] it beforehand.

        Parameters:
            target: the target object to bind to
            property: name of the property on `target` to bind to
            this_: the this argument for
        the evaluation of `self`

        Returns:
            ExpressionWatch: a `GtkExpressionWatch`

        """
        ...

    def evaluate(self, this_: Optional[GObject.Object], value: Any) -> bool:
        """
        Evaluates the given expression and on success stores the result
        in @value.

        The `GType` of `value` will be the type given by
        [method@Gtk.Expression.get_value_type].

        It is possible that expressions cannot be evaluated - for example
        when the expression references objects that have been destroyed or
        set to `NULL`. In that case `value` will remain empty and `FALSE`
        will be returned.

        Parameters:
            this_: the this argument for the evaluation
            value: an empty `GValue`

        Returns:
            bool: `TRUE` if the expression could be evaluated

        """
        ...

    def get_value_type(self) -> Type:
        """
        Gets the `GType` that this expression evaluates to.

        This type is constant and will not change over the lifetime
        of this expression.

        Parameters:


        Returns:
            Type: The type returned from [method@Gtk.Expression.evaluate]

        """
        ...

    def is_static(self) -> bool:
        """
        Checks if the expression is static.

        A static expression will never change its result when
        [method@Gtk.Expression.evaluate] is called on it with the same arguments.

        That means a call to [method@Gtk.Expression.watch] is not necessary because
        it will never trigger a notify.

        Parameters:


        Returns:
            bool: `TRUE` if the expression is static

        """
        ...

    def ref(self) -> Expression:
        """
        Acquires a reference on the given `GtkExpression`.

        Parameters:


        Returns:
            Expression: the `GtkExpression` with an additional reference

        """
        ...

    def unref(self) -> None:
        """
        Releases a reference on the given `GtkExpression`.

        If the reference was the last, the resources associated to the `self` are
        freed.

        Parameters:


        Returns:

        """
        ...

    def watch(
        self,
        this_: Optional[GObject.Object],
        notify: Callable[..., None],
        *user_data: Any,
    ) -> ExpressionWatch:
        """
        Watch the given `expression` for changes.

        The @notify function will be called whenever the evaluation of `self`
        may have changed.

        GTK cannot guarantee that the evaluation did indeed change when the @notify
        gets invoked, but it guarantees the opposite: When it did in fact change,
        the @notify will be invoked.

        Parameters:
            this_: the `this` argument to
        watch
            notify: callback to invoke when the expression changes
            user_data: user data to pass to the `notify` callback

        Returns:
            ExpressionWatch: The newly installed watch. Note that the only
        reference held to the watch will be released when the watch is unwatched
        which can happen automatically, and not just via
        [method@Gtk.ExpressionWatch.unwatch]. You should call [method@Gtk.ExpressionWatch.ref]
        if you want to keep the watch around.

        """
        ...

class ExpressionWatch(GObject.GBoxed):
    """
    An opaque structure representing a watched `GtkExpression`.

    The contents of `GtkExpressionWatch` should only be accessed through the
    provided API.
    """

    class Props(GObject.GBoxed.Props): ...

    def evaluate(self, value: Any) -> bool:
        """
        Evaluates the watched expression and on success stores the result
        in `value`.

        This is equivalent to calling [method@Gtk.Expression.evaluate] with the
        expression and this pointer originally used to create `watch`.

        Parameters:
            value: an empty `GValue` to be set

        Returns:
            bool: `TRUE` if the expression could be evaluated and `value` was set

        """
        ...

    def ref(self) -> ExpressionWatch:
        """
        Acquires a reference on the given `GtkExpressionWatch`.

        Parameters:


        Returns:
            ExpressionWatch: the `GtkExpressionWatch` with an additional reference

        """
        ...

    def unref(self) -> None:
        """
        Releases a reference on the given `GtkExpressionWatch`.

        If the reference was the last, the resources associated to `self` are
        freed.

        Parameters:


        Returns:

        """
        ...

    def unwatch(self) -> None:
        """
        Stops watching an expression.

        See [method@Gtk.Expression.watch] for how the watch
        was established.

        Parameters:


        Returns:

        """
        ...

@deprecated("Use [class@Gtk.FileDialog] instead")
class FileChooser(GObject.GInterface):
    """
    `GtkFileChooser` is an interface that can be implemented by file
    selection widgets.

    In GTK, the main objects that implement this interface are
    [class@Gtk.FileChooserWidget] and [class@Gtk.FileChooserDialog].

    You do not need to write an object that implements the `GtkFileChooser`
    interface unless you are trying to adapt an existing file selector to
    expose a standard programming interface.

    `GtkFileChooser` allows for shortcuts to various places in the filesystem.
    In the default implementation these are displayed in the left pane. It
    may be a bit confusing at first that these shortcuts come from various
    sources and in various flavours, so lets explain the terminology here:

    - Bookmarks: are created by the user, by dragging folders from the
    right pane to the left pane, or by using the “Add”. Bookmarks
    can be renamed and deleted by the user.

    - Shortcuts: can be provided by the application. For example, a Paint
    program may want to add a shortcut for a Clipart folder. Shortcuts
    cannot be modified by the user.

    - Volumes: are provided by the underlying filesystem abstraction. They are
    the “roots” of the filesystem.

    # File Names and Encodings

    When the user is finished selecting files in a `GtkFileChooser`, your
    program can get the selected filenames as `GFile`s.

    # Adding options

    You can add extra widgets to a file chooser to provide options
    that are not present in the default design, by using
    [method@Gtk.FileChooser.add_choice]. Each choice has an identifier and
    a user visible label; additionally, each choice can have multiple
    options. If a choice has no option, it will be rendered as a
    check button with the given label; if a choice has options, it will
    be rendered as a combo box.



    Interface GtkFileChooser

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def __init__(
        self,
        action: FileChooserAction = ...,
        create_folders: bool = ...,
        filter: FileFilter = ...,
        select_multiple: bool = ...,
    ): ...
    @deprecated("Use [class@Gtk.FileDialog] instead")
    def add_choice(
        self,
        id: str,
        label: str,
        options: Optional[Sequence[str]] = None,
        option_labels: Optional[Sequence[str]] = None,
    ) -> None:
        """
        Adds a 'choice' to the file chooser.

        This is typically implemented as a combobox or, for boolean choices,
        as a checkbutton. You can select a value using
        [method@Gtk.FileChooser.set_choice] before the dialog is shown,
        and you can obtain the user-selected value in the
        [signal@Gtk.Dialog::response] signal handler using
        [method@Gtk.FileChooser.get_choice].

        Parameters:
            id: id for the added choice
            label: user-visible label for the added choice
            options: ids for the options of the choice, or %NULL for a boolean choice
            option_labels: user-visible labels for the options, must be the same length as @options

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def add_filter(self, filter: FileFilter) -> None:
        """
        Adds @filter to the list of filters that the user can select between.

        When a filter is selected, only files that are passed by that
        filter are displayed.

        Note that the @chooser takes ownership of the filter if it is floating,
        so you have to ref and sink it if you want to keep a reference.

        Parameters:
            filter: a `GtkFileFilter`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def add_shortcut_folder(self, folder: Gio.File) -> bool:
        """
        Adds a folder to be displayed with the shortcut folders
        in a file chooser.

        Parameters:
            folder: a `GFile` for the folder to add

        Returns:
            bool: %TRUE if the folder could be added successfully,
        %FALSE otherwise.

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_action(self) -> FileChooserAction:
        """
        Gets the type of operation that the file chooser is performing.

        Parameters:


        Returns:
            FileChooserAction: the action that the file selector is performing

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_choice(self, id: str) -> Optional[str]:
        """
        Gets the currently selected option in the 'choice' with the given ID.

        Parameters:
            id: the ID of the choice to get

        Returns:
            Optional[str]: the ID of the currently selected option

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_create_folders(self) -> bool:
        """
        Gets whether file chooser will offer to create new folders.

        Parameters:


        Returns:
            bool: %TRUE if the Create Folder button should be displayed.

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_current_folder(self) -> Optional[Gio.File]:
        """
        Gets the current folder of @chooser as `GFile`.

        Parameters:


        Returns:
            Optional[Gio.File]: the `GFile` for the current folder.

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_current_name(self) -> Optional[str]:
        """
        Gets the current name in the file selector, as entered by the user.

        This is meant to be used in save dialogs, to get the currently typed
        filename when the file itself does not exist yet.

        Parameters:


        Returns:
            Optional[str]: The raw text from the file chooser’s “Name” entry. Free with
        g_free(). Note that this string is not a full pathname or URI; it is
        whatever the contents of the entry are. Note also that this string is
        in UTF-8 encoding, which is not necessarily the system’s encoding for
        filenames.

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_file(self) -> Optional[Gio.File]:
        """
        Gets the `GFile` for the currently selected file in
        the file selector.

        If multiple files are selected, one of the files will be
        returned at random.

        If the file chooser is in folder mode, this function returns
        the selected folder.

        Parameters:


        Returns:
            Optional[Gio.File]: a selected `GFile`. You own the
        returned file; use g_object_unref() to release it.

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_files(self) -> Gio.ListModel:
        """
        Lists all the selected files and subfolders in the current folder
        of @chooser as `GFile`.

        Parameters:


        Returns:
            Gio.ListModel: a list model containing a `GFile` for each
        selected file and subfolder in the current folder. Free the returned
        list with g_object_unref().

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_filter(self) -> Optional[FileFilter]:
        """
        Gets the current filter.

        Parameters:


        Returns:
            Optional[FileFilter]: the current filter

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_filters(self) -> Gio.ListModel:
        """
        Gets the current set of user-selectable filters, as a list model.

        See [method@Gtk.FileChooser.add_filter] and
        [method@Gtk.FileChooser.remove_filter] for changing individual filters.

        You should not modify the returned list model. Future changes to
        @chooser may or may not affect the returned model.

        Parameters:


        Returns:
            Gio.ListModel: a `GListModel` containing the current set
        of user-selectable filters.

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_select_multiple(self) -> bool:
        """
        Gets whether multiple files can be selected in the file
        chooser.

        Parameters:


        Returns:
            bool: %TRUE if multiple files can be selected.

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_shortcut_folders(self) -> Gio.ListModel:
        """
        Queries the list of shortcut folders in the file chooser.

        You should not modify the returned list model. Future changes to
        @chooser may or may not affect the returned model.

        Parameters:


        Returns:
            Gio.ListModel: A list model of `GFile`s

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def remove_choice(self, id: str) -> None:
        """
        Removes a 'choice' that has been added with gtk_file_chooser_add_choice().

        Parameters:
            id: the ID of the choice to remove

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def remove_filter(self, filter: FileFilter) -> None:
        """
        Removes @filter from the list of filters that the user can select between.

        Parameters:
            filter: a `GtkFileFilter`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def remove_shortcut_folder(self, folder: Gio.File) -> bool:
        """
        Removes a folder from the shortcut folders in a file chooser.

        Parameters:
            folder: a `GFile` for the folder to remove

        Returns:
            bool: %TRUE if the folder could be removed successfully,
        %FALSE otherwise.

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def set_action(self, action: FileChooserAction) -> None:
        """
        Sets the type of operation that the chooser is performing.

        The user interface is adapted to suit the selected action.

        For example, an option to create a new folder might be shown
        if the action is %GTK_FILE_CHOOSER_ACTION_SAVE but not if the
        action is %GTK_FILE_CHOOSER_ACTION_OPEN.

        Parameters:
            action: the action that the file selector is performing

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def set_choice(self, id: str, option: str) -> None:
        """
        Selects an option in a 'choice' that has been added with
        gtk_file_chooser_add_choice().

        For a boolean choice, the possible options are \"true\" and \"false\".

        Parameters:
            id: the ID of the choice to set
            option: the ID of the option to select

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def set_create_folders(self, create_folders: bool) -> None:
        """
        Sets whether file chooser will offer to create new folders.

        This is only relevant if the action is not set to be
        %GTK_FILE_CHOOSER_ACTION_OPEN.

        Parameters:
            create_folders: %TRUE if the Create Folder button should be displayed

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def set_current_folder(self, file: Optional[Gio.File] = None) -> bool:
        """
        Sets the current folder for @chooser from a `GFile`.

        Parameters:
            file: the `GFile` for the new folder

        Returns:
            bool: %TRUE if the folder could be changed successfully, %FALSE
        otherwise.

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def set_current_name(self, name: str) -> None:
        """
        Sets the current name in the file selector, as if entered
        by the user.

        Note that the name passed in here is a UTF-8 string rather
        than a filename. This function is meant for such uses as a
        suggested name in a “Save As...” dialog. You can pass
        “Untitled.doc” or a similarly suitable suggestion for the @name.

        If you want to preselect a particular existing file, you should
        use [method@Gtk.FileChooser.set_file] instead.

        Please see the documentation for those functions for an example
        of using [method@Gtk.FileChooser.set_current_name] as well.

        Parameters:
            name: the filename to use, as a UTF-8 string

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def set_file(self, file: Gio.File) -> bool:
        """
        Sets @file as the current filename for the file chooser.

        This includes changing to the file’s parent folder and actually selecting
        the file in list. If the @chooser is in %GTK_FILE_CHOOSER_ACTION_SAVE mode,
        the file’s base name will also appear in the dialog’s file name entry.

        If the file name isn’t in the current folder of @chooser, then the current
        folder of @chooser will be changed to the folder containing @file.

        Note that the file must exist, or nothing will be done except
        for the directory change.

        If you are implementing a save dialog, you should use this function if
        you already have a file name to which the user may save; for example,
        when the user opens an existing file and then does “Save As…”. If you
        don’t have a file name already — for example, if the user just created
        a new file and is saving it for the first time, do not call this function.

        Instead, use something similar to this:

        ```c
        static void
        prepare_file_chooser (GtkFileChooser *chooser,
        GFile *existing_file)
        {
        gboolean document_is_new = (existing_file == NULL);

        if (document_is_new)
        {
        GFile *default_file_for_saving = g_file_new_for_path (\"./out.txt\");
        // the user just created a new document
        gtk_file_chooser_set_current_folder (chooser, default_file_for_saving, NULL);
        gtk_file_chooser_set_current_name (chooser, \"Untitled document\");
        g_object_unref (default_file_for_saving);
        }
        else
        {
        // the user edited an existing document
        gtk_file_chooser_set_file (chooser, existing_file, NULL);
        }
        }
        ```

        Parameters:
            file: the `GFile` to set as current

        Returns:
            bool: Not useful

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def set_filter(self, filter: FileFilter) -> None:
        """
        Sets the current filter.

        Only the files that pass the filter will be displayed.
        If the user-selectable list of filters is non-empty, then
        the filter should be one of the filters in that list.

        Setting the current filter when the list of filters is
        empty is useful if you want to restrict the displayed
        set of files without letting the user change it.

        Parameters:
            filter: a `GtkFileFilter`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def set_select_multiple(self, select_multiple: bool) -> None:
        """
        Sets whether multiple files can be selected in the file chooser.

        This is only relevant if the action is set to be
        %GTK_FILE_CHOOSER_ACTION_OPEN or
        %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.

        Parameters:
            select_multiple: %TRUE if multiple files can be selected.

        Returns:

        """
        ...

@deprecated("Use [class@Gtk.FileDialog] instead")
class FileChooserDialog(
    Dialog,
    Accessible,
    Buildable,
    ConstraintTarget,
    FileChooser,
    Native,
    Root,
    ShortcutManager,
):
    """
    `GtkFileChooserDialog` is a dialog suitable for use with
    “File Open” or “File Save” commands.

    ![An example GtkFileChooserDialog](filechooser.png)

    This widget works by putting a [class@Gtk.FileChooserWidget]
    inside a [class@Gtk.Dialog]. It exposes the [iface@Gtk.FileChooser]
    interface, so you can use all of the [iface@Gtk.FileChooser] functions
    on the file chooser dialog as well as those for [class@Gtk.Dialog].

    Note that `GtkFileChooserDialog` does not have any methods of its
    own. Instead, you should use the functions that work on a
    [iface@Gtk.FileChooser].

    If you want to integrate well with the platform you should use the
    [class@Gtk.FileChooserNative] API, which will use a platform-specific
    dialog if available and fall back to `GtkFileChooserDialog`
    otherwise.

    ## Typical usage

    In the simplest of cases, you can the following code to use
    `GtkFileChooserDialog` to select a file for opening:

    ```c
    static void
    on_open_response (GtkDialog *dialog,
    int response)
    {
    if (response == GTK_RESPONSE_ACCEPT)
    {
    GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);

    g_autoptr(GFile) file = gtk_file_chooser_get_file (chooser);

    open_file (file);
    }

    gtk_window_destroy (GTK_WINDOW (dialog));
    }

    // ...
    GtkWidget *dialog;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;

    dialog = gtk_file_chooser_dialog_new (\"Open File\",
    parent_window,
    action,
    _(\"_Cancel\"),
    GTK_RESPONSE_CANCEL,
    _(\"_Open\"),
    GTK_RESPONSE_ACCEPT,
    NULL);

    gtk_window_present (GTK_WINDOW (dialog));

    g_signal_connect (dialog, \"response\",
    G_CALLBACK (on_open_response),
    NULL);
    ```

    To use a dialog for saving, you can use this:

    ```c
    static void
    on_save_response (GtkDialog *dialog,
    int response)
    {
    if (response == GTK_RESPONSE_ACCEPT)
    {
    GtkFileChooser *chooser = GTK_FILE_CHOOSER (dialog);

    g_autoptr(GFile) file = gtk_file_chooser_get_file (chooser);

    save_to_file (file);
    }

    gtk_window_destroy (GTK_WINDOW (dialog));
    }

    // ...
    GtkWidget *dialog;
    GtkFileChooser *chooser;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;

    dialog = gtk_file_chooser_dialog_new (\"Save File\",
    parent_window,
    action,
    _(\"_Cancel\"),
    GTK_RESPONSE_CANCEL,
    _(\"_Save\"),
    GTK_RESPONSE_ACCEPT,
    NULL);
    chooser = GTK_FILE_CHOOSER (dialog);

    if (user_edited_a_new_document)
    gtk_file_chooser_set_current_name (chooser, _(\"Untitled document\"));
    else
    gtk_file_chooser_set_file (chooser, existing_filename);

    gtk_window_present (GTK_WINDOW (dialog));

    g_signal_connect (dialog, \"response\",
    G_CALLBACK (on_save_response),
    NULL);
    ```

    ## Setting up a file chooser dialog

    There are various cases in which you may need to use a `GtkFileChooserDialog`:

    - To select a file for opening, use %GTK_FILE_CHOOSER_ACTION_OPEN.

    - To save a file for the first time, use %GTK_FILE_CHOOSER_ACTION_SAVE,
    and suggest a name such as “Untitled” with
    [method@Gtk.FileChooser.set_current_name].

    - To save a file under a different name, use %GTK_FILE_CHOOSER_ACTION_SAVE,
    and set the existing file with [method@Gtk.FileChooser.set_file].

    - To choose a folder instead of a filem use %GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER.

    In general, you should only cause the file chooser to show a specific
    folder when it is appropriate to use [method@Gtk.FileChooser.set_file],
    i.e. when you are doing a “Save As” command and you already have a file
    saved somewhere.

    ## Response Codes

    `GtkFileChooserDialog` inherits from [class@Gtk.Dialog], so buttons that
    go in its action area have response codes such as %GTK_RESPONSE_ACCEPT and
    %GTK_RESPONSE_CANCEL. For example, you could call
    [ctor@Gtk.FileChooserDialog.new] as follows:

    ```c
    GtkWidget *dialog;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;

    dialog = gtk_file_chooser_dialog_new (\"Open File\",
    parent_window,
    action,
    _(\"_Cancel\"),
    GTK_RESPONSE_CANCEL,
    _(\"_Open\"),
    GTK_RESPONSE_ACCEPT,
    NULL);
    ```

    This will create buttons for “Cancel” and “Open” that use predefined
    response identifiers from [enum@Gtk.ResponseType]. For most dialog
    boxes you can use your own custom response codes rather than the
    ones in [enum@Gtk.ResponseType], but `GtkFileChooserDialog` assumes that
    its “accept”-type action, e.g. an “Open” or “Save” button,
    will have one of the following response codes:

    - %GTK_RESPONSE_ACCEPT
    - %GTK_RESPONSE_OK
    - %GTK_RESPONSE_YES
    - %GTK_RESPONSE_APPLY

    This is because `GtkFileChooserDialog` must intercept responses and switch
    to folders if appropriate, rather than letting the dialog terminate — the
    implementation uses these known response codes to know which responses can
    be blocked if appropriate.

    To summarize, make sure you use a predefined response code
    when you use `GtkFileChooserDialog` to ensure proper operation.

    ## CSS nodes

    `GtkFileChooserDialog` has a single CSS node with the name `window` and style
    class `.filechooser`.

    :Constructors:

    ::

        FileChooserDialog(**properties)

    Object GtkFileChooserDialog

    Signals from GtkDialog:
      response (gint)
      close ()

    Properties from GtkDialog:
      use-header-bar -> gint: use-header-bar

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Dialog.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        FileChooser.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ): ...

    def __init__(
        self,
        use_header_bar: int = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        action: FileChooserAction = ...,
        create_folders: bool = ...,
        filter: FileFilter = ...,
        select_multiple: bool = ...,
    ): ...

@deprecated("Use [class@Gtk.FileDialog] instead")
class FileChooserNative(NativeDialog, FileChooser):
    """
    `GtkFileChooserNative` is an abstraction of a dialog suitable
    for use with “File Open” or “File Save as” commands.

    By default, this just uses a `GtkFileChooserDialog` to implement
    the actual dialog. However, on some platforms, such as Windows and
    macOS, the native platform file chooser is used instead. When the
    application is running in a sandboxed environment without direct
    filesystem access (such as Flatpak), `GtkFileChooserNative` may call
    the proper APIs (portals) to let the user choose a file and make it
    available to the application.

    While the API of `GtkFileChooserNative` closely mirrors `GtkFileChooserDialog`,
    the main difference is that there is no access to any `GtkWindow` or `GtkWidget`
    for the dialog. This is required, as there may not be one in the case of a
    platform native dialog.

    Showing, hiding and running the dialog is handled by the
    [class@Gtk.NativeDialog] functions.

    Note that unlike `GtkFileChooserDialog`, `GtkFileChooserNative` objects
    are not toplevel widgets, and GTK does not keep them alive. It is your
    responsibility to keep a reference until you are done with the
    object.

    ## Typical usage

    In the simplest of cases, you can the following code to use
    `GtkFileChooserNative` to select a file for opening:

    ```c
    static void
    on_response (GtkNativeDialog *native,
    int response)
    {
    if (response == GTK_RESPONSE_ACCEPT)
    {
    GtkFileChooser *chooser = GTK_FILE_CHOOSER (native);
    GFile *file = gtk_file_chooser_get_file (chooser);

    open_file (file);

    g_object_unref (file);
    }

    g_object_unref (native);
    }

    // ...
    GtkFileChooserNative *native;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;

    native = gtk_file_chooser_native_new (\"Open File\",
    parent_window,
    action,
    \"_Open\",
    \"_Cancel\");

    g_signal_connect (native, \"response\", G_CALLBACK (on_response), NULL);
    gtk_native_dialog_show (GTK_NATIVE_DIALOG (native));
    ```

    To use a `GtkFileChooserNative` for saving, you can use this:

    ```c
    static void
    on_response (GtkNativeDialog *native,
    int response)
    {
    if (response == GTK_RESPONSE_ACCEPT)
    {
    GtkFileChooser *chooser = GTK_FILE_CHOOSER (native);
    GFile *file = gtk_file_chooser_get_file (chooser);

    save_to_file (file);

    g_object_unref (file);
    }

    g_object_unref (native);
    }

    // ...
    GtkFileChooserNative *native;
    GtkFileChooser *chooser;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_SAVE;

    native = gtk_file_chooser_native_new (\"Save File\",
    parent_window,
    action,
    \"_Save\",
    \"_Cancel\");
    chooser = GTK_FILE_CHOOSER (native);

    if (user_edited_a_new_document)
    gtk_file_chooser_set_current_name (chooser, _(\"Untitled document\"));
    else
    gtk_file_chooser_set_file (chooser, existing_file, NULL);

    g_signal_connect (native, \"response\", G_CALLBACK (on_response), NULL);
    gtk_native_dialog_show (GTK_NATIVE_DIALOG (native));
    ```

    For more information on how to best set up a file dialog,
    see the [class@Gtk.FileChooserDialog] documentation.

    ## Response Codes

    `GtkFileChooserNative` inherits from [class@Gtk.NativeDialog],
    which means it will return %GTK_RESPONSE_ACCEPT if the user accepted,
    and %GTK_RESPONSE_CANCEL if he pressed cancel. It can also return
    %GTK_RESPONSE_DELETE_EVENT if the window was unexpectedly closed.

    ## Differences from `GtkFileChooserDialog`

    There are a few things in the [iface@Gtk.FileChooser] interface that
    are not possible to use with `GtkFileChooserNative`, as such use would
    prohibit the use of a native dialog.

    No operations that change the dialog work while the dialog is visible.
    Set all the properties that are required before showing the dialog.

    ## Win32 details

    On windows the `IFileDialog` implementation (added in Windows Vista) is
    used. It supports many of the features that `GtkFileChooser` has, but
    there are some things it does not handle:

    * Any [class@Gtk.FileFilter] added using a mimetype

    If any of these features are used the regular `GtkFileChooserDialog`
    will be used in place of the native one.

    ## Portal details

    When the `org.freedesktop.portal.FileChooser` portal is available on
    the session bus, it is used to bring up an out-of-process file chooser.
    Depending on the kind of session the application is running in, this may
    or may not be a GTK file chooser.

    ## macOS details

    On macOS the `NSSavePanel` and `NSOpenPanel` classes are used to provide
    native file chooser dialogs. Some features provided by `GtkFileChooser`
    are not supported:

    * Shortcut folders.

    :Constructors:

    ::

        FileChooserNative(**properties)
        new(title:str=None, parent:Gtk.Window=None, action:Gtk.FileChooserAction, accept_label:str=None, cancel_label:str=None) -> Gtk.FileChooserNative

    Object GtkFileChooserNative

    Properties from GtkFileChooserNative:
      accept-label -> gchararray: accept-label
      cancel-label -> gchararray: cancel-label

    Signals from GtkNativeDialog:
      response (gint)

    Properties from GtkNativeDialog:
      title -> gchararray: title
      visible -> gboolean: visible
      modal -> gboolean: modal
      transient-for -> GtkWindow: transient-for

    Signals from GObject:
      notify (GParam)
    """

    class Props(NativeDialog.Props, FileChooser.Props):
        accept_label: Optional[str]
        """
        The text used for the label on the accept button in the dialog, or
        %NULL to use the default text.
        """
        cancel_label: Optional[str]
        """
        The text used for the label on the cancel button in the dialog, or
        %NULL to use the default text.
        """

    props: Props = ...
    def __init__(
        self,
        accept_label: Optional[str] = ...,
        cancel_label: Optional[str] = ...,
        modal: bool = ...,
        title: str = ...,
        transient_for: Optional[Window] = ...,
        visible: bool = ...,
        action: FileChooserAction = ...,
        create_folders: bool = ...,
        filter: FileFilter = ...,
        select_multiple: bool = ...,
    ): ...
    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_accept_label(self) -> Optional[str]:
        """
        Retrieves the custom label text for the accept button.

        Parameters:


        Returns:
            Optional[str]: The custom label

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def get_cancel_label(self) -> Optional[str]:
        """
        Retrieves the custom label text for the cancel button.

        Parameters:


        Returns:
            Optional[str]: The custom label

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    @classmethod
    def new(
        cls,
        title: Optional[str],
        parent: Optional[Window],
        action: FileChooserAction,
        accept_label: Optional[str] = None,
        cancel_label: Optional[str] = None,
    ) -> FileChooserNative:
        """
        Creates a new `GtkFileChooserNative`.

        Parameters:
            title: Title of the native
            parent: Transient parent of the native
            action: Open or save mode for the dialog
            accept_label: text to go in the accept button, or %NULL for the default
            cancel_label: text to go in the cancel button, or %NULL for the default

        Returns:
            FileChooserNative: a new `GtkFileChooserNative`

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def set_accept_label(self, accept_label: Optional[str] = None) -> None:
        """
        Sets the custom label text for the accept button.

        If characters in @label are preceded by an underscore, they are
        underlined. If you need a literal underscore character in a label,
        use “__” (two underscores). The first underlined character represents
        a keyboard accelerator called a mnemonic.

        Pressing Alt and that key should activate the button.

        Parameters:
            accept_label: custom label

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FileDialog] instead")
    def set_cancel_label(self, cancel_label: Optional[str] = None) -> None:
        """
        Sets the custom label text for the cancel button.

        If characters in @label are preceded by an underscore, they are
        underlined. If you need a literal underscore character in a label,
        use “__” (two underscores). The first underlined character represents
        a keyboard accelerator called a mnemonic.

        Pressing Alt and that key should activate the button.

        Parameters:
            cancel_label: custom label

        Returns:

        """
        ...

class FileChooserNativeClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FileChooserNativeClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: NativeDialogClass = ...

@deprecated("Direct use of `GtkFileChooserWidget` is deprecated")
class FileChooserWidget(Widget, Accessible, Buildable, ConstraintTarget, FileChooser):
    """
    `GtkFileChooserWidget` is a widget for choosing files.

    It exposes the [iface@Gtk.FileChooser] interface, and you should
    use the methods of this interface to interact with the
    widget.

    # CSS nodes

    `GtkFileChooserWidget` has a single CSS node with name filechooser.

    :Constructors:

    ::

        FileChooserWidget(**properties)
        new(action:Gtk.FileChooserAction) -> Gtk.Widget

    Object GtkFileChooserWidget

    Signals from GtkFileChooserWidget:
      location-popup (gchararray)
      location-popup-on-paste ()
      location-toggle-popup ()
      up-folder ()
      down-folder ()
      home-folder ()
      desktop-folder ()
      quick-bookmark (gint)
      show-hidden ()
      search-shortcut ()
      recent-shortcut ()
      places-shortcut ()

    Properties from GtkFileChooserWidget:
      search-mode -> gboolean: search-mode
      subtitle -> gchararray: subtitle
      show-time -> gboolean: show-time

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        FileChooser.Props,
    ):
        search_mode: bool
        show_time: bool
        """
        Whether to show the time.
        """
        subtitle: str

    props: Props = ...
    def __init__(
        self,
        search_mode: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        action: FileChooserAction = ...,
        create_folders: bool = ...,
        filter: FileFilter = ...,
        select_multiple: bool = ...,
    ): ...
    @deprecated("Direct use of `GtkFileChooserWidget` is deprecated")
    @classmethod
    def new(cls, action: FileChooserAction) -> FileChooserWidget:
        """
        Creates a new `GtkFileChooserWidget`.

        This is a file chooser widget that can be embedded in custom
        windows, and it is the same widget that is used by
        `GtkFileChooserDialog`.

        Parameters:
            action: Open or save mode for the widget

        Returns:
            Widget: a new `GtkFileChooserWidget`

        """
        ...

class FileDialog(GObject.Object):
    """
    A `GtkFileDialog` object collects the arguments that
    are needed to present a file chooser dialog to the
    user, such as a title for the dialog and whether it
    should be modal.

    The dialog is shown with [method@Gtk.FileDialog.open],
    [method@Gtk.FileDialog.save], etc. These APIs follow the
    GIO async pattern, and the result can be obtained by calling
    the corresponding finish function, for example
    [method@Gtk.FileDialog.open_finish].

    :Constructors:

    ::

        FileDialog(**properties)
        new() -> Gtk.FileDialog

    Object GtkFileDialog

    Properties from GtkFileDialog:
      accept-label -> gchararray: accept-label
      default-filter -> GtkFileFilter: default-filter
      filters -> GListModel: filters
      initial-file -> GFile: initial-file
      initial-folder -> GFile: initial-folder
      initial-name -> gchararray: initial-name
      modal -> gboolean: modal
      title -> gchararray: title

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        accept_label: Optional[str]
        """
        Label for the file chooser's accept button.
        """
        default_filter: Optional[FileFilter]
        """
        The default filter, that is, the filter that is initially
        active in the file chooser dialog.

        If the default filter is %NULL, the first filter of [property@Gtk.FileDialog:filters]
        is used as the default filter. If that property contains no filter, the dialog will
        be unfiltered.

        If [property@Gtk.FileDialog:filters] is not %NULL, the default filter should be part
        of the list. If it is not, the dialog may choose to not make it available.
        """
        filters: Optional[Gio.ListModel]
        """
        The list of filters.

        See [property@Gtk.FileDialog:default-filter] about how those two properties interact.
        """
        initial_file: Optional[Gio.File]
        """
        The initial file, that is, the file that is initially selected
        in the file chooser dialog

        This is a utility property that sets both [property@Gtk.FileDialog:initial-folder] and
        [property@Gtk.FileDialog:initial-name].
        """
        initial_folder: Optional[Gio.File]
        """
        The initial folder, that is, the directory that is initially
        opened in the file chooser dialog
        """
        initial_name: Optional[str]
        """
        The initial name, that is, the filename that is initially
        selected in the file chooser dialog.
        """
        modal: bool
        """
        Whether the file chooser dialog is modal.
        """
        title: str
        """
        A title that may be shown on the file chooser dialog.
        """

    props: Props = ...
    def __init__(
        self,
        accept_label: Optional[str] = ...,
        default_filter: Optional[FileFilter] = ...,
        filters: Optional[Gio.ListModel] = ...,
        initial_file: Optional[Gio.File] = ...,
        initial_folder: Optional[Gio.File] = ...,
        initial_name: Optional[str] = ...,
        modal: bool = ...,
        title: str = ...,
    ): ...
    def get_accept_label(self) -> Optional[str]: ...
    def get_default_filter(self) -> Optional[FileFilter]:
        """
        Gets the filter that will be selected by default
        in the file chooser dialog.

        Parameters:


        Returns:
            Optional[FileFilter]: the current filter

        """
        ...

    def get_filters(self) -> Optional[Gio.ListModel]:
        """
        Gets the filters that will be offered to the user
        in the file chooser dialog.

        Parameters:


        Returns:
            Optional[Gio.ListModel]: the filters, as
        a `GListModel` of `GtkFileFilters`

        """
        ...

    def get_initial_file(self) -> Optional[Gio.File]:
        """
        Gets the file that will be initially selected in
        the file chooser dialog.

        Parameters:


        Returns:
            Optional[Gio.File]: the file

        """
        ...

    def get_initial_folder(self) -> Optional[Gio.File]:
        """
        Gets the folder that will be set as the
        initial folder in the file chooser dialog.

        Parameters:


        Returns:
            Optional[Gio.File]: the folder

        """
        ...

    def get_initial_name(self) -> Optional[str]:
        """
        Gets the name for the file that should be initially set.

        Parameters:


        Returns:
            Optional[str]: the name

        """
        ...

    def get_modal(self) -> bool:
        """
        Returns whether the file chooser dialog
        blocks interaction with the parent window
        while it is presented.

        Parameters:


        Returns:
            bool: `TRUE` if the file chooser dialog is modal

        """
        ...

    def get_title(self) -> str:
        """
        Returns the title that will be shown on the
        file chooser dialog.

        Parameters:


        Returns:
            str: the title

        """
        ...

    @classmethod
    def new(cls) -> FileDialog:
        """
        Creates a new `GtkFileDialog` object.

        Parameters:


        Returns:
            FileDialog: the new `GtkFileDialog`

        """
        ...

    def open(
        self,
        parent: Optional[Window] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function initiates a file selection operation by
        presenting a file chooser dialog to the user.

        The @callback will be called when the dialog is dismissed.
        It should call [method@Gtk.FileDialog.open_finish]
        to obtain the result.

        Parameters:
            parent: the parent `GtkWindow`
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def open_finish(self, result: Gio.AsyncResult) -> Optional[Gio.File]:
        """
        Finishes the [method@Gtk.FileDialog.open] call and
        returns the resulting file.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            Optional[Gio.File]: the file that was selected.
        Otherwise, `NULL` is returned and @error is set

        """
        ...

    def open_multiple(
        self,
        parent: Optional[Window] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function initiates a multi-file selection operation by
        presenting a file chooser dialog to the user.

        The file chooser will initially be opened in the directory
        [property@Gtk.FileDialog:initial-folder].

        The @callback will be called when the dialog is dismissed.
        It should call [method@Gtk.FileDialog.open_multiple_finish]
        to obtain the result.

        Parameters:
            parent: the parent `GtkWindow`
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def open_multiple_finish(self, result: Gio.AsyncResult) -> Optional[Gio.ListModel]:
        """
        Finishes the [method@Gtk.FileDialog.open] call and
        returns the resulting files in a `GListModel`.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            Optional[Gio.ListModel]: the file that was selected,
        as a `GListModel` of `GFiles`. Otherwise, `NULL` is returned
        and @error is set

        """
        ...

    def save(
        self,
        parent: Optional[Window] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function initiates a file save operation by
        presenting a file chooser dialog to the user.

        The @callback will be called when the dialog is dismissed.
        It should call [method@Gtk.FileDialog.save_finish]
        to obtain the result.

        Parameters:
            parent: the parent `GtkWindow`
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def save_finish(self, result: Gio.AsyncResult) -> Optional[Gio.File]:
        """
        Finishes the [method@Gtk.FileDialog.save] call and
        returns the resulting file.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            Optional[Gio.File]: the file that was selected.
        Otherwise, `NULL` is returned and @error is set

        """
        ...

    def select_folder(
        self,
        parent: Optional[Window] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function initiates a directory selection operation by
        presenting a file chooser dialog to the user.

        If you pass @initial_folder, the file chooser will initially be
        opened in the parent directory of that folder, otherwise, it
        will be in the directory [property@Gtk.FileDialog:initial-folder].

        The @callback will be called when the dialog is dismissed.
        It should call [method@Gtk.FileDialog.select_folder_finish]
        to obtain the result.

        Parameters:
            parent: the parent `GtkWindow`
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def select_folder_finish(self, result: Gio.AsyncResult) -> Optional[Gio.File]:
        """
        Finishes the [method@Gtk.FileDialog.select_folder] call and
        returns the resulting file.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            Optional[Gio.File]: the file that was selected.
        Otherwise, `NULL` is returned and @error is set

        """
        ...

    def select_multiple_folders(
        self,
        parent: Optional[Window] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function initiates a multi-directory selection operation by
        presenting a file chooser dialog to the user.

        The file chooser will initially be opened in the directory
        [property@Gtk.FileDialog:initial-folder].

        The @callback will be called when the dialog is dismissed.
        It should call [method@Gtk.FileDialog.select_multiple_folders_finish]
        to obtain the result.

        Parameters:
            parent: the parent `GtkWindow`
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def select_multiple_folders_finish(
        self, result: Gio.AsyncResult
    ) -> Optional[Gio.ListModel]:
        """
        Finishes the [method@Gtk.FileDialog.select_multiple_folders]
        call and returns the resulting files in a `GListModel`.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            Optional[Gio.ListModel]: the file that was selected,
        as a `GListModel` of `GFiles`. Otherwise, `NULL` is returned
        and @error is set

        """
        ...

    def set_accept_label(self, accept_label: Optional[str] = None) -> None:
        """
        Sets the label shown on the file chooser's accept button.

        Leaving the accept label unset or setting it as `NULL` will fall back to
        a default label, depending on what API is used to launch the file dialog.

        Parameters:
            accept_label: the new accept label

        Returns:

        """
        ...

    def set_default_filter(self, filter: Optional[FileFilter] = None) -> None:
        """
        Sets the filter that will be selected by default
        in the file chooser dialog.

        If set to %NULL, the first item in [property@Gtk.FileDialog:filters]
        will be used as the default filter. If that list is empty, the dialog
        will be unfiltered.

        Parameters:
            filter: a `GtkFileFilter`

        Returns:

        """
        ...

    def set_filters(self, filters: Optional[Gio.ListModel] = None) -> None:
        """
        Sets the filters that will be offered to the user
        in the file chooser dialog.

        Parameters:
            filters: a `GListModel` of `GtkFileFilters`

        Returns:

        """
        ...

    def set_initial_file(self, file: Optional[Gio.File] = None) -> None:
        """
        Sets the file that will be initially selected in
        the file chooser dialog.

        This function is a shortcut for calling both
        gtk_file_dialog_set_initial_folder() and
        gtk_file_dialog_set_initial_name() with the directory and
        name of @file respectively.

        Parameters:
            file: a `GFile`

        Returns:

        """
        ...

    def set_initial_folder(self, folder: Optional[Gio.File] = None) -> None:
        """
        Sets the folder that will be set as the
        initial folder in the file chooser dialog.

        Parameters:
            folder: a `GFile`

        Returns:

        """
        ...

    def set_initial_name(self, name: Optional[str] = None) -> None:
        """
        Sets the name for the file that should be initially set.
        For saving dialogs, this will usually be pre-entered into the name field.

        If a file with this name already exists in the directory set via
        [property@Gtk.FileDialog:initial-folder], the dialog should preselect it.

        Parameters:
            name: a UTF8 string

        Returns:

        """
        ...

    def set_modal(self, modal: bool) -> None:
        """
        Sets whether the file chooser dialog
        blocks interaction with the parent window
        while it is presented.

        Parameters:
            modal: the new value

        Returns:

        """
        ...

    def set_title(self, title: str) -> None:
        """
        Sets the title that will be shown on the
        file chooser dialog.

        Parameters:
            title: the new title

        Returns:

        """
        ...

class FileDialogClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FileDialogClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class FileFilter(Filter, Buildable):
    """
    `GtkFileFilter` filters files by name or mime type.

    `GtkFileFilter` can be used to restrict the files being shown in a
    `GtkFileChooser`. Files can be filtered based on their name (with
    [method@Gtk.FileFilter.add_pattern] or [method@Gtk.FileFilter.add_suffix])
    or on their mime type (with [method@Gtk.FileFilter.add_mime_type]).

    Filtering by mime types handles aliasing and subclassing of mime
    types; e.g. a filter for text/plain also matches a file with mime
    type application/rtf, since application/rtf is a subclass of
    text/plain. Note that `GtkFileFilter` allows wildcards for the
    subtype of a mime type, so you can e.g. filter for image/\*.

    Normally, file filters are used by adding them to a `GtkFileChooser`
    (see [method@Gtk.FileChooser.add_filter]), but it is also possible to
    manually use a file filter on any [class@Gtk.FilterListModel] containing
    `GFileInfo` objects.

    # GtkFileFilter as GtkBuildable

    The `GtkFileFilter` implementation of the `GtkBuildable` interface
    supports adding rules using the `<mime-types>` and `<patterns>` and
    `<suffixes>` elements and listing the rules within. Specifying a
    `<mime-type>` or `<pattern>` or `<suffix>` has the same effect as
    as calling
    [method@Gtk.FileFilter.add_mime_type] or
    [method@Gtk.FileFilter.add_pattern] or
    [method@Gtk.FileFilter.add_suffix].

    An example of a UI definition fragment specifying `GtkFileFilter`
    rules:
    ```xml
    <object class=\"GtkFileFilter\">
    <property name=\"name\" translatable=\"yes\">Text and Images</property>
    <mime-types>
    <mime-type>text/plain</mime-type>
    <mime-type>image/ *</mime-type>
    </mime-types>
    <patterns>
    <pattern>*.txt</pattern>
    </patterns>
    <suffixes>
    <suffix>png</suffix>
    </suffixes>
    </object>
    ```

    :Constructors:

    ::

        FileFilter(**properties)
        new() -> Gtk.FileFilter
        new_from_gvariant(variant:GLib.Variant) -> Gtk.FileFilter

    Object GtkFileFilter

    Properties from GtkFileFilter:
      name -> gchararray: name
      patterns -> GStrv: patterns
      mime-types -> GStrv: mime-types
      suffixes -> GStrv: suffixes

    Signals from GtkFilter:
      changed (GtkFilterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Filter.Props, Buildable.Props):
        name: Optional[str]
        """
        The human-readable name of the filter.

        This is the string that will be displayed in the file chooser
        user interface if there is a selectable list of filters.
        """
        mime_types: list[str]
        """
        The MIME types that this filter matches.
        """
        patterns: list[str]
        """
        The patterns that this filter matches.
        """
        suffixes: list[str]
        """
        The suffixes that this filter matches.
        """

    props: Props = ...
    def __init__(
        self,
        mime_types: Sequence[str] = ...,
        name: Optional[str] = ...,
        patterns: Sequence[str] = ...,
        suffixes: Sequence[str] = ...,
    ): ...
    def add_mime_type(self, mime_type: str) -> None:
        """
        Adds a rule allowing a given mime type to @filter.

        Parameters:
            mime_type: name of a MIME type

        Returns:

        """
        ...

    def add_pattern(self, pattern: str) -> None:
        """
        Adds a rule allowing a shell style glob to a filter.

        Note that it depends on the platform whether pattern
        matching ignores case or not. On Windows, it does, on
        other platforms, it doesn't.

        Parameters:
            pattern: a shell style glob

        Returns:

        """
        ...

    def add_pixbuf_formats(self) -> None:
        """
        Adds a rule allowing image files in the formats supported
        by GdkPixbuf.

        This is equivalent to calling [method@Gtk.FileFilter.add_mime_type]
        for all the supported mime types.

        Parameters:


        Returns:

        """
        ...

    def add_suffix(self, suffix: str) -> None:
        """
        Adds a suffix match rule to a filter.

        This is similar to adding a match for the pattern
        \"*.@suffix\".

        In contrast to pattern matches, suffix matches
        are *always* case-insensitive.

        Parameters:
            suffix: filename suffix to match

        Returns:

        """
        ...

    def get_attributes(self) -> list[str]:
        """
        Gets the attributes that need to be filled in for the `GFileInfo`
        passed to this filter.

        This function will not typically be used by applications;
        it is intended principally for use in the implementation
        of `GtkFileChooser`.

        Parameters:


        Returns:
            list[str]: the attributes

        """
        ...

    def get_name(self) -> Optional[str]:
        """
        Gets the human-readable name for the filter.

        See [method@Gtk.FileFilter.set_name].

        Parameters:


        Returns:
            Optional[str]: The human-readable name of the filter

        """
        ...

    @classmethod
    def new(cls) -> FileFilter:
        """
        Creates a new `GtkFileFilter` with no rules added to it.

        Such a filter doesn’t accept any files, so is not
        particularly useful until you add rules with
        [method@Gtk.FileFilter.add_mime_type],
        [method@Gtk.FileFilter.add_pattern],
        [method@Gtk.FileFilter.add_suffix] or
        [method@Gtk.FileFilter.add_pixbuf_formats].

        To create a filter that accepts any file, use:
        ```c
        GtkFileFilter *filter = gtk_file_filter_new ();
        gtk_file_filter_add_pattern (filter, \"*\");
        ```

        Parameters:


        Returns:
            FileFilter: a new `GtkFileFilter`

        """
        ...

    @classmethod
    def new_from_gvariant(cls, variant: GLib.Variant) -> FileFilter:
        """
        Deserialize a file filter from a `GVariant`.

        The variant must be in the format produced by
        [method@Gtk.FileFilter.to_gvariant].

        Parameters:
            variant: an `a{sv}` `GVariant`

        Returns:
            FileFilter: a new `GtkFileFilter` object

        """
        ...

    def set_name(self, name: Optional[str] = None) -> None:
        """
        Sets a human-readable name of the filter.

        This is the string that will be displayed in the file chooser
        if there is a selectable list of filters.

        Parameters:
            name: the human-readable-name for the filter, or %NULL
        to remove any existing name.

        Returns:

        """
        ...

    def to_gvariant(self) -> GLib.Variant:
        """
        Serialize a file filter to an `a{sv}` variant.

        Parameters:


        Returns:
            GLib.Variant: a new, floating, `GVariant`

        """
        ...

class FileLauncher(GObject.Object):
    """
    A `GtkFileLauncher` object collects the arguments that are needed to open a
    file with an application.

    Depending on system configuration, user preferences and available APIs, this
    may or may not show an app chooser dialog or launch the default application
    right away.

    The operation is started with the [method@Gtk.FileLauncher.launch] function.
    This API follows the GIO async pattern, and the result can be obtained by
    calling [method@Gtk.FileLauncher.launch_finish].

    To launch uris that don't represent files, use [class@Gtk.UriLauncher].

    :Constructors:

    ::

        FileLauncher(**properties)
        new(file:Gio.File=None) -> Gtk.FileLauncher

    Object GtkFileLauncher

    Properties from GtkFileLauncher:
      file -> GFile: file
      always-ask -> gboolean: always-ask

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        always_ask: bool
        """
        Whether to ask the user to choose an app for opening the file. If `FALSE`,
        the file might be opened with a default app or the previous choice.
        """
        file: Optional[Gio.File]
        """
        The file to launch.
        """

    props: Props = ...
    def __init__(self, always_ask: bool = ..., file: Optional[Gio.File] = ...): ...
    def get_always_ask(self) -> bool:
        """
        Returns whether to ask the user to choose an app for opening the file.

        Parameters:


        Returns:
            bool: `TRUE` if always asking for app

        """
        ...

    def get_file(self) -> Optional[Gio.File]:
        """
        Gets the file that will be opened.

        Parameters:


        Returns:
            Optional[Gio.File]: the file

        """
        ...

    def launch(
        self,
        parent: Optional[Window] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        Launch an application to open the file.

        This may present an app chooser dialog to the user.

        The @callback will be called when the operation is completed.
        It should call [method@Gtk.FileLauncher.launch_finish] to obtain
        the result.

        Parameters:
            parent: the parent `GtkWindow`
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def launch_finish(self, result: Gio.AsyncResult) -> bool:
        """
        Finishes the [method@Gtk.FileLauncher.launch] call and
        returns the result.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            bool: `TRUE` if an application was launched,
        or `FALSE` and @error is set

        """
        ...

    @classmethod
    def new(cls, file: Optional[Gio.File] = None) -> FileLauncher:
        """
        Creates a new `GtkFileLauncher` object.

        Parameters:
            file: the file to open

        Returns:
            FileLauncher: the new `GtkFileLauncher`

        """
        ...

    def open_containing_folder(
        self,
        parent: Optional[Window] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        Launch a file manager to show the file in its parent directory.

        This is only supported native files. It will fail if @file
        is e.g. a http:// uri.

        The @callback will be called when the operation is completed.
        It should call [method@Gtk.FileLauncher.open_containing_folder_finish]
        to obtain the result.

        Parameters:
            parent: the parent `GtkWindow`
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def open_containing_folder_finish(self, result: Gio.AsyncResult) -> bool:
        """
        Finishes the [method@Gtk.FileLauncher.open_containing_folder]
        call and returns the result.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            bool: `TRUE` if an application was launched,
        or `FALSE` and @error is set

        """
        ...

    def set_always_ask(self, always_ask: bool) -> None:
        """
        Sets whether to awlays ask the user to choose an app for opening the file.
        If `FALSE`, the file might be opened with a default app or the previous choice.

        Parameters:
            always_ask: a `gboolean`

        Returns:

        """
        ...

    def set_file(self, file: Optional[Gio.File] = None) -> None:
        """
        Sets the file that will be opened.

        Parameters:
            file: a `GFile`

        Returns:

        """
        ...

class FileLauncherClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FileLauncherClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class Filter(GObject.Object):
    """
    A `GtkFilter` object describes the filtering to be performed by a
    [class@Gtk.FilterListModel].

    The model will use the filter to determine if it should include items
    or not by calling [method@Gtk.Filter.match] for each item and only
    keeping the ones that the function returns %TRUE for.

    Filters may change what items they match through their lifetime. In that
    case, they will emit the [signal@Gtk.Filter::changed] signal to notify
    that previous filter results are no longer valid and that items should
    be checked again via [method@Gtk.Filter.match].

    GTK provides various pre-made filter implementations for common filtering
    operations. These filters often include properties that can be linked to
    various widgets to easily allow searches.

    However, in particular for large lists or complex search methods, it is
    also possible to subclass `GtkFilter` and provide one's own filter.

    :Constructors:

    ::

        Filter(**properties)

    Object GtkFilter

    Signals from GtkFilter:
      changed (GtkFilterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...
    parent_instance: GObject.Object = ...
    def changed(self, change: FilterChange) -> None:
        """
        Notifies all users of the filter that it has changed.

        This emits the [signal@Gtk.Filter::changed] signal. Users
        of the filter should then check items again via
        [method@Gtk.Filter.match].

        Depending on the @change parameter, not all items need to
        be changed, but only some. Refer to the [enum@Gtk.FilterChange]
        documentation for details.

        This function is intended for implementors of `GtkFilter`
        subclasses and should not be called from other functions.

        Parameters:
            change: How the filter changed

        Returns:

        """
        ...

    def do_get_strictness(self) -> FilterMatch:
        """
        Gets the known strictness of @filters.

        If the strictness is not known, %GTK_FILTER_MATCH_SOME is returned.

        This value may change after emission of the [signal@Gtk.Filter::changed]
        signal.

        This function is meant purely for optimization purposes, filters can
        choose to omit implementing it, but `GtkFilterListModel` uses it.

        Parameters:


        Returns:
            FilterMatch: the strictness of @self

        """
        ...

    def do_match(self, item: Optional[GObject.Object] = None) -> bool:
        """
        Checks if the given @item is matched by the filter or not.

        Parameters:
            item: The item to check

        Returns:
            bool: %TRUE if the filter matches the item and a filter model should
        keep it, %FALSE if not.

        """
        ...

    def get_strictness(self) -> FilterMatch:
        """
        Gets the known strictness of @filters.

        If the strictness is not known, %GTK_FILTER_MATCH_SOME is returned.

        This value may change after emission of the [signal@Gtk.Filter::changed]
        signal.

        This function is meant purely for optimization purposes, filters can
        choose to omit implementing it, but `GtkFilterListModel` uses it.

        Parameters:


        Returns:
            FilterMatch: the strictness of @self

        """
        ...

    def match(self, item: GObject.Object) -> bool:
        """
        Checks if the given @item is matched by the filter or not.

        Parameters:
            item: The item to check

        Returns:
            bool: %TRUE if the filter matches the item and a filter model should
        keep it, %FALSE if not.

        """
        ...

class FilterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FilterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    match: Callable[[Filter, Optional[GObject.Object]], bool] = ...
    get_strictness: Callable[[Filter], FilterMatch] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...
    _gtk_reserved5: None = ...
    _gtk_reserved6: None = ...
    _gtk_reserved7: None = ...
    _gtk_reserved8: None = ...

class FilterListModel(GObject.Object, Gio.ListModel, SectionModel):
    """
    `GtkFilterListModel` is a list model that filters the elements of
    the underlying model according to a `GtkFilter`.

    It hides some elements from the other model according to
    criteria given by a `GtkFilter`.

    The model can be set up to do incremental filtering, so that
    filtering long lists doesn't block the UI. See
    [method@Gtk.FilterListModel.set_incremental] for details.

    `GtkFilterListModel` passes through sections from the underlying model.

    :Constructors:

    ::

        FilterListModel(**properties)
        new(model:Gio.ListModel=None, filter:Gtk.Filter=None) -> Gtk.FilterListModel

    Object GtkFilterListModel

    Properties from GtkFilterListModel:
      filter -> GtkFilter: filter
      incremental -> gboolean: incremental
      item-type -> GType: item-type
      model -> GListModel: model
      n-items -> guint: n-items
      pending -> guint: pending

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkSectionModel:
      sections-changed (guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gio.ListModel.Props, SectionModel.Props):
        filter: Optional[Filter]
        """
        The filter for this model.
        """
        incremental: bool
        """
        If the model should filter items incrementally.
        """
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        model: Optional[Gio.ListModel]
        """
        The model being filtered.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """
        pending: int
        """
        Number of items not yet filtered.
        """

    props: Props = ...
    def __init__(
        self,
        filter: Optional[Filter] = ...,
        incremental: bool = ...,
        model: Optional[Gio.ListModel] = ...,
    ): ...
    def get_filter(self) -> Optional[Filter]:
        """
        Gets the `GtkFilter` currently set on @self.

        Parameters:


        Returns:
            Optional[Filter]: The filter currently in use

        """
        ...

    def get_incremental(self) -> bool:
        """
        Returns whether incremental filtering is enabled.

        See [method@Gtk.FilterListModel.set_incremental].

        Parameters:


        Returns:
            bool: %TRUE if incremental filtering is enabled

        """
        ...

    def get_model(self) -> Optional[Gio.ListModel]:
        """
        Gets the model currently filtered or %NULL if none.

        Parameters:


        Returns:
            Optional[Gio.ListModel]: The model that gets filtered

        """
        ...

    def get_pending(self) -> int:
        """
        Returns the number of items that have not been filtered yet.

        You can use this value to check if @self is busy filtering by
        comparing the return value to 0 or you can compute the percentage
        of the filter remaining by dividing the return value by the total
        number of items in the underlying model:

        ```c
        pending = gtk_filter_list_model_get_pending (self);
        model = gtk_filter_list_model_get_model (self);
        percentage = pending / (double) g_list_model_get_n_items (model);
        ```

        If no filter operation is ongoing - in particular when
        [property@Gtk.FilterListModel:incremental] is %FALSE - this
        function returns 0.

        Parameters:


        Returns:
            int: The number of items not yet filtered

        """
        ...

    @classmethod
    def new(
        cls, model: Optional[Gio.ListModel] = None, filter: Optional[Filter] = None
    ) -> FilterListModel:
        """
        Creates a new `GtkFilterListModel` that will filter @model using the given
        @filter.

        Parameters:
            model: the model to sort
            filter: filter

        Returns:
            FilterListModel: a new `GtkFilterListModel`

        """
        ...

    def set_filter(self, filter: Optional[Filter] = None) -> None:
        """
        Sets the filter used to filter items.

        Parameters:
            filter: filter to use

        Returns:

        """
        ...

    def set_incremental(self, incremental: bool) -> None:
        """
        Sets the filter model to do an incremental sort.

        When incremental filtering is enabled, the `GtkFilterListModel` will not
        run filters immediately, but will instead queue an idle handler that
        incrementally filters the items and adds them to the list. This of course
        means that items are not instantly added to the list, but only appear
        incrementally.

        When your filter blocks the UI while filtering, you might consider
        turning this on. Depending on your model and filters, this may become
        interesting around 10,000 to 100,000 items.

        By default, incremental filtering is disabled.

        See [method@Gtk.FilterListModel.get_pending] for progress information
        about an ongoing incremental filtering operation.

        Parameters:
            incremental: %TRUE to enable incremental filtering

        Returns:

        """
        ...

    def set_model(self, model: Optional[Gio.ListModel] = None) -> None:
        """
        Sets the model to be filtered.

        Note that GTK makes no effort to ensure that @model conforms to
        the item type of @self. It assumes that the caller knows what they
        are doing and have set up an appropriate filter to ensure that item
        types match.

        Parameters:
            model: The model to be filtered

        Returns:

        """
        ...

class FilterListModelClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FilterListModelClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class Fixed(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkFixed` places its child widgets at fixed positions and with fixed sizes.

    `GtkFixed` performs no automatic layout management.

    For most applications, you should not use this container! It keeps
    you from having to learn about the other GTK containers, but it
    results in broken applications. With `GtkFixed`, the following
    things will result in truncated text, overlapping widgets, and
    other display bugs:

    - Themes, which may change widget sizes.

    - Fonts other than the one you used to write the app will of course
    change the size of widgets containing text; keep in mind that
    users may use a larger font because of difficulty reading the
    default, or they may be using a different OS that provides different fonts.

    - Translation of text into other languages changes its size. Also,
    display of non-English text will use a different font in many
    cases.

    In addition, `GtkFixed` does not pay attention to text direction and
    thus may produce unwanted results if your app is run under right-to-left
    languages such as Hebrew or Arabic. That is: normally GTK will order
    containers appropriately for the text direction, e.g. to put labels to
    the right of the thing they label when using an RTL language, but it can’t
    do that with `GtkFixed`. So if you need to reorder widgets depending on
    the text direction, you would need to manually detect it and adjust child
    positions accordingly.

    Finally, fixed positioning makes it kind of annoying to add/remove
    UI elements, since you have to reposition all the other elements. This
    is a long-term maintenance problem for your application.

    If you know none of these things are an issue for your application,
    and prefer the simplicity of `GtkFixed`, by all means use the
    widget. But you should be aware of the tradeoffs.

    :Constructors:

    ::

        Fixed(**properties)
        new() -> Gtk.Widget

    Object GtkFixed

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ): ...
    parent_instance: Widget = ...
    def __init__(
        self,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_child_position(self, widget: Widget) -> Tuple[float, float]:
        """
        Retrieves the translation transformation of the
        given child `GtkWidget` in the `GtkFixed`.

        See also: [method@Gtk.Fixed.get_child_transform].

        Parameters:
            widget: a child of @fixed

        Returns:
            float: the horizontal position of the @widget
            float: the vertical position of the @widget
        """
        ...

    def get_child_transform(self, widget: Widget) -> Optional[Gsk.Transform]:
        """
        Retrieves the transformation for @widget set using
        gtk_fixed_set_child_transform().

        Parameters:
            widget: a `GtkWidget`, child of @fixed

        Returns:
            Optional[Gsk.Transform]: a `GskTransform`

        """
        ...

    def move(self, widget: Widget, x: float, y: float) -> None:
        """
        Sets a translation transformation to the given @x and @y
        coordinates to the child @widget of the `GtkFixed`.

        Parameters:
            widget: the child widget
            x: the horizontal position to move the widget to
            y: the vertical position to move the widget to

        Returns:

        """
        ...

    @classmethod
    def new(cls) -> Fixed:
        """
        Creates a new `GtkFixed`.

        Parameters:


        Returns:
            Widget: a new `GtkFixed`.

        """
        ...

    def put(self, widget: Widget, x: float, y: float) -> None:
        """
        Adds a widget to a `GtkFixed` at the given position.

        Parameters:
            widget: the widget to add
            x: the horizontal position to place the widget at
            y: the vertical position to place the widget at

        Returns:

        """
        ...

    def remove(self, widget: Widget) -> None:
        """
        Removes a child from @fixed.

        Parameters:
            widget: the child widget to remove

        Returns:

        """
        ...

    def set_child_transform(
        self, widget: Widget, transform: Optional[Gsk.Transform] = None
    ) -> None:
        """
        Sets the transformation for @widget.

        This is a convenience function that retrieves the
        [class@Gtk.FixedLayoutChild] instance associated to
        @widget and calls [method@Gtk.FixedLayoutChild.set_transform].

        Parameters:
            widget: a `GtkWidget`, child of @fixed
            transform: the transformation assigned to @widget
        to reset @widget's transform

        Returns:

        """
        ...

class FixedClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FixedClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    padding: list[None] = ...

class FixedLayout(LayoutManager):
    """
    `GtkFixedLayout` is a layout manager which can place child widgets
    at fixed positions.

    Most applications should never use this layout manager; fixed positioning
    and sizing requires constant recalculations on where children need to be
    positioned and sized. Other layout managers perform this kind of work
    internally so that application developers don't need to do it. Specifically,
    widgets positioned in a fixed layout manager will need to take into account:

    - Themes, which may change widget sizes.

    - Fonts other than the one you used to write the app will of course
    change the size of widgets containing text; keep in mind that
    users may use a larger font because of difficulty reading the
    default, or they may be using a different OS that provides different
    fonts.

    - Translation of text into other languages changes its size. Also,
    display of non-English text will use a different font in many
    cases.

    In addition, `GtkFixedLayout` does not pay attention to text direction and
    thus may produce unwanted results if your app is run under right-to-left
    languages such as Hebrew or Arabic. That is: normally GTK will order
    containers appropriately depending on the text direction, e.g. to put labels
    to the right of the thing they label when using an RTL language;
    `GtkFixedLayout` won't be able to do that for you.

    Finally, fixed positioning makes it kind of annoying to add/remove UI
    elements, since you have to reposition all the other elements. This is a
    long-term maintenance problem for your application.

    :Constructors:

    ::

        FixedLayout(**properties)
        new() -> Gtk.LayoutManager

    Object GtkFixedLayout

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutManager.Props): ...

    @classmethod
    def new(cls) -> FixedLayout:
        """
        Creates a new `GtkFixedLayout`.

        Parameters:


        Returns:
            LayoutManager: the newly created `GtkFixedLayout`

        """
        ...

class FixedLayoutChild(LayoutChild):
    """
    `GtkLayoutChild` subclass for children in a `GtkFixedLayout`.

    :Constructors:

    ::

        FixedLayoutChild(**properties)

    Object GtkFixedLayoutChild

    Properties from GtkFixedLayoutChild:
      transform -> GskTransform: transform

    Properties from GtkLayoutChild:
      layout-manager -> GtkLayoutManager: layout-manager
      child-widget -> GtkWidget: child-widget

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutChild.Props):
        transform: Optional[Gsk.Transform]
        """
        The transform of the child.
        """

    props: Props = ...
    def __init__(
        self,
        transform: Gsk.Transform = ...,
        child_widget: Widget = ...,
        layout_manager: LayoutManager = ...,
    ): ...
    def get_transform(self) -> Optional[Gsk.Transform]:
        """
        Retrieves the transformation of the child.

        Parameters:


        Returns:
            Optional[Gsk.Transform]: a `GskTransform`

        """
        ...

    def set_transform(self, transform: Gsk.Transform) -> None:
        """
        Sets the transformation of the child of a `GtkFixedLayout`.

        Parameters:
            transform: a `GskTransform`

        Returns:

        """
        ...

class FixedLayoutChildClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FixedLayoutChildClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutChildClass = ...

class FixedLayoutClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FixedLayoutClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutManagerClass = ...

class FlattenListModel(GObject.Object, Gio.ListModel, SectionModel):
    """
    `GtkFlattenListModel` is a list model that concatenates other list models.

    `GtkFlattenListModel` takes a list model containing list models, and flattens
    it into a single model. Each list model becomes a section in the single model.

    :Constructors:

    ::

        FlattenListModel(**properties)
        new(model:Gio.ListModel=None) -> Gtk.FlattenListModel

    Object GtkFlattenListModel

    Properties from GtkFlattenListModel:
      item-type -> GType: item-type
      model -> GListModel: model
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkSectionModel:
      sections-changed (guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gio.ListModel.Props, SectionModel.Props):
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        model: Optional[Gio.ListModel]
        """
        The model being flattened.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """

    props: Props = ...
    def __init__(self, model: Optional[Gio.ListModel] = ...): ...
    def get_model(self) -> Optional[Gio.ListModel]:
        """
        Gets the model set via gtk_flatten_list_model_set_model().

        Parameters:


        Returns:
            Optional[Gio.ListModel]: The model flattened by @self

        """
        ...

    def get_model_for_item(self, position: int) -> Optional[Gio.ListModel]:
        """
        Returns the model containing the item at the given position.

        Parameters:
            position: a position

        Returns:
            Optional[Gio.ListModel]: the model containing the item at @position

        """
        ...

    @classmethod
    def new(cls, model: Optional[Gio.ListModel] = None) -> FlattenListModel:
        """
        Creates a new `GtkFlattenListModel` that flattens @list.

        Parameters:
            model: the model to be flattened

        Returns:
            FlattenListModel: a new `GtkFlattenListModel`

        """
        ...

    def set_model(self, model: Optional[Gio.ListModel] = None) -> None:
        """
        Sets a new model to be flattened.

        Parameters:
            model: the new model

        Returns:

        """
        ...

class FlattenListModelClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FlattenListModelClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class FlowBox(Widget, Accessible, Buildable, ConstraintTarget, Orientable):
    """
    A `GtkFlowBox` puts child widgets in reflowing grid.

    For instance, with the horizontal orientation, the widgets will be
    arranged from left to right, starting a new row under the previous
    row when necessary. Reducing the width in this case will require more
    rows, so a larger height will be requested.

    Likewise, with the vertical orientation, the widgets will be arranged
    from top to bottom, starting a new column to the right when necessary.
    Reducing the height will require more columns, so a larger width will
    be requested.

    The size request of a `GtkFlowBox` alone may not be what you expect;
    if you need to be able to shrink it along both axes and dynamically
    reflow its children, you may have to wrap it in a `GtkScrolledWindow`
    to enable that.

    The children of a `GtkFlowBox` can be dynamically sorted and filtered.

    Although a `GtkFlowBox` must have only `GtkFlowBoxChild` children, you
    can add any kind of widget to it via [method@Gtk.FlowBox.insert], and a
    `GtkFlowBoxChild` widget will automatically be inserted between the box
    and the widget.

    Also see [class@Gtk.ListBox].

    # CSS nodes

    ```
    flowbox
    ├── flowboxchild
    │ ╰── <child>
    ├── flowboxchild
    │ ╰── <child>
    ┊
    ╰── [rubberband]
    ```

    `GtkFlowBox` uses a single CSS node with name flowbox. `GtkFlowBoxChild`
    uses a single CSS node with name flowboxchild. For rubberband selection,
    a subnode with name rubberband is used.

    # Accessibility

    `GtkFlowBox` uses the %GTK_ACCESSIBLE_ROLE_GRID role, and `GtkFlowBoxChild`
    uses the %GTK_ACCESSIBLE_ROLE_GRID_CELL role.

    :Constructors:

    ::

        FlowBox(**properties)
        new() -> Gtk.Widget

    Object GtkFlowBox

    Signals from GtkFlowBox:
      child-activated (GtkFlowBoxChild)
      selected-children-changed ()
      activate-cursor-child ()
      toggle-cursor-child ()
      move-cursor (GtkMovementStep, gint, gboolean, gboolean) -> gboolean
      select-all ()
      unselect-all ()

    Properties from GtkFlowBox:
      homogeneous -> gboolean: homogeneous
      column-spacing -> guint: column-spacing
      row-spacing -> guint: row-spacing
      min-children-per-line -> guint: min-children-per-line
      max-children-per-line -> guint: max-children-per-line
      selection-mode -> GtkSelectionMode: selection-mode
      activate-on-single-click -> gboolean: activate-on-single-click
      accept-unpaired-release -> gboolean: accept-unpaired-release

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        accept_unpaired_release: bool
        activate_on_single_click: bool
        """
        Determines whether children can be activated with a single
        click, or require a double-click.
        """
        column_spacing: int
        """
        The amount of horizontal space between two children.
        """
        homogeneous: bool
        """
        Determines whether all children should be allocated the
        same size.
        """
        max_children_per_line: int
        """
        The maximum amount of children to request space for consecutively
        in the given orientation.
        """
        min_children_per_line: int
        """
        The minimum number of children to allocate consecutively
        in the given orientation.

        Setting the minimum children per line ensures
        that a reasonably small height will be requested
        for the overall minimum width of the box.
        """
        row_spacing: int
        """
        The amount of vertical space between two children.
        """
        selection_mode: SelectionMode
        """
        The selection mode used by the flow box.
        """

    props: Props = ...
    def __init__(
        self,
        accept_unpaired_release: bool = ...,
        activate_on_single_click: bool = ...,
        column_spacing: int = ...,
        homogeneous: bool = ...,
        max_children_per_line: int = ...,
        min_children_per_line: int = ...,
        row_spacing: int = ...,
        selection_mode: SelectionMode = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def append(self, child: Widget) -> None:
        """
        Adds @child to the end of @self.

        If a sort function is set, the widget will
        actually be inserted at the calculated position.

        See also: [method@Gtk.FlowBox.insert].

        Parameters:
            child: the `GtkWidget` to add

        Returns:

        """
        ...

    def bind_model(
        self,
        model: Optional[Gio.ListModel],
        create_widget_func: Callable[..., Widget],
        *user_data: Any,
    ) -> None:
        """
        Binds @model to @box.

        If @box was already bound to a model, that previous binding is
        destroyed.

        The contents of @box are cleared and then filled with widgets that
        represent items from @model. @box is updated whenever @model changes.
        If @model is %NULL, @box is left empty.

        It is undefined to add or remove widgets directly (for example, with
        [method@Gtk.FlowBox.insert]) while @box is bound to a model.

        Note that using a model is incompatible with the filtering and sorting
        functionality in `GtkFlowBox`. When using a model, filtering and sorting
        should be implemented by the model.

        Parameters:
            model: the `GListModel` to be bound to @box
            create_widget_func: a function that creates widgets for items
            user_data: user data passed to @create_widget_func

        Returns:

        """
        ...

    def get_activate_on_single_click(self) -> bool:
        """
        Returns whether children activate on single clicks.

        Parameters:


        Returns:
            bool: %TRUE if children are activated on single click,
        %FALSE otherwise

        """
        ...

    def get_child_at_index(self, idx: int) -> Optional[FlowBoxChild]:
        """
        Gets the nth child in the @box.

        Parameters:
            idx: the position of the child

        Returns:
            Optional[FlowBoxChild]: the child widget, which will
        always be a `GtkFlowBoxChild` or %NULL in case no child widget
        with the given index exists.

        """
        ...

    def get_child_at_pos(self, x: int, y: int) -> Optional[FlowBoxChild]:
        """
        Gets the child in the (@x, @y) position.

        Both @x and @y are assumed to be relative to the origin of @box.

        Parameters:
            x: the x coordinate of the child
            y: the y coordinate of the child

        Returns:
            Optional[FlowBoxChild]: the child widget, which will
        always be a `GtkFlowBoxChild` or %NULL in case no child widget
        exists for the given x and y coordinates.

        """
        ...

    def get_column_spacing(self) -> int:
        """
        Gets the horizontal spacing.

        Parameters:


        Returns:
            int: the horizontal spacing

        """
        ...

    def get_homogeneous(self) -> bool:
        """
        Returns whether the box is homogeneous.

        Parameters:


        Returns:
            bool: %TRUE if the box is homogeneous.

        """
        ...

    def get_max_children_per_line(self) -> int:
        """
        Gets the maximum number of children per line.

        Parameters:


        Returns:
            int: the maximum number of children per line

        """
        ...

    def get_min_children_per_line(self) -> int:
        """
        Gets the minimum number of children per line.

        Parameters:


        Returns:
            int: the minimum number of children per line

        """
        ...

    def get_row_spacing(self) -> int:
        """
        Gets the vertical spacing.

        Parameters:


        Returns:
            int: the vertical spacing

        """
        ...

    def get_selected_children(self) -> list[FlowBoxChild]:
        """
        Creates a list of all selected children.

        Parameters:


        Returns:
            list[FlowBoxChild]:
        A `GList` containing the `GtkWidget` for each selected child.
        Free with g_list_free() when done.

        """
        ...

    def get_selection_mode(self) -> SelectionMode:
        """
        Gets the selection mode of @box.

        Parameters:


        Returns:
            SelectionMode: the `GtkSelectionMode`

        """
        ...

    def insert(self, widget: Widget, position: int) -> None:
        """
        Inserts the @widget into @box at @position.

        If a sort function is set, the widget will actually be inserted
        at the calculated position.

        If @position is -1, or larger than the total number of children
        in the @box, then the @widget will be appended to the end.

        Parameters:
            widget: the `GtkWidget` to add
            position: the position to insert @child in

        Returns:

        """
        ...

    def invalidate_filter(self) -> None:
        """
        Updates the filtering for all children.

        Call this function when the result of the filter
        function on the @box is changed due to an external
        factor. For instance, this would be used if the
        filter function just looked for a specific search
        term, and the entry with the string has changed.

        Parameters:


        Returns:

        """
        ...

    def invalidate_sort(self) -> None:
        """
        Updates the sorting for all children.

        Call this when the result of the sort function on
        @box is changed due to an external factor.

        Parameters:


        Returns:

        """
        ...

    @classmethod
    def new(cls) -> FlowBox:
        """
        Creates a `GtkFlowBox`.

        Parameters:


        Returns:
            Widget: a new `GtkFlowBox`

        """
        ...

    def prepend(self, child: Widget) -> None:
        """
        Adds @child to the start of @self.

        If a sort function is set, the widget will
        actually be inserted at the calculated position.

        See also: [method@Gtk.FlowBox.insert].

        Parameters:
            child: the `GtkWidget` to add

        Returns:

        """
        ...

    def remove(self, widget: Widget) -> None:
        """
        Removes a child from @box.

        Parameters:
            widget: the child widget to remove

        Returns:

        """
        ...

    def remove_all(self) -> None:
        """
        Removes all children from @box.

        This function does nothing if @box is backed by a model.

        Parameters:


        Returns:

        """
        ...

    def select_all(self) -> None:
        """
        Select all children of @box, if the selection
        mode allows it.

        Parameters:


        Returns:

        """
        ...

    def select_child(self, child: FlowBoxChild) -> None:
        """
        Selects a single child of @box, if the selection
        mode allows it.

        Parameters:
            child: a child of @box

        Returns:

        """
        ...

    def selected_foreach(self, func: Callable[..., None], *data: Any) -> None:
        """
        Calls a function for each selected child.

        Note that the selection cannot be modified from within
        this function.

        Parameters:
            func: the function to call for each selected child
            data: user data to pass to the function

        Returns:

        """
        ...

    def set_activate_on_single_click(self, single: bool) -> None:
        """
        If @single is %TRUE, children will be activated when you click
        on them, otherwise you need to double-click.

        Parameters:
            single: %TRUE to emit child-activated on a single click

        Returns:

        """
        ...

    def set_column_spacing(self, spacing: int) -> None:
        """
        Sets the horizontal space to add between children.

        Parameters:
            spacing: the spacing to use

        Returns:

        """
        ...

    def set_filter_func(
        self, filter_func: Optional[Callable[..., bool]] = None, *user_data: Any
    ) -> None:
        """
        By setting a filter function on the @box one can decide dynamically
        which of the children to show.

        For instance, to implement a search function that only shows the
        children matching the search terms.

        The @filter_func will be called for each child after the call, and
        it will continue to be called each time a child changes (via
        [method@Gtk.FlowBoxChild.changed]) or when
        [method@Gtk.FlowBox.invalidate_filter] is called.

        Note that using a filter function is incompatible with using a model
        (see [method@Gtk.FlowBox.bind_model]).

        Parameters:
            filter_func: callback that
        lets you filter which children to show
            user_data: user data passed to @filter_func

        Returns:

        """
        ...

    def set_hadjustment(self, adjustment: Adjustment) -> None:
        """
        Hooks up an adjustment to focus handling in @box.

        The adjustment is also used for autoscrolling during
        rubberband selection. See [method@Gtk.ScrolledWindow.get_hadjustment]
        for a typical way of obtaining the adjustment, and
        [method@Gtk.FlowBox.set_vadjustment] for setting the vertical
        adjustment.

        The adjustments have to be in pixel units and in the same
        coordinate system as the allocation for immediate children
        of the box.

        Parameters:
            adjustment: an adjustment which should be adjusted
        when the focus is moved among the descendents of @container

        Returns:

        """
        ...

    def set_homogeneous(self, homogeneous: bool) -> None:
        """
        Sets whether or not all children of @box are given
        equal space in the box.

        Parameters:
            homogeneous: %TRUE to create equal allotments,
        %FALSE for variable allotments

        Returns:

        """
        ...

    def set_max_children_per_line(self, n_children: int) -> None:
        """
        Sets the maximum number of children to request and
        allocate space for in @box’s orientation.

        Setting the maximum number of children per line
        limits the overall natural size request to be no more
        than @n_children children long in the given orientation.

        Parameters:
            n_children: the maximum number of children per line

        Returns:

        """
        ...

    def set_min_children_per_line(self, n_children: int) -> None:
        """
        Sets the minimum number of children to line up
        in @box’s orientation before flowing.

        Parameters:
            n_children: the minimum number of children per line

        Returns:

        """
        ...

    def set_row_spacing(self, spacing: int) -> None:
        """
        Sets the vertical space to add between children.

        Parameters:
            spacing: the spacing to use

        Returns:

        """
        ...

    def set_selection_mode(self, mode: SelectionMode) -> None:
        """
        Sets how selection works in @box.

        Parameters:
            mode: the new selection mode

        Returns:

        """
        ...

    def set_sort_func(
        self, sort_func: Optional[Callable[..., int]] = None, *user_data: Any
    ) -> None:
        """
        By setting a sort function on the @box, one can dynamically
        reorder the children of the box, based on the contents of
        the children.

        The @sort_func will be called for each child after the call,
        and will continue to be called each time a child changes (via
        [method@Gtk.FlowBoxChild.changed]) and when
        [method@Gtk.FlowBox.invalidate_sort] is called.

        Note that using a sort function is incompatible with using a model
        (see [method@Gtk.FlowBox.bind_model]).

        Parameters:
            sort_func: the sort function
            user_data: user data passed to @sort_func

        Returns:

        """
        ...

    def set_vadjustment(self, adjustment: Adjustment) -> None:
        """
        Hooks up an adjustment to focus handling in @box.

        The adjustment is also used for autoscrolling during
        rubberband selection. See [method@Gtk.ScrolledWindow.get_vadjustment]
        for a typical way of obtaining the adjustment, and
        [method@Gtk.FlowBox.set_hadjustment] for setting the horizontal
        adjustment.

        The adjustments have to be in pixel units and in the same
        coordinate system as the allocation for immediate children
        of the box.

        Parameters:
            adjustment: an adjustment which should be adjusted
        when the focus is moved among the descendents of @container

        Returns:

        """
        ...

    def unselect_all(self) -> None:
        """
        Unselect all children of @box, if the selection
        mode allows it.

        Parameters:


        Returns:

        """
        ...

    def unselect_child(self, child: FlowBoxChild) -> None:
        """
        Unselects a single child of @box, if the selection
        mode allows it.

        Parameters:
            child: a child of @box

        Returns:

        """
        ...

class FlowBoxChild(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkFlowBoxChild` is the kind of widget that can be added to a `GtkFlowBox`.

    :Constructors:

    ::

        FlowBoxChild(**properties)
        new() -> Gtk.Widget

    Object GtkFlowBoxChild

    Signals from GtkFlowBoxChild:
      activate ()

    Properties from GtkFlowBoxChild:
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        child: Optional[Widget]
        """
        The child widget.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def changed(self) -> None:
        """
        Marks @child as changed, causing any state that depends on this
        to be updated.

        This affects sorting and filtering.

        Note that calls to this method must be in sync with the data
        used for the sorting and filtering functions. For instance, if
        the list is mirroring some external data set, and *two* children
        changed in the external data set when you call
        gtk_flow_box_child_changed() on the first child, the sort function
        must only read the new data for the first of the two changed
        children, otherwise the resorting of the children will be wrong.

        This generally means that if you don’t fully control the data
        model, you have to duplicate the data that affects the sorting
        and filtering functions into the widgets themselves.

        Another alternative is to call [method@Gtk.FlowBox.invalidate_sort]
        on any model change, but that is more expensive.

        Parameters:


        Returns:

        """
        ...

    def do_activate(self) -> None: ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @self.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @self

        """
        ...

    def get_index(self) -> int:
        """
        Gets the current index of the @child in its `GtkFlowBox` container.

        Parameters:


        Returns:
            int: the index of the @child, or -1 if the @child is not
        in a flow box

        """
        ...

    def is_selected(self) -> bool:
        """
        Returns whether the @child is currently selected in its
        `GtkFlowBox` container.

        Parameters:


        Returns:
            bool: %TRUE if @child is selected

        """
        ...

    @classmethod
    def new(cls) -> FlowBoxChild:
        """
        Creates a new `GtkFlowBoxChild`.

        This should only be used as a child of a `GtkFlowBox`.

        Parameters:


        Returns:
            Widget: a new `GtkFlowBoxChild`

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @self.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

class FlowBoxChildClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FlowBoxChildClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    activate: Callable[[FlowBoxChild], None] = ...
    padding: list[None] = ...

@deprecated("Use [class@Gtk.FontDialogButton] instead")
class FontButton(Widget, Accessible, Buildable, ConstraintTarget, FontChooser):
    """
    The `GtkFontButton` allows to open a font chooser dialog to change
    the font.

    ![An example GtkFontButton](font-button.png)

    It is suitable widget for selecting a font in a preference dialog.

    # CSS nodes

    ```
    fontbutton
    ╰── button.font
    ╰── [content]
    ```

    `GtkFontButton` has a single CSS node with name fontbutton which
    contains a button node with the .font style class.

    :Constructors:

    ::

        FontButton(**properties)
        new() -> Gtk.Widget
        new_with_font(fontname:str) -> Gtk.Widget

    Object GtkFontButton

    Signals from GtkFontButton:
      activate ()
      font-set ()

    Properties from GtkFontButton:
      title -> gchararray: title
      modal -> gboolean: modal
      use-font -> gboolean: use-font
      use-size -> gboolean: use-size

    Signals from GtkFontChooser:
      font-activated (gchararray)

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        FontChooser.Props,
    ):
        modal: bool
        """
        Whether the font chooser dialog should be modal.
        """
        title: str
        """
        The title of the font chooser dialog.
        """
        use_font: bool
        """
        Whether the buttons label will be drawn in the selected font.
        """
        use_size: bool
        """
        Whether the buttons label will use the selected font size.
        """

    props: Props = ...
    def __init__(
        self,
        modal: bool = ...,
        title: str = ...,
        use_font: bool = ...,
        use_size: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        font: str = ...,
        font_desc: Pango.FontDescription = ...,
        language: str = ...,
        level: FontChooserLevel = ...,
        preview_text: str = ...,
        show_preview_entry: bool = ...,
    ): ...
    @deprecated("Use [class@Gtk.FontDialogButton] instead")
    def get_modal(self) -> bool:
        """
        Gets whether the dialog is modal.

        Parameters:


        Returns:
            bool: %TRUE if the dialog is modal

        """
        ...

    @deprecated("Use [class@Gtk.FontDialogButton] instead")
    def get_title(self) -> str:
        """
        Retrieves the title of the font chooser dialog.

        Parameters:


        Returns:
            str: an internal copy of the title string
        which must not be freed.

        """
        ...

    @deprecated("Use [class@Gtk.FontDialogButton] instead")
    def get_use_font(self) -> bool:
        """
        Returns whether the selected font is used in the label.

        Parameters:


        Returns:
            bool: whether the selected font is used in the label.

        """
        ...

    @deprecated("Use [class@Gtk.FontDialogButton] instead")
    def get_use_size(self) -> bool:
        """
        Returns whether the selected size is used in the label.

        Parameters:


        Returns:
            bool: whether the selected size is used in the label.

        """
        ...

    @deprecated("Use [class@Gtk.FontDialogButton] instead")
    @classmethod
    def new(cls) -> FontButton:
        """
        Creates a new font picker widget.

        Parameters:


        Returns:
            Widget: a new font picker widget.

        """
        ...

    @deprecated("Use [class@Gtk.FontDialogButton] instead")
    @classmethod
    def new_with_font(cls, fontname: str) -> FontButton:
        """
        Creates a new font picker widget showing the given font.

        Parameters:
            fontname: Name of font to display in font chooser dialog

        Returns:
            Widget: a new font picker widget.

        """
        ...

    @deprecated("Use [class@Gtk.FontDialogButton] instead")
    def set_modal(self, modal: bool) -> None:
        """
        Sets whether the dialog should be modal.

        Parameters:
            modal: %TRUE to make the dialog modal

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FontDialogButton] instead")
    def set_title(self, title: str) -> None:
        """
        Sets the title for the font chooser dialog.

        Parameters:
            title: a string containing the font chooser dialog title

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FontDialogButton] instead")
    def set_use_font(self, use_font: bool) -> None:
        """
        If @use_font is %TRUE, the font name will be written
        using the selected font.

        Parameters:
            use_font: If %TRUE, font name will be written using font chosen.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FontDialogButton] instead")
    def set_use_size(self, use_size: bool) -> None:
        """
        If @use_size is %TRUE, the font name will be written using
        the selected size.

        Parameters:
            use_size: If %TRUE, font name will be written using the
        selected size.

        Returns:

        """
        ...

@deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
class FontChooser(GObject.GInterface):
    """
    `GtkFontChooser` is an interface that can be implemented by widgets
    for choosing fonts.

    In GTK, the main objects that implement this interface are
    [class@Gtk.FontChooserWidget], [class@Gtk.FontChooserDialog] and
    [class@Gtk.FontButton].



    Interface GtkFontChooser

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def __init__(
        self,
        font: str = ...,
        font_desc: Pango.FontDescription = ...,
        language: str = ...,
        level: FontChooserLevel = ...,
        preview_text: str = ...,
        show_preview_entry: bool = ...,
    ): ...
    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_font(self) -> Optional[str]:
        """
        Gets the currently-selected font name.

        Note that this can be a different string than what you set with
        [method@Gtk.FontChooser.set_font], as the font chooser widget may
        normalize font names and thus return a string with a different
        structure. For example, “Helvetica Italic Bold 12” could be
        normalized to “Helvetica Bold Italic 12”.

        Use [method@Pango.FontDescription.equal] if you want to compare two
        font descriptions.

        Parameters:


        Returns:
            Optional[str]: A string with the name
        of the current font

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_font_desc(self) -> Optional[Pango.FontDescription]:
        """
        Gets the currently-selected font.

        Note that this can be a different string than what you set with
        [method@Gtk.FontChooser.set_font], as the font chooser widget may
        normalize font names and thus return a string with a different
        structure. For example, “Helvetica Italic Bold 12” could be
        normalized to “Helvetica Bold Italic 12”.

        Use [method@Pango.FontDescription.equal] if you want to compare two
        font descriptions.

        Parameters:


        Returns:
            Optional[Pango.FontDescription]: A `PangoFontDescription` for the
        current font

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_font_face(self) -> Optional[Pango.FontFace]:
        """
        Gets the `PangoFontFace` representing the selected font group
        details (i.e. family, slant, weight, width, etc).

        If the selected font is not installed, returns %NULL.

        Parameters:


        Returns:
            Optional[Pango.FontFace]: A `PangoFontFace` representing the
        selected font group details

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_font_family(self) -> Optional[Pango.FontFamily]:
        """
        Gets the `PangoFontFamily` representing the selected font family.

        Font families are a collection of font faces.

        If the selected font is not installed, returns %NULL.

        Parameters:


        Returns:
            Optional[Pango.FontFamily]: A `PangoFontFamily` representing the
        selected font family

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_font_features(self) -> str:
        """
        Gets the currently-selected font features.

        The format of the returned string is compatible with the
        [CSS font-feature-settings property](https://www.w3.org/TR/css-fonts-4/#font-rend-desc).
        It can be passed to [func@Pango.AttrFontFeatures.new].

        Parameters:


        Returns:
            str: the currently selected font features

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_font_map(self) -> Optional[Pango.FontMap]:
        """
        Gets the custom font map of this font chooser widget,
        or %NULL if it does not have one.

        Parameters:


        Returns:
            Optional[Pango.FontMap]: a `PangoFontMap`

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_font_size(self) -> int:
        """
        The selected font size.

        Parameters:


        Returns:
            int: A n integer representing the selected font size,
        or -1 if no font size is selected.

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_language(self) -> str:
        """
        Gets the language that is used for font features.

        Parameters:


        Returns:
            str: the currently selected language

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_level(self) -> FontChooserLevel:
        """
        Returns the current level of granularity for selecting fonts.

        Parameters:


        Returns:
            FontChooserLevel: the current granularity level

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_preview_text(self) -> str:
        """
        Gets the text displayed in the preview area.

        Parameters:


        Returns:
            str: the text displayed in the preview area

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def get_show_preview_entry(self) -> bool:
        """
        Returns whether the preview entry is shown or not.

        Parameters:


        Returns:
            bool: %TRUE if the preview entry is shown or %FALSE if it is hidden.

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def set_filter_func(
        self, filter: Optional[Callable[..., bool]] = None, *user_data: Any
    ) -> None:
        """
        Adds a filter function that decides which fonts to display
        in the font chooser.

        Parameters:
            filter: a `GtkFontFilterFunc`
            user_data: data to pass to @filter

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def set_font(self, fontname: str) -> None:
        """
        Sets the currently-selected font.

        Parameters:
            fontname: a font name like “Helvetica 12” or “Times Bold 18”

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def set_font_desc(self, font_desc: Pango.FontDescription) -> None:
        """
        Sets the currently-selected font from @font_desc.

        Parameters:
            font_desc: a `PangoFontDescription`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def set_font_map(self, fontmap: Optional[Pango.FontMap] = None) -> None:
        """
        Sets a custom font map to use for this font chooser widget.

        A custom font map can be used to present application-specific
        fonts instead of or in addition to the normal system fonts.

        ```c
        FcConfig *config;
        PangoFontMap *fontmap;

        config = FcInitLoadConfigAndFonts ();
        FcConfigAppFontAddFile (config, my_app_font_file);

        fontmap = pango_cairo_font_map_new_for_font_type (CAIRO_FONT_TYPE_FT);
        pango_fc_font_map_set_config (PANGO_FC_FONT_MAP (fontmap), config);

        gtk_font_chooser_set_font_map (font_chooser, fontmap);
        ```

        Note that other GTK widgets will only be able to use the
        application-specific font if it is present in the font map they use:

        ```c
        context = gtk_widget_get_pango_context (label);
        pango_context_set_font_map (context, fontmap);
        ```

        Parameters:
            fontmap: a `PangoFontMap`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def set_language(self, language: str) -> None:
        """
        Sets the language to use for font features.

        Parameters:
            language: a language

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def set_level(self, level: FontChooserLevel) -> None:
        """
        Sets the desired level of granularity for selecting fonts.

        Parameters:
            level: the desired level of granularity

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def set_preview_text(self, text: str) -> None:
        """
        Sets the text displayed in the preview area.

        The @text is used to show how the selected font looks.

        Parameters:
            text: the text to display in the preview area

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.FontDialog] and [class@Gtk.FontDialogButton] instead")
    def set_show_preview_entry(self, show_preview_entry: bool) -> None:
        """
        Shows or hides the editable preview entry.

        Parameters:
            show_preview_entry: whether to show the editable preview entry or not

        Returns:

        """
        ...

@deprecated("Use [class@Gtk.FontDialog] instead")
class FontChooserDialog(
    Dialog,
    Accessible,
    Buildable,
    ConstraintTarget,
    FontChooser,
    Native,
    Root,
    ShortcutManager,
):
    """
    The `GtkFontChooserDialog` widget is a dialog for selecting a font.

    ![An example GtkFontChooserDialog](fontchooser.png)

    `GtkFontChooserDialog` implements the [iface@Gtk.FontChooser] interface
    and does not provide much API of its own.

    To create a `GtkFontChooserDialog`, use [ctor@Gtk.FontChooserDialog.new].

    # GtkFontChooserDialog as GtkBuildable

    The `GtkFontChooserDialog` implementation of the `GtkBuildable`
    interface exposes the buttons with the names “select_button”
    and “cancel_button”.

    ## CSS nodes

    `GtkFontChooserDialog` has a single CSS node with the name `window` and style
    class `.fontchooser`.

    :Constructors:

    ::

        FontChooserDialog(**properties)
        new(title:str=None, parent:Gtk.Window=None) -> Gtk.Widget

    Object GtkFontChooserDialog

    Signals from GtkFontChooser:
      font-activated (gchararray)

    Signals from GtkDialog:
      response (gint)
      close ()

    Properties from GtkDialog:
      use-header-bar -> gint: use-header-bar

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Dialog.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        FontChooser.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ): ...

    def __init__(
        self,
        use_header_bar: int = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        font: str = ...,
        font_desc: Pango.FontDescription = ...,
        language: str = ...,
        level: FontChooserLevel = ...,
        preview_text: str = ...,
        show_preview_entry: bool = ...,
    ): ...
    @deprecated("Use [class@Gtk.FontDialog] instead")
    @classmethod
    def new(
        cls, title: Optional[str] = None, parent: Optional[Window] = None
    ) -> FontChooserDialog:
        """
        Creates a new `GtkFontChooserDialog`.

        Parameters:
            title: Title of the dialog
            parent: Transient parent of the dialog

        Returns:
            Widget: a new `GtkFontChooserDialog`

        """
        ...

class FontChooserIface(GObject.GPointer):
    """
    :Constructors:

    ::

        FontChooserIface()
    """

    class Props(GObject.GPointer.Props): ...
    base_iface: GObject.TypeInterface = ...
    get_font_family: Callable[[FontChooser], Optional[Pango.FontFamily]] = ...
    get_font_face: Callable[[FontChooser], Optional[Pango.FontFace]] = ...
    get_font_size: Callable[[FontChooser], int] = ...
    set_filter_func: Callable[..., None] = ...
    font_activated: Callable[[FontChooser, str], None] = ...
    set_font_map: Callable[[FontChooser, Optional[Pango.FontMap]], None] = ...
    get_font_map: Callable[[FontChooser], Optional[Pango.FontMap]] = ...
    padding: list[None] = ...

@deprecated("Direct use of `GtkFontChooserWidget` is deprecated.")
class FontChooserWidget(Widget, Accessible, Buildable, ConstraintTarget, FontChooser):
    """
    The `GtkFontChooserWidget` widget lets the user select a font.

    It is used in the `GtkFontChooserDialog` widget to provide a
    dialog for selecting fonts.

    To set the font which is initially selected, use
    [method@Gtk.FontChooser.set_font] or [method@Gtk.FontChooser.set_font_desc].

    To get the selected font use [method@Gtk.FontChooser.get_font] or
    [method@Gtk.FontChooser.get_font_desc].

    To change the text which is shown in the preview area, use
    [method@Gtk.FontChooser.set_preview_text].

    # CSS nodes

    `GtkFontChooserWidget` has a single CSS node with name fontchooser.

    :Constructors:

    ::

        FontChooserWidget(**properties)
        new() -> Gtk.Widget

    Object GtkFontChooserWidget

    Properties from GtkFontChooserWidget:
      tweak-action -> GAction: tweak-action

    Signals from GtkFontChooser:
      font-activated (gchararray)

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        FontChooser.Props,
    ):
        tweak_action: Gio.Action
        """
        A toggle action that can be used to switch to the tweak page
        of the font chooser widget, which lets the user tweak the
        OpenType features and variation axes of the selected font.

        The action will be enabled or disabled depending on whether
        the selected font has any features or axes.
        """

    props: Props = ...
    def __init__(
        self,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        font: str = ...,
        font_desc: Pango.FontDescription = ...,
        language: str = ...,
        level: FontChooserLevel = ...,
        preview_text: str = ...,
        show_preview_entry: bool = ...,
    ): ...
    @deprecated("Direct use of `GtkFontChooserWidget` is deprecated.")
    @classmethod
    def new(cls) -> FontChooserWidget:
        """
        Creates a new `GtkFontChooserWidget`.

        Parameters:


        Returns:
            Widget: a new `GtkFontChooserWidget`

        """
        ...

class FontDialog(GObject.Object):
    """
    A `GtkFontDialog` object collects the arguments that
    are needed to present a font chooser dialog to the
    user, such as a title for the dialog and whether it
    should be modal.

    The dialog is shown with the [method@Gtk.FontDialog.choose_font]
    function or its variants. This API follows the GIO async pattern,
    and the result can be obtained by calling the corresponding
    finish function, such as [method@Gtk.FontDialog.choose_font_finish].

    See [class@Gtk.FontDialogButton] for a convenient control
    that uses `GtkFontDialog` and presents the results.

    :Constructors:

    ::

        FontDialog(**properties)
        new() -> Gtk.FontDialog

    Object GtkFontDialog

    Properties from GtkFontDialog:
      title -> gchararray: title
      modal -> gboolean: modal
      language -> PangoLanguage: language
      font-map -> PangoFontMap: font-map
      filter -> GtkFilter: filter

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        filter: Optional[Filter]
        """
        Sets a filter to restrict what fonts are shown
        in the font chooser dialog.
        """
        font_map: Optional[Pango.FontMap]
        """
        Sets a custom font map to select fonts from.

        A custom font map can be used to present application-specific
        fonts instead of or in addition to the normal system fonts.
        """
        language: Optional[Pango.Language]
        """
        The language for which the font features are selected.
        """
        modal: bool
        """
        Whether the font chooser dialog is modal.
        """
        title: str
        """
        A title that may be shown on the font chooser
        dialog that is presented by [method@Gtk.FontDialog.choose_font].
        """

    props: Props = ...
    def __init__(
        self,
        filter: Optional[Filter] = ...,
        font_map: Optional[Pango.FontMap] = ...,
        language: Pango.Language = ...,
        modal: bool = ...,
        title: str = ...,
    ): ...
    def choose_face(
        self,
        parent: Optional[Window] = None,
        initial_value: Optional[Pango.FontFace] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function initiates a font selection operation by
        presenting a dialog to the user for selecting a font face
        (i.e. a font family and style, but not a specific font size).

        The @callback will be called when the dialog is dismissed.
        It should call [method@Gtk.FontDialog.choose_face_finish]
        to obtain the result.

        Parameters:
            parent: the parent `GtkWindow`
            initial_value: the initial value
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def choose_face_finish(self, result: Gio.AsyncResult) -> Optional[Pango.FontFace]:
        """
        Finishes the [method@Gtk.FontDialog.choose_face] call
        and returns the resulting font face.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            Optional[Pango.FontFace]: the selected font face

        """
        ...

    def choose_family(
        self,
        parent: Optional[Window] = None,
        initial_value: Optional[Pango.FontFamily] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function initiates a font selection operation by
        presenting a dialog to the user for selecting a font family.

        The @callback will be called when the dialog is dismissed.
        It should call [method@Gtk.FontDialog.choose_family_finish]
        to obtain the result.

        Parameters:
            parent: the parent `GtkWindow`
            initial_value: the initial value
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def choose_family_finish(
        self, result: Gio.AsyncResult
    ) -> Optional[Pango.FontFamily]:
        """
        Finishes the [method@Gtk.FontDialog.choose_family] call
        and returns the resulting family.

        This function never returns an error. If the operation is
        not finished successfully, the value passed as @initial_value
        to [method@Gtk.FontDialog.choose_family] is returned.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            Optional[Pango.FontFamily]: the selected family

        """
        ...

    def choose_font(
        self,
        parent: Optional[Window] = None,
        initial_value: Optional[Pango.FontDescription] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function initiates a font selection operation by
        presenting a dialog to the user for selecting a font.

        The @callback will be called when the dialog is dismissed.
        It should call [method@Gtk.FontDialog.choose_font_finish]
        to obtain the result.

        If you want to let the user select font features as well,
        use [method@Gtk.FontDialog.choose_font_and_features] instead.

        Parameters:
            parent: the parent `GtkWindow`
            initial_value: the font to select initially
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def choose_font_and_features(
        self,
        parent: Optional[Window] = None,
        initial_value: Optional[Pango.FontDescription] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        This function initiates a font selection operation by
        presenting a dialog to the user for selecting a font and
        font features.

        Font features affect how the font is rendered, for example
        enabling glyph variants or ligatures.

        The @callback will be called when the dialog is dismissed.
        It should call [method@Gtk.FontDialog.choose_font_and_features_finish]
        to obtain the result.

        Parameters:
            parent: the parent `GtkWindow`
            initial_value: the font to select initially
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def choose_font_and_features_finish(
        self, result: Gio.AsyncResult
    ) -> Tuple[bool, Pango.FontDescription, str, Pango.Language]:
        """
        Finishes the [method@Gtk.FontDialog.choose_font_and_features]
        call and returns the resulting font description and font features.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            bool: `TRUE` if a font was selected. Otherwise `FALSE` is returned
        and @error is set
            Pango.FontDescription: return location for font description
            str: return location for font features
            Pango.Language: return location for the language
        """
        ...

    def choose_font_finish(
        self, result: Gio.AsyncResult
    ) -> Optional[Pango.FontDescription]:
        """
        Finishes the [method@Gtk.FontDialog.choose_font] call
        and returns the resulting font description.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            Optional[Pango.FontDescription]: the selected font

        """
        ...

    def get_filter(self) -> Optional[Filter]:
        """
        Returns the filter that decides which fonts to display
        in the font chooser dialog.

        Parameters:


        Returns:
            Optional[Filter]: the filter

        """
        ...

    def get_font_map(self) -> Optional[Pango.FontMap]:
        """
        Returns the fontmap from which fonts are selected,
        or `NULL` for the default fontmap.

        Parameters:


        Returns:
            Optional[Pango.FontMap]: the fontmap

        """
        ...

    def get_language(self) -> Optional[Pango.Language]:
        """
        Returns the language for which font features are applied.

        Parameters:


        Returns:
            Optional[Pango.Language]: the language for font features

        """
        ...

    def get_modal(self) -> bool:
        """
        Returns whether the font chooser dialog
        blocks interaction with the parent window
        while it is presented.

        Parameters:


        Returns:
            bool: `TRUE` if the font chooser dialog is modal

        """
        ...

    def get_title(self) -> str:
        """
        Returns the title that will be shown on the
        font chooser dialog.

        Parameters:


        Returns:
            str: the title

        """
        ...

    @classmethod
    def new(cls) -> FontDialog:
        """
        Creates a new `GtkFontDialog` object.

        Parameters:


        Returns:
            FontDialog: the new `GtkFontDialog`

        """
        ...

    def set_filter(self, filter: Optional[Filter] = None) -> None:
        """
        Adds a filter that decides which fonts to display
        in the font chooser dialog.

        The `GtkFilter` must be able to handle both `PangoFontFamily`
        and `PangoFontFace` objects.

        Parameters:
            filter: a `GtkFilter`

        Returns:

        """
        ...

    def set_font_map(self, fontmap: Optional[Pango.FontMap] = None) -> None:
        """
        Sets the fontmap from which fonts are selected.

        If @fontmap is `NULL`, the default fontmap is used.

        Parameters:
            fontmap: the fontmap

        Returns:

        """
        ...

    def set_language(self, language: Pango.Language) -> None:
        """
        Sets the language for which font features are applied.

        Parameters:
            language: the language for font features

        Returns:

        """
        ...

    def set_modal(self, modal: bool) -> None:
        """
        Sets whether the font chooser dialog
        blocks interaction with the parent window
        while it is presented.

        Parameters:
            modal: the new value

        Returns:

        """
        ...

    def set_title(self, title: str) -> None:
        """
        Sets the title that will be shown on the
        font chooser dialog.

        Parameters:
            title: the new title

        Returns:

        """
        ...

class FontDialogButton(Widget, Accessible, Buildable, ConstraintTarget):
    """
    The `GtkFontDialogButton` is wrapped around a [class@Gtk.FontDialog]
    and allows to open a font chooser dialog to change the font.

    ![An example GtkFontDialogButton](font-button.png)

    It is suitable widget for selecting a font in a preference dialog.

    # CSS nodes

    ```
    fontbutton
    ╰── button.font
    ╰── [content]
    ```

    `GtkFontDialogButton` has a single CSS node with name fontbutton which
    contains a button node with the .font style class.

    :Constructors:

    ::

        FontDialogButton(**properties)
        new(dialog:Gtk.FontDialog=None) -> Gtk.Widget

    Object GtkFontDialogButton

    Signals from GtkFontDialogButton:
      activate ()

    Properties from GtkFontDialogButton:
      dialog -> GtkFontDialog: dialog
      level -> GtkFontLevel: level
      font-desc -> PangoFontDescription: font-desc
      font-features -> gchararray: font-features
      language -> PangoLanguage: language
      use-font -> gboolean: use-font
      use-size -> gboolean: use-size

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        dialog: Optional[FontDialog]
        """
        The `GtkFontDialog` that contains parameters for
        the font chooser dialog.
        """
        font_desc: Optional[Pango.FontDescription]
        """
        The selected font.

        This property can be set to give the button its initial
        font, and it will be updated to reflect the users choice
        in the font chooser dialog.

        Listen to `notify::font-desc` to get informed about changes
        to the buttons font.
        """
        font_features: Optional[str]
        """
        The selected font features.

        This property will be updated to reflect the users choice
        in the font chooser dialog.

        Listen to `notify::font-features` to get informed about changes
        to the buttons font features.
        """
        language: Optional[Pango.Language]
        """
        The selected language for font features.

        This property will be updated to reflect the users choice
        in the font chooser dialog.

        Listen to `notify::language` to get informed about changes
        to the buttons language.
        """
        level: FontLevel
        """
        The level of detail for the font chooser dialog.
        """
        use_font: bool
        """
        Whether the buttons label will be drawn in the selected font.
        """
        use_size: bool
        """
        Whether the buttons label will use the selected font size.
        """

    props: Props = ...
    def __init__(
        self,
        dialog: FontDialog = ...,
        font_desc: Pango.FontDescription = ...,
        font_features: Optional[str] = ...,
        language: Optional[Pango.Language] = ...,
        level: FontLevel = ...,
        use_font: bool = ...,
        use_size: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_dialog(self) -> Optional[FontDialog]:
        """
        Returns the `GtkFontDialog` of @self.

        Parameters:


        Returns:
            Optional[FontDialog]: the `GtkFontDialog`

        """
        ...

    def get_font_desc(self) -> Optional[Pango.FontDescription]:
        """
        Returns the font of the button.

        This function is what should be used to obtain
        the font that was chosen by the user. To get
        informed about changes, listen to \"notify::font-desc\".

        Parameters:


        Returns:
            Optional[Pango.FontDescription]: the font

        """
        ...

    def get_font_features(self) -> Optional[str]:
        """
        Returns the font features of the button.

        This function is what should be used to obtain the font features
        that were chosen by the user. To get informed about changes, listen
        to \"notify::font-features\".

        Note that the button will only let users choose font features
        if [property@Gtk.FontDialogButton:level] is set to
        `GTK_FONT_LEVEL_FEATURES`.

        Parameters:


        Returns:
            Optional[str]: the font features

        """
        ...

    def get_language(self) -> Optional[Pango.Language]:
        """
        Returns the language that is used for font features.

        Parameters:


        Returns:
            Optional[Pango.Language]: the language

        """
        ...

    def get_level(self) -> FontLevel:
        """
        Returns the level of detail at which this dialog
        lets the user select fonts.

        Parameters:


        Returns:
            FontLevel: the level of detail

        """
        ...

    def get_use_font(self) -> bool:
        """
        Returns whether the selected font is used in the label.

        Parameters:


        Returns:
            bool: whether the selected font is used in the label

        """
        ...

    def get_use_size(self) -> bool:
        """
        Returns whether the selected font size is used in the label.

        Parameters:


        Returns:
            bool: whether the selected font size is used in the label

        """
        ...

    @classmethod
    def new(cls, dialog: Optional[FontDialog] = None) -> FontDialogButton:
        """
        Creates a new `GtkFontDialogButton` with the
        given `GtkFontDialog`.

        You can pass `NULL` to this function and set a `GtkFontDialog`
        later. The button will be insensitive until that happens.

        Parameters:
            dialog: the `GtkFontDialog` to use

        Returns:
            Widget: the new `GtkFontDialogButton`

        """
        ...

    def set_dialog(self, dialog: FontDialog) -> None:
        """
        Sets a `GtkFontDialog` object to use for
        creating the font chooser dialog that is
        presented when the user clicks the button.

        Parameters:
            dialog: the new `GtkFontDialog`

        Returns:

        """
        ...

    def set_font_desc(self, font_desc: Pango.FontDescription) -> None:
        """
        Sets the font of the button.

        Parameters:
            font_desc: the new font

        Returns:

        """
        ...

    def set_font_features(self, font_features: Optional[str] = None) -> None:
        """
        Sets the font features of the button.

        Parameters:
            font_features: the font features

        Returns:

        """
        ...

    def set_language(self, language: Optional[Pango.Language] = None) -> None:
        """
        Sets the language to use for font features.

        Parameters:
            language: the new language

        Returns:

        """
        ...

    def set_level(self, level: FontLevel) -> None:
        """
        Sets the level of detail at which this dialog
        lets the user select fonts.

        Parameters:
            level: the level of detail

        Returns:

        """
        ...

    def set_use_font(self, use_font: bool) -> None:
        """
        If @use_font is `TRUE`, the font name will be written
        using the selected font.

        Parameters:
            use_font: If `TRUE`, font name will be written using
        the chosen font

        Returns:

        """
        ...

    def set_use_size(self, use_size: bool) -> None:
        """
        If @use_size is `TRUE`, the font name will be written
        using the selected font size.

        Parameters:
            use_size: If `TRUE`, font name will be written using
        the chosen font size

        Returns:

        """
        ...

class FontDialogButtonClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FontDialogButtonClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class FontDialogClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FontDialogClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class Frame(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkFrame` is a widget that surrounds its child with a decorative
    frame and an optional label.

    ![An example GtkFrame](frame.png)

    If present, the label is drawn inside the top edge of the frame.
    The horizontal position of the label can be controlled with
    [method@Gtk.Frame.set_label_align].

    `GtkFrame` clips its child. You can use this to add rounded corners
    to widgets, but be aware that it also cuts off shadows.

    # GtkFrame as GtkBuildable

    The `GtkFrame` implementation of the `GtkBuildable` interface supports
    placing a child in the label position by specifying “label” as the
    “type” attribute of a `<child>` element. A normal content child can
    be specified without specifying a `<child>` type attribute.

    An example of a UI definition fragment with GtkFrame:
    ```xml
    <object class=\"GtkFrame\">
    <child type=\"label\">
    <object class=\"GtkLabel\" id=\"frame_label\"/>
    </child>
    <child>
    <object class=\"GtkEntry\" id=\"frame_content\"/>
    </child>
    </object>
    ```

    # CSS nodes

    ```
    frame
    ├── <label widget>
    ╰── <child>
    ```

    `GtkFrame` has a main CSS node with name “frame”, which is used to draw the
    visible border. You can set the appearance of the border using CSS properties
    like “border-style” on this node.

    # Accessibility

    `GtkFrame` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.

    :Constructors:

    ::

        Frame(**properties)
        new(label:str=None) -> Gtk.Widget

    Object GtkFrame

    Properties from GtkFrame:
      label -> gchararray: label
      label-xalign -> gfloat: label-xalign
      label-widget -> GtkWidget: label-widget
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        child: Optional[Widget]
        """
        The child widget.
        """
        label: Optional[str]
        """
        Text of the frame's label.
        """
        label_widget: Optional[Widget]
        """
        Widget to display in place of the usual frame label.
        """
        label_xalign: float
        """
        The horizontal alignment of the label.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        label: Optional[str] = ...,
        label_widget: Optional[Widget] = ...,
        label_xalign: float = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def do_compute_child_allocation(self, allocation: Gdk.Rectangle) -> None: ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @frame.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @frame

        """
        ...

    def get_label(self) -> Optional[str]:
        """
        Returns the frame labels text.

        If the frame's label widget is not a `GtkLabel`, %NULL
        is returned.

        Parameters:


        Returns:
            Optional[str]: the text in the label, or %NULL if there
        was no label widget or the label widget was not a `GtkLabel`.
        This string is owned by GTK and must not be modified or freed.

        """
        ...

    def get_label_align(self) -> float:
        """
        Retrieves the X alignment of the frame’s label.

        Parameters:


        Returns:
            float: the frames X alignment

        """
        ...

    def get_label_widget(self) -> Optional[Widget]:
        """
        Retrieves the label widget for the frame.

        Parameters:


        Returns:
            Optional[Widget]: the label widget

        """
        ...

    @classmethod
    def new(cls, label: Optional[str] = None) -> Frame:
        """
        Creates a new `GtkFrame`, with optional label @label.

        If @label is %NULL, the label is omitted.

        Parameters:
            label: the text to use as the label of the frame

        Returns:
            Widget: a new `GtkFrame` widget

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @frame.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_label(self, label: Optional[str] = None) -> None:
        """
        Creates a new `GtkLabel` with the @label and sets it as the frame's
        label widget.

        Parameters:
            label: the text to use as the label of the frame

        Returns:

        """
        ...

    def set_label_align(self, xalign: float) -> None:
        """
        Sets the X alignment of the frame widget’s label.

        The default value for a newly created frame is 0.0.

        Parameters:
            xalign: The position of the label along the top edge
        of the widget. A value of 0.0 represents left alignment;
        1.0 represents right alignment.

        Returns:

        """
        ...

    def set_label_widget(self, label_widget: Optional[Widget] = None) -> None:
        """
        Sets the label widget for the frame.

        This is the widget that will appear embedded in the top edge
        of the frame as a title.

        Parameters:
            label_widget: the new label widget

        Returns:

        """
        ...

class FrameClass(GObject.GPointer):
    """
    :Constructors:

    ::

        FrameClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    compute_child_allocation: Callable[[Frame, Gdk.Rectangle], None] = ...
    padding: list[None] = ...

class GLArea(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkGLArea` is a widget that allows drawing with OpenGL.

    ![An example GtkGLArea](glarea.png)

    `GtkGLArea` sets up its own [class@Gdk.GLContext], and creates a custom
    GL framebuffer that the widget will do GL rendering onto. It also ensures
    that this framebuffer is the default GL rendering target when rendering.
    The completed rendering is integrated into the larger GTK scene graph as
    a texture.

    In order to draw, you have to connect to the [signal@Gtk.GLArea::render]
    signal, or subclass `GtkGLArea` and override the GtkGLAreaClass.render
    virtual function.

    The `GtkGLArea` widget ensures that the `GdkGLContext` is associated with
    the widget's drawing area, and it is kept updated when the size and
    position of the drawing area changes.

    ## Drawing with GtkGLArea

    The simplest way to draw using OpenGL commands in a `GtkGLArea` is to
    create a widget instance and connect to the [signal@Gtk.GLArea::render] signal:

    The `render()` function will be called when the `GtkGLArea` is ready
    for you to draw its content:

    The initial contents of the framebuffer are transparent.

    ```c
    static gboolean
    render (GtkGLArea *area, GdkGLContext *context)
    {
    // inside this function it's safe to use GL; the given
    // GdkGLContext has been made current to the drawable
    // surface used by the `GtkGLArea` and the viewport has
    // already been set to be the size of the allocation

    // we can start by clearing the buffer
    glClearColor (0, 0, 0, 0);
    glClear (GL_COLOR_BUFFER_BIT);

    // draw your object
    // draw_an_object ();

    // we completed our drawing; the draw commands will be
    // flushed at the end of the signal emission chain, and
    // the buffers will be drawn on the window
    return TRUE;
    }

    void setup_glarea (void)
    {
    // create a GtkGLArea instance
    GtkWidget *gl_area = gtk_gl_area_new ();

    // connect to the \"render\" signal
    g_signal_connect (gl_area, \"render\", G_CALLBACK (render), NULL);
    }
    ```

    If you need to initialize OpenGL state, e.g. buffer objects or
    shaders, you should use the [signal@Gtk.Widget::realize] signal;
    you can use the [signal@Gtk.Widget::unrealize] signal to clean up.
    Since the `GdkGLContext` creation and initialization may fail, you
    will need to check for errors, using [method@Gtk.GLArea.get_error].

    An example of how to safely initialize the GL state is:

    ```c
    static void
    on_realize (GtkGLarea *area)
    {
    // We need to make the context current if we want to
    // call GL API
    gtk_gl_area_make_current (area);

    // If there were errors during the initialization or
    // when trying to make the context current, this
    // function will return a GError for you to catch
    if (gtk_gl_area_get_error (area) != NULL)
    return;

    // You can also use gtk_gl_area_set_error() in order
    // to show eventual initialization errors on the
    // GtkGLArea widget itself
    GError *internal_error = NULL;
    init_buffer_objects (&error);
    if (error != NULL)
    {
    gtk_gl_area_set_error (area, error);
    g_error_free (error);
    return;
    }

    init_shaders (&error);
    if (error != NULL)
    {
    gtk_gl_area_set_error (area, error);
    g_error_free (error);
    return;
    }
    }
    ```

    If you need to change the options for creating the `GdkGLContext`
    you should use the [signal@Gtk.GLArea::create-context] signal.

    :Constructors:

    ::

        GLArea(**properties)
        new() -> Gtk.Widget

    Object GtkGLArea

    Signals from GtkGLArea:
      resize (gint, gint)
      render (GdkGLContext) -> gboolean
      create-context () -> GdkGLContext

    Properties from GtkGLArea:
      context -> GdkGLContext: context
      has-depth-buffer -> gboolean: has-depth-buffer
      has-stencil-buffer -> gboolean: has-stencil-buffer
      use-es -> gboolean: use-es
      allowed-apis -> GdkGLAPI: allowed-apis
      api -> GdkGLAPI: api
      auto-render -> gboolean: auto-render

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        allowed_apis: Gdk.GLAPI
        """
        The allowed APIs.
        """
        api: Gdk.GLAPI
        """
        The API currently in use.
        """
        auto_render: bool
        """
        If set to %TRUE the ::render signal will be emitted every time
        the widget draws.

        This is the default and is useful if drawing the widget is faster.

        If set to %FALSE the data from previous rendering is kept around and will
        be used for drawing the widget the next time, unless the window is resized.
        In order to force a rendering [method@Gtk.GLArea.queue_render] must be called.
        This mode is useful when the scene changes seldom, but takes a long time
        to redraw.
        """
        context: Optional[Gdk.GLContext]
        """
        The `GdkGLContext` used by the `GtkGLArea` widget.

        The `GtkGLArea` widget is responsible for creating the `GdkGLContext`
        instance. If you need to render with other kinds of buffers (stencil,
        depth, etc), use render buffers.
        """
        has_depth_buffer: bool
        """
        If set to %TRUE the widget will allocate and enable a depth buffer for the
        target framebuffer.

        Setting this property will enable GL's depth testing as a side effect. If
        you don't need depth testing, you should call `glDisable(GL_DEPTH_TEST)`
        in your `GtkGLArea::render` handler.
        """
        has_stencil_buffer: bool
        """
        If set to %TRUE the widget will allocate and enable a stencil buffer for the
        target framebuffer.
        """
        use_es: bool
        """
        If set to %TRUE the widget will try to create a `GdkGLContext` using
        OpenGL ES instead of OpenGL.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        allowed_apis: Gdk.GLAPI = ...,
        auto_render: bool = ...,
        has_depth_buffer: bool = ...,
        has_stencil_buffer: bool = ...,
        use_es: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def attach_buffers(self) -> None:
        """
        Binds buffers to the framebuffer.

        Ensures that the @area framebuffer object is made the current draw
        and read target, and that all the required buffers for the @area
        are created and bound to the framebuffer.

        This function is automatically called before emitting the
        [signal@Gtk.GLArea::render] signal, and doesn't normally need to be
        called by application code.

        Parameters:


        Returns:

        """
        ...

    def do_render(self, context: Gdk.GLContext) -> bool: ...
    def do_resize(self, width: int, height: int) -> None: ...
    def get_allowed_apis(self) -> Gdk.GLAPI:
        """
        Gets the allowed APIs.

        See [method@Gtk.GLArea.set_allowed_apis].

        Parameters:


        Returns:
            Gdk.GLAPI: the allowed APIs

        """
        ...

    def get_api(self) -> Gdk.GLAPI:
        """
        Gets the API that is currently in use.

        If the GL area has not been realized yet, 0 is returned.

        Parameters:


        Returns:
            Gdk.GLAPI: the currently used API

        """
        ...

    def get_auto_render(self) -> bool:
        """
        Returns whether the area is in auto render mode or not.

        Parameters:


        Returns:
            bool: %TRUE if the @area is auto rendering, %FALSE otherwise

        """
        ...

    def get_context(self) -> Optional[Gdk.GLContext]:
        """
        Retrieves the `GdkGLContext` used by @area.

        Parameters:


        Returns:
            Optional[Gdk.GLContext]: the `GdkGLContext`

        """
        ...

    def get_error(self) -> Optional[GLib.Error]:
        """
        Gets the current error set on the @area.

        Parameters:


        Returns:
            Optional[GLib.Error]: the `GError`

        """
        ...

    def get_has_depth_buffer(self) -> bool:
        """
        Returns whether the area has a depth buffer.

        Parameters:


        Returns:
            bool: %TRUE if the @area has a depth buffer, %FALSE otherwise

        """
        ...

    def get_has_stencil_buffer(self) -> bool:
        """
        Returns whether the area has a stencil buffer.

        Parameters:


        Returns:
            bool: %TRUE if the @area has a stencil buffer, %FALSE otherwise

        """
        ...

    def get_required_version(self) -> Tuple[int, int]:
        """
        Retrieves the required version of OpenGL.

        See [method@Gtk.GLArea.set_required_version].

        Parameters:


        Returns:
            int: return location for the required major version
            int: return location for the required minor version
        """
        ...

    @deprecated("Use [method@Gtk.GLArea.get_api]")
    def get_use_es(self) -> bool:
        """
        Returns whether the `GtkGLArea` should use OpenGL ES.

        See [method@Gtk.GLArea.set_use_es].

        Parameters:


        Returns:
            bool: %TRUE if the `GtkGLArea` should create an OpenGL ES context
        and %FALSE otherwise

        """
        ...

    def make_current(self) -> None:
        """
        Ensures that the `GdkGLContext` used by @area is associated with
        the `GtkGLArea`.

        This function is automatically called before emitting the
        [signal@Gtk.GLArea::render] signal, and doesn't normally need
        to be called by application code.

        Parameters:


        Returns:

        """
        ...

    @classmethod
    def new(cls) -> GLArea:
        """
        Creates a new `GtkGLArea` widget.

        Parameters:


        Returns:
            Widget: a new `GtkGLArea`

        """
        ...

    def queue_render(self) -> None:
        """
        Marks the currently rendered data (if any) as invalid, and queues
        a redraw of the widget.

        This ensures that the [signal@Gtk.GLArea::render] signal
        is emitted during the draw.

        This is only needed when [method@Gtk.GLArea.set_auto_render] has
        been called with a %FALSE value. The default behaviour is to
        emit [signal@Gtk.GLArea::render] on each draw.

        Parameters:


        Returns:

        """
        ...

    def set_allowed_apis(self, apis: Gdk.GLAPI) -> None:
        """
        Sets the allowed APIs to create a context with.

        You should check [property@Gtk.GLArea:api] before drawing
        with either API.

        By default, all APIs are allowed.

        Parameters:
            apis: the allowed APIs

        Returns:

        """
        ...

    def set_auto_render(self, auto_render: bool) -> None:
        """
        Sets whether the `GtkGLArea` is in auto render mode.

        If @auto_render is %TRUE the [signal@Gtk.GLArea::render] signal will
        be emitted every time the widget draws. This is the default and is
        useful if drawing the widget is faster.

        If @auto_render is %FALSE the data from previous rendering is kept
        around and will be used for drawing the widget the next time,
        unless the window is resized. In order to force a rendering
        [method@Gtk.GLArea.queue_render] must be called. This mode is
        useful when the scene changes seldom, but takes a long time to redraw.

        Parameters:
            auto_render: a boolean

        Returns:

        """
        ...

    def set_error(self, error: Optional[GLib.Error] = None) -> None:
        """
        Sets an error on the area which will be shown instead of the
        GL rendering.

        This is useful in the [signal@Gtk.GLArea::create-context]
        signal if GL context creation fails.

        Parameters:
            error: a new `GError`, or %NULL to unset the error

        Returns:

        """
        ...

    def set_has_depth_buffer(self, has_depth_buffer: bool) -> None:
        """
        Sets whether the `GtkGLArea` should use a depth buffer.

        If @has_depth_buffer is %TRUE the widget will allocate and
        enable a depth buffer for the target framebuffer. Otherwise
        there will be none.

        Parameters:
            has_depth_buffer: %TRUE to add a depth buffer

        Returns:

        """
        ...

    def set_has_stencil_buffer(self, has_stencil_buffer: bool) -> None:
        """
        Sets whether the `GtkGLArea` should use a stencil buffer.

        If @has_stencil_buffer is %TRUE the widget will allocate and
        enable a stencil buffer for the target framebuffer. Otherwise
        there will be none.

        Parameters:
            has_stencil_buffer: %TRUE to add a stencil buffer

        Returns:

        """
        ...

    def set_required_version(self, major: int, minor: int) -> None:
        """
        Sets the required version of OpenGL to be used when creating
        the context for the widget.

        This function must be called before the area has been realized.

        Parameters:
            major: the major version
            minor: the minor version

        Returns:

        """
        ...

    @deprecated("Use [method@Gtk.GLArea.set_allowed_apis]")
    def set_use_es(self, use_es: bool) -> None:
        """
        Sets whether the @area should create an OpenGL or an OpenGL ES context.

        You should check the capabilities of the `GdkGLContext` before drawing
        with either API.

        Parameters:
            use_es: whether to use OpenGL or OpenGL ES

        Returns:

        """
        ...

class GLAreaClass(GObject.GPointer):
    """
    The `GtkGLAreaClass` structure contains only private data.

    :Constructors:

    ::

        GLAreaClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    render: Callable[[GLArea, Gdk.GLContext], bool] = ...
    resize: Callable[[GLArea, int, int], None] = ...
    create_context: None = ...
    _padding: list[None] = ...

class Gesture(EventController):
    """
    `GtkGesture` is the base class for gesture recognition.

    Although `GtkGesture` is quite generalized to serve as a base for
    multi-touch gestures, it is suitable to implement single-touch and
    pointer-based gestures (using the special %NULL `GdkEventSequence`
    value for these).

    The number of touches that a `GtkGesture` need to be recognized is
    controlled by the [property@Gtk.Gesture:n-points] property, if a
    gesture is keeping track of less or more than that number of sequences,
    it won't check whether the gesture is recognized.

    As soon as the gesture has the expected number of touches, it will check
    regularly if it is recognized, the criteria to consider a gesture as
    \"recognized\" is left to `GtkGesture` subclasses.

    A recognized gesture will then emit the following signals:

    - [signal@Gtk.Gesture::begin] when the gesture is recognized.
    - [signal@Gtk.Gesture::update], whenever an input event is processed.
    - [signal@Gtk.Gesture::end] when the gesture is no longer recognized.

    ## Event propagation

    In order to receive events, a gesture needs to set a propagation phase
    through [method@Gtk.EventController.set_propagation_phase].

    In the capture phase, events are propagated from the toplevel down
    to the target widget, and gestures that are attached to containers
    above the widget get a chance to interact with the event before it
    reaches the target.

    In the bubble phase, events are propagated up from the target widget
    to the toplevel, and gestures that are attached to containers above
    the widget get a chance to interact with events that have not been
    handled yet.

    ## States of a sequence

    Whenever input interaction happens, a single event may trigger a cascade
    of `GtkGesture`s, both across the parents of the widget receiving the
    event and in parallel within an individual widget. It is a responsibility
    of the widgets using those gestures to set the state of touch sequences
    accordingly in order to enable cooperation of gestures around the
    `GdkEventSequence`s triggering those.

    Within a widget, gestures can be grouped through [method@Gtk.Gesture.group].
    Grouped gestures synchronize the state of sequences, so calling
    [method@Gtk.Gesture.set_state] on one will effectively propagate
    the state throughout the group.

    By default, all sequences start out in the %GTK_EVENT_SEQUENCE_NONE state,
    sequences in this state trigger the gesture event handler, but event
    propagation will continue unstopped by gestures.

    If a sequence enters into the %GTK_EVENT_SEQUENCE_DENIED state, the gesture
    group will effectively ignore the sequence, letting events go unstopped
    through the gesture, but the \"slot\" will still remain occupied while
    the touch is active.

    If a sequence enters in the %GTK_EVENT_SEQUENCE_CLAIMED state, the gesture
    group will grab all interaction on the sequence, by:

    - Setting the same sequence to %GTK_EVENT_SEQUENCE_DENIED on every other
    gesture group within the widget, and every gesture on parent widgets
    in the propagation chain.
    - Emitting [signal@Gtk.Gesture::cancel] on every gesture in widgets
    underneath in the propagation chain.
    - Stopping event propagation after the gesture group handles the event.

    Note: if a sequence is set early to %GTK_EVENT_SEQUENCE_CLAIMED on
    %GDK_TOUCH_BEGIN/%GDK_BUTTON_PRESS (so those events are captured before
    reaching the event widget, this implies %GTK_PHASE_CAPTURE), one similar
    event will be emulated if the sequence changes to %GTK_EVENT_SEQUENCE_DENIED.
    This way event coherence is preserved before event propagation is unstopped
    again.

    Sequence states can't be changed freely.
    See [method@Gtk.Gesture.set_state] to know about the possible
    lifetimes of a `GdkEventSequence`.

    ## Touchpad gestures

    On the platforms that support it, `GtkGesture` will handle transparently
    touchpad gesture events. The only precautions users of `GtkGesture` should
    do to enable this support are:

    - If the gesture has %GTK_PHASE_NONE, ensuring events of type
    %GDK_TOUCHPAD_SWIPE and %GDK_TOUCHPAD_PINCH are handled by the `GtkGesture`

    :Constructors:

    ::

        Gesture(**properties)

    Object GtkGesture

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props):
        n_points: int
        """
        The number of touch points that trigger
        recognition on this gesture.
        """

    props: Props = ...
    def __init__(
        self,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_bounding_box(self) -> Tuple[bool, Gdk.Rectangle]:
        """
        If there are touch sequences being currently handled by @gesture,
        returns %TRUE and fills in @rect with the bounding box containing
        all active touches.

        Otherwise, %FALSE will be returned.

        Note: This function will yield unexpected results on touchpad
        gestures. Since there is no correlation between physical and
        pixel distances, these will look as if constrained in an
        infinitely small area, @rect width and height will thus be 0
        regardless of the number of touchpoints.

        Parameters:


        Returns:
            bool: %TRUE if there are active touches, %FALSE otherwise
            Gdk.Rectangle: bounding box containing all active touches.
        """
        ...

    def get_bounding_box_center(self) -> Tuple[bool, float, float]:
        """
        If there are touch sequences being currently handled by @gesture,
        returns %TRUE and fills in @x and @y with the center of the bounding
        box containing all active touches.

        Otherwise, %FALSE will be returned.

        Parameters:


        Returns:
            bool: %FALSE if no active touches are present, %TRUE otherwise
            float: X coordinate for the bounding box center
            float: Y coordinate for the bounding box center
        """
        ...

    def get_device(self) -> Optional[Gdk.Device]:
        """
        Returns the logical `GdkDevice` that is currently operating
        on @gesture.

        This returns %NULL if the gesture is not being interacted.

        Parameters:


        Returns:
            Optional[Gdk.Device]: a `GdkDevice`

        """
        ...

    def get_group(self) -> list[Gesture]:
        """
        Returns all gestures in the group of @gesture

        Parameters:


        Returns:
            list[Gesture]: The list
        of `GtkGesture`s, free with g_list_free()

        """
        ...

    def get_last_event(
        self, sequence: Optional[Gdk.EventSequence] = None
    ) -> Optional[Gdk.Event]:
        """
        Returns the last event that was processed for @sequence.

        Note that the returned pointer is only valid as long as the
        @sequence is still interpreted by the @gesture. If in doubt,
        you should make a copy of the event.

        Parameters:
            sequence: a `GdkEventSequence`

        Returns:
            Optional[Gdk.Event]: The last event from @sequence

        """
        ...

    def get_last_updated_sequence(self) -> Optional[Gdk.EventSequence]:
        """
        Returns the `GdkEventSequence` that was last updated on @gesture.

        Parameters:


        Returns:
            Optional[Gdk.EventSequence]: The last updated sequence

        """
        ...

    def get_point(
        self, sequence: Optional[Gdk.EventSequence] = None
    ) -> Tuple[bool, float, float]:
        """
        If @sequence is currently being interpreted by @gesture,
        returns %TRUE and fills in @x and @y with the last coordinates
        stored for that event sequence.

        The coordinates are always relative to the widget allocation.

        Parameters:
            sequence: a `GdkEventSequence`, or %NULL for pointer events

        Returns:
            bool: %TRUE if @sequence is currently interpreted
            float: return location for X axis of the sequence coordinates
            float: return location for Y axis of the sequence coordinates
        """
        ...

    def get_sequence_state(self, sequence: Gdk.EventSequence) -> EventSequenceState:
        """
        Returns the @sequence state, as seen by @gesture.

        Parameters:
            sequence: a `GdkEventSequence`

        Returns:
            EventSequenceState: The sequence state in @gesture

        """
        ...

    def get_sequences(self) -> list[Gdk.EventSequence]:
        """
        Returns the list of `GdkEventSequences` currently being interpreted
        by @gesture.

        Parameters:


        Returns:
            list[Gdk.EventSequence]: A list
        of `GdkEventSequence`, the list elements are owned by GTK and must
        not be freed or modified, the list itself must be deleted
        through g_list_free()

        """
        ...

    def group(self, gesture: Gesture) -> None:
        """
        Adds @gesture to the same group than @group_gesture.

        Gestures are by default isolated in their own groups.

        Both gestures must have been added to the same widget before
        they can be grouped.

        When gestures are grouped, the state of `GdkEventSequences`
        is kept in sync for all of those, so calling
        [method@Gtk.Gesture.set_sequence_state], on one will transfer
        the same value to the others.

        Groups also perform an \"implicit grabbing\" of sequences, if a
        `GdkEventSequence` state is set to %GTK_EVENT_SEQUENCE_CLAIMED
        on one group, every other gesture group attached to the same
        `GtkWidget` will switch the state for that sequence to
        %GTK_EVENT_SEQUENCE_DENIED.

        Parameters:
            gesture: a `GtkGesture`

        Returns:

        """
        ...

    def handles_sequence(self, sequence: Optional[Gdk.EventSequence] = None) -> bool:
        """
        Returns %TRUE if @gesture is currently handling events
        corresponding to @sequence.

        Parameters:
            sequence: a `GdkEventSequence`

        Returns:
            bool: %TRUE if @gesture is handling @sequence, %FALSE otherwise

        """
        ...

    def is_active(self) -> bool:
        """
        Returns %TRUE if the gesture is currently active.

        A gesture is active while there are touch sequences
        interacting with it.

        Parameters:


        Returns:
            bool: %TRUE if gesture is active

        """
        ...

    def is_grouped_with(self, other: Gesture) -> bool:
        """
        Returns %TRUE if both gestures pertain to the same group.

        Parameters:
            other: another `GtkGesture`

        Returns:
            bool: whether the gestures are grouped

        """
        ...

    def is_recognized(self) -> bool:
        """
        Returns %TRUE if the gesture is currently recognized.

        A gesture is recognized if there are as many interacting
        touch sequences as required by @gesture.

        Parameters:


        Returns:
            bool: %TRUE if gesture is recognized

        """
        ...

    @deprecated("Use [method@Gtk.Gesture.set_state]")
    def set_sequence_state(
        self, sequence: Gdk.EventSequence, state: EventSequenceState
    ) -> bool:
        """
        Sets the state of @sequence in @gesture.

        Sequences start in state %GTK_EVENT_SEQUENCE_NONE, and whenever
        they change state, they can never go back to that state. Likewise,
        sequences in state %GTK_EVENT_SEQUENCE_DENIED cannot turn back to
        a not denied state. With these rules, the lifetime of an event
        sequence is constrained to the next four:

        * None
        * None → Denied
        * None → Claimed
        * None → Claimed → Denied

        Note: Due to event handling ordering, it may be unsafe to set the
        state on another gesture within a [signal@Gtk.Gesture::begin] signal
        handler, as the callback might be executed before the other gesture
        knows about the sequence. A safe way to perform this could be:

        ```c
        static void
        first_gesture_begin_cb (GtkGesture *first_gesture,
        GdkEventSequence *sequence,
        gpointer user_data)
        {
        gtk_gesture_set_sequence_state (first_gesture, sequence, GTK_EVENT_SEQUENCE_CLAIMED);
        gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
        }

        static void
        second_gesture_begin_cb (GtkGesture *second_gesture,
        GdkEventSequence *sequence,
        gpointer user_data)
        {
        if (gtk_gesture_get_sequence_state (first_gesture, sequence) == GTK_EVENT_SEQUENCE_CLAIMED)
        gtk_gesture_set_sequence_state (second_gesture, sequence, GTK_EVENT_SEQUENCE_DENIED);
        }
        ```

        If both gestures are in the same group, just set the state on
        the gesture emitting the event, the sequence will be already
        be initialized to the group's global state when the second
        gesture processes the event.

        Parameters:
            sequence: a `GdkEventSequence`
            state: the sequence state

        Returns:
            bool: %TRUE if @sequence is handled by @gesture,
        and the state is changed successfully

        """
        ...

    def set_state(self, state: EventSequenceState) -> bool:
        """
        Sets the state of all sequences that @gesture is currently
        interacting with.

        Sequences start in state %GTK_EVENT_SEQUENCE_NONE, and whenever
        they change state, they can never go back to that state. Likewise,
        sequences in state %GTK_EVENT_SEQUENCE_DENIED cannot turn back to
        a not denied state. With these rules, the lifetime of an event
        sequence is constrained to the next four:

        * None
        * None → Denied
        * None → Claimed
        * None → Claimed → Denied

        Note: Due to event handling ordering, it may be unsafe to set the
        state on another gesture within a [signal@Gtk.Gesture::begin] signal
        handler, as the callback might be executed before the other gesture
        knows about the sequence. A safe way to perform this could be:

        ```c
        static void
        first_gesture_begin_cb (GtkGesture *first_gesture,
        GdkEventSequence *sequence,
        gpointer user_data)
        {
        gtk_gesture_set_state (first_gesture, GTK_EVENT_SEQUENCE_CLAIMED);
        gtk_gesture_set_state (second_gesture, GTK_EVENT_SEQUENCE_DENIED);
        }

        static void
        second_gesture_begin_cb (GtkGesture *second_gesture,
        GdkEventSequence *sequence,
        gpointer user_data)
        {
        if (gtk_gesture_get_sequence_state (first_gesture, sequence) == GTK_EVENT_SEQUENCE_CLAIMED)
        gtk_gesture_set_state (second_gesture, GTK_EVENT_SEQUENCE_DENIED);
        }
        ```

        If both gestures are in the same group, just set the state on
        the gesture emitting the event, the sequence will be already
        be initialized to the group's global state when the second
        gesture processes the event.

        Parameters:
            state: the sequence state

        Returns:
            bool: %TRUE if the state of at least one sequence
        was changed successfully

        """
        ...

    def ungroup(self) -> None:
        """
        Separates @gesture into an isolated group.

        Parameters:


        Returns:

        """
        ...

class GestureClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class GestureClick(GestureSingle):
    """
    `GtkGestureClick` is a `GtkGesture` implementation for clicks.

    It is able to recognize multiple clicks on a nearby zone, which
    can be listened for through the [signal@Gtk.GestureClick::pressed]
    signal. Whenever time or distance between clicks exceed the GTK
    defaults, [signal@Gtk.GestureClick::stopped] is emitted, and the
    click counter is reset.

    :Constructors:

    ::

        GestureClick(**properties)
        new() -> Gtk.Gesture

    Object GtkGestureClick

    Signals from GtkGestureClick:
      pressed (gint, gdouble, gdouble)
      released (gint, gdouble, gdouble)
      stopped ()
      unpaired-release (gdouble, gdouble, guint, GdkEventSequence)

    Properties from GtkGestureSingle:
      touch-only -> gboolean: touch-only
      exclusive -> gboolean: exclusive
      button -> guint: button

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(GestureSingle.Props): ...

    def __init__(
        self,
        button: int = ...,
        exclusive: bool = ...,
        touch_only: bool = ...,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    @classmethod
    def new(cls) -> GestureClick:
        """
        Returns a newly created `GtkGesture` that recognizes
        single and multiple presses.

        Parameters:


        Returns:
            Gesture: a newly created `GtkGestureClick`

        """
        ...

class GestureClickClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class GestureDrag(GestureSingle):
    """
    `GtkGestureDrag` is a `GtkGesture` implementation for drags.

    The drag operation itself can be tracked throughout the
    [signal@Gtk.GestureDrag::drag-begin],
    [signal@Gtk.GestureDrag::drag-update] and
    [signal@Gtk.GestureDrag::drag-end] signals, and the relevant
    coordinates can be extracted through
    [method@Gtk.GestureDrag.get_offset] and
    [method@Gtk.GestureDrag.get_start_point].

    :Constructors:

    ::

        GestureDrag(**properties)
        new() -> Gtk.Gesture

    Object GtkGestureDrag

    Signals from GtkGestureDrag:
      drag-begin (gdouble, gdouble)
      drag-end (gdouble, gdouble)
      drag-update (gdouble, gdouble)

    Properties from GtkGestureSingle:
      touch-only -> gboolean: touch-only
      exclusive -> gboolean: exclusive
      button -> guint: button

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(GestureSingle.Props): ...

    def __init__(
        self,
        button: int = ...,
        exclusive: bool = ...,
        touch_only: bool = ...,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_offset(self) -> Tuple[bool, float, float]:
        """
        Gets the offset from the start point.

        If the @gesture is active, this function returns %TRUE and
        fills in @x and @y with the coordinates of the current point,
        as an offset to the starting drag point.

        Parameters:


        Returns:
            bool: %TRUE if the gesture is active
            float: X offset for the current point
            float: Y offset for the current point
        """
        ...

    def get_start_point(self) -> Tuple[bool, float, float]:
        """
        Gets the point where the drag started.

        If the @gesture is active, this function returns %TRUE
        and fills in @x and @y with the drag start coordinates,
        in widget-relative coordinates.

        Parameters:


        Returns:
            bool: %TRUE if the gesture is active
            float: X coordinate for the drag start point
            float: Y coordinate for the drag start point
        """
        ...

    @classmethod
    def new(cls) -> GestureDrag:
        """
        Returns a newly created `GtkGesture` that recognizes drags.

        Parameters:


        Returns:
            Gesture: a newly created `GtkGestureDrag`

        """
        ...

class GestureDragClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class GestureLongPress(GestureSingle):
    """
    `GtkGestureLongPress` is a `GtkGesture` for long presses.

    This gesture is also known as “Press and Hold”.

    When the timeout is exceeded, the gesture is triggering the
    [signal@Gtk.GestureLongPress::pressed] signal.

    If the touchpoint is lifted before the timeout passes, or if
    it drifts too far of the initial press point, the
    [signal@Gtk.GestureLongPress::cancelled] signal will be emitted.

    How long the timeout is before the ::pressed signal gets emitted is
    determined by the [property@Gtk.Settings:gtk-long-press-time] setting.
    It can be modified by the [property@Gtk.GestureLongPress:delay-factor]
    property.

    :Constructors:

    ::

        GestureLongPress(**properties)
        new() -> Gtk.Gesture

    Object GtkGestureLongPress

    Signals from GtkGestureLongPress:
      cancelled ()
      pressed (gdouble, gdouble)

    Properties from GtkGestureLongPress:
      delay-factor -> gdouble: delay-factor

    Properties from GtkGestureSingle:
      touch-only -> gboolean: touch-only
      exclusive -> gboolean: exclusive
      button -> guint: button

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(GestureSingle.Props):
        delay_factor: float
        """
        Factor by which to modify the default timeout.
        """

    props: Props = ...
    def __init__(
        self,
        delay_factor: float = ...,
        button: int = ...,
        exclusive: bool = ...,
        touch_only: bool = ...,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_delay_factor(self) -> float:
        """
        Returns the delay factor.

        Parameters:


        Returns:
            float: the delay factor

        """
        ...

    @classmethod
    def new(cls) -> GestureLongPress:
        """
        Returns a newly created `GtkGesture` that recognizes long presses.

        Parameters:


        Returns:
            Gesture: a newly created `GtkGestureLongPress`.

        """
        ...

    def set_delay_factor(self, delay_factor: float) -> None:
        """
        Applies the given delay factor.

        The default long press time will be multiplied by this value.
        Valid values are in the range [0.5..2.0].

        Parameters:
            delay_factor: The delay factor to apply

        Returns:

        """
        ...

class GestureLongPressClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class GesturePan(GestureDrag):
    """
    `GtkGesturePan` is a `GtkGesture` for pan gestures.

    These are drags that are locked to happen along one axis. The axis
    that a `GtkGesturePan` handles is defined at construct time, and
    can be changed through [method@Gtk.GesturePan.set_orientation].

    When the gesture starts to be recognized, `GtkGesturePan` will
    attempt to determine as early as possible whether the sequence
    is moving in the expected direction, and denying the sequence if
    this does not happen.

    Once a panning gesture along the expected axis is recognized,
    the [signal@Gtk.GesturePan::pan] signal will be emitted as input
    events are received, containing the offset in the given axis.

    :Constructors:

    ::

        GesturePan(**properties)
        new(orientation:Gtk.Orientation) -> Gtk.Gesture

    Object GtkGesturePan

    Signals from GtkGesturePan:
      pan (GtkPanDirection, gdouble)

    Properties from GtkGesturePan:
      orientation -> GtkOrientation: orientation

    Signals from GtkGestureDrag:
      drag-begin (gdouble, gdouble)
      drag-end (gdouble, gdouble)
      drag-update (gdouble, gdouble)

    Properties from GtkGestureSingle:
      touch-only -> gboolean: touch-only
      exclusive -> gboolean: exclusive
      button -> guint: button

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(GestureDrag.Props):
        orientation: Orientation
        """
        The expected orientation of pan gestures.
        """

    props: Props = ...
    def __init__(
        self,
        orientation: Orientation = ...,
        button: int = ...,
        exclusive: bool = ...,
        touch_only: bool = ...,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_orientation(self) -> Orientation:
        """
        Returns the orientation of the pan gestures that this @gesture expects.

        Parameters:


        Returns:
            Orientation: the expected orientation for pan gestures

        """
        ...

    @classmethod
    def new(cls, orientation: Orientation) -> GesturePan:
        """
        Returns a newly created `GtkGesture` that recognizes pan gestures.

        Parameters:
            orientation: expected orientation

        Returns:
            Gesture: a newly created `GtkGesturePan`

        """
        ...

    def set_orientation(self, orientation: Orientation) -> None:
        """
        Sets the orientation to be expected on pan gestures.

        Parameters:
            orientation: expected orientation

        Returns:

        """
        ...

class GesturePanClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class GestureRotate(Gesture):
    """
    `GtkGestureRotate` is a `GtkGesture` for 2-finger rotations.

    Whenever the angle between both handled sequences changes, the
    [signal@Gtk.GestureRotate::angle-changed] signal is emitted.

    :Constructors:

    ::

        GestureRotate(**properties)
        new() -> Gtk.Gesture

    Object GtkGestureRotate

    Signals from GtkGestureRotate:
      angle-changed (gdouble, gdouble)

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(Gesture.Props): ...

    def __init__(
        self,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_angle_delta(self) -> float:
        """
        Gets the angle delta in radians.

        If @gesture is active, this function returns the angle difference
        in radians since the gesture was first recognized. If @gesture is
        not active, 0 is returned.

        Parameters:


        Returns:
            float: the angle delta in radians

        """
        ...

    @classmethod
    def new(cls) -> GestureRotate:
        """
        Returns a newly created `GtkGesture` that recognizes 2-touch
        rotation gestures.

        Parameters:


        Returns:
            Gesture: a newly created `GtkGestureRotate`

        """
        ...

class GestureRotateClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class GestureSingle(Gesture):
    """
    `GtkGestureSingle` is a `GtkGestures` subclass optimized for singe-touch
    and mouse gestures.

    Under interaction, these gestures stick to the first interacting sequence,
    which is accessible through [method@Gtk.GestureSingle.get_current_sequence]
    while the gesture is being interacted with.

    By default gestures react to both %GDK_BUTTON_PRIMARY and touch events.
    [method@Gtk.GestureSingle.set_touch_only] can be used to change the
    touch behavior. Callers may also specify a different mouse button number
    to interact with through [method@Gtk.GestureSingle.set_button], or react
    to any mouse button by setting it to 0. While the gesture is active, the
    button being currently pressed can be known through
    [method@Gtk.GestureSingle.get_current_button].

    :Constructors:

    ::

        GestureSingle(**properties)

    Object GtkGestureSingle

    Properties from GtkGestureSingle:
      touch-only -> gboolean: touch-only
      exclusive -> gboolean: exclusive
      button -> guint: button

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(Gesture.Props):
        button: int
        """
        Mouse button number to listen to, or 0 to listen for any button.
        """
        exclusive: bool
        """
        Whether the gesture is exclusive.

        Exclusive gestures only listen to pointer and pointer emulated events.
        """
        touch_only: bool
        """
        Whether the gesture handles only touch events.
        """

    props: Props = ...
    def __init__(
        self,
        button: int = ...,
        exclusive: bool = ...,
        touch_only: bool = ...,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_button(self) -> int:
        """
        Returns the button number @gesture listens for.

        If this is 0, the gesture reacts to any button press.

        Parameters:


        Returns:
            int: The button number, or 0 for any button

        """
        ...

    def get_current_button(self) -> int:
        """
        Returns the button number currently interacting
        with @gesture, or 0 if there is none.

        Parameters:


        Returns:
            int: The current button number

        """
        ...

    def get_current_sequence(self) -> Optional[Gdk.EventSequence]:
        """
        Returns the event sequence currently interacting with @gesture.

        This is only meaningful if [method@Gtk.Gesture.is_active]
        returns %TRUE.

        Parameters:


        Returns:
            Optional[Gdk.EventSequence]: the current sequence

        """
        ...

    def get_exclusive(self) -> bool:
        """
        Gets whether a gesture is exclusive.

        For more information, see [method@Gtk.GestureSingle.set_exclusive].

        Parameters:


        Returns:
            bool: Whether the gesture is exclusive

        """
        ...

    def get_touch_only(self) -> bool:
        """
        Returns %TRUE if the gesture is only triggered by touch events.

        Parameters:


        Returns:
            bool: %TRUE if the gesture only handles touch events

        """
        ...

    def set_button(self, button: int) -> None:
        """
        Sets the button number @gesture listens to.

        If non-0, every button press from a different button
        number will be ignored. Touch events implicitly match
        with button 1.

        Parameters:
            button: button number to listen to, or 0 for any button

        Returns:

        """
        ...

    def set_exclusive(self, exclusive: bool) -> None:
        """
        Sets whether @gesture is exclusive.

        An exclusive gesture will only handle pointer and \"pointer emulated\"
        touch events, so at any given time, there is only one sequence able
        to interact with those.

        Parameters:
            exclusive: %TRUE to make @gesture exclusive

        Returns:

        """
        ...

    def set_touch_only(self, touch_only: bool) -> None:
        """
        Sets whether to handle only touch events.

        If @touch_only is %TRUE, @gesture will only handle events of type
        %GDK_TOUCH_BEGIN, %GDK_TOUCH_UPDATE or %GDK_TOUCH_END. If %FALSE,
        mouse events will be handled too.

        Parameters:
            touch_only: whether @gesture handles only touch events

        Returns:

        """
        ...

class GestureSingleClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class GestureStylus(GestureSingle):
    """
    `GtkGestureStylus` is a `GtkGesture` specific to stylus input.

    The provided signals just relay the basic information of the
    stylus events.

    :Constructors:

    ::

        GestureStylus(**properties)
        new() -> Gtk.Gesture

    Object GtkGestureStylus

    Signals from GtkGestureStylus:
      motion (gdouble, gdouble)
      proximity (gdouble, gdouble)
      down (gdouble, gdouble)
      up (gdouble, gdouble)

    Properties from GtkGestureStylus:
      stylus-only -> gboolean: stylus-only

    Properties from GtkGestureSingle:
      touch-only -> gboolean: touch-only
      exclusive -> gboolean: exclusive
      button -> guint: button

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(GestureSingle.Props):
        stylus_only: bool
        """
        If this gesture should exclusively react to stylus input devices.
        """

    props: Props = ...
    def __init__(
        self,
        stylus_only: bool = ...,
        button: int = ...,
        exclusive: bool = ...,
        touch_only: bool = ...,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_axes(self, axes: Sequence[Gdk.AxisUse]) -> Tuple[bool, list[float]]:
        """
        Returns the current values for the requested @axes.

        This function must be called from the handler of one of the
        [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
        [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
        signals.

        Parameters:
            axes: array of requested axes, terminated with %GDK_AXIS_IGNORE

        Returns:
            bool: %TRUE if there is a current value for the axes
            list[float]: return location for the axis values
        """
        ...

    def get_axis(self, axis: Gdk.AxisUse) -> Tuple[bool, float]:
        """
        Returns the current value for the requested @axis.

        This function must be called from the handler of one of the
        [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
        [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
        signals.

        Parameters:
            axis: requested device axis

        Returns:
            bool: %TRUE if there is a current value for the axis
            float: return location for the axis value
        """
        ...

    def get_backlog(self) -> Tuple[bool, list[Gdk.TimeCoord]]:
        """
        Returns the accumulated backlog of tracking information.

        By default, GTK will limit rate of input events. On stylus input
        where accuracy of strokes is paramount, this function returns the
        accumulated coordinate/timing state before the emission of the
        current [Gtk.GestureStylus::motion] signal.

        This function may only be called within a [signal@Gtk.GestureStylus::motion]
        signal handler, the state given in this signal and obtainable through
        [method@Gtk.GestureStylus.get_axis] express the latest (most up-to-date)
        state in motion history.

        The @backlog is provided in chronological order.

        Parameters:


        Returns:
            bool: %TRUE if there is a backlog to unfold in the current state.
            list[Gdk.TimeCoord]: coordinates and times for the backlog events
        """
        ...

    def get_device_tool(self) -> Optional[Gdk.DeviceTool]:
        """
        Returns the `GdkDeviceTool` currently driving input through this gesture.

        This function must be called from the handler of one of the
        [signal@Gtk.GestureStylus::down], [signal@Gtk.GestureStylus::motion],
        [signal@Gtk.GestureStylus::up] or [signal@Gtk.GestureStylus::proximity]
        signals.

        Parameters:


        Returns:
            Optional[Gdk.DeviceTool]: The current stylus tool

        """
        ...

    def get_stylus_only(self) -> bool:
        """
        Checks whether the gesture is for styluses only.

        Stylus-only gestures will signal events exclusively from stylus
        input devices.

        Parameters:


        Returns:
            bool: %TRUE if the gesture is only for stylus events

        """
        ...

    @classmethod
    def new(cls) -> GestureStylus:
        """
        Creates a new `GtkGestureStylus`.

        Parameters:


        Returns:
            Gesture: a newly created stylus gesture

        """
        ...

    def set_stylus_only(self, stylus_only: bool) -> None:
        """
        Sets the state of stylus-only

        If true, the gesture will exclusivly handle events from stylus input deivces,
        otherwise it'll handle events from any pointing device.

        Parameters:
            stylus_only: whether the gesture is used exclusivly for stylus events

        Returns:

        """
        ...

class GestureStylusClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class GestureSwipe(GestureSingle):
    """
    `GtkGestureSwipe` is a `GtkGesture` for swipe gestures.

    After a press/move/.../move/release sequence happens, the
    [signal@Gtk.GestureSwipe::swipe] signal will be emitted,
    providing the velocity and directionality of the sequence
    at the time it was lifted.

    If the velocity is desired in intermediate points,
    [method@Gtk.GestureSwipe.get_velocity] can be called in a
    [signal@Gtk.Gesture::update] handler.

    All velocities are reported in pixels/sec units.

    :Constructors:

    ::

        GestureSwipe(**properties)
        new() -> Gtk.Gesture

    Object GtkGestureSwipe

    Signals from GtkGestureSwipe:
      swipe (gdouble, gdouble)

    Properties from GtkGestureSingle:
      touch-only -> gboolean: touch-only
      exclusive -> gboolean: exclusive
      button -> guint: button

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(GestureSingle.Props): ...

    def __init__(
        self,
        button: int = ...,
        exclusive: bool = ...,
        touch_only: bool = ...,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_velocity(self) -> Tuple[bool, float, float]:
        """
        Gets the current velocity.

        If the gesture is recognized, this function returns %TRUE and fills
        in @velocity_x and @velocity_y with the recorded velocity, as per the
        last events processed.

        Parameters:


        Returns:
            bool: whether velocity could be calculated
            float: return value for the velocity in the X axis, in pixels/sec
            float: return value for the velocity in the Y axis, in pixels/sec
        """
        ...

    @classmethod
    def new(cls) -> GestureSwipe:
        """
        Returns a newly created `GtkGesture` that recognizes swipes.

        Parameters:


        Returns:
            Gesture: a newly created `GtkGestureSwipe`

        """
        ...

class GestureSwipeClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class GestureZoom(Gesture):
    """
    `GtkGestureZoom` is a `GtkGesture` for 2-finger pinch/zoom gestures.

    Whenever the distance between both tracked sequences changes, the
    [signal@Gtk.GestureZoom::scale-changed] signal is emitted to report
    the scale factor.

    :Constructors:

    ::

        GestureZoom(**properties)
        new() -> Gtk.Gesture

    Object GtkGestureZoom

    Signals from GtkGestureZoom:
      scale-changed (gdouble)

    Signals from GtkGesture:
      cancel (GdkEventSequence)
      begin (GdkEventSequence)
      end (GdkEventSequence)
      update (GdkEventSequence)
      sequence-state-changed (GdkEventSequence, GtkEventSequenceState)

    Properties from GtkGesture:
      n-points -> guint: n-points

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(Gesture.Props): ...

    def __init__(
        self,
        n_points: int = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def get_scale_delta(self) -> float:
        """
        Gets the scale delta.

        If @gesture is active, this function returns the zooming
        difference since the gesture was recognized (hence the
        starting point is considered 1:1). If @gesture is not
        active, 1 is returned.

        Parameters:


        Returns:
            float: the scale delta

        """
        ...

    @classmethod
    def new(cls) -> GestureZoom:
        """
        Returns a newly created `GtkGesture` that recognizes
        pinch/zoom gestures.

        Parameters:


        Returns:
            Gesture: a newly created `GtkGestureZoom`

        """
        ...

class GestureZoomClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class Grid(Widget, Accessible, Buildable, ConstraintTarget, Orientable):
    """
    `GtkGrid` is a container which arranges its child widgets in
    rows and columns.

    ![An example GtkGrid](grid.png)

    It supports arbitrary positions and horizontal/vertical spans.

    Children are added using [method@Gtk.Grid.attach]. They can span multiple
    rows or columns. It is also possible to add a child next to an existing
    child, using [method@Gtk.Grid.attach_next_to]. To remove a child from the
    grid, use [method@Gtk.Grid.remove].

    The behaviour of `GtkGrid` when several children occupy the same grid
    cell is undefined.

    # GtkGrid as GtkBuildable

    Every child in a `GtkGrid` has access to a custom [iface@Gtk.Buildable]
    element, called `<layout>`. It can by used to specify a position in the
    grid and optionally spans. All properties that can be used in the `<layout>`
    element are implemented by [class@Gtk.GridLayoutChild].

    It is implemented by `GtkWidget` using [class@Gtk.LayoutManager].

    To showcase it, here is a simple example:

    ```xml
    <object class=\"GtkGrid\" id=\"my_grid\">
    <child>
    <object class=\"GtkButton\" id=\"button1\">
    <property name=\"label\">Button 1</property>
    <layout>
    <property name=\"column\">0</property>
    <property name=\"row\">0</property>
    </layout>
    </object>
    </child>
    <child>
    <object class=\"GtkButton\" id=\"button2\">
    <property name=\"label\">Button 2</property>
    <layout>
    <property name=\"column\">1</property>
    <property name=\"row\">0</property>
    </layout>
    </object>
    </child>
    <child>
    <object class=\"GtkButton\" id=\"button3\">
    <property name=\"label\">Button 3</property>
    <layout>
    <property name=\"column\">2</property>
    <property name=\"row\">0</property>
    <property name=\"row-span\">2</property>
    </layout>
    </object>
    </child>
    <child>
    <object class=\"GtkButton\" id=\"button4\">
    <property name=\"label\">Button 4</property>
    <layout>
    <property name=\"column\">0</property>
    <property name=\"row\">1</property>
    <property name=\"column-span\">2</property>
    </layout>
    </object>
    </child>
    </object>
    ```

    It organizes the first two buttons side-by-side in one cell each.
    The third button is in the last column but spans across two rows.
    This is defined by the `row-span` property. The last button is
    located in the second row and spans across two columns, which is
    defined by the `column-span` property.

    # CSS nodes

    `GtkGrid` uses a single CSS node with name `grid`.

    # Accessibility

    Until GTK 4.10, `GtkGrid` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.

    Starting from GTK 4.12, `GtkGrid` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.

    :Constructors:

    ::

        Grid(**properties)
        new() -> Gtk.Widget

    Object GtkGrid

    Properties from GtkGrid:
      row-spacing -> gint: row-spacing
      column-spacing -> gint: column-spacing
      row-homogeneous -> gboolean: row-homogeneous
      column-homogeneous -> gboolean: column-homogeneous
      baseline-row -> gint: baseline-row

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        baseline_row: int
        """
        The row to align to the baseline when valign is using baseline alignment.
        """
        column_homogeneous: bool
        """
        If %TRUE, the columns are all the same width.
        """
        column_spacing: int
        """
        The amount of space between two consecutive columns.
        """
        row_homogeneous: bool
        """
        If %TRUE, the rows are all the same height.
        """
        row_spacing: int
        """
        The amount of space between two consecutive rows.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        baseline_row: int = ...,
        column_homogeneous: bool = ...,
        column_spacing: int = ...,
        row_homogeneous: bool = ...,
        row_spacing: int = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def attach(
        self, child: Widget, column: int, row: int, width: int, height: int
    ) -> None:
        """
        Adds a widget to the grid.

        The position of @child is determined by @column and @row.
        The number of “cells” that @child will occupy is determined
        by @width and @height.

        Parameters:
            child: the widget to add
            column: the column number to attach the left side of @child to
            row: the row number to attach the top side of @child to
            width: the number of columns that @child will span
            height: the number of rows that @child will span

        Returns:

        """
        ...

    def attach_next_to(
        self,
        child: Widget,
        sibling: Optional[Widget],
        side: PositionType,
        width: int,
        height: int,
    ) -> None:
        """
        Adds a widget to the grid.

        The widget is placed next to @sibling, on the side determined by
        @side. When @sibling is %NULL, the widget is placed in row (for
        left or right placement) or column 0 (for top or bottom placement),
        at the end indicated by @side.

        Attaching widgets labeled `[1]`, `[2]`, `[3]` with `@sibling == %NULL` and
        `@side == %GTK_POS_LEFT` yields a layout of `[3][2][1]`.

        Parameters:
            child: the widget to add
            sibling: the child of @grid that @child will be placed
        next to, or %NULL to place @child at the beginning or end
            side: the side of @sibling that @child is positioned next to
            width: the number of columns that @child will span
            height: the number of rows that @child will span

        Returns:

        """
        ...

    def get_baseline_row(self) -> int:
        """
        Returns which row defines the global baseline of @grid.

        Parameters:


        Returns:
            int: the row index defining the global baseline

        """
        ...

    def get_child_at(self, column: int, row: int) -> Optional[Widget]:
        """
        Gets the child of @grid whose area covers the grid
        cell at @column, @row.

        Parameters:
            column: the left edge of the cell
            row: the top edge of the cell

        Returns:
            Optional[Widget]: the child at the given position

        """
        ...

    def get_column_homogeneous(self) -> bool:
        """
        Returns whether all columns of @grid have the same width.

        Parameters:


        Returns:
            bool: whether all columns of @grid have the same width.

        """
        ...

    def get_column_spacing(self) -> int:
        """
        Returns the amount of space between the columns of @grid.

        Parameters:


        Returns:
            int: the column spacing of @grid

        """
        ...

    def get_row_baseline_position(self, row: int) -> BaselinePosition:
        """
        Returns the baseline position of @row.

        See [method@Gtk.Grid.set_row_baseline_position].

        Parameters:
            row: a row index

        Returns:
            BaselinePosition: the baseline position of @row

        """
        ...

    def get_row_homogeneous(self) -> bool:
        """
        Returns whether all rows of @grid have the same height.

        Parameters:


        Returns:
            bool: whether all rows of @grid have the same height.

        """
        ...

    def get_row_spacing(self) -> int:
        """
        Returns the amount of space between the rows of @grid.

        Parameters:


        Returns:
            int: the row spacing of @grid

        """
        ...

    def insert_column(self, position: int) -> None:
        """
        Inserts a column at the specified position.

        Children which are attached at or to the right of this position
        are moved one column to the right. Children which span across this
        position are grown to span the new column.

        Parameters:
            position: the position to insert the column at

        Returns:

        """
        ...

    def insert_next_to(self, sibling: Widget, side: PositionType) -> None:
        """
        Inserts a row or column at the specified position.

        The new row or column is placed next to @sibling, on the side
        determined by @side. If @side is %GTK_POS_TOP or %GTK_POS_BOTTOM,
        a row is inserted. If @side is %GTK_POS_LEFT of %GTK_POS_RIGHT,
        a column is inserted.

        Parameters:
            sibling: the child of @grid that the new row or column will be
        placed next to
            side: the side of @sibling that @child is positioned next to

        Returns:

        """
        ...

    def insert_row(self, position: int) -> None:
        """
        Inserts a row at the specified position.

        Children which are attached at or below this position
        are moved one row down. Children which span across this
        position are grown to span the new row.

        Parameters:
            position: the position to insert the row at

        Returns:

        """
        ...

    @classmethod
    def new(cls) -> Grid:
        """
        Creates a new grid widget.

        Parameters:


        Returns:
            Widget: the new `GtkGrid`

        """
        ...

    def query_child(self, child: Widget) -> Tuple[int, int, int, int]:
        """
        Queries the attach points and spans of @child inside the given `GtkGrid`.

        Parameters:
            child: a `GtkWidget` child of @grid

        Returns:
            int: the column used to attach the left side of @child
            int: the row used to attach the top side of @child
            int: the number of columns @child spans
            int: the number of rows @child spans
        """
        ...

    def remove(self, child: Widget) -> None:
        """
        Removes a child from @grid.

        The child must have been added with
        [method@Gtk.Grid.attach] or [method@Gtk.Grid.attach_next_to].

        Parameters:
            child: the child widget to remove

        Returns:

        """
        ...

    def remove_column(self, position: int) -> None:
        """
        Removes a column from the grid.

        Children that are placed in this column are removed,
        spanning children that overlap this column have their
        width reduced by one, and children after the column
        are moved to the left.

        Parameters:
            position: the position of the column to remove

        Returns:

        """
        ...

    def remove_row(self, position: int) -> None:
        """
        Removes a row from the grid.

        Children that are placed in this row are removed,
        spanning children that overlap this row have their
        height reduced by one, and children below the row
        are moved up.

        Parameters:
            position: the position of the row to remove

        Returns:

        """
        ...

    def set_baseline_row(self, row: int) -> None:
        """
        Sets which row defines the global baseline for the entire grid.

        Each row in the grid can have its own local baseline, but only
        one of those is global, meaning it will be the baseline in the
        parent of the @grid.

        Parameters:
            row: the row index

        Returns:

        """
        ...

    def set_column_homogeneous(self, homogeneous: bool) -> None:
        """
        Sets whether all columns of @grid will have the same width.

        Parameters:
            homogeneous: %TRUE to make columns homogeneous

        Returns:

        """
        ...

    def set_column_spacing(self, spacing: int) -> None:
        """
        Sets the amount of space between columns of @grid.

        Parameters:
            spacing: the amount of space to insert between columns

        Returns:

        """
        ...

    def set_row_baseline_position(self, row: int, pos: BaselinePosition) -> None:
        """
        Sets how the baseline should be positioned on @row of the
        grid, in case that row is assigned more space than is requested.

        The default baseline position is %GTK_BASELINE_POSITION_CENTER.

        Parameters:
            row: a row index
            pos: a `GtkBaselinePosition`

        Returns:

        """
        ...

    def set_row_homogeneous(self, homogeneous: bool) -> None:
        """
        Sets whether all rows of @grid will have the same height.

        Parameters:
            homogeneous: %TRUE to make rows homogeneous

        Returns:

        """
        ...

    def set_row_spacing(self, spacing: int) -> None:
        """
        Sets the amount of space between rows of @grid.

        Parameters:
            spacing: the amount of space to insert between rows

        Returns:

        """
        ...

class GridClass(GObject.GPointer):
    """
    :Constructors:

    ::

        GridClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    padding: list[None] = ...

class GridLayout(LayoutManager):
    """
    `GtkGridLayout` is a layout manager which arranges child widgets in
    rows and columns.

    Children have an \"attach point\" defined by the horizontal and vertical
    index of the cell they occupy; children can span multiple rows or columns.
    The layout properties for setting the attach points and spans are set
    using the [class@Gtk.GridLayoutChild] associated to each child widget.

    The behaviour of `GtkGridLayout` when several children occupy the same
    grid cell is undefined.

    `GtkGridLayout` can be used like a `GtkBoxLayout` if all children are
    attached to the same row or column; however, if you only ever need a
    single row or column, you should consider using `GtkBoxLayout`.

    :Constructors:

    ::

        GridLayout(**properties)
        new() -> Gtk.LayoutManager

    Object GtkGridLayout

    Properties from GtkGridLayout:
      row-spacing -> gint: row-spacing
      column-spacing -> gint: column-spacing
      row-homogeneous -> gboolean: row-homogeneous
      column-homogeneous -> gboolean: column-homogeneous
      baseline-row -> gint: baseline-row

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutManager.Props):
        baseline_row: int
        """
        The row to align to the baseline, when `GtkWidget:valign` is set
        to %GTK_ALIGN_BASELINE.
        """
        column_homogeneous: bool
        """
        Whether all the columns in the grid have the same width.
        """
        column_spacing: int
        """
        The amount of space between to consecutive columns.
        """
        row_homogeneous: bool
        """
        Whether all the rows in the grid have the same height.
        """
        row_spacing: int
        """
        The amount of space between to consecutive rows.
        """

    props: Props = ...
    def __init__(
        self,
        baseline_row: int = ...,
        column_homogeneous: bool = ...,
        column_spacing: int = ...,
        row_homogeneous: bool = ...,
        row_spacing: int = ...,
    ): ...
    def get_baseline_row(self) -> int:
        """
        Retrieves the row set with gtk_grid_layout_set_baseline_row().

        Parameters:


        Returns:
            int: the global baseline row

        """
        ...

    def get_column_homogeneous(self) -> bool:
        """
        Checks whether all columns of @grid should have the same width.

        Parameters:


        Returns:
            bool: %TRUE if the columns are homogeneous, and %FALSE otherwise

        """
        ...

    def get_column_spacing(self) -> int:
        """
        Retrieves the spacing set with gtk_grid_layout_set_column_spacing().

        Parameters:


        Returns:
            int: the spacing between consecutive columns

        """
        ...

    def get_row_baseline_position(self, row: int) -> BaselinePosition:
        """
        Returns the baseline position of @row.

        If no value has been set with
        [method@Gtk.GridLayout.set_row_baseline_position],
        the default value of %GTK_BASELINE_POSITION_CENTER
        is returned.

        Parameters:
            row: a row index

        Returns:
            BaselinePosition: the baseline position of @row

        """
        ...

    def get_row_homogeneous(self) -> bool:
        """
        Checks whether all rows of @grid should have the same height.

        Parameters:


        Returns:
            bool: %TRUE if the rows are homogeneous, and %FALSE otherwise

        """
        ...

    def get_row_spacing(self) -> int:
        """
        Retrieves the spacing set with gtk_grid_layout_set_row_spacing().

        Parameters:


        Returns:
            int: the spacing between consecutive rows

        """
        ...

    @classmethod
    def new(cls) -> GridLayout:
        """
        Creates a new `GtkGridLayout`.

        Parameters:


        Returns:
            LayoutManager: the newly created `GtkGridLayout`

        """
        ...

    def set_baseline_row(self, row: int) -> None:
        """
        Sets which row defines the global baseline for the entire grid.

        Each row in the grid can have its own local baseline, but only
        one of those is global, meaning it will be the baseline in the
        parent of the @grid.

        Parameters:
            row: the row index

        Returns:

        """
        ...

    def set_column_homogeneous(self, homogeneous: bool) -> None:
        """
        Sets whether all columns of @grid should have the same width.

        Parameters:
            homogeneous: %TRUE to make columns homogeneous

        Returns:

        """
        ...

    def set_column_spacing(self, spacing: int) -> None:
        """
        Sets the amount of space to insert between consecutive columns.

        Parameters:
            spacing: the amount of space between columns, in pixels

        Returns:

        """
        ...

    def set_row_baseline_position(self, row: int, pos: BaselinePosition) -> None:
        """
        Sets how the baseline should be positioned on @row of the
        grid, in case that row is assigned more space than is requested.

        Parameters:
            row: a row index
            pos: a `GtkBaselinePosition`

        Returns:

        """
        ...

    def set_row_homogeneous(self, homogeneous: bool) -> None:
        """
        Sets whether all rows of @grid should have the same height.

        Parameters:
            homogeneous: %TRUE to make rows homogeneous

        Returns:

        """
        ...

    def set_row_spacing(self, spacing: int) -> None:
        """
        Sets the amount of space to insert between consecutive rows.

        Parameters:
            spacing: the amount of space between rows, in pixels

        Returns:

        """
        ...

class GridLayoutChild(LayoutChild):
    """
    `GtkLayoutChild` subclass for children in a `GtkGridLayout`.

    :Constructors:

    ::

        GridLayoutChild(**properties)

    Object GtkGridLayoutChild

    Properties from GtkGridLayoutChild:
      column -> gint: column
      row -> gint: row
      column-span -> gint: column-span
      row-span -> gint: row-span

    Properties from GtkLayoutChild:
      layout-manager -> GtkLayoutManager: layout-manager
      child-widget -> GtkWidget: child-widget

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutChild.Props):
        column: int
        """
        The column to place the child in.
        """
        column_span: int
        """
        The number of columns the child spans to.
        """
        row: int
        """
        The row to place the child in.
        """
        row_span: int
        """
        The number of rows the child spans to.
        """

    props: Props = ...
    def __init__(
        self,
        column: int = ...,
        column_span: int = ...,
        row: int = ...,
        row_span: int = ...,
        child_widget: Widget = ...,
        layout_manager: LayoutManager = ...,
    ): ...
    def get_column(self) -> int:
        """
        Retrieves the column number to which @child attaches its left side.

        Parameters:


        Returns:
            int: the column number

        """
        ...

    def get_column_span(self) -> int:
        """
        Retrieves the number of columns that @child spans to.

        Parameters:


        Returns:
            int: the number of columns

        """
        ...

    def get_row(self) -> int:
        """
        Retrieves the row number to which @child attaches its top side.

        Parameters:


        Returns:
            int: the row number

        """
        ...

    def get_row_span(self) -> int:
        """
        Retrieves the number of rows that @child spans to.

        Parameters:


        Returns:
            int: the number of row

        """
        ...

    def set_column(self, column: int) -> None:
        """
        Sets the column number to attach the left side of @child.

        Parameters:
            column: the attach point for @child

        Returns:

        """
        ...

    def set_column_span(self, span: int) -> None:
        """
        Sets the number of columns @child spans to.

        Parameters:
            span: the span of @child

        Returns:

        """
        ...

    def set_row(self, row: int) -> None:
        """
        Sets the row to place @child in.

        Parameters:
            row: the row for @child

        Returns:

        """
        ...

    def set_row_span(self, span: int) -> None:
        """
        Sets the number of rows @child spans to.

        Parameters:
            span: the span of @child

        Returns:

        """
        ...

class GridLayoutChildClass(GObject.GPointer):
    """
    :Constructors:

    ::

        GridLayoutChildClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutChildClass = ...

class GridLayoutClass(GObject.GPointer):
    """
    :Constructors:

    ::

        GridLayoutClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutManagerClass = ...

class GridView(
    ListBase, Accessible, Buildable, ConstraintTarget, Orientable, Scrollable
):
    """
    `GtkGridView` presents a large dynamic grid of items.

    `GtkGridView` uses its factory to generate one child widget for each
    visible item and shows them in a grid. The orientation of the grid view
    determines if the grid reflows vertically or horizontally.

    `GtkGridView` allows the user to select items according to the selection
    characteristics of the model. For models that allow multiple selected items,
    it is possible to turn on _rubberband selection_, using
    [property@Gtk.GridView:enable-rubberband].

    To learn more about the list widget framework, see the
    [overview](section-list-widget.html).

    # CSS nodes

    ```
    gridview
    ├── child[.activatable]
    │
    ├── child[.activatable]
    │
    ┊
    ╰── [rubberband]
    ```

    `GtkGridView` uses a single CSS node with name `gridview`. Each child uses
    a single CSS node with name `child`. If the [property@Gtk.ListItem:activatable]
    property is set, the corresponding row will have the `.activatable` style
    class. For rubberband selection, a subnode with name `rubberband` is used.

    # Accessibility

    `GtkGridView` uses the %GTK_ACCESSIBLE_ROLE_GRID role, and the items
    use the %GTK_ACCESSIBLE_ROLE_GRID_CELL role.

    :Constructors:

    ::

        GridView(**properties)
        new(model:Gtk.SelectionModel=None, factory:Gtk.ListItemFactory=None) -> Gtk.Widget

    Object GtkGridView

    Signals from GtkGridView:
      activate (guint)

    Properties from GtkGridView:
      enable-rubberband -> gboolean: enable-rubberband
      factory -> GtkListItemFactory: factory
      max-columns -> guint: max-columns
      min-columns -> guint: min-columns
      model -> GtkSelectionModel: model
      single-click-activate -> gboolean: single-click-activate
      tab-behavior -> GtkListTabBehavior: tab-behavior

    Properties from GtkListBase:
      orientation -> GtkOrientation: orientation

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        ListBase.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
        Scrollable.Props,
    ):
        enable_rubberband: bool
        """
        Allow rubberband selection.
        """
        factory: Optional[ListItemFactory]
        """
        Factory for populating list items.
        """
        max_columns: int
        """
        Maximum number of columns per row.

        If this number is smaller than [property@Gtk.GridView:min-columns],
        that value is used instead.
        """
        min_columns: int
        """
        Minimum number of columns per row.
        """
        model: Optional[SelectionModel]
        """
        Model for the items displayed.
        """
        single_click_activate: bool
        """
        Activate rows on single click and select them on hover.
        """
        tab_behavior: ListTabBehavior
        """
        Behavior of the <kbd>Tab</kbd> key
        """

    props: Props = ...
    def __init__(
        self,
        enable_rubberband: bool = ...,
        factory: Optional[ListItemFactory] = ...,
        max_columns: int = ...,
        min_columns: int = ...,
        model: Optional[SelectionModel] = ...,
        single_click_activate: bool = ...,
        tab_behavior: ListTabBehavior = ...,
        orientation: Orientation = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        hadjustment: Optional[Adjustment] = ...,
        hscroll_policy: ScrollablePolicy = ...,
        vadjustment: Optional[Adjustment] = ...,
        vscroll_policy: ScrollablePolicy = ...,
    ): ...
    def get_enable_rubberband(self) -> bool:
        """
        Returns whether rows can be selected by dragging with the mouse.

        Parameters:


        Returns:
            bool: %TRUE if rubberband selection is enabled

        """
        ...

    def get_factory(self) -> Optional[ListItemFactory]:
        """
        Gets the factory that's currently used to populate list items.

        Parameters:


        Returns:
            Optional[ListItemFactory]: The factory in use

        """
        ...

    def get_max_columns(self) -> int:
        """
        Gets the maximum number of columns that the grid will use.

        Parameters:


        Returns:
            int: The maximum number of columns

        """
        ...

    def get_min_columns(self) -> int:
        """
        Gets the minimum number of columns that the grid will use.

        Parameters:


        Returns:
            int: The minimum number of columns

        """
        ...

    def get_model(self) -> Optional[SelectionModel]:
        """
        Gets the model that's currently used to read the items displayed.

        Parameters:


        Returns:
            Optional[SelectionModel]: The model in use

        """
        ...

    def get_single_click_activate(self) -> bool:
        """
        Returns whether items will be activated on single click and
        selected on hover.

        Parameters:


        Returns:
            bool: %TRUE if items are activated on single click

        """
        ...

    def get_tab_behavior(self) -> ListTabBehavior:
        """
        Gets the behavior set for the <kbd>Tab</kbd> key.

        Parameters:


        Returns:
            ListTabBehavior: The behavior of the <kbd>Tab</kbd> key

        """
        ...

    @classmethod
    def new(
        cls,
        model: Optional[SelectionModel] = None,
        factory: Optional[ListItemFactory] = None,
    ) -> GridView:
        """
        Creates a new `GtkGridView` that uses the given @factory for
        mapping items to widgets.

        The function takes ownership of the
        arguments, so you can write code like
        ```c
        grid_view = gtk_grid_view_new (create_model (),
        gtk_builder_list_item_factory_new_from_resource (\"/resource.ui\"));
        ```

        Parameters:
            model: the model to use
            factory: The factory to populate items with

        Returns:
            Widget: a new `GtkGridView` using the given @model and @factory

        """
        ...

    def scroll_to(
        self, pos: int, flags: ListScrollFlags, scroll: Optional[ScrollInfo] = None
    ) -> None:
        """
        Scrolls to the item at the given position and performs the actions
        specified in @flags.

        This function works no matter if the gridview is shown or focused.
        If it isn't, then the changes will take effect once that happens.

        Parameters:
            pos: position of the item
            flags: actions to perform
            scroll: details of how to perform
        the scroll operation or %NULL to scroll into view

        Returns:

        """
        ...

    def set_enable_rubberband(self, enable_rubberband: bool) -> None:
        """
        Sets whether selections can be changed by dragging with the mouse.

        Parameters:
            enable_rubberband: %TRUE to enable rubberband selection

        Returns:

        """
        ...

    def set_factory(self, factory: Optional[ListItemFactory] = None) -> None:
        """
        Sets the `GtkListItemFactory` to use for populating list items.

        Parameters:
            factory: the factory to use

        Returns:

        """
        ...

    def set_max_columns(self, max_columns: int) -> None:
        """
        Sets the maximum number of columns to use.

        This number must be at least 1.

        If @max_columns is smaller than the minimum set via
        [method@Gtk.GridView.set_min_columns], that value is used instead.

        Parameters:
            max_columns: The maximum number of columns

        Returns:

        """
        ...

    def set_min_columns(self, min_columns: int) -> None:
        """
        Sets the minimum number of columns to use.

        This number must be at least 1.

        If @min_columns is smaller than the minimum set via
        [method@Gtk.GridView.set_max_columns], that value is ignored.

        Parameters:
            min_columns: The minimum number of columns

        Returns:

        """
        ...

    def set_model(self, model: Optional[SelectionModel] = None) -> None:
        """
        Sets the model to use.

        This must be a [iface@Gtk.SelectionModel].

        Parameters:
            model: the model to use

        Returns:

        """
        ...

    def set_single_click_activate(self, single_click_activate: bool) -> None:
        """
        Sets whether items should be activated on single click and
        selected on hover.

        Parameters:
            single_click_activate: %TRUE to activate items on single click

        Returns:

        """
        ...

    def set_tab_behavior(self, tab_behavior: ListTabBehavior) -> None:
        """
        Sets the behavior of the <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keys.

        Parameters:
            tab_behavior: The desired tab behavior

        Returns:

        """
        ...

class GridViewClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class HeaderBar(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkHeaderBar` is a widget for creating custom title bars for windows.

    ![An example GtkHeaderBar](headerbar.png)

    `GtkHeaderBar` is similar to a horizontal `GtkCenterBox`. It allows
    children to be placed at the start or the end. In addition, it allows
    the window title to be displayed. The title will be centered with respect
    to the width of the box, even if the children at either side take up
    different amounts of space.

    `GtkHeaderBar` can add typical window frame controls, such as minimize,
    maximize and close buttons, or the window icon.

    For these reasons, `GtkHeaderBar` is the natural choice for use as the
    custom titlebar widget of a `GtkWindow` (see [method@Gtk.Window.set_titlebar]),
    as it gives features typical of titlebars while allowing the addition of
    child widgets.

    ## GtkHeaderBar as GtkBuildable

    The `GtkHeaderBar` implementation of the `GtkBuildable` interface supports
    adding children at the start or end sides by specifying “start” or “end” as
    the “type” attribute of a `<child>` element, or setting the title widget by
    specifying “title” value.

    By default the `GtkHeaderBar` uses a `GtkLabel` displaying the title of the
    window it is contained in as the title widget, equivalent to the following
    UI definition:

    ```xml
    <object class=\"GtkHeaderBar\">
    <property name=\"title-widget\">
    <object class=\"GtkLabel\">
    <property name=\"label\" translatable=\"yes\">Label</property>
    <property name=\"single-line-mode\">True</property>
    <property name=\"ellipsize\">end</property>
    <property name=\"width-chars\">5</property>
    <style>
    <class name=\"title\"/>
    </style>
    </object>
    </property>
    </object>
    ```

    # CSS nodes

    ```
    headerbar
    ╰── windowhandle
    ╰── box
    ├── box.start
    │ ├── windowcontrols.start
    │ ╰── [other children]
    ├── [Title Widget]
    ╰── box.end
    ├── [other children]
    ╰── windowcontrols.end
    ```

    A `GtkHeaderBar`'s CSS node is called `headerbar`. It contains a `windowhandle`
    subnode, which contains a `box` subnode, which contains two `box` subnodes at
    the start and end of the header bar, as well as a center node that represents
    the title.

    Each of the boxes contains a `windowcontrols` subnode, see
    [class@Gtk.WindowControls] for details, as well as other children.

    # Accessibility

    `GtkHeaderBar` uses the %GTK_ACCESSIBLE_ROLE_GROUP role.

    :Constructors:

    ::

        HeaderBar(**properties)
        new() -> Gtk.Widget

    Object GtkHeaderBar

    Properties from GtkHeaderBar:
      title-widget -> GtkWidget: title-widget
      show-title-buttons -> gboolean: show-title-buttons
      decoration-layout -> gchararray: decoration-layout

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        decoration_layout: Optional[str]
        """
        The decoration layout for buttons.

        If this property is not set, the
        [property@Gtk.Settings:gtk-decoration-layout] setting is used.
        """
        show_title_buttons: bool
        """
        Whether to show title buttons like close, minimize, maximize.

        Which buttons are actually shown and where is determined
        by the [property@Gtk.HeaderBar:decoration-layout] property,
        and by the state of the window (e.g. a close button will not
        be shown if the window can't be closed).
        """
        title_widget: Optional[Widget]

    props: Props = ...
    def __init__(
        self,
        decoration_layout: Optional[str] = ...,
        show_title_buttons: bool = ...,
        title_widget: Optional[Widget] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_decoration_layout(self) -> Optional[str]:
        """
        Gets the decoration layout of the `GtkHeaderBar`.

        Parameters:


        Returns:
            Optional[str]: the decoration layout

        """
        ...

    def get_show_title_buttons(self) -> bool:
        """
        Returns whether this header bar shows the standard window
        title buttons.

        Parameters:


        Returns:
            bool: %TRUE if title buttons are shown

        """
        ...

    def get_title_widget(self) -> Optional[Widget]:
        """
        Retrieves the title widget of the header.

        See [method@Gtk.HeaderBar.set_title_widget].

        Parameters:


        Returns:
            Optional[Widget]: the title widget of the header

        """
        ...

    @classmethod
    def new(cls) -> HeaderBar:
        """
        Creates a new `GtkHeaderBar` widget.

        Parameters:


        Returns:
            Widget: a new `GtkHeaderBar`

        """
        ...

    def pack_end(self, child: Widget) -> None:
        """
        Adds @child to @bar, packed with reference to the
        end of the @bar.

        Parameters:
            child: the `GtkWidget` to be added to @bar

        Returns:

        """
        ...

    def pack_start(self, child: Widget) -> None:
        """
        Adds @child to @bar, packed with reference to the
        start of the @bar.

        Parameters:
            child: the `GtkWidget` to be added to @bar

        Returns:

        """
        ...

    def remove(self, child: Widget) -> None:
        """
        Removes a child from the `GtkHeaderBar`.

        The child must have been added with
        [method@Gtk.HeaderBar.pack_start],
        [method@Gtk.HeaderBar.pack_end] or
        [method@Gtk.HeaderBar.set_title_widget].

        Parameters:
            child: the child to remove

        Returns:

        """
        ...

    def set_decoration_layout(self, layout: Optional[str] = None) -> None:
        """
        Sets the decoration layout for this header bar.

        This property overrides the
        [property@Gtk.Settings:gtk-decoration-layout] setting.

        There can be valid reasons for overriding the setting, such
        as a header bar design that does not allow for buttons to take
        room on the right, or only offers room for a single close button.
        Split header bars are another example for overriding the setting.

        The format of the string is button names, separated by commas.
        A colon separates the buttons that should appear on the left
        from those on the right. Recognized button names are minimize,
        maximize, close and icon (the window icon).

        For example, “icon:minimize,maximize,close” specifies an icon
        on the left, and minimize, maximize and close buttons on the right.

        Parameters:
            layout: a decoration layout, or %NULL to unset the layout

        Returns:

        """
        ...

    def set_show_title_buttons(self, setting: bool) -> None:
        """
        Sets whether this header bar shows the standard window
        title buttons.

        Parameters:
            setting: %TRUE to show standard title buttons

        Returns:

        """
        ...

    def set_title_widget(self, title_widget: Optional[Widget] = None) -> None:
        """
        Sets the title for the `GtkHeaderBar`.

        When set to %NULL, the headerbar will display the title of
        the window it is contained in.

        The title should help a user identify the current view.
        To achieve the same style as the builtin title, use the
        “title” style class.

        You should set the title widget to %NULL, for the window
        title label to be visible again.

        Parameters:
            title_widget: a widget to use for a title

        Returns:

        """
        ...

class IMContext(GObject.Object):
    """
    `GtkIMContext` defines the interface for GTK input methods.

    `GtkIMContext` is used by GTK text input widgets like `GtkText`
    to map from key events to Unicode character strings.

    An input method may consume multiple key events in sequence before finally
    outputting the composed result. This is called *preediting*, and an input
    method may provide feedback about this process by displaying the intermediate
    composition states as preedit text. To do so, the `GtkIMContext` will emit
    [signal@Gtk.IMContext::preedit-start], [signal@Gtk.IMContext::preedit-changed]
    and [signal@Gtk.IMContext::preedit-end] signals.

    For instance, the built-in GTK input method [class@Gtk.IMContextSimple]
    implements the input of arbitrary Unicode code points by holding down the
    <kbd>Control</kbd> and <kbd>Shift</kbd> keys and then typing <kbd>u</kbd>
    followed by the hexadecimal digits of the code point. When releasing the
    <kbd>Control</kbd> and <kbd>Shift</kbd> keys, preediting ends and the
    character is inserted as text. For example,

    Ctrl+Shift+u 2 0 A C

    results in the € sign.

    Additional input methods can be made available for use by GTK widgets as
    loadable modules. An input method module is a small shared library which
    provides a `GIOExtension` for the extension point named \"gtk-im-module\".

    To connect a widget to the users preferred input method, you should use
    [class@Gtk.IMMulticontext].

    :Constructors:

    ::

        IMContext(**properties)

    Object GtkIMContext

    Signals from GtkIMContext:
      preedit-start ()
      preedit-end ()
      preedit-changed ()
      commit (gchararray)
      retrieve-surrounding () -> gboolean
      delete-surrounding (gint, gint) -> gboolean

    Properties from GtkIMContext:
      input-purpose -> GtkInputPurpose: input-purpose
      input-hints -> GtkInputHints: input-hints

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        input_hints: InputHints
        """
        Additional hints that allow input methods to fine-tune
        their behaviour.
        """
        input_purpose: InputPurpose
        """
        The purpose of the text field that the `GtkIMContext is connected to.

        This property can be used by on-screen keyboards and other input
        methods to adjust their behaviour.
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    def __init__(
        self, input_hints: InputHints = ..., input_purpose: InputPurpose = ...
    ): ...
    def delete_surrounding(self, offset: int, n_chars: int) -> bool:
        """
        Asks the widget that the input context is attached to delete
        characters around the cursor position by emitting the
        `::delete_surrounding` signal.

        Note that @offset and @n_chars are in characters not in bytes
        which differs from the usage other places in `GtkIMContext`.

        In order to use this function, you should first call
        [method@Gtk.IMContext.get_surrounding] to get the current context,
        and call this function immediately afterwards to make sure that you
        know what you are deleting. You should also account for the fact
        that even if the signal was handled, the input context might not
        have deleted all the characters that were requested to be deleted.

        This function is used by an input method that wants to make
        substitutions in the existing text in response to new input.
        It is not useful for applications.

        Parameters:
            offset: offset from cursor position in chars;
        a negative value means start before the cursor.
            n_chars: number of characters to delete.

        Returns:
            bool: %TRUE if the signal was handled.

        """
        ...

    def do_activate_osk(self) -> None: ...
    def do_commit(self, str: str) -> None: ...
    def do_delete_surrounding(self, offset: int, n_chars: int) -> bool:
        """
        Asks the widget that the input context is attached to delete
        characters around the cursor position by emitting the
        `::delete_surrounding` signal.

        Note that @offset and @n_chars are in characters not in bytes
        which differs from the usage other places in `GtkIMContext`.

        In order to use this function, you should first call
        [method@Gtk.IMContext.get_surrounding] to get the current context,
        and call this function immediately afterwards to make sure that you
        know what you are deleting. You should also account for the fact
        that even if the signal was handled, the input context might not
        have deleted all the characters that were requested to be deleted.

        This function is used by an input method that wants to make
        substitutions in the existing text in response to new input.
        It is not useful for applications.

        Parameters:
            offset: offset from cursor position in chars;
        a negative value means start before the cursor.
            n_chars: number of characters to delete.

        Returns:
            bool: %TRUE if the signal was handled.

        """
        ...

    def do_filter_keypress(self, event: Gdk.Event) -> bool:
        """
        Allow an input method to internally handle key press and release
        events.

        If this function returns %TRUE, then no further processing
        should be done for this key event.

        Parameters:
            event: the key event

        Returns:
            bool: %TRUE if the input method handled the key event.

        """
        ...

    def do_focus_in(self) -> None:
        """
        Notify the input method that the widget to which this
        input context corresponds has gained focus.

        The input method may, for example, change the displayed
        feedback to reflect this change.

        Parameters:


        Returns:

        """
        ...

    def do_focus_out(self) -> None:
        """
        Notify the input method that the widget to which this
        input context corresponds has lost focus.

        The input method may, for example, change the displayed
        feedback or reset the contexts state to reflect this change.

        Parameters:


        Returns:

        """
        ...

    def do_get_preedit_string(self) -> Tuple[str, Pango.AttrList, int]:
        """
        Retrieve the current preedit string for the input context,
        and a list of attributes to apply to the string.

        This string should be displayed inserted at the insertion point.

        Parameters:


        Returns:
            str: location to store the retrieved
        string. The string retrieved must be freed with g_free().
            Pango.AttrList: location to store the retrieved
        attribute list. When you are done with this list, you
        must unreference it with [method@Pango.AttrList.unref].
            int: location to store position of cursor
        (in characters) within the preedit string.
        """
        ...

    def do_get_surrounding(self) -> Tuple[bool, str, int]:
        """
        Retrieves context around the insertion point.

        Input methods typically want context in order to constrain input text
        based on existing text; this is important for languages such as Thai
        where only some sequences of characters are allowed.

        This function is implemented by emitting the
        [signal@Gtk.IMContext::retrieve-surrounding] signal on the input method;
        in response to this signal, a widget should provide as much context as
        is available, up to an entire paragraph, by calling
        [method@Gtk.IMContext.set_surrounding].

        Note that there is no obligation for a widget to respond to the
        `::retrieve-surrounding` signal, so input methods must be prepared to
        function without context.

        Parameters:


        Returns:
            bool: `TRUE` if surrounding text was provided; in this case
        you must free the result stored in `text`.
            str: location to store a UTF-8 encoded
        string of text holding context around the insertion point.
        If the function returns %TRUE, then you must free the result
        stored in this location with g_free().
            int: location to store byte index of the insertion
        cursor within @text.
        """
        ...

    def do_get_surrounding_with_selection(self) -> Tuple[bool, str, int, int]:
        """
        Retrieves context around the insertion point.

        Input methods typically want context in order to constrain input
        text based on existing text; this is important for languages such
        as Thai where only some sequences of characters are allowed.

        This function is implemented by emitting the
        [signal@Gtk.IMContext::retrieve-surrounding] signal on the input method;
        in response to this signal, a widget should provide as much context as
        is available, up to an entire paragraph, by calling
        [method@Gtk.IMContext.set_surrounding_with_selection].

        Note that there is no obligation for a widget to respond to the
        `::retrieve-surrounding` signal, so input methods must be prepared to
        function without context.

        Parameters:


        Returns:
            bool: `TRUE` if surrounding text was provided; in this case
        you must free the result stored in `text`.
            str: location to store a UTF-8 encoded
        string of text holding context around the insertion point.
        If the function returns %TRUE, then you must free the result
        stored in this location with g_free().
            int: location to store byte index of the insertion
        cursor within @text.
            int: location to store byte index of the selection
        bound within @text
        """
        ...

    def do_preedit_changed(self) -> None: ...
    def do_preedit_end(self) -> None: ...
    def do_preedit_start(self) -> None: ...
    def do_reset(self) -> None:
        """
        Notify the input method that a change such as a change in cursor
        position has been made.

        This will typically cause the input method to clear the preedit state.

        Parameters:


        Returns:

        """
        ...

    def do_retrieve_surrounding(self) -> bool: ...
    def do_set_client_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Set the client widget for the input context.

        This is the `GtkWidget` holding the input focus. This widget is
        used in order to correctly position status windows, and may
        also be used for purposes internal to the input method.

        Parameters:
            widget: the client widget. This may be %NULL to indicate
        that the previous client widget no longer exists.

        Returns:

        """
        ...

    def do_set_cursor_location(self, area: Gdk.Rectangle) -> None:
        """
        Notify the input method that a change in cursor
        position has been made.

        The location is relative to the client widget.

        Parameters:
            area: new location

        Returns:

        """
        ...

    def do_set_surrounding(self, text: str, len: int, cursor_index: int) -> None:
        """
        Sets surrounding context around the insertion point and preedit
        string.

        This function is expected to be called in response to the
        [signal@Gtk.IMContext::retrieve-surrounding] signal, and will
        likely have no effect if called at other times.

        Parameters:
            text: text surrounding the insertion point, as UTF-8.
        the preedit string should not be included within @text
            len: the length of @text, or -1 if @text is nul-terminated
            cursor_index: the byte index of the insertion cursor within @text.

        Returns:

        """
        ...

    def do_set_surrounding_with_selection(
        self, text: str, len: int, cursor_index: int, anchor_index: int
    ) -> None:
        """
        Sets surrounding context around the insertion point and preedit
        string. This function is expected to be called in response to the
        [signal@Gtk.IMContext::retrieve_surrounding] signal, and will likely
        have no effect if called at other times.

        Parameters:
            text: text surrounding the insertion point, as UTF-8.
        the preedit string should not be included within @text
            len: the length of @text, or -1 if @text is nul-terminated
            cursor_index: the byte index of the insertion cursor within @text
            anchor_index: the byte index of the selection bound within @text

        Returns:

        """
        ...

    def do_set_use_preedit(self, use_preedit: bool) -> None:
        """
        Sets whether the IM context should use the preedit string
        to display feedback.

        If @use_preedit is %FALSE (default is %TRUE), then the IM context
        may use some other method to display feedback, such as displaying
        it in a child of the root window.

        Parameters:
            use_preedit: whether the IM context should use the preedit string.

        Returns:

        """
        ...

    def filter_key(
        self,
        press: bool,
        surface: Gdk.Surface,
        device: Gdk.Device,
        time: int,
        keycode: int,
        state: Gdk.ModifierType,
        group: int,
    ) -> bool:
        """
        Allow an input method to forward key press and release events
        to another input method without necessarily having a `GdkEvent`
        available.

        Parameters:
            press: whether to forward a key press or release event
            surface: the surface the event is for
            device: the device that the event is for
            time: the timestamp for the event
            keycode: the keycode for the event
            state: modifier state for the event
            group: the active keyboard group for the event

        Returns:
            bool: %TRUE if the input method handled the key event.

        """
        ...

    def filter_keypress(self, event: Gdk.Event) -> bool:
        """
        Allow an input method to internally handle key press and release
        events.

        If this function returns %TRUE, then no further processing
        should be done for this key event.

        Parameters:
            event: the key event

        Returns:
            bool: %TRUE if the input method handled the key event.

        """
        ...

    def focus_in(self) -> None:
        """
        Notify the input method that the widget to which this
        input context corresponds has gained focus.

        The input method may, for example, change the displayed
        feedback to reflect this change.

        Parameters:


        Returns:

        """
        ...

    def focus_out(self) -> None:
        """
        Notify the input method that the widget to which this
        input context corresponds has lost focus.

        The input method may, for example, change the displayed
        feedback or reset the contexts state to reflect this change.

        Parameters:


        Returns:

        """
        ...

    def get_preedit_string(self) -> Tuple[str, Pango.AttrList, int]:
        """
        Retrieve the current preedit string for the input context,
        and a list of attributes to apply to the string.

        This string should be displayed inserted at the insertion point.

        Parameters:


        Returns:
            str: location to store the retrieved
        string. The string retrieved must be freed with g_free().
            Pango.AttrList: location to store the retrieved
        attribute list. When you are done with this list, you
        must unreference it with [method@Pango.AttrList.unref].
            int: location to store position of cursor
        (in characters) within the preedit string.
        """
        ...

    def get_surrounding(self) -> Optional[Tuple[str, int]]:  # CHECK Wrapped function
        """
        Retrieves context around the insertion point.

        Input methods typically want context in order to constrain input text
        based on existing text; this is important for languages such as Thai
        where only some sequences of characters are allowed.

        This function is implemented by emitting the
        [signal@Gtk.IMContext::retrieve-surrounding] signal on the input method;
        in response to this signal, a widget should provide as much context as
        is available, up to an entire paragraph, by calling
        [method@Gtk.IMContext.set_surrounding].

        Note that there is no obligation for a widget to respond to the
        `::retrieve-surrounding` signal, so input methods must be prepared to
        function without context.

        Parameters:


        Returns:
            str: location to store a UTF-8 encoded
        string of text holding context around the insertion point.
        If the function returns %TRUE, then you must free the result
        stored in this location with g_free().
            int: location to store byte index of the insertion
        cursor within @text.
        """
        ...

    def get_surrounding_with_selection(self) -> Tuple[bool, str, int, int]:
        """
        Retrieves context around the insertion point.

        Input methods typically want context in order to constrain input
        text based on existing text; this is important for languages such
        as Thai where only some sequences of characters are allowed.

        This function is implemented by emitting the
        [signal@Gtk.IMContext::retrieve-surrounding] signal on the input method;
        in response to this signal, a widget should provide as much context as
        is available, up to an entire paragraph, by calling
        [method@Gtk.IMContext.set_surrounding_with_selection].

        Note that there is no obligation for a widget to respond to the
        `::retrieve-surrounding` signal, so input methods must be prepared to
        function without context.

        Parameters:


        Returns:
            bool: `TRUE` if surrounding text was provided; in this case
        you must free the result stored in `text`.
            str: location to store a UTF-8 encoded
        string of text holding context around the insertion point.
        If the function returns %TRUE, then you must free the result
        stored in this location with g_free().
            int: location to store byte index of the insertion
        cursor within @text.
            int: location to store byte index of the selection
        bound within @text
        """
        ...

    def reset(self) -> None:
        """
        Notify the input method that a change such as a change in cursor
        position has been made.

        This will typically cause the input method to clear the preedit state.

        Parameters:


        Returns:

        """
        ...

    def set_client_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Set the client widget for the input context.

        This is the `GtkWidget` holding the input focus. This widget is
        used in order to correctly position status windows, and may
        also be used for purposes internal to the input method.

        Parameters:
            widget: the client widget. This may be %NULL to indicate
        that the previous client widget no longer exists.

        Returns:

        """
        ...

    def set_cursor_location(self, area: Gdk.Rectangle) -> None:
        """
        Notify the input method that a change in cursor
        position has been made.

        The location is relative to the client widget.

        Parameters:
            area: new location

        Returns:

        """
        ...

    @deprecated("Use [method@Gtk.IMContext.set_surrounding_with_selection] instead")
    def set_surrounding(self, text: str, len: int, cursor_index: int) -> None:
        """
        Sets surrounding context around the insertion point and preedit
        string.

        This function is expected to be called in response to the
        [signal@Gtk.IMContext::retrieve-surrounding] signal, and will
        likely have no effect if called at other times.

        Parameters:
            text: text surrounding the insertion point, as UTF-8.
        the preedit string should not be included within @text
            len: the length of @text, or -1 if @text is nul-terminated
            cursor_index: the byte index of the insertion cursor within @text.

        Returns:

        """
        ...

    def set_surrounding_with_selection(
        self, text: str, len: int, cursor_index: int, anchor_index: int
    ) -> None:
        """
        Sets surrounding context around the insertion point and preedit
        string. This function is expected to be called in response to the
        [signal@Gtk.IMContext::retrieve_surrounding] signal, and will likely
        have no effect if called at other times.

        Parameters:
            text: text surrounding the insertion point, as UTF-8.
        the preedit string should not be included within @text
            len: the length of @text, or -1 if @text is nul-terminated
            cursor_index: the byte index of the insertion cursor within @text
            anchor_index: the byte index of the selection bound within @text

        Returns:

        """
        ...

    def set_use_preedit(self, use_preedit: bool) -> None:
        """
        Sets whether the IM context should use the preedit string
        to display feedback.

        If @use_preedit is %FALSE (default is %TRUE), then the IM context
        may use some other method to display feedback, such as displaying
        it in a child of the root window.

        Parameters:
            use_preedit: whether the IM context should use the preedit string.

        Returns:

        """
        ...

class IMContextClass(GObject.GPointer):
    """
    :Constructors:

    ::

        IMContextClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    preedit_start: Callable[[IMContext], None] = ...
    preedit_end: Callable[[IMContext], None] = ...
    preedit_changed: Callable[[IMContext], None] = ...
    commit: Callable[[IMContext, str], None] = ...
    retrieve_surrounding: Callable[[IMContext], bool] = ...
    delete_surrounding: Callable[[IMContext, int, int], bool] = ...
    set_client_widget: Callable[[IMContext, Optional[Widget]], None] = ...
    get_preedit_string: Callable[[IMContext], Tuple[str, Pango.AttrList, int]] = ...
    filter_keypress: Callable[[IMContext, Gdk.Event], bool] = ...
    focus_in: Callable[[IMContext], None] = ...
    focus_out: Callable[[IMContext], None] = ...
    reset: Callable[[IMContext], None] = ...
    set_cursor_location: Callable[[IMContext, Gdk.Rectangle], None] = ...
    set_use_preedit: Callable[[IMContext, bool], None] = ...
    set_surrounding: Callable[[IMContext, str, int, int], None] = ...
    get_surrounding: Callable[[IMContext], Tuple[bool, str, int]] = ...
    set_surrounding_with_selection: Callable[[IMContext, str, int, int, int], None] = (
        ...
    )
    get_surrounding_with_selection: Callable[
        [IMContext], Tuple[bool, str, int, int]
    ] = ...
    activate_osk: Callable[[IMContext], None] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...

class IMContextSimple(IMContext):
    """
    `GtkIMContextSimple` is an input method supporting table-based input methods.

    ## Compose sequences

    `GtkIMContextSimple` reads compose sequences from the first of the
    following files that is found: ~/.config/gtk-4.0/Compose, ~/.XCompose,
    /usr/share/X11/locale/$locale/Compose (for locales that have a nontrivial
    Compose file). A subset of the file syntax described in the Compose(5)
    manual page is supported. Additionally, `include \"%L\"` loads GTK’s built-in
    table of compose sequences rather than the locale-specific one from X11.

    If none of these files is found, `GtkIMContextSimple` uses a built-in table
    of compose sequences that is derived from the X11 Compose files.

    Note that compose sequences typically start with the Compose_key, which is
    often not available as a dedicated key on keyboards. Keyboard layouts may
    map this keysym to other keys, such as the right Control key.

    ## Unicode characters

    `GtkIMContextSimple` also supports numeric entry of Unicode characters
    by typing <kbd>Ctrl</kbd>-<kbd>Shift</kbd>-<kbd>u</kbd>, followed by a
    hexadecimal Unicode codepoint.

    For example,

    Ctrl-Shift-u 1 2 3 Enter

    yields U+0123 LATIN SMALL LETTER G WITH CEDILLA, i.e. ģ.

    ## Dead keys

    `GtkIMContextSimple` supports dead keys. For example, typing

    dead_acute a

    yields U+00E! LATIN SMALL LETTER_A WITH ACUTE, i.e. á. Note that this
    depends on the keyboard layout including dead keys.

    :Constructors:

    ::

        IMContextSimple(**properties)
        new() -> Gtk.IMContext

    Object GtkIMContextSimple

    Signals from GtkIMContext:
      preedit-start ()
      preedit-end ()
      preedit-changed ()
      commit (gchararray)
      retrieve-surrounding () -> gboolean
      delete-surrounding (gint, gint) -> gboolean

    Properties from GtkIMContext:
      input-purpose -> GtkInputPurpose: input-purpose
      input-hints -> GtkInputHints: input-hints

    Signals from GObject:
      notify (GParam)
    """

    class Props(IMContext.Props): ...
    object: IMContext = ...
    priv: IMContextSimplePrivate = ...
    def __init__(
        self, input_hints: InputHints = ..., input_purpose: InputPurpose = ...
    ): ...
    def add_compose_file(self, compose_file: str) -> None:
        """
        Adds an additional table from the X11 compose file.

        Parameters:
            compose_file: The path of compose file

        Returns:

        """
        ...

    @classmethod
    def new(cls) -> IMContextSimple:
        """
        Creates a new `GtkIMContextSimple`.

        Parameters:


        Returns:
            IMContext: a new `GtkIMContextSimple`

        """
        ...

class IMContextSimpleClass(GObject.GPointer):
    """
    :Constructors:

    ::

        IMContextSimpleClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: IMContextClass = ...

class IMContextSimplePrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class IMMulticontext(IMContext):
    """
    `GtkIMMulticontext` is an input method context supporting multiple,
    switchable input methods.

    Text widgets such as `GtkText` or `GtkTextView` use a `GtkIMMultiContext`
    to implement their `im-module` property for switching between different
    input methods.

    :Constructors:

    ::

        IMMulticontext(**properties)
        new() -> Gtk.IMContext

    Object GtkIMMulticontext

    Signals from GtkIMContext:
      preedit-start ()
      preedit-end ()
      preedit-changed ()
      commit (gchararray)
      retrieve-surrounding () -> gboolean
      delete-surrounding (gint, gint) -> gboolean

    Properties from GtkIMContext:
      input-purpose -> GtkInputPurpose: input-purpose
      input-hints -> GtkInputHints: input-hints

    Signals from GObject:
      notify (GParam)
    """

    class Props(IMContext.Props): ...
    object: IMContext = ...
    priv: IMMulticontextPrivate = ...
    def __init__(
        self, input_hints: InputHints = ..., input_purpose: InputPurpose = ...
    ): ...
    def get_context_id(self) -> str:
        """
        Gets the id of the currently active delegate of the @context.

        Parameters:


        Returns:
            str: the id of the currently active delegate

        """
        ...

    @classmethod
    def new(cls) -> IMMulticontext:
        """
        Creates a new `GtkIMMulticontext`.

        Parameters:


        Returns:
            IMContext: a new `GtkIMMulticontext`.

        """
        ...

    def set_context_id(self, context_id: Optional[str] = None) -> None:
        """
        Sets the context id for @context.

        This causes the currently active delegate of @context to be
        replaced by the delegate corresponding to the new context id.

        Setting this to a non-%NULL value overrides the system-wide
        IM module setting. See the [property@Gtk.Settings:gtk-im-module]
        property.

        Parameters:
            context_id: the id to use

        Returns:

        """
        ...

class IMMulticontextClass(GObject.GPointer):
    """
    :Constructors:

    ::

        IMMulticontextClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: IMContextClass = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...

class IMMulticontextPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class IconPaintable(GObject.Object, Gdk.Paintable, SymbolicPaintable):
    """
    Contains information found when looking up an icon in `GtkIconTheme`.

    `GtkIconPaintable` implements `GdkPaintable`.

    :Constructors:

    ::

        IconPaintable(**properties)
        new_for_file(file:Gio.File, size:int, scale:int) -> Gtk.IconPaintable

    Object GtkIconPaintable

    Properties from GtkIconPaintable:
      file -> GFile: file
      icon-name -> gchararray: icon-name
      is-symbolic -> gboolean: is-symbolic

    Signals from GdkPaintable:
      invalidate-contents ()
      invalidate-size ()

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gdk.Paintable.Props, SymbolicPaintable.Props):
        file: Optional[Gio.File]
        """
        The file representing the icon, if any.
        """
        icon_name: Optional[str]
        """
        The icon name that was chosen during lookup.
        """
        is_symbolic: bool
        """
        Whether the icon is symbolic or not.
        """

    props: Props = ...
    def __init__(
        self, file: Gio.File = ..., icon_name: str = ..., is_symbolic: bool = ...
    ): ...
    def get_file(self) -> Optional[Gio.File]:
        """
        Gets the `GFile` that was used to load the icon.

        Returns %NULL if the icon was not loaded from a file.

        Parameters:


        Returns:
            Optional[Gio.File]: the `GFile` for the icon

        """
        ...

    def get_icon_name(self) -> Optional[str]:
        """
        Get the icon name being used for this icon.

        When an icon looked up in the icon theme was not available, the
        icon theme may use fallback icons - either those specified to
        gtk_icon_theme_lookup_icon() or the always-available
        \"image-missing\". The icon chosen is returned by this function.

        If the icon was created without an icon theme, this function
        returns %NULL.

        Parameters:


        Returns:
            Optional[str]: the themed icon-name for the
        icon, or %NULL if its not a themed icon.

        """
        ...

    def is_symbolic(self) -> bool:
        """
        Checks if the icon is symbolic or not.

        This currently uses only the file name and not the file contents
        for determining this. This behaviour may change in the future.

        Note that to render a symbolic `GtkIconPaintable` properly (with
        recoloring), you have to set its icon name on a `GtkImage`.

        Parameters:


        Returns:
            bool: %TRUE if the icon is symbolic, %FALSE otherwise

        """
        ...

    @classmethod
    def new_for_file(cls, file: Gio.File, size: int, scale: int) -> IconPaintable:
        """
        Creates a `GtkIconPaintable` for a file with a given size and scale.

        The icon can then be rendered by using it as a `GdkPaintable`.

        Parameters:
            file: a `GFile`
            size: desired icon size
            scale: the desired scale

        Returns:
            IconPaintable: a `GtkIconPaintable` containing
        for the icon. Unref with g_object_unref()

        """
        ...

class IconTheme(GObject.Object):
    """
    `GtkIconTheme` provides a facility for loading themed icons.

    The main reason for using a name rather than simply providing a filename
    is to allow different icons to be used depending on what “icon theme” is
    selected by the user. The operation of icon themes on Linux and Unix
    follows the [Icon Theme Specification](http://www.freedesktop.org/Standards/icon-theme-spec)
    There is a fallback icon theme, named `hicolor`, where applications
    should install their icons, but additional icon themes can be installed
    as operating system vendors and users choose.

    In many cases, named themes are used indirectly, via [class@Gtk.Image]
    rather than directly, but looking up icons directly is also simple. The
    `GtkIconTheme` object acts as a database of all the icons in the current
    theme. You can create new `GtkIconTheme` objects, but it’s much more
    efficient to use the standard icon theme of the `GtkWidget` so that the
    icon information is shared with other people looking up icons.

    ```c
    GtkIconTheme *icon_theme;
    GtkIconPaintable *icon;
    GdkPaintable *paintable;

    icon_theme = gtk_icon_theme_get_for_display (gtk_widget_get_display (my_widget));
    icon = gtk_icon_theme_lookup_icon (icon_theme,
    \"my-icon-name\", // icon name
    48, // icon size
    1, // scale
    0, // flags);
    paintable = GDK_PAINTABLE (icon);
    // Use the paintable
    g_object_unref (icon);
    ```

    :Constructors:

    ::

        IconTheme(**properties)
        new() -> Gtk.IconTheme

    Object GtkIconTheme

    Signals from GtkIconTheme:
      changed ()

    Properties from GtkIconTheme:
      display -> GdkDisplay: display
      icon-names -> GStrv: icon-names
      search-path -> GStrv: search-path
      resource-path -> GStrv: resource-path
      theme-name -> gchararray: theme-name

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        display: Optional[Gdk.Display]
        """
        The display that this icon theme object is attached to.
        """
        icon_names: list[str]
        """
        The icon names that are supported by the icon theme.
        """
        resource_path: Optional[list[str]]
        """
        Resource paths that will be looked at when looking for icons,
        similar to search paths.

        The resources are considered as part of the hicolor icon theme
        and must be located in subdirectories that are defined in the
        hicolor icon theme, such as `@path/16x16/actions/run.png`.
        Icons that are directly placed in the resource path instead
        of a subdirectory are also considered as ultimate fallback.
        """
        search_path: Optional[list[str]]
        """
        The search path for this icon theme.

        When looking for icons, GTK will search for a subdirectory of
        one or more of the directories in the search path with the same
        name as the icon theme containing an index.theme file. (Themes
        from multiple of the path elements are combined to allow themes
        to be extended by adding icons in the user’s home directory.)
        """
        theme_name: str
        """
        The name of the icon theme that is being used.

        Unless set to a different value, this will be the value of
        the `GtkSettings:gtk-icon-theme-name` property of the `GtkSettings`
        object associated to the display of the icontheme object.
        """

    props: Props = ...
    def __init__(
        self,
        display: Gdk.Display = ...,
        resource_path: Optional[Sequence[str]] = ...,
        search_path: Optional[Sequence[str]] = ...,
        theme_name: Optional[str] = ...,
    ): ...
    def add_resource_path(self, path: str) -> None:
        """
        Adds a resource path that will be looked at when looking
        for icons, similar to search paths.

        See [method@Gtk.IconTheme.set_resource_path].

        This function should be used to make application-specific icons
        available as part of the icon theme.

        Parameters:
            path: a resource path

        Returns:

        """
        ...

    def add_search_path(self, path: str) -> None:
        """
        Appends a directory to the search path.

        See [method@Gtk.IconTheme.set_search_path].

        Parameters:
            path: directory name to append to the icon path

        Returns:

        """
        ...

    def get_display(self) -> Optional[Gdk.Display]:
        """
        Returns the display that the `GtkIconTheme` object was
        created for.

        Parameters:


        Returns:
            Optional[Gdk.Display]: the display of @icon_theme

        """
        ...

    @staticmethod
    def get_for_display(display: Gdk.Display) -> IconTheme:
        """
        Gets the icon theme object associated with @display.

        If this function has not previously been called for the given
        display, a new icon theme object will be created and associated
        with the display. Icon theme objects are fairly expensive to create,
        so using this function is usually a better choice than calling
        [ctor@Gtk.IconTheme.new] and setting the display yourself; by using
        this function a single icon theme object will be shared between users.

        Parameters:
            display: a `GdkDisplay`

        Returns:
            IconTheme: A unique `GtkIconTheme` associated with
        the given display. This icon theme is associated with the display
        and can be used as long as the display is open. Do not ref or unref it.

        """
        ...

    def get_icon_names(self) -> list[str]:
        """
        Lists the names of icons in the current icon theme.

        Parameters:


        Returns:
            list[str]: a string array
        holding the names of all the icons in the theme. You must
        free the array using g_strfreev().

        """
        ...

    def get_icon_sizes(self, icon_name: str) -> list[int]:
        """
        Returns an array of integers describing the sizes at which
        the icon is available without scaling.

        A size of -1 means that the icon is available in a scalable
        format. The array is zero-terminated.

        Parameters:
            icon_name: the name of an icon

        Returns:
            list[int]: A newly
        allocated array describing the sizes at which the icon is
        available. The array should be freed with g_free() when it is no
        longer needed.

        """
        ...

    def get_resource_path(self) -> Optional[list[str]]:
        """
        Gets the current resource path.

        See [method@Gtk.IconTheme.set_resource_path].

        Parameters:


        Returns:
            Optional[list[str]]:
        A list of resource paths

        """
        ...

    def get_search_path(self) -> Optional[list[str]]:
        """
        Gets the current search path.

        See [method@Gtk.IconTheme.set_search_path].

        Parameters:


        Returns:
            Optional[list[str]]:
        a list of icon theme path directories

        """
        ...

    def get_theme_name(self) -> str:
        """
        Gets the current icon theme name.

        Returns (transfer full): the current icon theme name,

        Parameters:


        Returns:
            str: Not documented

        """
        ...

    def has_gicon(self, gicon: Gio.Icon) -> bool:
        """
        Checks whether an icon theme includes an icon
        for a particular `GIcon`.

        Parameters:
            gicon: a `GIcon`

        Returns:
            bool: %TRUE if @self includes an icon for @gicon

        """
        ...

    def has_icon(self, icon_name: str) -> bool:
        """
        Checks whether an icon theme includes an icon
        for a particular name.

        Parameters:
            icon_name: the name of an icon

        Returns:
            bool: %TRUE if @self includes an
        icon for @icon_name.

        """
        ...

    def lookup_by_gicon(
        self,
        icon: Gio.Icon,
        size: int,
        scale: int,
        direction: TextDirection,
        flags: IconLookupFlags,
    ) -> IconPaintable:
        """
        Looks up a icon for a desired size and window scale.

        The icon can then be rendered by using it as a `GdkPaintable`,
        or you can get information such as the filename and size.

        Parameters:
            icon: the `GIcon` to look up
            size: desired icon size
            scale: the desired scale
            direction: text direction the icon will be displayed in
            flags: flags modifying the behavior of the icon lookup

        Returns:
            IconPaintable: a `GtkIconPaintable` containing
        information about the icon. Unref with g_object_unref()

        """
        ...

    def lookup_icon(
        self,
        icon_name: str,
        fallbacks: Optional[Sequence[str]],
        size: int,
        scale: int,
        direction: TextDirection,
        flags: IconLookupFlags,
    ) -> IconPaintable:
        """
        Looks up a named icon for a desired size and window scale,
        returning a `GtkIconPaintable`.

        The icon can then be rendered by using it as a `GdkPaintable`,
        or you can get information such as the filename and size.

        If the available @icon_name is not available and @fallbacks are
        provided, they will be tried in order.

        If no matching icon is found, then a paintable that renders the
        \"missing icon\" icon is returned. If you need to do something else
        for missing icons you need to use [method@Gtk.IconTheme.has_icon].

        Note that you probably want to listen for icon theme changes and
        update the icon. This is usually done by overriding the
        GtkWidgetClass.css-changed() function.

        Parameters:
            icon_name: the name of the icon to lookup
            fallbacks:
            size: desired icon size.
            scale: the window scale this will be displayed on
            direction: text direction the icon will be displayed in
            flags: flags modifying the behavior of the icon lookup

        Returns:
            IconPaintable: a `GtkIconPaintable` object
        containing the icon.

        """
        ...

    @classmethod
    def new(cls) -> IconTheme:
        """
        Creates a new icon theme object.

        Icon theme objects are used to lookup up an icon by name
        in a particular icon theme. Usually, you’ll want to use
        [func@Gtk.IconTheme.get_for_display] rather than creating
        a new icon theme object for scratch.

        Parameters:


        Returns:
            IconTheme: the newly created `GtkIconTheme` object.

        """
        ...

    def set_resource_path(self, path: Optional[Sequence[str]] = None) -> None:
        """
        Sets the resource paths that will be looked at when
        looking for icons, similar to search paths.

        The resources are considered as part of the hicolor icon theme
        and must be located in subdirectories that are defined in the
        hicolor icon theme, such as `@path/16x16/actions/run.png`
        or `@path/scalable/actions/run.svg`.

        Icons that are directly placed in the resource path instead
        of a subdirectory are also considered as ultimate fallback,
        but they are treated like unthemed icons.

        Parameters:
            path:
        NULL-terminated array of resource paths
        that are searched for icons

        Returns:

        """
        ...

    def set_search_path(self, path: Optional[Sequence[str]] = None) -> None:
        """
        Sets the search path for the icon theme object.

        When looking for an icon theme, GTK will search for a subdirectory
        of one or more of the directories in @path with the same name
        as the icon theme containing an index.theme file. (Themes from
        multiple of the path elements are combined to allow themes to be
        extended by adding icons in the user’s home directory.)

        In addition if an icon found isn’t found either in the current
        icon theme or the default icon theme, and an image file with
        the right name is found directly in one of the elements of
        @path, then that image will be used for the icon name.
        (This is legacy feature, and new icons should be put
        into the fallback icon theme, which is called hicolor,
        rather than directly on the icon path.)

        Parameters:
            path: NULL-terminated
        array of directories that are searched for icon themes

        Returns:

        """
        ...

    def set_theme_name(self, theme_name: Optional[str] = None) -> None:
        """
        Sets the name of the icon theme that the `GtkIconTheme` object uses
        overriding system configuration.

        This function cannot be called on the icon theme objects returned
        from [func@Gtk.IconTheme.get_for_display].

        Parameters:
            theme_name: name of icon theme to use instead of
        configured theme, or %NULL to unset a previously set custom theme

        Returns:

        """
        ...

@deprecated("Use [class@Gtk.GridView] instead")
class IconView(Widget, Accessible, Buildable, CellLayout, ConstraintTarget, Scrollable):
    """
    `GtkIconView` is a widget which displays data in a grid of icons.

    `GtkIconView` provides an alternative view on a `GtkTreeModel`.
    It displays the model as a grid of icons with labels. Like
    [class@Gtk.TreeView], it allows to select one or multiple items
    (depending on the selection mode, see [method@Gtk.IconView.set_selection_mode]).
    In addition to selection with the arrow keys, `GtkIconView` supports
    rubberband selection, which is controlled by dragging the pointer.

    Note that if the tree model is backed by an actual tree store (as
    opposed to a flat list where the mapping to icons is obvious),
    `GtkIconView` will only display the first level of the tree and
    ignore the tree’s branches.

    ## CSS nodes

    ```
    iconview.view
    ╰── [rubberband]
    ```

    `GtkIconView` has a single CSS node with name iconview and style class .view.
    For rubberband selection, a subnode with name rubberband is used.

    :Constructors:

    ::

        IconView(**properties)
        new() -> Gtk.Widget
        new_with_area(area:Gtk.CellArea) -> Gtk.Widget
        new_with_model(model:Gtk.TreeModel) -> Gtk.Widget

    Object GtkIconView

    Signals from GtkIconView:
      move-cursor (GtkMovementStep, gint, gboolean, gboolean) -> gboolean
      select-all ()
      unselect-all ()
      item-activated (GtkTreePath)
      selection-changed ()
      select-cursor-item ()
      toggle-cursor-item ()
      activate-cursor-item () -> gboolean

    Properties from GtkIconView:
      pixbuf-column -> gint: pixbuf-column
      text-column -> gint: text-column
      markup-column -> gint: markup-column
      selection-mode -> GtkSelectionMode: selection-mode
      item-orientation -> GtkOrientation: item-orientation
      model -> GtkTreeModel: model
      columns -> gint: columns
      item-width -> gint: item-width
      spacing -> gint: spacing
      row-spacing -> gint: row-spacing
      column-spacing -> gint: column-spacing
      margin -> gint: margin
      reorderable -> gboolean: reorderable
      tooltip-column -> gint: tooltip-column
      item-padding -> gint: item-padding
      cell-area -> GtkCellArea: cell-area
      activate-on-single-click -> gboolean: activate-on-single-click

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        CellLayout.Props,
        ConstraintTarget.Props,
        Scrollable.Props,
    ):
        activate_on_single_click: bool
        """
        The activate-on-single-click property specifies whether the \"item-activated\" signal
        will be emitted after a single click.
        """
        cell_area: CellArea
        """
        The `GtkCellArea` used to layout cell renderers for this view.

        If no area is specified when creating the icon view with gtk_icon_view_new_with_area()
        a `GtkCellAreaBox` will be used.
        """
        column_spacing: int
        """
        The column-spacing property specifies the space which is inserted between
        the columns of the icon view.
        """
        columns: int
        """
        The columns property contains the number of the columns in which the
        items should be displayed. If it is -1, the number of columns will
        be chosen automatically to fill the available area.
        """
        item_orientation: Orientation
        """
        The item-orientation property specifies how the cells (i.e. the icon and
        the text) of the item are positioned relative to each other.
        """
        item_padding: int
        """
        The item-padding property specifies the padding around each
        of the icon view's item.
        """
        item_width: int
        """
        The item-width property specifies the width to use for each item.
        If it is set to -1, the icon view will automatically determine a
        suitable item size.
        """
        margin: int
        """
        The margin property specifies the space which is inserted
        at the edges of the icon view.
        """
        markup_column: int
        """
        The ::markup-column property contains the number of the model column
        containing markup information to be displayed. The markup column must be
        of type `G_TYPE_STRING`. If this property and the :text-column property
        are both set to column numbers, it overrides the text column.
        If both are set to -1, no texts are displayed.
        """
        model: Optional[TreeModel]
        pixbuf_column: int
        """
        The ::pixbuf-column property contains the number of the model column
        containing the pixbufs which are displayed. The pixbuf column must be
        of type `GDK_TYPE_PIXBUF`. Setting this property to -1 turns off the
        display of pixbufs.
        """
        reorderable: bool
        """
        The reorderable property specifies if the items can be reordered
        by DND.
        """
        row_spacing: int
        """
        The row-spacing property specifies the space which is inserted between
        the rows of the icon view.
        """
        selection_mode: SelectionMode
        """
        The ::selection-mode property specifies the selection mode of
        icon view. If the mode is %GTK_SELECTION_MULTIPLE, rubberband selection
        is enabled, for the other modes, only keyboard selection is possible.
        """
        spacing: int
        """
        The spacing property specifies the space which is inserted between
        the cells (i.e. the icon and the text) of an item.
        """
        text_column: int
        """
        The ::text-column property contains the number of the model column
        containing the texts which are displayed. The text column must be
        of type `G_TYPE_STRING`. If this property and the :markup-column
        property are both set to -1, no texts are displayed.
        """
        tooltip_column: int

    props: Props = ...
    def __init__(
        self,
        activate_on_single_click: bool = ...,
        cell_area: CellArea = ...,
        column_spacing: int = ...,
        columns: int = ...,
        item_orientation: Orientation = ...,
        item_padding: int = ...,
        item_width: int = ...,
        margin: int = ...,
        markup_column: int = ...,
        model: Optional[TreeModel] = ...,
        pixbuf_column: int = ...,
        reorderable: bool = ...,
        row_spacing: int = ...,
        selection_mode: SelectionMode = ...,
        spacing: int = ...,
        text_column: int = ...,
        tooltip_column: int = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        hadjustment: Optional[Adjustment] = ...,
        hscroll_policy: ScrollablePolicy = ...,
        vadjustment: Optional[Adjustment] = ...,
        vscroll_policy: ScrollablePolicy = ...,
    ): ...
    @deprecated("Use [class@Gtk.GridView] instead")
    def create_drag_icon(self, path: TreePath) -> Optional[Gdk.Paintable]:
        """
        Creates a `GdkPaintable` representation of the item at @path.
        This image is used for a drag icon.

        Parameters:
            path: a `GtkTreePath` in @icon_view

        Returns:
            Optional[Gdk.Paintable]: a newly-allocated `GdkPaintable` of the drag icon.

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def enable_model_drag_dest(
        self, formats: Gdk.ContentFormats, actions: Gdk.DragAction
    ) -> None:
        """
        Turns @icon_view into a drop destination for automatic DND. Calling this
        method sets `GtkIconView`:reorderable to %FALSE.

        Parameters:
            formats: the formats that the drag will support
            actions: the bitmask of possible actions for a drag to this
        widget

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def enable_model_drag_source(
        self,
        start_button_mask: Gdk.ModifierType,
        formats: Gdk.ContentFormats,
        actions: Gdk.DragAction,
    ) -> None:
        """
        Turns @icon_view into a drag source for automatic DND. Calling this
        method sets `GtkIconView`:reorderable to %FALSE.

        Parameters:
            start_button_mask: Mask of allowed buttons to start drag
            formats: the formats that the drag will support
            actions: the bitmask of possible actions for a drag from this
        widget

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_activate_on_single_click(self) -> bool:
        """
        Gets the setting set by gtk_icon_view_set_activate_on_single_click().

        Parameters:


        Returns:
            bool: %TRUE if item-activated will be emitted on a single click

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_cell_rect(
        self, path: TreePath, cell: Optional[CellRenderer] = None
    ) -> Tuple[bool, Gdk.Rectangle]:
        """
        Fills the bounding rectangle in widget coordinates for the cell specified by
        @path and @cell. If @cell is %NULL the main cell area is used.

        This function is only valid if @icon_view is realized.

        Parameters:
            path: a `GtkTreePath`
            cell: a `GtkCellRenderer`

        Returns:
            bool: %FALSE if there is no such item, %TRUE otherwise
            Gdk.Rectangle: rectangle to fill with cell rect
        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_column_spacing(self) -> int:
        """
        Returns the value of the ::column-spacing property.

        Parameters:


        Returns:
            int: the space between columns

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_columns(self) -> int:
        """
        Returns the value of the ::columns property.

        Parameters:


        Returns:
            int: the number of columns, or -1

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_cursor(self) -> Tuple[bool, TreePath, CellRenderer]:
        """
        Fills in @path and @cell with the current cursor path and cell.
        If the cursor isn’t currently set, then *@path will be %NULL.
        If no cell currently has focus, then *@cell will be %NULL.

        The returned `GtkTreePath` must be freed with gtk_tree_path_free().

        Parameters:


        Returns:
            bool: %TRUE if the cursor is set.
            TreePath: Return location for the current
        cursor path
            CellRenderer: Return location the current
        focus cell
        """
        ...

    def get_dest_item_at_pos(
        self, drag_x: int, drag_y: int
    ) -> Optional[Tuple[TreePath, IconViewDropPosition]]:  # CHECK Wrapped function
        """
        Determines the destination item for a given position.

        Parameters:
            drag_x: the position to determine the destination item for
            drag_y: the position to determine the destination item for

        Returns:
            TreePath: Return location for the path of the item
            IconViewDropPosition: Return location for the drop position
        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_drag_dest_item(self) -> Tuple[TreePath, IconViewDropPosition]:
        """
        Gets information about the item that is highlighted for feedback.

        Parameters:


        Returns:
            TreePath: Return location for the path of
        the highlighted item
            IconViewDropPosition: Return location for the drop position
        """
        ...

    def get_item_at_pos(
        self, x: int, y: int
    ) -> Optional[Tuple[TreePath, CellRenderer]]:  # CHECK Wrapped function
        """
        Gets the path and cell for the icon at the given position.

        Parameters:
            x: The x position to be identified
            y: The y position to be identified

        Returns:
            TreePath: Return location for the path
            CellRenderer: Return location for the renderer
        responsible for the cell at (@x, @y)
        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_item_column(self, path: TreePath) -> int:
        """
        Gets the column in which the item @path is currently
        displayed. Column numbers start at 0.

        Parameters:
            path: the `GtkTreePath` of the item

        Returns:
            int: The column in which the item is displayed

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_item_orientation(self) -> Orientation:
        """
        Returns the value of the ::item-orientation property which determines
        whether the labels are drawn beside the icons instead of below.

        Parameters:


        Returns:
            Orientation: the relative position of texts and icons

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_item_padding(self) -> int:
        """
        Returns the value of the ::item-padding property.

        Parameters:


        Returns:
            int: the padding around items

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_item_row(self, path: TreePath) -> int:
        """
        Gets the row in which the item @path is currently
        displayed. Row numbers start at 0.

        Parameters:
            path: the `GtkTreePath` of the item

        Returns:
            int: The row in which the item is displayed

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_item_width(self) -> int:
        """
        Returns the value of the ::item-width property.

        Parameters:


        Returns:
            int: the width of a single item, or -1

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_margin(self) -> int:
        """
        Returns the value of the ::margin property.

        Parameters:


        Returns:
            int: the space at the borders

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_markup_column(self) -> int:
        """
        Returns the column with markup text for @icon_view.

        Parameters:


        Returns:
            int: the markup column, or -1 if it’s unset.

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_model(self) -> Optional[TreeModel]:
        """
        Returns the model the `GtkIconView` is based on. Returns %NULL if the
        model is unset.

        Parameters:


        Returns:
            Optional[TreeModel]: The currently used `GtkTreeModel`

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_path_at_pos(self, x: int, y: int) -> Optional[TreePath]:
        """
        Gets the path for the icon at the given position.

        Parameters:
            x: The x position to be identified
            y: The y position to be identified

        Returns:
            Optional[TreePath]: The `GtkTreePath` corresponding
        to the icon or %NULL if no icon exists at that position.

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_pixbuf_column(self) -> int:
        """
        Returns the column with pixbufs for @icon_view.

        Parameters:


        Returns:
            int: the pixbuf column, or -1 if it’s unset.

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_reorderable(self) -> bool:
        """
        Retrieves whether the user can reorder the list via drag-and-drop.
        See gtk_icon_view_set_reorderable().

        Parameters:


        Returns:
            bool: %TRUE if the list can be reordered.

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_row_spacing(self) -> int:
        """
        Returns the value of the ::row-spacing property.

        Parameters:


        Returns:
            int: the space between rows

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_selected_items(self) -> list[TreePath]:
        """
        Creates a list of paths of all selected items. Additionally, if you are
        planning on modifying the model after calling this function, you may
        want to convert the returned list into a list of `GtkTreeRowReferences`.
        To do this, you can use gtk_tree_row_reference_new().

        To free the return value, use `g_list_free_full`:
        |[<!-- language=\"C\" -->
        GtkWidget *icon_view = gtk_icon_view_new ();
        // Use icon_view

        GList *list = gtk_icon_view_get_selected_items (GTK_ICON_VIEW (icon_view));

        // use list

        g_list_free_full (list, (GDestroyNotify) gtk_tree_path_free);
        ]|

        Parameters:


        Returns:
            list[TreePath]: A `GList` containing a `GtkTreePath` for each selected row.

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_selection_mode(self) -> SelectionMode:
        """
        Gets the selection mode of the @icon_view.

        Parameters:


        Returns:
            SelectionMode: the current selection mode

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_spacing(self) -> int:
        """
        Returns the value of the ::spacing property.

        Parameters:


        Returns:
            int: the space between cells

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_text_column(self) -> int:
        """
        Returns the column with text for @icon_view.

        Parameters:


        Returns:
            int: the text column, or -1 if it’s unset.

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_tooltip_column(self) -> int:
        """
        Returns the column of @icon_view’s model which is being used for
        displaying tooltips on @icon_view’s rows.

        Parameters:


        Returns:
            int: the index of the tooltip column that is currently being
        used, or -1 if this is disabled.

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def get_tooltip_context(
        self, x: int, y: int, keyboard_tip: bool
    ) -> Tuple[bool, TreeModel, TreePath, TreeIter]:
        """
        This function is supposed to be used in a `GtkWidget::query-tooltip`
        signal handler for `GtkIconView`. The @x, @y and @keyboard_tip values
        which are received in the signal handler, should be passed to this
        function without modification.

        The return value indicates whether there is an icon view item at the given
        coordinates (%TRUE) or not (%FALSE) for mouse tooltips. For keyboard
        tooltips the item returned will be the cursor item. When %TRUE, then any of
        @model, @path and @iter which have been provided will be set to point to
        that row and the corresponding model.

        Parameters:
            x: the x coordinate (relative to widget coordinates)
            y: the y coordinate (relative to widget coordinates)
            keyboard_tip: whether this is a keyboard tooltip or not

        Returns:
            bool: whether or not the given tooltip context points to an item
            TreeModel: a pointer to receive a `GtkTreeModel`
            TreePath: a pointer to receive a `GtkTreePath`
            TreeIter: a pointer to receive a `GtkTreeIter`
        """
        ...

    def get_visible_range(
        self,
    ) -> Optional[Tuple[TreePath, TreePath]]:  # CHECK Wrapped function
        """
        Sets @start_path and @end_path to be the first and last visible path.
        Note that there may be invisible paths in between.

        Both paths should be freed with gtk_tree_path_free() after use.

        Parameters:


        Returns:
            TreePath: Return location for start of region
            TreePath: Return location for end of region
        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def item_activated(self, path: TreePath) -> None:
        """
        Activates the item determined by @path.

        Parameters:
            path: The `GtkTreePath` to be activated

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    @classmethod
    def new(cls) -> IconView:
        """
        Creates a new `GtkIconView` widget

        Parameters:


        Returns:
            Widget: A newly created `GtkIconView` widget

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    @classmethod
    def new_with_area(cls, area: CellArea) -> IconView:
        """
        Creates a new `GtkIconView` widget using the
        specified @area to layout cells inside the icons.

        Parameters:
            area: the `GtkCellArea` to use to layout cells

        Returns:
            Widget: A newly created `GtkIconView` widget

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    @classmethod
    def new_with_model(cls, model: TreeModel) -> IconView:
        """
        Creates a new `GtkIconView` widget with the model @model.

        Parameters:
            model: The model.

        Returns:
            Widget: A newly created `GtkIconView` widget.

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def path_is_selected(self, path: TreePath) -> bool:
        """
        Returns %TRUE if the icon pointed to by @path is currently
        selected. If @path does not point to a valid location, %FALSE is returned.

        Parameters:
            path: A `GtkTreePath` to check selection on.

        Returns:
            bool: %TRUE if @path is selected.

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def scroll_to_path(
        self, path: TreePath, use_align: bool, row_align: float, col_align: float
    ) -> None:
        """
        Moves the alignments of @icon_view to the position specified by @path.
        @row_align determines where the row is placed, and @col_align determines
        where @column is placed. Both are expected to be between 0.0 and 1.0.
        0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means
        center.

        If @use_align is %FALSE, then the alignment arguments are ignored, and the
        tree does the minimum amount of work to scroll the item onto the screen.
        This means that the item will be scrolled to the edge closest to its current
        position. If the item is currently visible on the screen, nothing is done.

        This function only works if the model is set, and @path is a valid row on
        the model. If the model changes before the @icon_view is realized, the
        centered path will be modified to reflect this change.

        Parameters:
            path: The path of the item to move to.
            use_align: whether to use alignment arguments, or %FALSE.
            row_align: The vertical alignment of the item specified by @path.
            col_align: The horizontal alignment of the item specified by @path.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def select_all(self) -> None:
        """
        Selects all the icons. @icon_view must has its selection mode set
        to %GTK_SELECTION_MULTIPLE.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def select_path(self, path: TreePath) -> None:
        """
        Selects the row at @path.

        Parameters:
            path: The `GtkTreePath` to be selected.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def selected_foreach(self, func: Callable[..., None], *data: Any) -> None:
        """
        Calls a function for each selected icon. Note that the model or
        selection cannot be modified from within this function.

        Parameters:
            func: The function to call for each selected icon.
            data: User data to pass to the function.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_activate_on_single_click(self, single: bool) -> None:
        """
        Causes the `GtkIconView`::item-activated signal to be emitted on
        a single click instead of a double click.

        Parameters:
            single: %TRUE to emit item-activated on a single click

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_column_spacing(self, column_spacing: int) -> None:
        """
        Sets the ::column-spacing property which specifies the space
        which is inserted between the columns of the icon view.

        Parameters:
            column_spacing: the column spacing

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_columns(self, columns: int) -> None:
        """
        Sets the ::columns property which determines in how
        many columns the icons are arranged. If @columns is
        -1, the number of columns will be chosen automatically
        to fill the available area.

        Parameters:
            columns: the number of columns

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_cursor(
        self, path: TreePath, cell: Optional[CellRenderer], start_editing: bool
    ) -> None:
        """
        Sets the current keyboard focus to be at @path, and selects it. This is
        useful when you want to focus the user’s attention on a particular item.
        If @cell is not %NULL, then focus is given to the cell specified by
        it. Additionally, if @start_editing is %TRUE, then editing should be
        started in the specified cell.

        This function is often followed by `gtk_widget_grab_focus
        (icon_view)` in order to give keyboard focus to the widget.
        Please note that editing can only happen when the widget is realized.

        Parameters:
            path: A `GtkTreePath`
            cell: One of the cell renderers of @icon_view
            start_editing: %TRUE if the specified cell should start being edited.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_drag_dest_item(
        self, path: Optional[TreePath], pos: IconViewDropPosition
    ) -> None:
        """
        Sets the item that is highlighted for feedback.

        Parameters:
            path: The path of the item to highlight
            pos: Specifies where to drop, relative to the item

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_item_orientation(self, orientation: Orientation) -> None:
        """
        Sets the ::item-orientation property which determines whether the labels
        are drawn beside the icons instead of below.

        Parameters:
            orientation: the relative position of texts and icons

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_item_padding(self, item_padding: int) -> None:
        """
        Sets the `GtkIconView`:item-padding property which specifies the padding
        around each of the icon view’s items.

        Parameters:
            item_padding: the item padding

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_item_width(self, item_width: int) -> None:
        """
        Sets the ::item-width property which specifies the width
        to use for each item. If it is set to -1, the icon view will
        automatically determine a suitable item size.

        Parameters:
            item_width: the width for each item

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_margin(self, margin: int) -> None:
        """
        Sets the ::margin property which specifies the space
        which is inserted at the top, bottom, left and right
        of the icon view.

        Parameters:
            margin: the margin

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_markup_column(self, column: int) -> None:
        """
        Sets the column with markup information for @icon_view to be
        @column. The markup column must be of type `G_TYPE_STRING`.
        If the markup column is set to something, it overrides
        the text column set by gtk_icon_view_set_text_column().

        Parameters:
            column: A column in the currently used model, or -1 to display no text

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_model(self, model: Optional[TreeModel] = None) -> None:
        """
        Sets the model for a `GtkIconView`.
        If the @icon_view already has a model set, it will remove
        it before setting the new model. If @model is %NULL, then
        it will unset the old model.

        Parameters:
            model: The model.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_pixbuf_column(self, column: int) -> None:
        """
        Sets the column with pixbufs for @icon_view to be @column. The pixbuf
        column must be of type `GDK_TYPE_PIXBUF`

        Parameters:
            column: A column in the currently used model, or -1 to disable

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_reorderable(self, reorderable: bool) -> None:
        """
        This function is a convenience function to allow you to reorder models that
        support the `GtkTreeDragSourceIface` and the `GtkTreeDragDestIface`. Both
        `GtkTreeStore` and `GtkListStore` support these. If @reorderable is %TRUE, then
        the user can reorder the model by dragging and dropping rows. The
        developer can listen to these changes by connecting to the model's
        row_inserted and row_deleted signals. The reordering is implemented by setting up
        the icon view as a drag source and destination. Therefore, drag and
        drop can not be used in a reorderable view for any other purpose.

        This function does not give you any degree of control over the order -- any
        reordering is allowed. If more control is needed, you should probably
        handle drag and drop manually.

        Parameters:
            reorderable: %TRUE, if the list of items can be reordered.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_row_spacing(self, row_spacing: int) -> None:
        """
        Sets the ::row-spacing property which specifies the space
        which is inserted between the rows of the icon view.

        Parameters:
            row_spacing: the row spacing

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_selection_mode(self, mode: SelectionMode) -> None:
        """
        Sets the selection mode of the @icon_view.

        Parameters:
            mode: The selection mode

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_spacing(self, spacing: int) -> None:
        """
        Sets the ::spacing property which specifies the space
        which is inserted between the cells (i.e. the icon and
        the text) of an item.

        Parameters:
            spacing: the spacing

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_text_column(self, column: int) -> None:
        """
        Sets the column with text for @icon_view to be @column. The text
        column must be of type `G_TYPE_STRING`.

        Parameters:
            column: A column in the currently used model, or -1 to display no text

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_tooltip_cell(
        self, tooltip: Tooltip, path: TreePath, cell: Optional[CellRenderer] = None
    ) -> None:
        """
        Sets the tip area of @tooltip to the area which @cell occupies in
        the item pointed to by @path. See also gtk_tooltip_set_tip_area().

        See also gtk_icon_view_set_tooltip_column() for a simpler alternative.

        Parameters:
            tooltip: a `GtkTooltip`
            path: a `GtkTreePath`
            cell: a `GtkCellRenderer`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_tooltip_column(self, column: int) -> None:
        """
        If you only plan to have simple (text-only) tooltips on full items, you
        can use this function to have `GtkIconView` handle these automatically
        for you. @column should be set to the column in @icon_view’s model
        containing the tooltip texts, or -1 to disable this feature.

        When enabled, `GtkWidget:has-tooltip` will be set to %TRUE and
        @icon_view will connect a `GtkWidget::query-tooltip` signal handler.

        Note that the signal handler sets the text with gtk_tooltip_set_markup(),
        so &, <, etc have to be escaped in the text.

        Parameters:
            column: an integer, which is a valid column number for @icon_view’s model

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def set_tooltip_item(self, tooltip: Tooltip, path: TreePath) -> None:
        """
        Sets the tip area of @tooltip to be the area covered by the item at @path.
        See also gtk_icon_view_set_tooltip_column() for a simpler alternative.
        See also gtk_tooltip_set_tip_area().

        Parameters:
            tooltip: a `GtkTooltip`
            path: a `GtkTreePath`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def unselect_all(self) -> None:
        """
        Unselects all the icons.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def unselect_path(self, path: TreePath) -> None:
        """
        Unselects the row at @path.

        Parameters:
            path: The `GtkTreePath` to be unselected.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def unset_model_drag_dest(self) -> None:
        """
        Undoes the effect of gtk_icon_view_enable_model_drag_dest(). Calling this
        method sets `GtkIconView`:reorderable to %FALSE.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.GridView] instead")
    def unset_model_drag_source(self) -> None:
        """
        Undoes the effect of gtk_icon_view_enable_model_drag_source(). Calling this
        method sets `GtkIconView`:reorderable to %FALSE.

        Parameters:


        Returns:

        """
        ...

class Image(Widget, Accessible, Buildable, ConstraintTarget):
    """
    The `GtkImage` widget displays an image.

    ![An example GtkImage](image.png)

    Various kinds of object can be displayed as an image; most typically,
    you would load a `GdkTexture` from a file, using the convenience function
    [ctor@Gtk.Image.new_from_file], for instance:

    ```c
    GtkWidget *image = gtk_image_new_from_file (\"myfile.png\");
    ```

    If the file isn’t loaded successfully, the image will contain a
    “broken image” icon similar to that used in many web browsers.

    If you want to handle errors in loading the file yourself,
    for example by displaying an error message, then load the image with
    [ctor@Gdk.Texture.new_from_file], then create the `GtkImage` with
    [ctor@Gtk.Image.new_from_paintable].

    Sometimes an application will want to avoid depending on external data
    files, such as image files. See the documentation of `GResource` inside
    GIO, for details. In this case, [property@Gtk.Image:resource],
    [ctor@Gtk.Image.new_from_resource], and [method@Gtk.Image.set_from_resource]
    should be used.

    `GtkImage` displays its image as an icon, with a size that is determined
    by the application. See [class@Gtk.Picture] if you want to show an image
    at is actual size.

    ## CSS nodes

    `GtkImage` has a single CSS node with the name `image`. The style classes
    `.normal-icons` or `.large-icons` may appear, depending on the
    [property@Gtk.Image:icon-size] property.

    ## Accessibility

    `GtkImage` uses the `GTK_ACCESSIBLE_ROLE_IMG` role.

    :Constructors:

    ::

        Image(**properties)
        new() -> Gtk.Widget
        new_from_file(filename:str) -> Gtk.Widget
        new_from_gicon(icon:Gio.Icon) -> Gtk.Widget
        new_from_icon_name(icon_name:str=None) -> Gtk.Widget
        new_from_paintable(paintable:Gdk.Paintable=None) -> Gtk.Widget
        new_from_pixbuf(pixbuf:GdkPixbuf.Pixbuf=None) -> Gtk.Widget
        new_from_resource(resource_path:str) -> Gtk.Widget

    Object GtkImage

    Properties from GtkImage:
      paintable -> GdkPaintable: paintable
      file -> gchararray: file
      icon-size -> GtkIconSize: icon-size
      pixel-size -> gint: pixel-size
      icon-name -> gchararray: icon-name
      storage-type -> GtkImageType: storage-type
      gicon -> GIcon: gicon
      resource -> gchararray: resource
      use-fallback -> gboolean: use-fallback

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        file: str
        """
        The `GFile` to display.
        """
        gicon: Optional[Gio.Icon]
        """
        The `GIcon` displayed in the GtkImage.

        For themed icons, If the icon theme is changed, the image will be updated
        automatically.
        """
        icon_name: Optional[str]
        """
        The name of the icon in the icon theme.

        If the icon theme is changed, the image will be updated automatically.
        """
        icon_size: IconSize
        """
        The symbolic size to display icons at.
        """
        paintable: Optional[Gdk.Paintable]
        """
        The `GdkPaintable` to display.
        """
        pixel_size: int
        """
        The size in pixels to display icons at.

        If set to a value != -1, this property overrides the
        [property@Gtk.Image:icon-size] property for images of type
        `GTK_IMAGE_ICON_NAME`.
        """
        resource: str
        """
        A path to a resource file to display.
        """
        storage_type: ImageType
        """
        The representation being used for image data.
        """
        use_fallback: bool
        """
        Whether the icon displayed in the `GtkImage` will use
        standard icon names fallback.

        The value of this property is only relevant for images of type
        %GTK_IMAGE_ICON_NAME and %GTK_IMAGE_GICON.
        """

    props: Props = ...
    def __init__(
        self,
        file: str = ...,
        gicon: Gio.Icon = ...,
        icon_name: str = ...,
        icon_size: IconSize = ...,
        paintable: Gdk.Paintable = ...,
        pixel_size: int = ...,
        resource: str = ...,
        use_fallback: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def clear(self) -> None:
        """
        Resets the image to be empty.

        Parameters:


        Returns:

        """
        ...

    def get_gicon(self) -> Optional[Gio.Icon]:
        """
        Gets the `GIcon` being displayed by the `GtkImage`.

        The storage type of the image must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_GICON (see [method@Gtk.Image.get_storage_type]).
        The caller of this function does not own a reference to the
        returned `GIcon`.

        Parameters:


        Returns:
            Optional[Gio.Icon]: a `GIcon`

        """
        ...

    def get_icon_name(self) -> Optional[str]:
        """
        Gets the icon name and size being displayed by the `GtkImage`.

        The storage type of the image must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_ICON_NAME (see [method@Gtk.Image.get_storage_type]).
        The returned string is owned by the `GtkImage` and should not
        be freed.

        Parameters:


        Returns:
            Optional[str]: the icon name

        """
        ...

    def get_icon_size(self) -> IconSize:
        """
        Gets the icon size used by the @image when rendering icons.

        Parameters:


        Returns:
            IconSize: the image size used by icons

        """
        ...

    def get_paintable(self) -> Optional[Gdk.Paintable]:
        """
        Gets the image `GdkPaintable` being displayed by the `GtkImage`.

        The storage type of the image must be %GTK_IMAGE_EMPTY or
        %GTK_IMAGE_PAINTABLE (see [method@Gtk.Image.get_storage_type]).
        The caller of this function does not own a reference to the
        returned paintable.

        Parameters:


        Returns:
            Optional[Gdk.Paintable]: the displayed paintable

        """
        ...

    def get_pixel_size(self) -> int:
        """
        Gets the pixel size used for named icons.

        Parameters:


        Returns:
            int: the pixel size used for named icons.

        """
        ...

    def get_storage_type(self) -> ImageType:
        """
        Gets the type of representation being used by the `GtkImage`
        to store image data.

        If the `GtkImage` has no image data, the return value will
        be %GTK_IMAGE_EMPTY.

        Parameters:


        Returns:
            ImageType: image representation being used

        """
        ...

    @classmethod
    def new(cls) -> Image:
        """
        Creates a new empty `GtkImage` widget.

        Parameters:


        Returns:
            Widget: a newly created `GtkImage` widget.

        """
        ...

    @classmethod
    def new_from_file(cls, filename: str) -> Image:
        """
        Creates a new `GtkImage` displaying the file @filename.

        If the file isn’t found or can’t be loaded, the resulting `GtkImage`
        will display a “broken image” icon. This function never returns %NULL,
        it always returns a valid `GtkImage` widget.

        If you need to detect failures to load the file, use
        [ctor@Gdk.Texture.new_from_file] to load the file yourself,
        then create the `GtkImage` from the texture.

        The storage type (see [method@Gtk.Image.get_storage_type])
        of the returned image is not defined, it will be whatever
        is appropriate for displaying the file.

        Parameters:
            filename: a filename

        Returns:
            Widget: a new `GtkImage`

        """
        ...

    @classmethod
    def new_from_gicon(cls, icon: Gio.Icon) -> Image:
        """
        Creates a `GtkImage` displaying an icon from the current icon theme.

        If the icon name isn’t known, a “broken image” icon will be
        displayed instead. If the current icon theme is changed, the icon
        will be updated appropriately.

        Parameters:
            icon: an icon

        Returns:
            Widget: a new `GtkImage` displaying the themed icon

        """
        ...

    @classmethod
    def new_from_icon_name(cls, icon_name: Optional[str] = None) -> Image:
        """
        Creates a `GtkImage` displaying an icon from the current icon theme.

        If the icon name isn’t known, a “broken image” icon will be
        displayed instead. If the current icon theme is changed, the icon
        will be updated appropriately.

        Parameters:
            icon_name: an icon name

        Returns:
            Widget: a new `GtkImage` displaying the themed icon

        """
        ...

    @classmethod
    def new_from_paintable(cls, paintable: Optional[Gdk.Paintable] = None) -> Image:
        """
        Creates a new `GtkImage` displaying @paintable.

        The `GtkImage` does not assume a reference to the paintable; you still
        need to unref it if you own references. `GtkImage` will add its own
        reference rather than adopting yours.

        The `GtkImage` will track changes to the @paintable and update
        its size and contents in response to it.

        Parameters:
            paintable: a `GdkPaintable`

        Returns:
            Widget: a new `GtkImage`

        """
        ...

    @deprecated(
        "Use [ctor@Gtk.Image.new_from_paintable] and [ctor@Gdk.Texture.new_for_pixbuf] instead"
    )
    @classmethod
    def new_from_pixbuf(cls, pixbuf: Optional[GdkPixbuf.Pixbuf] = None) -> Image:
        """
        Creates a new `GtkImage` displaying @pixbuf.

        The `GtkImage` does not assume a reference to the pixbuf; you still
        need to unref it if you own references. `GtkImage` will add its own
        reference rather than adopting yours.

        This is a helper for [ctor@Gtk.Image.new_from_paintable], and you can't
        get back the exact pixbuf once this is called, only a texture.

        Note that this function just creates an `GtkImage` from the pixbuf.
        The `GtkImage` created will not react to state changes. Should you
        want that, you should use [ctor@Gtk.Image.new_from_icon_name].

        Parameters:
            pixbuf: a `GdkPixbuf`

        Returns:
            Widget: a new `GtkImage`

        """
        ...

    @classmethod
    def new_from_resource(cls, resource_path: str) -> Image:
        """
        Creates a new `GtkImage` displaying the resource file @resource_path.

        If the file isn’t found or can’t be loaded, the resulting `GtkImage` will
        display a “broken image” icon. This function never returns %NULL,
        it always returns a valid `GtkImage` widget.

        If you need to detect failures to load the file, use
        [ctor@GdkPixbuf.Pixbuf.new_from_file] to load the file yourself,
        then create the `GtkImage` from the pixbuf.

        The storage type (see [method@Gtk.Image.get_storage_type]) of
        the returned image is not defined, it will be whatever is
        appropriate for displaying the file.

        Parameters:
            resource_path: a resource path

        Returns:
            Widget: a new `GtkImage`

        """
        ...

    def set_from_file(self, filename: Optional[str] = None) -> None:
        """
        Sets a `GtkImage` to show a file.

        See [ctor@Gtk.Image.new_from_file] for details.

        Parameters:
            filename: a filename

        Returns:

        """
        ...

    def set_from_gicon(self, icon: Gio.Icon) -> None:
        """
        Sets a `GtkImage` to show a `GIcon`.

        See [ctor@Gtk.Image.new_from_gicon] for details.

        Parameters:
            icon: an icon

        Returns:

        """
        ...

    def set_from_icon_name(self, icon_name: Optional[str] = None) -> None:
        """
        Sets a `GtkImage` to show a named icon.

        See [ctor@Gtk.Image.new_from_icon_name] for details.

        Parameters:
            icon_name: an icon name

        Returns:

        """
        ...

    def set_from_paintable(self, paintable: Optional[Gdk.Paintable] = None) -> None:
        """
        Sets a `GtkImage` to show a `GdkPaintable`.

        See [ctor@Gtk.Image.new_from_paintable] for details.

        Parameters:
            paintable: a `GdkPaintable`

        Returns:

        """
        ...

    @deprecated("Use [method@Gtk.Image.set_from_paintable] instead")
    def set_from_pixbuf(self, pixbuf: Optional[GdkPixbuf.Pixbuf] = None) -> None:
        """
        Sets a `GtkImage` to show a `GdkPixbuf`.

        See [ctor@Gtk.Image.new_from_pixbuf] for details.

        Note: This is a helper for [method@Gtk.Image.set_from_paintable],
        and you can't get back the exact pixbuf once this is called,
        only a paintable.

        Parameters:
            pixbuf: a `GdkPixbuf` or `NULL`

        Returns:

        """
        ...

    def set_from_resource(self, resource_path: Optional[str] = None) -> None:
        """
        Sets a `GtkImage` to show a resource.

        See [ctor@Gtk.Image.new_from_resource] for details.

        Parameters:
            resource_path: a resource path

        Returns:

        """
        ...

    def set_icon_size(self, icon_size: IconSize) -> None:
        """
        Suggests an icon size to the theme for named icons.

        Parameters:
            icon_size: the new icon size

        Returns:

        """
        ...

    def set_pixel_size(self, pixel_size: int) -> None:
        """
        Sets the pixel size to use for named icons.

        If the pixel size is set to a value != -1, it is used instead
        of the icon size set by [method@Gtk.Image.set_from_icon_name].

        Parameters:
            pixel_size: the new pixel size

        Returns:

        """
        ...

@deprecated(
    'There is no replacement in GTK for an "info bar" widget; you can use [class@Gtk.Revealer] with a [class@Gtk.Box] containing a [class@Gtk.Label] and an optional [class@Gtk.Button], according to your application\'s design.'
)
class InfoBar(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkInfoBar` can be used to show messages to the user without a dialog.

    ![An example GtkInfoBar](info-bar.png)

    It is often temporarily shown at the top or bottom of a document.
    In contrast to [class@Gtk.Dialog], which has an action area at the
    bottom, `GtkInfoBar` has an action area at the side.

    The API of `GtkInfoBar` is very similar to `GtkDialog`, allowing you
    to add buttons to the action area with [method@Gtk.InfoBar.add_button]
    or [ctor@Gtk.InfoBar.new_with_buttons]. The sensitivity of action widgets
    can be controlled with [method@Gtk.InfoBar.set_response_sensitive].

    To add widgets to the main content area of a `GtkInfoBar`, use
    [method@Gtk.InfoBar.add_child].

    Similar to [class@Gtk.MessageDialog], the contents of a `GtkInfoBar`
    can by classified as error message, warning, informational message, etc,
    by using [method@Gtk.InfoBar.set_message_type]. GTK may use the message
    type to determine how the message is displayed.

    A simple example for using a `GtkInfoBar`:
    ```c
    GtkWidget *message_label;
    GtkWidget *widget;
    GtkWidget *grid;
    GtkInfoBar *bar;

    // set up info bar
    widget = gtk_info_bar_new ();
    bar = GTK_INFO_BAR (widget);
    grid = gtk_grid_new ();

    message_label = gtk_label_new (\"\");
    gtk_info_bar_add_child (bar, message_label);
    gtk_info_bar_add_button (bar,
    _(\"_OK\"),
    GTK_RESPONSE_OK);
    g_signal_connect (bar,
    \"response\",
    G_CALLBACK (gtk_widget_hide),
    NULL);
    gtk_grid_attach (GTK_GRID (grid),
    widget,
    0, 2, 1, 1);

    // ...

    // show an error message
    gtk_label_set_text (GTK_LABEL (message_label), \"An error occurred!\");
    gtk_info_bar_set_message_type (bar, GTK_MESSAGE_ERROR);
    gtk_widget_show (bar);
    ```

    # GtkInfoBar as GtkBuildable

    `GtkInfoBar` supports a custom `<action-widgets>` element, which can contain
    multiple `<action-widget>` elements. The “response” attribute specifies a
    numeric response, and the content of the element is the id of widget
    (which should be a child of the dialogs @action_area).

    `GtkInfoBar` supports adding action widgets by specifying “action” as
    the “type” attribute of a `<child>` element. The widget will be added
    either to the action area. The response id has to be associated
    with the action widget using the `<action-widgets>` element.

    # CSS nodes

    `GtkInfoBar` has a single CSS node with name infobar. The node may get
    one of the style classes .info, .warning, .error or .question, depending
    on the message type.
    If the info bar shows a close button, that button will have the .close
    style class applied.

    :Constructors:

    ::

        InfoBar(**properties)
        new() -> Gtk.Widget

    Object GtkInfoBar

    Signals from GtkInfoBar:
      response (gint)
      close ()

    Properties from GtkInfoBar:
      message-type -> GtkMessageType: message-type
      show-close-button -> gboolean: show-close-button
      revealed -> gboolean: revealed

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        message_type: MessageType
        """
        The type of the message.

        The type may be used to determine the appearance of the info bar.
        """
        revealed: bool
        """
        Whether the info bar shows its contents.
        """
        show_close_button: bool
        """
        Whether to include a standard close button.
        """

    props: Props = ...
    def __init__(
        self,
        message_type: MessageType = ...,
        revealed: bool = ...,
        show_close_button: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    @deprecated("This method is deprecated")
    def add_action_widget(self, child: Widget, response_id: int) -> None:
        """
        Add an activatable widget to the action area of a `GtkInfoBar`.

        This also connects a signal handler that will emit the
        [signal@Gtk.InfoBar::response] signal on the message area
        when the widget is activated. The widget is appended to the
        end of the message areas action area.

        Parameters:
            child: an activatable widget
            response_id: response ID for @child

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def add_button(self, button_text: str, response_id: int) -> Button:
        """
        Adds a button with the given text.

        Clicking the button will emit the [signal@Gtk.InfoBar::response]
        signal with the given response_id. The button is appended to the
        end of the info bar's action area. The button widget is returned,
        but usually you don't need it.

        Parameters:
            button_text: text of button
            response_id: response ID for the button

        Returns:
            Button: the `GtkButton` widget
        that was added

        """
        ...

    @deprecated("This method is deprecated")
    def add_child(self, widget: Widget) -> None:
        """
        Adds a widget to the content area of the info bar.

        Parameters:
            widget: the child to be added

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def get_message_type(self) -> MessageType:
        """
        Returns the message type of the message area.

        Parameters:


        Returns:
            MessageType: the message type of the message area.

        """
        ...

    @deprecated("This method is deprecated")
    def get_revealed(self) -> bool:
        """
        Returns whether the info bar is currently revealed.

        Parameters:


        Returns:
            bool: the current value of the [property@Gtk.InfoBar:revealed] property

        """
        ...

    @deprecated("This method is deprecated")
    def get_show_close_button(self) -> bool:
        """
        Returns whether the widget will display a standard close button.

        Parameters:


        Returns:
            bool: %TRUE if the widget displays standard close button

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> InfoBar:
        """
        Creates a new `GtkInfoBar` object.

        Parameters:


        Returns:
            Widget: a new `GtkInfoBar` object

        """
        ...

    @deprecated("This method is deprecated")
    def remove_action_widget(self, widget: Widget) -> None:
        """
        Removes a widget from the action area of @info_bar.

        The widget must have been put there by a call to
        [method@Gtk.InfoBar.add_action_widget] or [method@Gtk.InfoBar.add_button].

        Parameters:
            widget: an action widget to remove

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def remove_child(self, widget: Widget) -> None:
        """
        Removes a widget from the content area of the info bar.

        Parameters:
            widget: a child that has been added to the content area

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def response(self, response_id: int) -> None:
        """
        Emits the “response” signal with the given @response_id.

        Parameters:
            response_id: a response ID

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_default_response(self, response_id: int) -> None:
        """
        Sets the last widget in the info bar’s action area with
        the given response_id as the default widget for the dialog.

        Pressing “Enter” normally activates the default widget.

        Note that this function currently requires @info_bar to
        be added to a widget hierarchy.

        Parameters:
            response_id: a response ID

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_message_type(self, message_type: MessageType) -> None:
        """
        Sets the message type of the message area.

        GTK uses this type to determine how the message is displayed.

        Parameters:
            message_type: a `GtkMessageType`

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_response_sensitive(self, response_id: int, setting: bool) -> None:
        """
        Sets the sensitivity of action widgets for @response_id.

        Calls `gtk_widget_set_sensitive (widget, setting)` for each
        widget in the info bars’s action area with the given @response_id.
        A convenient way to sensitize/desensitize buttons.

        Parameters:
            response_id: a response ID
            setting: TRUE for sensitive

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_revealed(self, revealed: bool) -> None:
        """
        Sets whether the `GtkInfoBar` is revealed.

        Changing this will make @info_bar reveal or conceal
        itself via a sliding transition.

        Note: this does not show or hide @info_bar in the
        [property@Gtk.Widget:visible] sense, so revealing has no effect
        if [property@Gtk.Widget:visible] is %FALSE.

        Parameters:
            revealed: The new value of the property

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_show_close_button(self, setting: bool) -> None:
        """
        If true, a standard close button is shown.

        When clicked it emits the response %GTK_RESPONSE_CLOSE.

        Parameters:
            setting: %TRUE to include a close button

        Returns:

        """
        ...

class Inscription(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkInscription` is a widget to show text in a predefined area.

    You likely want to use `GtkLabel` instead as this widget is intended only
    for a small subset of use cases. The main scenario envisaged is inside lists
    such as `GtkColumnView`.

    While a `GtkLabel` sizes itself depending on the text that is displayed,
    `GtkInscription` is given a size and inscribes the given text into that
    space as well as it can.

    Users of this widget should take care to plan behaviour for the common case
    where the text doesn't fit exactly in the allocated space.

    :Constructors:

    ::

        Inscription(**properties)
        new(text:str=None) -> Gtk.Widget

    Object GtkInscription

    Properties from GtkInscription:
      attributes -> PangoAttrList: attributes
      markup -> gchararray: markup
      min-chars -> guint: min-chars
      min-lines -> guint: min-lines
      nat-chars -> guint: nat-chars
      nat-lines -> guint: nat-lines
      text -> gchararray: text
      text-overflow -> GtkInscriptionOverflow: text-overflow
      wrap-mode -> PangoWrapMode: wrap-mode
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        attributes: Optional[Pango.AttrList]
        """
        A list of style attributes to apply to the text of the inscription.
        """
        min_chars: int
        """
        The number of characters that should fit into the inscription at minimum.

        This influences the requested width, not the width actually given to the widget,
        which might turn out to be larger.

        Note that this is an approximate character width, so some characters might be
        wider and some might be thinner, so do not expect the number of characters to
        exactly match.

        If you set this property to 0, the inscription will not request any width at all
        and its width will be determined entirely by its surroundings.
        """
        min_lines: int
        """
        The number of lines that should fit into the inscription at minimum.

        This influences the requested height, not the height actually given to the widget,
        which might turn out to be larger.

        Note that this is an approximate line height, so if the text uses things like fancy
        Unicode or attribute that influence the height, the text might not fit.

        If you set this property to 0, the inscription will not request any height at all
        and its height will be determined entirely by its surroundings.
        """
        nat_chars: int
        """
        The number of characters that should ideally fit into the inscription.

        This influences the requested width, not the width actually given to the widget.
        The widget might turn out larger as well as smaller.

        If this property is set to a value smaller than [property@Gtk.Inscription:min-chars],
        that value will be used. In particular, for the default value of 0, this will always
        be the case.
        """
        nat_lines: int
        """
        The number of lines that should ideally fit into the inscription.

        This influences the requested height, not the height actually given to the widget.
        The widget might turn out larger as well as smaller.

        If this property is set to a value smaller than [property@Gtk.Inscription:min-lines],
        that value will be used. In particular, for the default value of 0, this will always
        be the case.
        """
        text: Optional[str]
        """
        The displayed text.
        """
        text_overflow: InscriptionOverflow
        """
        The overflow method to use for the text.
        """
        wrap_mode: Pango.WrapMode
        """
        Controls how the line wrapping is done.

        Note that unlike `GtkLabel`, the default here is %PANGO_WRAP_WORD_CHAR.
        """
        xalign: float
        """
        The horizontal alignment of the text inside the allocated size.

        Compare this to [property@Gtk.Widget:halign], which determines how the
        inscription's size allocation is positioned in the available space.
        """
        yalign: float
        """
        The vertical alignment of the text inside the allocated size.

        Compare this to [property@Gtk.Widget:valign], which determines how the
        inscription's size allocation is positioned in the available space.
        """
        markup: Optional[str]
        """
        Utility property that sets both the [property@Gtk.Inscription:text] and
        [property@Gtk.Inscription:attributes] properties, mainly intended for use in
        GtkBuilder ui files to ease translation support and bindings.

        This function uses [func@Pango.parse_markup] to parse the markup into text and
        attributes. The markup must be valid. If you cannot ensure that, consider using
        [func@Pango.parse_markup] and setting the two properties yourself.
        """

    props: Props = ...
    def __init__(
        self,
        attributes: Optional[Pango.AttrList] = ...,
        markup: Optional[str] = ...,
        min_chars: int = ...,
        min_lines: int = ...,
        nat_chars: int = ...,
        nat_lines: int = ...,
        text: Optional[str] = ...,
        text_overflow: InscriptionOverflow = ...,
        wrap_mode: Pango.WrapMode = ...,
        xalign: float = ...,
        yalign: float = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_attributes(self) -> Optional[Pango.AttrList]:
        """
        Gets the inscription's attribute list.

        Parameters:


        Returns:
            Optional[Pango.AttrList]: the attribute list

        """
        ...

    def get_min_chars(self) -> int:
        """
        Gets the `min-chars` of the inscription.

        See the [property@Gtk.Inscription:min-chars] property.

        Parameters:


        Returns:
            int: the min-chars property

        """
        ...

    def get_min_lines(self) -> int:
        """
        Gets the `min-lines` of the inscription.

        See the [property@Gtk.Inscription:min-lines] property.

        Parameters:


        Returns:
            int: the min-lines property

        """
        ...

    def get_nat_chars(self) -> int:
        """
        Gets the `nat-chars` of the inscription.

        See the [property@Gtk.Inscription:nat-chars] property.

        Parameters:


        Returns:
            int: the nat-chars property

        """
        ...

    def get_nat_lines(self) -> int:
        """
        Gets the `nat-lines` of the inscription.

        See the [property@Gtk.Inscription:nat-lines] property.

        Parameters:


        Returns:
            int: the nat-lines property

        """
        ...

    def get_text(self) -> Optional[str]:
        """
        Gets the text that is displayed.

        Parameters:


        Returns:
            Optional[str]: The displayed text

        """
        ...

    def get_text_overflow(self) -> InscriptionOverflow:
        """
        Gets the inscription's overflow method.

        Parameters:


        Returns:
            InscriptionOverflow: the overflow method

        """
        ...

    def get_wrap_mode(self) -> Pango.WrapMode:
        """
        Returns line wrap mode used by the inscription.

        See [method@Gtk.Inscription.set_wrap_mode].

        Parameters:


        Returns:
            Pango.WrapMode: the line wrap mode

        """
        ...

    def get_xalign(self) -> float:
        """
        Gets the `xalign` of the inscription.

        See the [property@Gtk.Inscription:xalign] property.

        Parameters:


        Returns:
            float: the xalign property

        """
        ...

    def get_yalign(self) -> float:
        """
        Gets the `yalign` of the inscription.

        See the [property@Gtk.Inscription:yalign] property.

        Parameters:


        Returns:
            float: the yalign property

        """
        ...

    @classmethod
    def new(cls, text: Optional[str] = None) -> Inscription:
        """
        Creates a new `GtkInscription` with the given text.

        Parameters:
            text: The text to display.

        Returns:
            Widget: a new `GtkInscription`

        """
        ...

    def set_attributes(self, attrs: Optional[Pango.AttrList] = None) -> None:
        """
        Apply attributes to the inscription text.

        These attributes will not be evaluated for sizing the inscription.

        Parameters:
            attrs: a [struct@Pango.AttrList]

        Returns:

        """
        ...

    def set_markup(self, markup: Optional[str] = None) -> None:
        """
        Utility function to set the text and attributes to be displayed.

        See the [property@Gtk.Inscription:markup] property.

        Parameters:
            markup: The markup to display

        Returns:

        """
        ...

    def set_min_chars(self, min_chars: int) -> None:
        """
        Sets the `min-chars` of the inscription.

        See the [property@Gtk.Inscription:min-chars] property.

        Parameters:
            min_chars: the minimum number of characters that should fit, approximately

        Returns:

        """
        ...

    def set_min_lines(self, min_lines: int) -> None:
        """
        Sets the `min-lines` of the inscription.

        See the [property@Gtk.Inscription:min-lines] property.

        Parameters:
            min_lines: the minimum number of lines that should fit, approximately

        Returns:

        """
        ...

    def set_nat_chars(self, nat_chars: int) -> None:
        """
        Sets the `nat-chars` of the inscription.

        See the [property@Gtk.Inscription:nat-chars] property.

        Parameters:
            nat_chars: the number of characters that should ideally fit, approximately

        Returns:

        """
        ...

    def set_nat_lines(self, nat_lines: int) -> None:
        """
        Sets the `nat-lines` of the inscription.

        See the [property@Gtk.Inscription:nat-lines] property.

        Parameters:
            nat_lines: the number of lines that should ideally fit

        Returns:

        """
        ...

    def set_text(self, text: Optional[str] = None) -> None:
        """
        Sets the text to be displayed.

        Parameters:
            text: The text to display

        Returns:

        """
        ...

    def set_text_overflow(self, overflow: InscriptionOverflow) -> None:
        """
        Sets what to do when the text doesn't fit.

        Parameters:
            overflow: the overflow method to use

        Returns:

        """
        ...

    def set_wrap_mode(self, wrap_mode: Pango.WrapMode) -> None:
        """
        Controls how line wrapping is done.

        Parameters:
            wrap_mode: the line wrapping mode

        Returns:

        """
        ...

    def set_xalign(self, xalign: float) -> None:
        """
        Sets the `xalign` of the inscription.

        See the [property@Gtk.Inscription:xalign] property.

        Parameters:
            xalign: the new xalign value, between 0 and 1

        Returns:

        """
        ...

    def set_yalign(self, yalign: float) -> None:
        """
        Sets the `yalign` of the inscription.

        See the [property@Gtk.Inscription:yalign] property.

        Parameters:
            yalign: the new yalign value, between 0 and 1

        Returns:

        """
        ...

class InscriptionClass(GObject.GPointer):
    """
    :Constructors:

    ::

        InscriptionClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class KeyvalTrigger(ShortcutTrigger):
    """
    A `GtkShortcutTrigger` that triggers when a specific keyval and modifiers are pressed.

    :Constructors:

    ::

        KeyvalTrigger(**properties)
        new(keyval:int, modifiers:Gdk.ModifierType) -> Gtk.ShortcutTrigger

    Object GtkKeyvalTrigger

    Properties from GtkKeyvalTrigger:
      keyval -> guint: keyval
      modifiers -> GdkModifierType: modifiers

    Signals from GObject:
      notify (GParam)
    """

    class Props(ShortcutTrigger.Props):
        keyval: int
        """
        The key value for the trigger.
        """
        modifiers: Gdk.ModifierType
        """
        The key modifiers for the trigger.
        """

    props: Props = ...
    def __init__(self, keyval: int = ..., modifiers: Gdk.ModifierType = ...): ...
    def get_keyval(self) -> int:
        """
        Gets the keyval that must be pressed to succeed
        triggering @self.

        Parameters:


        Returns:
            int: the keyval

        """
        ...

    def get_modifiers(self) -> Gdk.ModifierType:
        """
        Gets the modifiers that must be present to succeed
        triggering @self.

        Parameters:


        Returns:
            Gdk.ModifierType: the modifiers

        """
        ...

    @classmethod
    def new(cls, keyval: int, modifiers: Gdk.ModifierType) -> KeyvalTrigger:
        """
        Creates a `GtkShortcutTrigger` that will trigger whenever
        the key with the given @keyval and @modifiers is pressed.

        Parameters:
            keyval: The keyval to trigger for
            modifiers: the modifiers that need to be present

        Returns:
            ShortcutTrigger: A new `GtkShortcutTrigger`

        """
        ...

class KeyvalTriggerClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class Label(Widget, Accessible, Buildable, ConstraintTarget):
    """
    The `GtkLabel` widget displays a small amount of text.

    As the name implies, most labels are used to label another widget
    such as a [class@Button].

    ![An example GtkLabel](label.png)

    # CSS nodes

    ```
    label
    ├── [selection]
    ├── [link]
    ┊
    ╰── [link]
    ```

    `GtkLabel` has a single CSS node with the name label. A wide variety
    of style classes may be applied to labels, such as .title, .subtitle,
    .dim-label, etc. In the `GtkShortcutsWindow`, labels are used with the
    .keycap style class.

    If the label has a selection, it gets a subnode with name selection.

    If the label has links, there is one subnode per link. These subnodes
    carry the link or visited state depending on whether they have been
    visited. In this case, label node also gets a .link style class.

    # GtkLabel as GtkBuildable

    The GtkLabel implementation of the GtkBuildable interface supports a
    custom `<attributes>` element, which supports any number of `<attribute>`
    elements. The `<attribute>` element has attributes named “name“, “value“,
    “start“ and “end“ and allows you to specify [struct@Pango.Attribute]
    values for this label.

    An example of a UI definition fragment specifying Pango attributes:
    ```xml
    <object class=\"GtkLabel\">
    <attributes>
    <attribute name=\"weight\" value=\"PANGO_WEIGHT_BOLD\"/>
    <attribute name=\"background\" value=\"red\" start=\"5\" end=\"10\"/>
    </attributes>
    </object>
    ```

    The start and end attributes specify the range of characters to which the
    Pango attribute applies. If start and end are not specified, the attribute is
    applied to the whole text. Note that specifying ranges does not make much
    sense with translatable attributes. Use markup embedded in the translatable
    content instead.

    # Accessibility

    `GtkLabel` uses the %GTK_ACCESSIBLE_ROLE_LABEL role.

    # Mnemonics

    Labels may contain “mnemonics”. Mnemonics are underlined characters in the
    label, used for keyboard navigation. Mnemonics are created by providing a
    string with an underscore before the mnemonic character, such as `\"_File\"`,
    to the functions [ctor@Gtk.Label.new_with_mnemonic] or
    [method@Gtk.Label.set_text_with_mnemonic].

    Mnemonics automatically activate any activatable widget the label is
    inside, such as a [class@Gtk.Button]; if the label is not inside the
    mnemonic’s target widget, you have to tell the label about the target
    using [method@Gtk.Label.set_mnemonic_widget].

    Here’s a simple example where the label is inside a button:

    ```c
    // Pressing Alt+H will activate this button
    GtkWidget *button = gtk_button_new ();
    GtkWidget *label = gtk_label_new_with_mnemonic (\"_Hello\");
    gtk_button_set_child (GTK_BUTTON (button), label);
    ```

    There’s a convenience function to create buttons with a mnemonic label
    already inside:

    ```c
    // Pressing Alt+H will activate this button
    GtkWidget *button = gtk_button_new_with_mnemonic (\"_Hello\");
    ```

    To create a mnemonic for a widget alongside the label, such as a
    [class@Gtk.Entry], you have to point the label at the entry with
    [method@Gtk.Label.set_mnemonic_widget]:

    ```c
    // Pressing Alt+H will focus the entry
    GtkWidget *entry = gtk_entry_new ();
    GtkWidget *label = gtk_label_new_with_mnemonic (\"_Hello\");
    gtk_label_set_mnemonic_widget (GTK_LABEL (label), entry);
    ```

    # Markup (styled text)

    To make it easy to format text in a label (changing colors,
    fonts, etc.), label text can be provided in a simple
    markup format:

    Here’s how to create a label with a small font:
    ```c
    GtkWidget *label = gtk_label_new (NULL);
    gtk_label_set_markup (GTK_LABEL (label), \"<small>Small text</small>\");
    ```

    (See the Pango manual for complete documentation] of available
    tags, [func@Pango.parse_markup])

    The markup passed to [method@Gtk.Label.set_markup] must be valid; for example,
    literal `<`, `>` and `&` characters must be escaped as `&lt;`, `&gt;`, and `&amp;`.
    If you pass text obtained from the user, file, or a network to
    [method@Gtk.Label.set_markup], you’ll want to escape it with
    [func@GLib.markup_escape_text] or [func@GLib.markup_printf_escaped].

    Markup strings are just a convenient way to set the [struct@Pango.AttrList]
    on a label; [method@Gtk.Label.set_attributes] may be a simpler way to set
    attributes in some cases. Be careful though; [struct@Pango.AttrList] tends
    to cause internationalization problems, unless you’re applying attributes
    to the entire string (i.e. unless you set the range of each attribute
    to [0, %G_MAXINT)). The reason is that specifying the start_index and
    end_index for a [struct@Pango.Attribute] requires knowledge of the exact
    string being displayed, so translations will cause problems.

    # Selectable labels

    Labels can be made selectable with [method@Gtk.Label.set_selectable].
    Selectable labels allow the user to copy the label contents to
    the clipboard. Only labels that contain useful-to-copy information
    — such as error messages — should be made selectable.

    # Text layout

    A label can contain any number of paragraphs, but will have
    performance problems if it contains more than a small number.
    Paragraphs are separated by newlines or other paragraph separators
    understood by Pango.

    Labels can automatically wrap text if you call [method@Gtk.Label.set_wrap].

    [method@Gtk.Label.set_justify] sets how the lines in a label align
    with one another. If you want to set how the label as a whole aligns
    in its available space, see the [property@Gtk.Widget:halign] and
    [property@Gtk.Widget:valign] properties.

    The [property@Gtk.Label:width-chars] and [property@Gtk.Label:max-width-chars]
    properties can be used to control the size allocation of ellipsized or
    wrapped labels. For ellipsizing labels, if either is specified (and less
    than the actual text size), it is used as the minimum width, and the actual
    text size is used as the natural width of the label. For wrapping labels,
    width-chars is used as the minimum width, if specified, and max-width-chars
    is used as the natural width. Even if max-width-chars specified, wrapping
    labels will be rewrapped to use all of the available width.

    # Links

    GTK supports markup for clickable hyperlinks in addition to regular Pango
    markup. The markup for links is borrowed from HTML, using the `<a>` with
    “href“, “title“ and “class“ attributes. GTK renders links similar to the
    way they appear in web browsers, with colored, underlined text. The “title“
    attribute is displayed as a tooltip on the link. The “class“ attribute is
    used as style class on the CSS node for the link.

    An example looks like this:

    ```c
    const char *text =
    \"Go to the \"
    \"<a href=\\"https://www.gtk.org\\" title=\\"&lt;i&gt;Our&lt;/i&gt; website\\">\"
    \"GTK website</a> for more...\";
    GtkWidget *label = gtk_label_new (NULL);
    gtk_label_set_markup (GTK_LABEL (label), text);
    ```

    It is possible to implement custom handling for links and their tooltips
    with the [signal@Gtk.Label::activate-link] signal and the
    [method@Gtk.Label.get_current_uri] function.

    :Constructors:

    ::

        Label(**properties)
        new(str:str=None) -> Gtk.Widget
        new_with_mnemonic(str:str=None) -> Gtk.Widget

    Object GtkLabel

    Signals from GtkLabel:
      activate-link (gchararray) -> gboolean
      move-cursor (GtkMovementStep, gint, gboolean)
      copy-clipboard ()
      activate-current-link ()

    Properties from GtkLabel:
      label -> gchararray: label
      attributes -> PangoAttrList: attributes
      use-markup -> gboolean: use-markup
      use-underline -> gboolean: use-underline
      justify -> GtkJustification: justify
      wrap -> gboolean: wrap
      wrap-mode -> PangoWrapMode: wrap-mode
      natural-wrap-mode -> GtkNaturalWrapMode: natural-wrap-mode
      selectable -> gboolean: selectable
      mnemonic-keyval -> guint: mnemonic-keyval
      mnemonic-widget -> GtkWidget: mnemonic-widget
      ellipsize -> PangoEllipsizeMode: ellipsize
      width-chars -> gint: width-chars
      single-line-mode -> gboolean: single-line-mode
      max-width-chars -> gint: max-width-chars
      lines -> gint: lines
      xalign -> gfloat: xalign
      yalign -> gfloat: yalign
      extra-menu -> GMenuModel: extra-menu
      tabs -> PangoTabArray: tabs

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        attributes: Optional[Pango.AttrList]
        """
        A list of style attributes to apply to the text of the label.
        """
        ellipsize: Pango.EllipsizeMode
        """
        The preferred place to ellipsize the string, if the label does
        not have enough room to display the entire string.

        Note that setting this property to a value other than
        %PANGO_ELLIPSIZE_NONE has the side-effect that the label requests
        only enough space to display the ellipsis \"...\". In particular, this
        means that ellipsizing labels do not work well in notebook tabs, unless
        the [property@Gtk.NotebookPage:tab-expand] child property is set to %TRUE.
        Other ways to set a label's width are [method@Gtk.Widget.set_size_request]
        and [method@Gtk.Label.set_width_chars].
        """
        extra_menu: Optional[Gio.MenuModel]
        """
        A menu model whose contents will be appended to the context menu.
        """
        justify: Justification
        """
        The alignment of the lines in the text of the label, relative to each other.

        This does *not* affect the alignment of the label within its allocation.
        See [property@Gtk.Label:xalign] for that.
        """
        label: str
        """
        The contents of the label.

        If the string contains Pango markup (see [func@Pango.parse_markup]),
        you will have to set the [property@Gtk.Label:use-markup] property to
        %TRUE in order for the label to display the markup attributes. See also
        [method@Gtk.Label.set_markup] for a convenience function that sets both
        this property and the [property@Gtk.Label:use-markup] property at the
        same time.

        If the string contains underlines acting as mnemonics, you will have to
        set the [property@Gtk.Label:use-underline] property to %TRUE in order
        for the label to display them.
        """
        lines: int
        """
        The number of lines to which an ellipsized, wrapping label
        should be limited.

        This property has no effect if the label is not wrapping or ellipsized.
        Set this property to -1 if you don't want to limit the number of lines.
        """
        max_width_chars: int
        """
        The desired maximum width of the label, in characters.

        If this property is set to -1, the width will be calculated automatically.

        See the section on [text layout](class.Label.html#text-layout) for details of how
        [property@Gtk.Label:width-chars] and [property@Gtk.Label:max-width-chars]
        determine the width of ellipsized and wrapped labels.
        """
        mnemonic_keyval: int
        """
        The mnemonic accelerator key for the label.
        """
        mnemonic_widget: Optional[Widget]
        """
        The widget to be activated when the labels mnemonic key is pressed.
        """
        natural_wrap_mode: NaturalWrapMode
        """
        Select the line wrapping for the natural size request.

        This only affects the natural size requested. For the actual wrapping used,
        see the [property@Gtk.Label:wrap-mode] property.

        The default is %GTK_NATURAL_WRAP_INHERIT, which inherits the behavior of the
        [property@Gtk.Label:wrap-mode] property.
        """
        selectable: bool
        """
        Whether the label text can be selected with the mouse.
        """
        single_line_mode: bool
        """
        Whether the label is in single line mode.

        In single line mode, the height of the label does not depend on the
        actual text, it is always set to ascent + descent of the font. This
        can be an advantage in situations where resizing the label because
        of text changes would be distracting, e.g. in a statusbar.
        """
        tabs: Optional[Pango.TabArray]
        """
        Custom tabs for this label.
        """
        use_markup: bool
        """
        %TRUE if the text of the label includes Pango markup.

        See [func@Pango.parse_markup].
        """
        use_underline: bool
        """
        %TRUE if the text of the label indicates a mnemonic with an _
        before the mnemonic character.
        """
        width_chars: int
        """
        The desired width of the label, in characters.

        If this property is set to -1, the width will be calculated automatically.

        See the section on [text layout](class.Label.html#text-layout) for details of how
        [property@Gtk.Label:width-chars] and [property@Gtk.Label:max-width-chars]
        determine the width of ellipsized and wrapped labels.
        """
        wrap: bool
        """
        %TRUE if the label text will wrap if it gets too wide.
        """
        wrap_mode: Pango.WrapMode
        """
        Controls how the line wrapping is done.

        This only affects the formatting if line wrapping is on (see the
        [property@Gtk.Label:wrap] property). The default is %PANGO_WRAP_WORD,
        which means wrap on word boundaries.

        For sizing behavior, also consider the [property@Gtk.Label:natural-wrap-mode]
        property.
        """
        xalign: float
        """
        The horizontal alignment of the label text inside its size allocation.

        Compare this to [property@Gtk.Widget:halign], which determines how the
        labels size allocation is positioned in the space available for the label.
        """
        yalign: float
        """
        The vertical alignment of the label text inside its size allocation.

        Compare this to [property@Gtk.Widget:valign], which determines how the
        labels size allocation is positioned in the space available for the label.
        """

    props: Props = ...
    def __init__(
        self,
        attributes: Optional[Pango.AttrList] = ...,
        ellipsize: Pango.EllipsizeMode = ...,
        extra_menu: Optional[Gio.MenuModel] = ...,
        justify: Justification = ...,
        label: str = ...,
        lines: int = ...,
        max_width_chars: int = ...,
        mnemonic_widget: Optional[Widget] = ...,
        natural_wrap_mode: NaturalWrapMode = ...,
        selectable: bool = ...,
        single_line_mode: bool = ...,
        tabs: Optional[Pango.TabArray] = ...,
        use_markup: bool = ...,
        use_underline: bool = ...,
        width_chars: int = ...,
        wrap: bool = ...,
        wrap_mode: Pango.WrapMode = ...,
        xalign: float = ...,
        yalign: float = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_attributes(self) -> Optional[Pango.AttrList]:
        """
        Gets the label's attribute list.

        This is the [struct@Pango.AttrList] that was set on the label using
        [method@Gtk.Label.set_attributes], if any. This function does not
        reflect attributes that come from the label's markup (see
        [method@Gtk.Label.set_markup]). If you want to get the effective
        attributes for the label, use
        `pango_layout_get_attributes (gtk_label_get_layout (self))`.

        Parameters:


        Returns:
            Optional[Pango.AttrList]: the attribute list

        """
        ...

    def get_current_uri(self) -> Optional[str]:
        """
        Returns the URI for the currently active link in the label.

        The active link is the one under the mouse pointer or, in a
        selectable label, the link in which the text cursor is currently
        positioned.

        This function is intended for use in a [signal@Gtk.Label::activate-link]
        handler or for use in a [signal@Gtk.Widget::query-tooltip] handler.

        Parameters:


        Returns:
            Optional[str]: the currently active URI

        """
        ...

    def get_ellipsize(self) -> Pango.EllipsizeMode:
        """
        Returns the ellipsizing position of the label.

        See [method@Gtk.Label.set_ellipsize].

        Parameters:


        Returns:
            Pango.EllipsizeMode: `PangoEllipsizeMode`

        """
        ...

    def get_extra_menu(self) -> Optional[Gio.MenuModel]:
        """
        Gets the extra menu model of @label.

        See [method@Gtk.Label.set_extra_menu].

        Parameters:


        Returns:
            Optional[Gio.MenuModel]: the menu model

        """
        ...

    def get_justify(self) -> Justification:
        """
        Returns the justification of the label.

        See [method@Gtk.Label.set_justify].

        Parameters:


        Returns:
            Justification: `GtkJustification`

        """
        ...

    def get_label(self) -> str:
        """
        Fetches the text from a label.

        The returned text includes any embedded underlines indicating
        mnemonics and Pango markup. (See [method@Gtk.Label.get_text]).

        Parameters:


        Returns:
            str: the text of the label widget. This string is
        owned by the widget and must not be modified or freed.

        """
        ...

    def get_layout(self) -> Pango.Layout:
        """
        Gets the `PangoLayout` used to display the label.

        The layout is useful to e.g. convert text positions to pixel
        positions, in combination with [method@Gtk.Label.get_layout_offsets].
        The returned layout is owned by the @label so need not be
        freed by the caller. The @label is free to recreate its layout
        at any time, so it should be considered read-only.

        Parameters:


        Returns:
            Pango.Layout: the [class@Pango.Layout] for this label

        """
        ...

    def get_layout_offsets(self) -> Tuple[int, int]:
        """
        Obtains the coordinates where the label will draw its `PangoLayout`.

        The coordinates are useful to convert mouse events into coordinates
        inside the [class@Pango.Layout], e.g. to take some action if some part
        of the label is clicked. Remember when using the [class@Pango.Layout]
        functions you need to convert to and from pixels using PANGO_PIXELS()
        or [const@Pango.SCALE].

        Parameters:


        Returns:
            int: location to store X offset of layout
            int: location to store Y offset of layout
        """
        ...

    def get_lines(self) -> int:
        """
        Gets the number of lines to which an ellipsized, wrapping
        label should be limited.

        See [method@Gtk.Label.set_lines].

        Parameters:


        Returns:
            int: The number of lines

        """
        ...

    def get_max_width_chars(self) -> int:
        """
        Retrieves the desired maximum width of @label, in characters.

        See [method@Gtk.Label.set_width_chars].

        Parameters:


        Returns:
            int: the maximum width of the label in characters.

        """
        ...

    def get_mnemonic_keyval(self) -> int:
        """
        Return the mnemonic accelerator.

        If the label has been set so that it has a mnemonic key this function
        returns the keyval used for the mnemonic accelerator. If there is no
        mnemonic set up it returns `GDK_KEY_VoidSymbol`.

        Parameters:


        Returns:
            int: GDK keyval usable for accelerators, or `GDK_KEY_VoidSymbol`

        """
        ...

    def get_mnemonic_widget(self) -> Optional[Widget]:
        """
        Retrieves the target of the mnemonic (keyboard shortcut) of this
        label.

        See [method@Gtk.Label.set_mnemonic_widget].

        Parameters:


        Returns:
            Optional[Widget]: the target of the label’s mnemonic,
        or %NULL if none has been set and the default algorithm will be used.

        """
        ...

    def get_natural_wrap_mode(self) -> NaturalWrapMode:
        """
        Returns line wrap mode used by the label.

        See [method@Gtk.Label.set_natural_wrap_mode].

        Parameters:


        Returns:
            NaturalWrapMode: the natural line wrap mode

        """
        ...

    def get_selectable(self) -> bool:
        """
        Returns whether the label is selectable.

        Parameters:


        Returns:
            bool: %TRUE if the user can copy text from the label

        """
        ...

    def get_selection_bounds(self) -> Tuple[bool, int, int]:
        """
        Gets the selected range of characters in the label.

        Parameters:


        Returns:
            bool: %TRUE if selection is non-empty
            int: return location for start of selection, as a character offset
            int: return location for end of selection, as a character offset
        """
        ...

    def get_single_line_mode(self) -> bool:
        """
        Returns whether the label is in single line mode.

        Parameters:


        Returns:
            bool: %TRUE when the label is in single line mode.

        """
        ...

    def get_tabs(self) -> Optional[Pango.TabArray]:
        """
        Gets the tabs for @self.

        The returned array will be %NULL if “standard” (8-space) tabs are used.
        Free the return value with [method@Pango.TabArray.free].

        Parameters:


        Returns:
            Optional[Pango.TabArray]: copy of default tab array,
        or %NULL if standard tabs are used; must be freed with
        [method@Pango.TabArray.free].

        """
        ...

    def get_text(self) -> str:
        """
        Fetches the text from a label.

        The returned text is as it appears on screen. This does not include
        any embedded underlines indicating mnemonics or Pango markup. (See
        [method@Gtk.Label.get_label])

        Parameters:


        Returns:
            str: the text in the label widget. This is the internal
        string used by the label, and must not be modified.

        """
        ...

    def get_use_markup(self) -> bool:
        """
        Returns whether the label’s text is interpreted as Pango markup.

        See [method@Gtk.Label.set_use_markup].

        Parameters:


        Returns:
            bool: %TRUE if the label’s text will be parsed for markup.

        """
        ...

    def get_use_underline(self) -> bool:
        """
        Returns whether an embedded underlines in the label indicate mnemonics.

        See [method@Gtk.Label.set_use_underline].

        Parameters:


        Returns:
            bool: %TRUE whether an embedded underline in the label indicates
        the mnemonic accelerator keys.

        """
        ...

    def get_width_chars(self) -> int:
        """
        Retrieves the desired width of @label, in characters.

        See [method@Gtk.Label.set_width_chars].

        Parameters:


        Returns:
            int: the width of the label in characters.

        """
        ...

    def get_wrap(self) -> bool:
        """
        Returns whether lines in the label are automatically wrapped.

        See [method@Gtk.Label.set_wrap].

        Parameters:


        Returns:
            bool: %TRUE if the lines of the label are automatically wrapped.

        """
        ...

    def get_wrap_mode(self) -> Pango.WrapMode:
        """
        Returns line wrap mode used by the label.

        See [method@Gtk.Label.set_wrap_mode].

        Parameters:


        Returns:
            Pango.WrapMode: the line wrap mode

        """
        ...

    def get_xalign(self) -> float:
        """
        Gets the `xalign` of the label.

        See the [property@Gtk.Label:xalign] property.

        Parameters:


        Returns:
            float: the xalign property

        """
        ...

    def get_yalign(self) -> float:
        """
        Gets the `yalign` of the label.

        See the [property@Gtk.Label:yalign] property.

        Parameters:


        Returns:
            float: the yalign property

        """
        ...

    @classmethod
    def new(cls, str: Optional[str] = None) -> Label:
        """
        Creates a new label with the given text inside it.

        You can pass %NULL to get an empty label widget.

        Parameters:
            str: The text of the label

        Returns:
            Widget: the new `GtkLabel`

        """
        ...

    @classmethod
    def new_with_mnemonic(cls, str: Optional[str] = None) -> Label:
        """
        Creates a new `GtkLabel`, containing the text in @str.

        If characters in @str are preceded by an underscore, they are
        underlined. If you need a literal underscore character in a label, use
        '__' (two underscores). The first underlined character represents a
        keyboard accelerator called a mnemonic. The mnemonic key can be used
        to activate another widget, chosen automatically, or explicitly using
        [method@Gtk.Label.set_mnemonic_widget].

        If [method@Gtk.Label.set_mnemonic_widget] is not called, then the first
        activatable ancestor of the `GtkLabel` will be chosen as the mnemonic
        widget. For instance, if the label is inside a button or menu item,
        the button or menu item will automatically become the mnemonic widget
        and be activated by the mnemonic.

        Parameters:
            str: The text of the label, with an underscore in front of the
        mnemonic character

        Returns:
            Widget: the new `GtkLabel`

        """
        ...

    def select_region(self, start_offset: int, end_offset: int) -> None:
        """
        Selects a range of characters in the label, if the label is selectable.

        See [method@Gtk.Label.set_selectable]. If the label is not selectable,
        this function has no effect. If @start_offset or
        @end_offset are -1, then the end of the label will be substituted.

        Parameters:
            start_offset: start offset (in characters not bytes)
            end_offset: end offset (in characters not bytes)

        Returns:

        """
        ...

    def set_attributes(self, attrs: Optional[Pango.AttrList] = None) -> None:
        """
        Apply attributes to the label text.

        The attributes set with this function will be applied and merged with
        any other attributes previously effected by way of the
        [property@Gtk.Label:use-underline] or [property@Gtk.Label:use-markup]
        properties. While it is not recommended to mix markup strings with
        manually set attributes, if you must; know that the attributes will
        be applied to the label after the markup string is parsed.

        Parameters:
            attrs: a [struct@Pango.AttrList]

        Returns:

        """
        ...

    def set_ellipsize(self, mode: Pango.EllipsizeMode) -> None:
        """
        Sets the mode used to ellipsize the text.

        The text will be ellipsized if there is not enough space
        to render the entire string.

        Parameters:
            mode: a `PangoEllipsizeMode`

        Returns:

        """
        ...

    def set_extra_menu(self, model: Optional[Gio.MenuModel] = None) -> None:
        """
        Sets a menu model to add when constructing
        the context menu for @label.

        Parameters:
            model: a `GMenuModel`

        Returns:

        """
        ...

    def set_justify(self, jtype: Justification) -> None:
        """
        Sets the alignment of the lines in the text of the label relative to
        each other.

        %GTK_JUSTIFY_LEFT is the default value when the widget is first created
        with [ctor@Gtk.Label.new]. If you instead want to set the alignment of
        the label as a whole, use [method@Gtk.Widget.set_halign] instead.
        [method@Gtk.Label.set_justify] has no effect on labels containing
        only a single line.

        Parameters:
            jtype: a `GtkJustification`

        Returns:

        """
        ...

    def set_label(self, str: str) -> None:
        """
        Sets the text of the label.

        The label is interpreted as including embedded underlines and/or Pango
        markup depending on the values of the [property@Gtk.Label:use-underline]
        and [property@Gtk.Label:use-markup] properties.

        Parameters:
            str: the new text to set for the label

        Returns:

        """
        ...

    def set_lines(self, lines: int) -> None:
        """
        Sets the number of lines to which an ellipsized, wrapping label
        should be limited.

        This has no effect if the label is not wrapping or ellipsized.
        Set this to -1 if you don’t want to limit the number of lines.

        Parameters:
            lines: the desired number of lines, or -1

        Returns:

        """
        ...

    def set_markup(self, str: str) -> None:
        """
        Sets the labels text and attributes from markup.

        The string must be marked up with Pango markup
        (see [func@Pango.parse_markup]).

        If the @str is external data, you may need to escape it
        with g_markup_escape_text() or g_markup_printf_escaped():

        ```c
        GtkWidget *self = gtk_label_new (NULL);
        const char *str = \"...\";
        const char *format = \"<span style=\\"italic\\">\%s</span>\";
        char *markup;

        markup = g_markup_printf_escaped (format, str);
        gtk_label_set_markup (GTK_LABEL (self), markup);
        g_free (markup);
        ```

        This function will set the [property@Gtk.Label:use-markup] property
        to %TRUE as a side effect.

        If you set the label contents using the [property@Gtk.Label:label]
        property you should also ensure that you set the
        [property@Gtk.Label:use-markup] property accordingly.

        See also: [method@Gtk.Label.set_text]

        Parameters:
            str: a markup string

        Returns:

        """
        ...

    def set_markup_with_mnemonic(self, str: str) -> None:
        """
        Sets the labels text, attributes and mnemonic from markup.

        Parses @str which is marked up with Pango markup (see [func@Pango.parse_markup]),
        setting the label’s text and attribute list based on the parse results.
        If characters in @str are preceded by an underscore, they are underlined
        indicating that they represent a keyboard accelerator called a mnemonic.

        The mnemonic key can be used to activate another widget, chosen
        automatically, or explicitly using [method@Gtk.Label.set_mnemonic_widget].

        Parameters:
            str: a markup string

        Returns:

        """
        ...

    def set_max_width_chars(self, n_chars: int) -> None:
        """
        Sets the desired maximum width in characters of @label to @n_chars.

        Parameters:
            n_chars: the new desired maximum width, in characters.

        Returns:

        """
        ...

    def set_mnemonic_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Associate the label with its mnemonic target.

        If the label has been set so that it has a mnemonic key (using
        i.e. [method@Gtk.Label.set_markup_with_mnemonic],
        [method@Gtk.Label.set_text_with_mnemonic],
        [ctor@Gtk.Label.new_with_mnemonic]
        or the [property@Gtk.Label:use_underline] property) the label can be
        associated with a widget that is the target of the mnemonic. When the
        label is inside a widget (like a [class@Gtk.Button] or a
        [class@Gtk.Notebook] tab) it is automatically associated with the correct
        widget, but sometimes (i.e. when the target is a [class@Gtk.Entry] next to
        the label) you need to set it explicitly using this function.

        The target widget will be accelerated by emitting the
        [signal@Gtk.Widget::mnemonic-activate] signal on it. The default handler for
        this signal will activate the widget if there are no mnemonic collisions
        and toggle focus between the colliding widgets otherwise.

        Parameters:
            widget: the target `GtkWidget`, or %NULL to unset

        Returns:

        """
        ...

    def set_natural_wrap_mode(self, wrap_mode: NaturalWrapMode) -> None:
        """
        Select the line wrapping for the natural size request.

        This only affects the natural size requested, for the actual wrapping used,
        see the [property@Gtk.Label:wrap-mode] property.

        Parameters:
            wrap_mode: the line wrapping mode

        Returns:

        """
        ...

    def set_selectable(self, setting: bool) -> None:
        """
        Makes text in the label selectable.

        Selectable labels allow the user to select text from the label,
        for copy-and-paste.

        Parameters:
            setting: %TRUE to allow selecting text in the label

        Returns:

        """
        ...

    def set_single_line_mode(self, single_line_mode: bool) -> None:
        """
        Sets whether the label is in single line mode.

        Parameters:
            single_line_mode: %TRUE if the label should be in single line mode

        Returns:

        """
        ...

    def set_tabs(self, tabs: Optional[Pango.TabArray] = None) -> None:
        """
        Sets the default tab stops for paragraphs in @self.

        Parameters:
            tabs: tabs as a `PangoTabArray`

        Returns:

        """
        ...

    def set_text(self, str: str) -> None:
        """
        Sets the text within the `GtkLabel` widget.

        It overwrites any text that was there before.

        This function will clear any previously set mnemonic accelerators,
        and set the [property@Gtk.Label:use-underline] property to %FALSE as
        a side effect.

        This function will set the [property@Gtk.Label:use-markup] property
        to %FALSE as a side effect.

        See also: [method@Gtk.Label.set_markup]

        Parameters:
            str: The text you want to set

        Returns:

        """
        ...

    def set_text_with_mnemonic(self, str: str) -> None:
        """
        Sets the label’s text from the string @str.

        If characters in @str are preceded by an underscore, they are underlined
        indicating that they represent a keyboard accelerator called a mnemonic.
        The mnemonic key can be used to activate another widget, chosen
        automatically, or explicitly using [method@Gtk.Label.set_mnemonic_widget].

        Parameters:
            str: a string

        Returns:

        """
        ...

    def set_use_markup(self, setting: bool) -> None:
        """
        Sets whether the text of the label contains markup.

        See [method@Gtk.Label.set_markup].

        Parameters:
            setting: %TRUE if the label’s text should be parsed for markup.

        Returns:

        """
        ...

    def set_use_underline(self, setting: bool) -> None:
        """
        Sets whether underlines in the text indicate mnemonics.

        Parameters:
            setting: %TRUE if underlines in the text indicate mnemonics

        Returns:

        """
        ...

    def set_width_chars(self, n_chars: int) -> None:
        """
        Sets the desired width in characters of @label to @n_chars.

        Parameters:
            n_chars: the new desired width, in characters.

        Returns:

        """
        ...

    def set_wrap(self, wrap: bool) -> None:
        """
        Toggles line wrapping within the `GtkLabel` widget.

        %TRUE makes it break lines if text exceeds the widget’s size.
        %FALSE lets the text get cut off by the edge of the widget if
        it exceeds the widget size.

        Note that setting line wrapping to %TRUE does not make the label
        wrap at its parent container’s width, because GTK widgets
        conceptually can’t make their requisition depend on the parent
        container’s size. For a label that wraps at a specific position,
        set the label’s width using [method@Gtk.Widget.set_size_request].

        Parameters:
            wrap: the setting

        Returns:

        """
        ...

    def set_wrap_mode(self, wrap_mode: Pango.WrapMode) -> None:
        """
        Controls how line wrapping is done.

        This only affects the label if line wrapping is on. (See
        [method@Gtk.Label.set_wrap]) The default is %PANGO_WRAP_WORD
        which means wrap on word boundaries.

        For sizing behavior, also consider the [property@Gtk.Label:natural-wrap-mode]
        property.

        Parameters:
            wrap_mode: the line wrapping mode

        Returns:

        """
        ...

    def set_xalign(self, xalign: float) -> None:
        """
        Sets the `xalign` of the label.

        See the [property@Gtk.Label:xalign] property.

        Parameters:
            xalign: the new xalign value, between 0 and 1

        Returns:

        """
        ...

    def set_yalign(self, yalign: float) -> None:
        """
        Sets the `yalign` of the label.

        See the [property@Gtk.Label:yalign] property.

        Parameters:
            yalign: the new yalign value, between 0 and 1

        Returns:

        """
        ...

class LayoutChild(GObject.Object):
    """
    `GtkLayoutChild` is the base class for objects that are meant to hold
    layout properties.

    If a `GtkLayoutManager` has per-child properties, like their packing type,
    or the horizontal and vertical span, or the icon name, then the layout
    manager should use a `GtkLayoutChild` implementation to store those properties.

    A `GtkLayoutChild` instance is only ever valid while a widget is part
    of a layout.

    :Constructors:

    ::

        LayoutChild(**properties)

    Object GtkLayoutChild

    Properties from GtkLayoutChild:
      layout-manager -> GtkLayoutManager: layout-manager
      child-widget -> GtkWidget: child-widget

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        child_widget: Widget
        """
        The widget that is associated to the `GtkLayoutChild` instance.
        """
        layout_manager: LayoutManager
        """
        The layout manager that created the `GtkLayoutChild` instance.
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    def __init__(
        self, child_widget: Widget = ..., layout_manager: LayoutManager = ...
    ): ...
    def get_child_widget(self) -> Widget:
        """
        Retrieves the `GtkWidget` associated to the given @layout_child.

        Parameters:


        Returns:
            Widget: a `GtkWidget`

        """
        ...

    def get_layout_manager(self) -> LayoutManager:
        """
        Retrieves the `GtkLayoutManager` instance that created the
        given @layout_child.

        Parameters:


        Returns:
            LayoutManager: a `GtkLayoutManager`

        """
        ...

class LayoutChildClass(GObject.GPointer):
    """
    :Constructors:

    ::

        LayoutChildClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class LayoutManager(GObject.Object):
    """
    Layout managers are delegate classes that handle the preferred size
    and the allocation of a widget.

    You typically subclass `GtkLayoutManager` if you want to implement a
    layout policy for the children of a widget, or if you want to determine
    the size of a widget depending on its contents.

    Each `GtkWidget` can only have a `GtkLayoutManager` instance associated
    to it at any given time; it is possible, though, to replace the layout
    manager instance using [method@Gtk.Widget.set_layout_manager].

    ## Layout properties

    A layout manager can expose properties for controlling the layout of
    each child, by creating an object type derived from [class@Gtk.LayoutChild]
    and installing the properties on it as normal `GObject` properties.

    Each `GtkLayoutChild` instance storing the layout properties for a
    specific child is created through the [method@Gtk.LayoutManager.get_layout_child]
    method; a `GtkLayoutManager` controls the creation of its `GtkLayoutChild`
    instances by overriding the GtkLayoutManagerClass.create_layout_child()
    virtual function. The typical implementation should look like:

    ```c
    static GtkLayoutChild *
    create_layout_child (GtkLayoutManager *manager,
    GtkWidget *container,
    GtkWidget *child)
    {
    return g_object_new (your_layout_child_get_type (),
    \"layout-manager\", manager,
    \"child-widget\", child,
    NULL);
    }
    ```

    The [property@Gtk.LayoutChild:layout-manager] and
    [property@Gtk.LayoutChild:child-widget] properties
    on the newly created `GtkLayoutChild` instance are mandatory. The
    `GtkLayoutManager` will cache the newly created `GtkLayoutChild` instance
    until the widget is removed from its parent, or the parent removes the
    layout manager.

    Each `GtkLayoutManager` instance creating a `GtkLayoutChild` should use
    [method@Gtk.LayoutManager.get_layout_child] every time it needs to query
    the layout properties; each `GtkLayoutChild` instance should call
    [method@Gtk.LayoutManager.layout_changed] every time a property is
    updated, in order to queue a new size measuring and allocation.

    :Constructors:

    ::

        LayoutManager(**properties)

    Object GtkLayoutManager

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...
    parent_instance: GObject.Object = ...
    def allocate(self, widget: Widget, width: int, height: int, baseline: int) -> None:
        """
        Assigns the given @width, @height, and @baseline to
        a @widget, and computes the position and sizes of the children of
        the @widget using the layout management policy of @manager.

        Parameters:
            widget: the `GtkWidget` using @manager
            width: the new width of the @widget
            height: the new height of the @widget
            baseline: the baseline position of the @widget, or -1

        Returns:

        """
        ...

    def do_allocate(
        self, widget: Widget, width: int, height: int, baseline: int
    ) -> None:
        """
        Assigns the given @width, @height, and @baseline to
        a @widget, and computes the position and sizes of the children of
        the @widget using the layout management policy of @manager.

        Parameters:
            widget: the `GtkWidget` using @manager
            width: the new width of the @widget
            height: the new height of the @widget
            baseline: the baseline position of the @widget, or -1

        Returns:

        """
        ...

    def do_create_layout_child(self, widget: Widget, for_child: Widget) -> LayoutChild:
        """
        Create a `GtkLayoutChild` instance for the given @for_child widget.

        Parameters:
            widget: the widget using the @manager
            for_child: the child of @widget

        Returns:
            LayoutChild: a `GtkLayoutChild`

        """
        ...

    def do_get_request_mode(self, widget: Widget) -> SizeRequestMode: ...
    def do_measure(
        self, widget: Widget, orientation: Orientation, for_size: int
    ) -> Tuple[int, int, int, int]:
        """
        Measures the size of the @widget using @manager, for the
        given @orientation and size.

        See the [class@Gtk.Widget] documentation on layout management for
        more details.

        Parameters:
            widget: the `GtkWidget` using @manager
            orientation: the orientation to measure
            for_size: Size for the opposite of @orientation; for instance, if
        the @orientation is %GTK_ORIENTATION_HORIZONTAL, this is the height
        of the widget; if the @orientation is %GTK_ORIENTATION_VERTICAL, this
        is the width of the widget. This allows to measure the height for the
        given width, and the width for the given height. Use -1 if the size
        is not known

        Returns:
            int: the minimum size for the given size and
        orientation
            int: the natural, or preferred size for the
        given size and orientation
            int: the baseline position for the
        minimum size
            int: the baseline position for the
        natural size
        """
        ...

    def do_root(self) -> None: ...
    def do_unroot(self) -> None: ...
    def get_layout_child(self, child: Widget) -> LayoutChild:
        """
        Retrieves a `GtkLayoutChild` instance for the `GtkLayoutManager`,
        creating one if necessary.

        The @child widget must be a child of the widget using @manager.

        The `GtkLayoutChild` instance is owned by the `GtkLayoutManager`,
        and is guaranteed to exist as long as @child is a child of the
        `GtkWidget` using the given `GtkLayoutManager`.

        Parameters:
            child: a `GtkWidget`

        Returns:
            LayoutChild: a `GtkLayoutChild`

        """
        ...

    def get_request_mode(self) -> SizeRequestMode:
        """
        Retrieves the request mode of @manager.

        Parameters:


        Returns:
            SizeRequestMode: a `GtkSizeRequestMode`

        """
        ...

    def get_widget(self) -> Optional[Widget]:
        """
        Retrieves the `GtkWidget` using the given `GtkLayoutManager`.

        Parameters:


        Returns:
            Optional[Widget]: a `GtkWidget`

        """
        ...

    def layout_changed(self) -> None:
        """
        Queues a resize on the `GtkWidget` using @manager, if any.

        This function should be called by subclasses of `GtkLayoutManager`
        in response to changes to their layout management policies.

        Parameters:


        Returns:

        """
        ...

    def measure(
        self, widget: Widget, orientation: Orientation, for_size: int
    ) -> Tuple[int, int, int, int]:
        """
        Measures the size of the @widget using @manager, for the
        given @orientation and size.

        See the [class@Gtk.Widget] documentation on layout management for
        more details.

        Parameters:
            widget: the `GtkWidget` using @manager
            orientation: the orientation to measure
            for_size: Size for the opposite of @orientation; for instance, if
        the @orientation is %GTK_ORIENTATION_HORIZONTAL, this is the height
        of the widget; if the @orientation is %GTK_ORIENTATION_VERTICAL, this
        is the width of the widget. This allows to measure the height for the
        given width, and the width for the given height. Use -1 if the size
        is not known

        Returns:
            int: the minimum size for the given size and
        orientation
            int: the natural, or preferred size for the
        given size and orientation
            int: the baseline position for the
        minimum size
            int: the baseline position for the
        natural size
        """
        ...

class LayoutManagerClass(GObject.GPointer):
    """
    The `GtkLayoutManagerClass` structure contains only private data, and
    should only be accessed through the provided API, or when subclassing
    `GtkLayoutManager`.

    :Constructors:

    ::

        LayoutManagerClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    get_request_mode: Callable[[LayoutManager, Widget], SizeRequestMode] = ...
    measure: Callable[
        [LayoutManager, Widget, Orientation, int], Tuple[int, int, int, int]
    ] = ...
    allocate: Callable[[LayoutManager, Widget, int, int, int], None] = ...
    layout_child_type: Type = ...
    create_layout_child: Callable[[LayoutManager, Widget, Widget], LayoutChild] = ...
    root: Callable[[LayoutManager], None] = ...
    unroot: Callable[[LayoutManager], None] = ...
    _padding: list[None] = ...

class LevelBar(
    Widget, Accessible, AccessibleRange, Buildable, ConstraintTarget, Orientable
):
    """
    `GtkLevelBar` is a widget that can be used as a level indicator.

    Typical use cases are displaying the strength of a password, or
    showing the charge level of a battery.

    ![An example GtkLevelBar](levelbar.png)

    Use [method@Gtk.LevelBar.set_value] to set the current value, and
    [method@Gtk.LevelBar.add_offset_value] to set the value offsets at which
    the bar will be considered in a different state. GTK will add a few
    offsets by default on the level bar: %GTK_LEVEL_BAR_OFFSET_LOW,
    %GTK_LEVEL_BAR_OFFSET_HIGH and %GTK_LEVEL_BAR_OFFSET_FULL, with
    values 0.25, 0.75 and 1.0 respectively.

    Note that it is your responsibility to update preexisting offsets
    when changing the minimum or maximum value. GTK will simply clamp
    them to the new range.

    ## Adding a custom offset on the bar

    ```c
    static GtkWidget *
    create_level_bar (void)
    {
    GtkWidget *widget;
    GtkLevelBar *bar;

    widget = gtk_level_bar_new ();
    bar = GTK_LEVEL_BAR (widget);

    // This changes the value of the default low offset

    gtk_level_bar_add_offset_value (bar,
    GTK_LEVEL_BAR_OFFSET_LOW,
    0.10);

    // This adds a new offset to the bar; the application will
    // be able to change its color CSS like this:
    //
    // levelbar block.my-offset {
    // background-color: magenta;
    // border-style: solid;
    // border-color: black;
    // border-width: 1px;
    // }

    gtk_level_bar_add_offset_value (bar, \"my-offset\", 0.60);

    return widget;
    }
    ```

    The default interval of values is between zero and one, but it’s possible
    to modify the interval using [method@Gtk.LevelBar.set_min_value] and
    [method@Gtk.LevelBar.set_max_value]. The value will be always drawn in
    proportion to the admissible interval, i.e. a value of 15 with a specified
    interval between 10 and 20 is equivalent to a value of 0.5 with an interval
    between 0 and 1. When %GTK_LEVEL_BAR_MODE_DISCRETE is used, the bar level
    is rendered as a finite number of separated blocks instead of a single one.
    The number of blocks that will be rendered is equal to the number of units
    specified by the admissible interval.

    For instance, to build a bar rendered with five blocks, it’s sufficient to
    set the minimum value to 0 and the maximum value to 5 after changing the
    indicator mode to discrete.

    # GtkLevelBar as GtkBuildable

    The `GtkLevelBar` implementation of the `GtkBuildable` interface supports a
    custom `<offsets>` element, which can contain any number of `<offset>` elements,
    each of which must have \"name\" and \"value\" attributes.

    # CSS nodes

    ```
    levelbar[.discrete]
    ╰── trough
    ├── block.filled.level-name
    ┊
    ├── block.empty
    ┊
    ```

    `GtkLevelBar` has a main CSS node with name levelbar and one of the style
    classes .discrete or .continuous and a subnode with name trough. Below the
    trough node are a number of nodes with name block and style class .filled
    or .empty. In continuous mode, there is exactly one node of each, in discrete
    mode, the number of filled and unfilled nodes corresponds to blocks that are
    drawn. The block.filled nodes also get a style class .level-name corresponding
    to the level for the current value.

    In horizontal orientation, the nodes are always arranged from left to right,
    regardless of text direction.

    # Accessibility

    `GtkLevelBar` uses the %GTK_ACCESSIBLE_ROLE_METER role.

    :Constructors:

    ::

        LevelBar(**properties)
        new() -> Gtk.Widget
        new_for_interval(min_value:float, max_value:float) -> Gtk.Widget

    Object GtkLevelBar

    Signals from GtkLevelBar:
      offset-changed (gchararray)

    Properties from GtkLevelBar:
      value -> gdouble: value
      min-value -> gdouble: min-value
      max-value -> gdouble: max-value
      mode -> GtkLevelBarMode: mode
      inverted -> gboolean: inverted

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        AccessibleRange.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        inverted: bool
        """
        Whether the `GtkLeveBar` is inverted.

        Level bars normally grow from top to bottom or left to right.
        Inverted level bars grow in the opposite direction.
        """
        max_value: float
        """
        Determines the maximum value of the interval that can be displayed by the bar.
        """
        min_value: float
        """
        Determines the minimum value of the interval that can be displayed by the bar.
        """
        mode: LevelBarMode
        """
        Determines the way `GtkLevelBar` interprets the value properties to draw the
        level fill area.

        Specifically, when the value is %GTK_LEVEL_BAR_MODE_CONTINUOUS,
        `GtkLevelBar` will draw a single block representing the current value in
        that area; when the value is %GTK_LEVEL_BAR_MODE_DISCRETE,
        the widget will draw a succession of separate blocks filling the
        draw area, with the number of blocks being equal to the units separating
        the integral roundings of [property@Gtk.LevelBar:min-value] and
        [property@Gtk.LevelBar:max-value].
        """
        value: float
        """
        Determines the currently filled value of the level bar.
        """

    props: Props = ...
    def __init__(
        self,
        inverted: bool = ...,
        max_value: float = ...,
        min_value: float = ...,
        mode: LevelBarMode = ...,
        value: float = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def add_offset_value(self, name: str, value: float) -> None:
        """
        Adds a new offset marker on @self at the position specified by @value.

        When the bar value is in the interval topped by @value (or between @value
        and [property@Gtk.LevelBar:max-value] in case the offset is the last one
        on the bar) a style class named `level-`@name will be applied
        when rendering the level bar fill.

        If another offset marker named @name exists, its value will be
        replaced by @value.

        Parameters:
            name: the name of the new offset
            value: the value for the new offset

        Returns:

        """
        ...

    def get_inverted(self) -> bool:
        """
        Returns whether the levelbar is inverted.

        Parameters:


        Returns:
            bool: %TRUE if the level bar is inverted

        """
        ...

    def get_max_value(self) -> float:
        """
        Returns the `max-value` of the `GtkLevelBar`.

        Parameters:


        Returns:
            float: a positive value

        """
        ...

    def get_min_value(self) -> float:
        """
        Returns the `min-value` of the `GtkLevelBar`.

        Parameters:


        Returns:
            float: a positive value

        """
        ...

    def get_mode(self) -> LevelBarMode:
        """
        Returns the `mode` of the `GtkLevelBar`.

        Parameters:


        Returns:
            LevelBarMode: a `GtkLevelBarMode`

        """
        ...

    def get_offset_value(self, name: Optional[str] = None) -> Tuple[bool, float]:
        """
        Fetches the value specified for the offset marker @name in @self.

        Parameters:
            name: the name of an offset in the bar

        Returns:
            bool: %TRUE if the specified offset is found
            float: location where to store the value
        """
        ...

    def get_value(self) -> float:
        """
        Returns the `value` of the `GtkLevelBar`.

        Parameters:


        Returns:
            float: a value in the interval between
        [property@Gtk.LevelBar:min-value] and [property@Gtk.LevelBar:max-value]

        """
        ...

    @classmethod
    def new(cls) -> LevelBar:
        """
        Creates a new `GtkLevelBar`.

        Parameters:


        Returns:
            Widget: a `GtkLevelBar`.

        """
        ...

    @classmethod
    def new_for_interval(cls, min_value: float, max_value: float) -> LevelBar:
        """
        Creates a new `GtkLevelBar` for the specified interval.

        Parameters:
            min_value: a positive value
            max_value: a positive value

        Returns:
            Widget: a `GtkLevelBar`

        """
        ...

    def remove_offset_value(self, name: Optional[str] = None) -> None:
        """
        Removes an offset marker from a `GtkLevelBar`.

        The marker must have been previously added with
        [method@Gtk.LevelBar.add_offset_value].

        Parameters:
            name: the name of an offset in the bar

        Returns:

        """
        ...

    def set_inverted(self, inverted: bool) -> None:
        """
        Sets whether the `GtkLevelBar` is inverted.

        Parameters:
            inverted: %TRUE to invert the level bar

        Returns:

        """
        ...

    def set_max_value(self, value: float) -> None:
        """
        Sets the `max-value` of the `GtkLevelBar`.

        You probably want to update preexisting level offsets after calling
        this function.

        Parameters:
            value: a positive value

        Returns:

        """
        ...

    def set_min_value(self, value: float) -> None:
        """
        Sets the `min-value` of the `GtkLevelBar`.

        You probably want to update preexisting level offsets after calling
        this function.

        Parameters:
            value: a positive value

        Returns:

        """
        ...

    def set_mode(self, mode: LevelBarMode) -> None:
        """
        Sets the `mode` of the `GtkLevelBar`.

        Parameters:
            mode: a `GtkLevelBarMode`

        Returns:

        """
        ...

    def set_value(self, value: float) -> None:
        """
        Sets the value of the `GtkLevelBar`.

        Parameters:
            value: a value in the interval between
        [property@Gtk.LevelBar:min-value] and [property@Gtk.LevelBar:max-value]

        Returns:

        """
        ...

class LinkButton(Button, Accessible, Actionable, Buildable, ConstraintTarget):
    """
    A `GtkLinkButton` is a button with a hyperlink.

    ![An example GtkLinkButton](link-button.png)

    It is useful to show quick links to resources.

    A link button is created by calling either [ctor@Gtk.LinkButton.new] or
    [ctor@Gtk.LinkButton.new_with_label]. If using the former, the URI you
    pass to the constructor is used as a label for the widget.

    The URI bound to a `GtkLinkButton` can be set specifically using
    [method@Gtk.LinkButton.set_uri].

    By default, `GtkLinkButton` calls [method@Gtk.FileLauncher.launch] when the button
    is clicked. This behaviour can be overridden by connecting to the
    [signal@Gtk.LinkButton::activate-link] signal and returning %TRUE from
    the signal handler.

    # CSS nodes

    `GtkLinkButton` has a single CSS node with name button. To differentiate
    it from a plain `GtkButton`, it gets the .link style class.

    # Accessibility

    `GtkLinkButton` uses the %GTK_ACCESSIBLE_ROLE_LINK role.

    :Constructors:

    ::

        LinkButton(**properties)
        new(uri:str) -> Gtk.Widget
        new_with_label(uri:str, label:str=None) -> Gtk.Widget

    Object GtkLinkButton

    Signals from GtkLinkButton:
      activate-link () -> gboolean

    Properties from GtkLinkButton:
      uri -> gchararray: uri
      visited -> gboolean: visited

    Signals from GtkButton:
      activate ()
      clicked ()

    Properties from GtkButton:
      label -> gchararray: label
      has-frame -> gboolean: has-frame
      use-underline -> gboolean: use-underline
      icon-name -> gchararray: icon-name
      child -> GtkWidget: child
      can-shrink -> gboolean: can-shrink

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Button.Props,
        Accessible.Props,
        Actionable.Props,
        Buildable.Props,
        ConstraintTarget.Props,
    ):
        uri: str
        """
        The URI bound to this button.
        """
        visited: bool
        """
        The 'visited' state of this button.

        A visited link is drawn in a different color.
        """

    props: Props = ...
    def __init__(
        self,
        uri: str = ...,
        visited: bool = ...,
        can_shrink: bool = ...,
        child: Optional[Widget] = ...,
        has_frame: bool = ...,
        icon_name: str = ...,
        label: str = ...,
        use_underline: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        action_name: Optional[str] = ...,
        action_target: GLib.Variant = ...,
    ): ...
    def get_uri(self) -> str:
        """
        Retrieves the URI of the `GtkLinkButton`.

        Parameters:


        Returns:
            str: a valid URI. The returned string is owned by the link button
        and should not be modified or freed.

        """
        ...

    def get_visited(self) -> bool:
        """
        Retrieves the “visited” state of the `GtkLinkButton`.

        The button becomes visited when it is clicked. If the URI
        is changed on the button, the “visited” state is unset again.

        The state may also be changed using [method@Gtk.LinkButton.set_visited].

        Parameters:


        Returns:
            bool: %TRUE if the link has been visited, %FALSE otherwise

        """
        ...

    @classmethod
    def new(cls, uri: str) -> LinkButton:
        """
        Creates a new `GtkLinkButton` with the URI as its text.

        Parameters:
            uri: a valid URI

        Returns:
            Widget: a new link button widget.

        """
        ...

    @classmethod
    def new_with_label(cls, uri: str, label: Optional[str] = None) -> LinkButton:
        """
        Creates a new `GtkLinkButton` containing a label.

        Parameters:
            uri: a valid URI
            label: the text of the button

        Returns:
            Widget: a new link button widget.

        """
        ...

    def set_uri(self, uri: str) -> None:
        """
        Sets @uri as the URI where the `GtkLinkButton` points.

        As a side-effect this unsets the “visited” state of the button.

        Parameters:
            uri: a valid URI

        Returns:

        """
        ...

    def set_visited(self, visited: bool) -> None:
        """
        Sets the “visited” state of the `GtkLinkButton`.

        See [method@Gtk.LinkButton.get_visited] for more details.

        Parameters:
            visited: the new “visited” state

        Returns:

        """
        ...

class ListBase(Widget, Accessible, Buildable, ConstraintTarget, Orientable, Scrollable):
    """
    `GtkListBase` is the abstract base class for GTK's list widgets.

    :Constructors:

    ::

        ListBase(**properties)

    Object GtkListBase

    Properties from GtkListBase:
      orientation -> GtkOrientation: orientation

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
        Scrollable.Props,
    ):
        orientation: Orientation
        """
        The orientation of the list. See GtkOrientable:orientation
        for details.
        """

    props: Props = ...
    def __init__(
        self,
        orientation: Orientation = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        hadjustment: Optional[Adjustment] = ...,
        hscroll_policy: ScrollablePolicy = ...,
        vadjustment: Optional[Adjustment] = ...,
        vscroll_policy: ScrollablePolicy = ...,
    ): ...

class ListBaseClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ListBox(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkListBox` is a vertical list.

    A `GtkListBox` only contains `GtkListBoxRow` children. These rows can
    by dynamically sorted and filtered, and headers can be added dynamically
    depending on the row content. It also allows keyboard and mouse navigation
    and selection like a typical list.

    Using `GtkListBox` is often an alternative to `GtkTreeView`, especially
    when the list contents has a more complicated layout than what is allowed
    by a `GtkCellRenderer`, or when the contents is interactive (i.e. has a
    button in it).

    Although a `GtkListBox` must have only `GtkListBoxRow` children, you can
    add any kind of widget to it via [method@Gtk.ListBox.prepend],
    [method@Gtk.ListBox.append] and [method@Gtk.ListBox.insert] and a
    `GtkListBoxRow` widget will automatically be inserted between the list
    and the widget.

    `GtkListBoxRows` can be marked as activatable or selectable. If a row is
    activatable, [signal@Gtk.ListBox::row-activated] will be emitted for it when
    the user tries to activate it. If it is selectable, the row will be marked
    as selected when the user tries to select it.

    # GtkListBox as GtkBuildable

    The `GtkListBox` implementation of the `GtkBuildable` interface supports
    setting a child as the placeholder by specifying “placeholder” as the “type”
    attribute of a `<child>` element. See [method@Gtk.ListBox.set_placeholder]
    for info.

    # CSS nodes

    |[<!-- language=\"plain\" -->
    list[.separators][.rich-list][.navigation-sidebar][.boxed-list]
    ╰── row[.activatable]
    ]|

    `GtkListBox` uses a single CSS node named list. It may carry the .separators
    style class, when the [property@Gtk.ListBox:show-separators] property is set.
    Each `GtkListBoxRow` uses a single CSS node named row. The row nodes get the
    .activatable style class added when appropriate.

    It may also carry the .boxed-list style class. In this case, the list will be
    automatically surrounded by a frame and have separators.

    The main list node may also carry style classes to select
    the style of [list presentation](section-list-widget.html#list-styles):
    .rich-list, .navigation-sidebar or .data-table.

    # Accessibility

    `GtkListBox` uses the %GTK_ACCESSIBLE_ROLE_LIST role and `GtkListBoxRow` uses
    the %GTK_ACCESSIBLE_ROLE_LIST_ITEM role.

    :Constructors:

    ::

        ListBox(**properties)
        new() -> Gtk.Widget

    Object GtkListBox

    Signals from GtkListBox:
      move-cursor (GtkMovementStep, gint, gboolean, gboolean)
      select-all ()
      unselect-all ()
      row-selected (GtkListBoxRow)
      selected-rows-changed ()
      row-activated (GtkListBoxRow)
      activate-cursor-row ()
      toggle-cursor-row ()

    Properties from GtkListBox:
      selection-mode -> GtkSelectionMode: selection-mode
      activate-on-single-click -> gboolean: activate-on-single-click
      accept-unpaired-release -> gboolean: accept-unpaired-release
      show-separators -> gboolean: show-separators

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        accept_unpaired_release: bool
        """
        Whether to accept unpaired release events.
        """
        activate_on_single_click: bool
        """
        Determines whether children can be activated with a single
        click, or require a double-click.
        """
        selection_mode: SelectionMode
        """
        The selection mode used by the list box.
        """
        show_separators: bool
        """
        Whether to show separators between rows.
        """

    props: Props = ...
    def __init__(
        self,
        accept_unpaired_release: bool = ...,
        activate_on_single_click: bool = ...,
        selection_mode: SelectionMode = ...,
        show_separators: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def append(self, child: Widget) -> None:
        """
        Append a widget to the list.

        If a sort function is set, the widget will
        actually be inserted at the calculated position.

        Parameters:
            child: the `GtkWidget` to add

        Returns:

        """
        ...

    def bind_model(
        self,
        model: Optional[Gio.ListModel] = None,
        create_widget_func: Optional[Callable[..., Widget]] = None,
        *user_data: Any,
    ) -> None:
        """
        Binds @model to @box.

        If @box was already bound to a model, that previous binding is
        destroyed.

        The contents of @box are cleared and then filled with widgets that
        represent items from @model. @box is updated whenever @model changes.
        If @model is %NULL, @box is left empty.

        It is undefined to add or remove widgets directly (for example, with
        [method@Gtk.ListBox.insert]) while @box is bound to a model.

        Note that using a model is incompatible with the filtering and sorting
        functionality in `GtkListBox`. When using a model, filtering and sorting
        should be implemented by the model.

        Parameters:
            model: the `GListModel` to be bound to @box
            create_widget_func: a function that creates widgets for items
        or %NULL in case you also passed %NULL as @model
            user_data: user data passed to @create_widget_func

        Returns:

        """
        ...

    def drag_highlight_row(self, row: ListBoxRow) -> None:
        """
        Add a drag highlight to a row.

        This is a helper function for implementing DnD onto a `GtkListBox`.
        The passed in @row will be highlighted by setting the
        %GTK_STATE_FLAG_DROP_ACTIVE state and any previously highlighted
        row will be unhighlighted.

        The row will also be unhighlighted when the widget gets
        a drag leave event.

        Parameters:
            row: a `GtkListBoxRow`

        Returns:

        """
        ...

    def drag_unhighlight_row(self) -> None:
        """
        If a row has previously been highlighted via gtk_list_box_drag_highlight_row(),
        it will have the highlight removed.

        Parameters:


        Returns:

        """
        ...

    def get_activate_on_single_click(self) -> bool:
        """
        Returns whether rows activate on single clicks.

        Parameters:


        Returns:
            bool: %TRUE if rows are activated on single click, %FALSE otherwise

        """
        ...

    def get_adjustment(self) -> Optional[Adjustment]:
        """
        Gets the adjustment (if any) that the widget uses to
        for vertical scrolling.

        Parameters:


        Returns:
            Optional[Adjustment]: the adjustment

        """
        ...

    def get_row_at_index(self, index_: int) -> Optional[ListBoxRow]:
        """
        Gets the n-th child in the list (not counting headers).

        If @index_ is negative or larger than the number of items in the
        list, %NULL is returned.

        Parameters:
            index_: the index of the row

        Returns:
            Optional[ListBoxRow]: the child `GtkWidget`

        """
        ...

    def get_row_at_y(self, y: int) -> Optional[ListBoxRow]:
        """
        Gets the row at the @y position.

        Parameters:
            y: position

        Returns:
            Optional[ListBoxRow]: the row

        """
        ...

    def get_selected_row(self) -> Optional[ListBoxRow]:
        """
        Gets the selected row, or %NULL if no rows are selected.

        Note that the box may allow multiple selection, in which
        case you should use [method@Gtk.ListBox.selected_foreach] to
        find all selected rows.

        Parameters:


        Returns:
            Optional[ListBoxRow]: the selected row

        """
        ...

    def get_selected_rows(self) -> list[ListBoxRow]:
        """
        Creates a list of all selected children.

        Parameters:


        Returns:
            list[ListBoxRow]:
        A `GList` containing the `GtkWidget` for each selected child.
        Free with g_list_free() when done.

        """
        ...

    def get_selection_mode(self) -> SelectionMode:
        """
        Gets the selection mode of the listbox.

        Parameters:


        Returns:
            SelectionMode: a `GtkSelectionMode`

        """
        ...

    def get_show_separators(self) -> bool:
        """
        Returns whether the list box should show separators
        between rows.

        Parameters:


        Returns:
            bool: %TRUE if the list box shows separators

        """
        ...

    def insert(self, child: Widget, position: int) -> None:
        """
        Insert the @child into the @box at @position.

        If a sort function is
        set, the widget will actually be inserted at the calculated position.

        If @position is -1, or larger than the total number of items in the
        @box, then the @child will be appended to the end.

        Parameters:
            child: the `GtkWidget` to add
            position: the position to insert @child in

        Returns:

        """
        ...

    def invalidate_filter(self) -> None:
        """
        Update the filtering for all rows.

        Call this when result
        of the filter function on the @box is changed due
        to an external factor. For instance, this would be used
        if the filter function just looked for a specific search
        string and the entry with the search string has changed.

        Parameters:


        Returns:

        """
        ...

    def invalidate_headers(self) -> None:
        """
        Update the separators for all rows.

        Call this when result
        of the header function on the @box is changed due
        to an external factor.

        Parameters:


        Returns:

        """
        ...

    def invalidate_sort(self) -> None:
        """
        Update the sorting for all rows.

        Call this when result
        of the sort function on the @box is changed due
        to an external factor.

        Parameters:


        Returns:

        """
        ...

    @classmethod
    def new(cls) -> ListBox:
        """
        Creates a new `GtkListBox` container.

        Parameters:


        Returns:
            Widget: a new `GtkListBox`

        """
        ...

    def prepend(self, child: Widget) -> None:
        """
        Prepend a widget to the list.

        If a sort function is set, the widget will
        actually be inserted at the calculated position.

        Parameters:
            child: the `GtkWidget` to add

        Returns:

        """
        ...

    def remove(self, child: Widget) -> None:
        """
        Removes a child from @box.

        Parameters:
            child: the child to remove

        Returns:

        """
        ...

    def remove_all(self) -> None:
        """
        Removes all rows from @box.

        This function does nothing if @box is backed by a model.

        Parameters:


        Returns:

        """
        ...

    def select_all(self) -> None:
        """
        Select all children of @box, if the selection mode allows it.

        Parameters:


        Returns:

        """
        ...

    def select_row(self, row: Optional[ListBoxRow] = None) -> None:
        """
        Make @row the currently selected row.

        Parameters:
            row: The row to select

        Returns:

        """
        ...

    def selected_foreach(self, func: Callable[..., None], *data: Any) -> None:
        """
        Calls a function for each selected child.

        Note that the selection cannot be modified from within this function.

        Parameters:
            func: the function to call for each selected child
            data: user data to pass to the function

        Returns:

        """
        ...

    def set_activate_on_single_click(self, single: bool) -> None:
        """
        If @single is %TRUE, rows will be activated when you click on them,
        otherwise you need to double-click.

        Parameters:
            single: a boolean

        Returns:

        """
        ...

    def set_adjustment(self, adjustment: Optional[Adjustment] = None) -> None:
        """
        Sets the adjustment (if any) that the widget uses to
        for vertical scrolling.

        For instance, this is used to get the page size for
        PageUp/Down key handling.

        In the normal case when the @box is packed inside
        a `GtkScrolledWindow` the adjustment from that will
        be picked up automatically, so there is no need
        to manually do that.

        Parameters:
            adjustment: the adjustment

        Returns:

        """
        ...

    def set_filter_func(
        self, filter_func: Optional[Callable[..., bool]] = None, *user_data: Any
    ) -> None:
        """
        By setting a filter function on the @box one can decide dynamically which
        of the rows to show.

        For instance, to implement a search function on a list that
        filters the original list to only show the matching rows.

        The @filter_func will be called for each row after the call, and
        it will continue to be called each time a row changes (via
        [method@Gtk.ListBoxRow.changed]) or when [method@Gtk.ListBox.invalidate_filter]
        is called.

        Note that using a filter function is incompatible with using a model
        (see [method@Gtk.ListBox.bind_model]).

        Parameters:
            filter_func: callback that lets you filter which rows to show
            user_data: user data passed to @filter_func

        Returns:

        """
        ...

    def set_header_func(
        self, update_header: Optional[Callable[..., None]] = None, *user_data: Any
    ) -> None:
        """
        Sets a header function.

        By setting a header function on the @box one can dynamically add headers
        in front of rows, depending on the contents of the row and its position
        in the list.

        For instance, one could use it to add headers in front of the first item
        of a new kind, in a list sorted by the kind.

        The @update_header can look at the current header widget using
        [method@Gtk.ListBoxRow.get_header] and either update the state of the widget
        as needed, or set a new one using [method@Gtk.ListBoxRow.set_header]. If no
        header is needed, set the header to %NULL.

        Note that you may get many calls @update_header to this for a particular
        row when e.g. changing things that don’t affect the header. In this case
        it is important for performance to not blindly replace an existing header
        with an identical one.

        The @update_header function will be called for each row after the call,
        and it will continue to be called each time a row changes (via
        [method@Gtk.ListBoxRow.changed]) and when the row before changes (either
        by [method@Gtk.ListBoxRow.changed] on the previous row, or when the previous
        row becomes a different row). It is also called for all rows when
        [method@Gtk.ListBox.invalidate_headers] is called.

        Parameters:
            update_header: callback that lets you add row headers
            user_data: user data passed to @update_header

        Returns:

        """
        ...

    def set_placeholder(self, placeholder: Optional[Widget] = None) -> None:
        """
        Sets the placeholder widget that is shown in the list when
        it doesn't display any visible children.

        Parameters:
            placeholder: a `GtkWidget`

        Returns:

        """
        ...

    def set_selection_mode(self, mode: SelectionMode) -> None:
        """
        Sets how selection works in the listbox.

        Parameters:
            mode: The `GtkSelectionMode`

        Returns:

        """
        ...

    def set_show_separators(self, show_separators: bool) -> None:
        """
        Sets whether the list box should show separators
        between rows.

        Parameters:
            show_separators: %TRUE to show separators

        Returns:

        """
        ...

    def set_sort_func(
        self, sort_func: Optional[Callable[..., int]] = None, *user_data: Any
    ) -> None:
        """
        Sets a sort function.

        By setting a sort function on the @box one can dynamically reorder
        the rows of the list, based on the contents of the rows.

        The @sort_func will be called for each row after the call, and will
        continue to be called each time a row changes (via
        [method@Gtk.ListBoxRow.changed]) and when [method@Gtk.ListBox.invalidate_sort]
        is called.

        Note that using a sort function is incompatible with using a model
        (see [method@Gtk.ListBox.bind_model]).

        Parameters:
            sort_func: the sort function
            user_data: user data passed to @sort_func

        Returns:

        """
        ...

    def unselect_all(self) -> None:
        """
        Unselect all children of @box, if the selection mode allows it.

        Parameters:


        Returns:

        """
        ...

    def unselect_row(self, row: ListBoxRow) -> None:
        """
        Unselects a single row of @box, if the selection mode allows it.

        Parameters:
            row: the row to unselect

        Returns:

        """
        ...

class ListBoxRow(Widget, Accessible, Actionable, Buildable, ConstraintTarget):
    """
    `GtkListBoxRow` is the kind of widget that can be added to a `GtkListBox`.

    :Constructors:

    ::

        ListBoxRow(**properties)
        new() -> Gtk.Widget

    Object GtkListBoxRow

    Signals from GtkListBoxRow:
      activate ()

    Properties from GtkListBoxRow:
      activatable -> gboolean: activatable
      selectable -> gboolean: selectable
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Actionable.Props,
        Buildable.Props,
        ConstraintTarget.Props,
    ):
        activatable: bool
        """
        Determines whether the ::row-activated
        signal will be emitted for this row.
        """
        child: Optional[Widget]
        """
        The child widget.
        """
        selectable: bool
        """
        Determines whether this row can be selected.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        activatable: bool = ...,
        child: Optional[Widget] = ...,
        selectable: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        action_name: Optional[str] = ...,
        action_target: GLib.Variant = ...,
    ): ...
    def changed(self) -> None:
        """
        Marks @row as changed, causing any state that depends on this
        to be updated.

        This affects sorting, filtering and headers.

        Note that calls to this method must be in sync with the data
        used for the row functions. For instance, if the list is
        mirroring some external data set, and *two* rows changed in the
        external data set then when you call gtk_list_box_row_changed()
        on the first row the sort function must only read the new data
        for the first of the two changed rows, otherwise the resorting
        of the rows will be wrong.

        This generally means that if you don’t fully control the data
        model you have to duplicate the data that affects the listbox
        row functions into the row widgets themselves. Another alternative
        is to call [method@Gtk.ListBox.invalidate_sort] on any model change,
        but that is more expensive.

        Parameters:


        Returns:

        """
        ...

    def do_activate(self) -> None: ...
    def get_activatable(self) -> bool:
        """
        Gets whether the row is activatable.

        Parameters:


        Returns:
            bool: %TRUE if the row is activatable

        """
        ...

    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @row.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @row

        """
        ...

    def get_header(self) -> Optional[Widget]:
        """
        Returns the current header of the @row.

        This can be used
        in a [callback@Gtk.ListBoxUpdateHeaderFunc] to see if
        there is a header set already, and if so to update
        the state of it.

        Parameters:


        Returns:
            Optional[Widget]: the current header

        """
        ...

    def get_index(self) -> int:
        """
        Gets the current index of the @row in its `GtkListBox` container.

        Parameters:


        Returns:
            int: the index of the @row, or -1 if the @row is not in a listbox

        """
        ...

    def get_selectable(self) -> bool:
        """
        Gets whether the row can be selected.

        Parameters:


        Returns:
            bool: %TRUE if the row is selectable

        """
        ...

    def is_selected(self) -> bool:
        """
        Returns whether the child is currently selected in its
        `GtkListBox` container.

        Parameters:


        Returns:
            bool: %TRUE if @row is selected

        """
        ...

    @classmethod
    def new(cls) -> ListBoxRow:
        """
        Creates a new `GtkListBoxRow`.

        Parameters:


        Returns:
            Widget: a new `GtkListBoxRow`

        """
        ...

    def set_activatable(self, activatable: bool) -> None:
        """
        Set whether the row is activatable.

        Parameters:
            activatable: %TRUE to mark the row as activatable

        Returns:

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @self.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_header(self, header: Optional[Widget] = None) -> None:
        """
        Sets the current header of the @row.

        This is only allowed to be called
        from a [callback@Gtk.ListBoxUpdateHeaderFunc].
        It will replace any existing header in the row,
        and be shown in front of the row in the listbox.

        Parameters:
            header: the header

        Returns:

        """
        ...

    def set_selectable(self, selectable: bool) -> None:
        """
        Set whether the row can be selected.

        Parameters:
            selectable: %TRUE to mark the row as selectable

        Returns:

        """
        ...

class ListBoxRowClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ListBoxRowClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    activate: Callable[[ListBoxRow], None] = ...
    padding: list[None] = ...

class ListHeader(GObject.Object):
    """
    `GtkListHeader` is used by list widgets to represent the headers they
    display.

    `GtkListHeader` objects are managed just like [class@Gtk.ListItem]
    objects via their factory, but provide a different set of properties suitable
    for managing the header instead of individual items.

    :Constructors:

    ::

        ListHeader(**properties)

    Object GtkListHeader

    Properties from GtkListHeader:
      child -> GtkWidget: child
      end -> guint: end
      item -> GObject: item
      n-items -> guint: n-items
      start -> guint: start

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        child: Optional[Widget]
        """
        Widget used for display.
        """
        end: int
        """
        The first position no longer part of this section.
        """
        item: Optional[GObject.Object]
        """
        The item at the start of the section.
        """
        n_items: int
        """
        Number of items in this section.
        """
        start: int
        """
        First position of items in this section.
        """

    props: Props = ...
    def __init__(self, child: Optional[Widget] = ...): ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child previously set via gtk_list_header_set_child() or
        %NULL if none was set.

        Parameters:


        Returns:
            Optional[Widget]: The child

        """
        ...

    def get_end(self) -> int:
        """
        Gets the end position in the model of the section that @self is
        currently the header for.

        If @self is unbound, %GTK_INVALID_LIST_POSITION is returned.

        Parameters:


        Returns:
            int: The end position of the section

        """
        ...

    def get_item(self) -> Optional[GObject.Object]:
        """
        Gets the model item at the start of the section.
        This is the item that occupies the list model at position
        [property@Gtk.ListHeader:start].

        If @self is unbound, this function returns %NULL.

        Parameters:


        Returns:
            Optional[GObject.Object]: The item displayed

        """
        ...

    def get_n_items(self) -> int:
        """
        Gets the the number of items in the section.

        If @self is unbound, 0 is returned.

        Parameters:


        Returns:
            int: The number of items in the section

        """
        ...

    def get_start(self) -> int:
        """
        Gets the start position in the model of the section that @self is
        currently the header for.

        If @self is unbound, %GTK_INVALID_LIST_POSITION is returned.

        Parameters:


        Returns:
            int: The start position of the section

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child to be used for this listitem.

        This function is typically called by applications when
        setting up a header so that the widget can be reused when
        binding it multiple times.

        Parameters:
            child: The list item's child or %NULL to unset

        Returns:

        """
        ...

class ListHeaderClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ListItem(GObject.Object):
    """
    `GtkListItem` is used by list widgets to represent items in a
    [iface@Gio.ListModel].

    `GtkListItem` objects are managed by the list widget (with its factory)
    and cannot be created by applications, but they need to be populated
    by application code. This is done by calling [method@Gtk.ListItem.set_child].

    `GtkListItem` objects exist in 2 stages:

    1. The unbound stage where the listitem is not currently connected to
    an item in the list. In that case, the [property@Gtk.ListItem:item]
    property is set to %NULL.

    2. The bound stage where the listitem references an item from the list.
    The [property@Gtk.ListItem:item] property is not %NULL.

    :Constructors:

    ::

        ListItem(**properties)

    Object GtkListItem

    Properties from GtkListItem:
      accessible-description -> gchararray: accessible-description
      accessible-label -> gchararray: accessible-label
      activatable -> gboolean: activatable
      child -> GtkWidget: child
      focusable -> gboolean: focusable
      item -> GObject: item
      position -> guint: position
      selectable -> gboolean: selectable
      selected -> gboolean: selected

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        accessible_description: str
        """
        The accessible description to set on the list item.
        """
        accessible_label: str
        """
        The accessible label to set on the list item.
        """
        activatable: bool
        """
        If the item can be activated by the user.
        """
        child: Optional[Widget]
        """
        Widget used for display.
        """
        focusable: bool
        """
        If the item can be focused with the keyboard.
        """
        item: Optional[GObject.Object]
        """
        Displayed item.
        """
        position: int
        """
        Position of the item.
        """
        selectable: bool
        """
        If the item can be selected by the user.
        """
        selected: bool
        """
        If the item is currently selected.
        """

    props: Props = ...
    def __init__(
        self,
        accessible_description: str = ...,
        accessible_label: str = ...,
        activatable: bool = ...,
        child: Optional[Widget] = ...,
        focusable: bool = ...,
        selectable: bool = ...,
    ): ...
    def get_accessible_description(self) -> str:
        """
        Gets the accessible description of @self.

        Parameters:


        Returns:
            str: the accessible description

        """
        ...

    def get_accessible_label(self) -> str:
        """
        Gets the accessible label of @self.

        Parameters:


        Returns:
            str: the accessible label

        """
        ...

    def get_activatable(self) -> bool:
        """
        Checks if a list item has been set to be activatable via
        gtk_list_item_set_activatable().

        Parameters:


        Returns:
            bool: %TRUE if the item is activatable

        """
        ...

    def get_child(self) -> Optional[Widget]:
        """
        Gets the child previously set via gtk_list_item_set_child() or
        %NULL if none was set.

        Parameters:


        Returns:
            Optional[Widget]: The child

        """
        ...

    def get_focusable(self) -> bool:
        """
        Checks if a list item has been set to be focusable via
        gtk_list_item_set_focusable().

        Parameters:


        Returns:
            bool: %TRUE if the item is focusable

        """
        ...

    def get_item(self) -> Optional[GObject.Object]:
        """
        Gets the model item that associated with @self.

        If @self is unbound, this function returns %NULL.

        Parameters:


        Returns:
            Optional[GObject.Object]: The item displayed

        """
        ...

    def get_position(self) -> int:
        """
        Gets the position in the model that @self currently displays.

        If @self is unbound, %GTK_INVALID_LIST_POSITION is returned.

        Parameters:


        Returns:
            int: The position of this item

        """
        ...

    def get_selectable(self) -> bool:
        """
        Checks if a list item has been set to be selectable via
        gtk_list_item_set_selectable().

        Do not confuse this function with [method@Gtk.ListItem.get_selected].

        Parameters:


        Returns:
            bool: %TRUE if the item is selectable

        """
        ...

    def get_selected(self) -> bool:
        """
        Checks if the item is displayed as selected.

        The selected state is maintained by the liste widget and its model
        and cannot be set otherwise.

        Parameters:


        Returns:
            bool: %TRUE if the item is selected.

        """
        ...

    def set_accessible_description(self, description: str) -> None:
        """
        Sets the accessible description for the list item,
        which may be used by e.g. screen readers.

        Parameters:
            description: the description

        Returns:

        """
        ...

    def set_accessible_label(self, label: str) -> None:
        """
        Sets the accessible label for the list item,
        which may be used by e.g. screen readers.

        Parameters:
            label: the label

        Returns:

        """
        ...

    def set_activatable(self, activatable: bool) -> None:
        """
        Sets @self to be activatable.

        If an item is activatable, double-clicking on the item, using
        the Return key or calling gtk_widget_activate() will activate
        the item. Activating instructs the containing view to handle
        activation. `GtkListView` for example will be emitting the
        [signal@Gtk.ListView::activate] signal.

        By default, list items are activatable.

        Parameters:
            activatable: if the item should be activatable

        Returns:

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child to be used for this listitem.

        This function is typically called by applications when
        setting up a listitem so that the widget can be reused when
        binding it multiple times.

        Parameters:
            child: The list item's child or %NULL to unset

        Returns:

        """
        ...

    def set_focusable(self, focusable: bool) -> None:
        """
        Sets @self to be focusable.

        If an item is focusable, it can be focused using the keyboard.
        This works similar to [method@Gtk.Widget.set_focusable].

        Note that if items are not focusable, the keyboard cannot be used to activate
        them and selecting only works if one of the listitem's children is focusable.

        By default, list items are focusable.

        Parameters:
            focusable: if the item should be focusable

        Returns:

        """
        ...

    def set_selectable(self, selectable: bool) -> None:
        """
        Sets @self to be selectable.

        If an item is selectable, clicking on the item or using the keyboard
        will try to select or unselect the item. If this succeeds is up to
        the model to determine, as it is managing the selected state.

        Note that this means that making an item non-selectable has no
        influence on the selected state at all. A non-selectable item
        may still be selected.

        By default, list items are selectable. When rebinding them to
        a new item, they will also be reset to be selectable by GTK.

        Parameters:
            selectable: if the item should be selectable

        Returns:

        """
        ...

class ListItemClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ListItemFactory(GObject.Object):
    """
    A `GtkListItemFactory` creates widgets for the items taken from a `GListModel`.

    This is one of the core concepts of handling list widgets such
    as [class@Gtk.ListView] or [class@Gtk.GridView].

    The `GtkListItemFactory` is tasked with creating widgets for items
    taken from the model when the views need them and updating them as
    the items displayed by the view change.

    A view is usually only able to display anything after both a factory
    and a model have been set on the view. So it is important that you do
    not skip this step when setting up your first view.

    Because views do not display the whole list at once but only a few
    items, they only need to maintain a few widgets at a time. They will
    instruct the `GtkListItemFactory` to create these widgets and bind them
    to the items that are currently displayed.

    As the list model changes or the user scrolls to the list, the items will
    change and the view will instruct the factory to bind the widgets to those
    new items.

    The actual widgets used for displaying those widgets is provided by you.

    When the factory needs widgets created, it will create a `GtkListItem`
    and hand it to your code to set up a widget for. This list item will provide
    various properties with information about what item to display and provide
    you with some opportunities to configure its behavior. See the
    [class@Gtk.ListItem] documentation for further details.

    Various implementations of `GtkListItemFactory` exist to allow you different
    ways to provide those widgets. The most common implementations are
    [class@Gtk.BuilderListItemFactory] which takes a `GtkBuilder` .ui file
    and then creates widgets and manages everything automatically from the
    information in that file and [class@Gtk.SignalListItemFactory] which allows
    you to connect to signals with your own code and retain full control over
    how the widgets are setup and managed.

    A `GtkListItemFactory` is supposed to be final - that means its behavior should
    not change and the first widget created from it should behave the same way as
    the last widget created from it.
    If you intend to do changes to the behavior, it is recommended that you create
    a new `GtkListItemFactory` which will allow the views to recreate its widgets.

    Once you have chosen your factory and created it, you need to set it
    on the view widget you want to use it with, such as via
    [method@Gtk.ListView.set_factory]. Reusing factories across different
    views is allowed, but very uncommon.

    :Constructors:

    ::

        ListItemFactory(**properties)

    Object GtkListItemFactory

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...

class ListItemFactoryClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

@deprecated("Use [class@Gio.ListStore] instead")
class ListStore(
    GObject.Object, Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable
):
    """
    A list-like data structure that can be used with the [class@Gtk.TreeView].

    The `GtkListStore` object is a list model for use with a `GtkTreeView`
    widget. It implements the `GtkTreeModel` interface, and consequentialy,
    can use all of the methods available there. It also implements the
    `GtkTreeSortable` interface so it can be sorted by the view.
    Finally, it also implements the tree
    [drag](iface.TreeDragSource.html) and [drop](iface.TreeDragDest.html)
    interfaces.

    The `GtkListStore` can accept most `GType`s as a column type, though
    it can’t accept all custom types. Internally, it will keep a copy of
    data passed in (such as a string or a boxed pointer). Columns that
    accept `GObject`s are handled a little differently. The
    `GtkListStore` will keep a reference to the object instead of copying the
    value. As a result, if the object is modified, it is up to the
    application writer to call [method@Gtk.TreeModel.row_changed] to emit the
    [signal@Gtk.TreeModel::row_changed] signal. This most commonly affects lists
    with [class@Gdk.Texture]s stored.

    An example for creating a simple list store:

    ```c
    enum {
    COLUMN_STRING,
    COLUMN_INT,
    COLUMN_BOOLEAN,
    N_COLUMNS
    };

    {
    GtkListStore *list_store;
    GtkTreePath *path;
    GtkTreeIter iter;
    int i;

    list_store = gtk_list_store_new (N_COLUMNS,
    G_TYPE_STRING,
    G_TYPE_INT,
    G_TYPE_BOOLEAN);

    for (i = 0; i < 10; i++)
    {
    char *some_data;

    some_data = get_some_data (i);

    // Add a new row to the model
    gtk_list_store_append (list_store, &iter);
    gtk_list_store_set (list_store, &iter,
    COLUMN_STRING, some_data,
    COLUMN_INT, i,
    COLUMN_BOOLEAN, FALSE,
    -1);

    // As the store will keep a copy of the string internally,
    // we free some_data.
    g_free (some_data);
    }

    // Modify a particular row
    path = gtk_tree_path_new_from_string (\"4\");
    gtk_tree_model_get_iter (GTK_TREE_MODEL (list_store),
    &iter,
    path);
    gtk_tree_path_free (path);
    gtk_list_store_set (list_store, &iter,
    COLUMN_BOOLEAN, TRUE,
    -1);
    }
    ```

    `GtkListStore` is deprecated since GTK 4.10, and should not be used in newly
    written code. You should use [class@Gio.ListStore] instead, and the various
    list models provided by GTK.

    ## Performance Considerations

    Internally, the `GtkListStore` was originally implemented with a linked list
    with a tail pointer. As a result, it was fast at data insertion and deletion,
    and not fast at random data access. The `GtkListStore` sets the
    `GTK_TREE_MODEL_ITERS_PERSIST` flag, which means that `GtkTreeIter`s can be
    cached while the row exists. Thus, if access to a particular row is needed
    often and your code is expected to run on older versions of GTK, it is worth
    keeping the iter around.

    ## Atomic Operations

    It is important to note that only the methods
    gtk_list_store_insert_with_values() and gtk_list_store_insert_with_valuesv()
    are atomic, in the sense that the row is being appended to the store and the
    values filled in in a single operation with regard to `GtkTreeModel` signaling.
    In contrast, using e.g. gtk_list_store_append() and then gtk_list_store_set()
    will first create a row, which triggers the `GtkTreeModel::row-inserted` signal
    on `GtkListStore`. The row, however, is still empty, and any signal handler
    connecting to `GtkTreeModel::row-inserted` on this particular store should be prepared
    for the situation that the row might be empty. This is especially important
    if you are wrapping the `GtkListStore` inside a `GtkTreeModel`Filter and are
    using a `GtkTreeModel`FilterVisibleFunc. Using any of the non-atomic operations
    to append rows to the `GtkListStore` will cause the
    `GtkTreeModel`FilterVisibleFunc to be visited with an empty row first; the
    function must be prepared for that.

    ## GtkListStore as GtkBuildable

    The GtkListStore implementation of the [iface@Gtk.Buildable] interface allows
    to specify the model columns with a `<columns>` element that may contain
    multiple `<column>` elements, each specifying one model column. The “type”
    attribute specifies the data type for the column.

    Additionally, it is possible to specify content for the list store
    in the UI definition, with the `<data>` element. It can contain multiple
    `<row>` elements, each specifying to content for one row of the list model.
    Inside a `<row>`, the `<col>` elements specify the content for individual cells.

    Note that it is probably more common to define your models in the code,
    and one might consider it a layering violation to specify the content of
    a list store in a UI definition, data, not presentation, and common wisdom
    is to separate the two, as far as possible.

    An example of a UI Definition fragment for a list store:

    ```xml
    <object class=\"GtkListStore\">
    <columns>
    <column type=\"gchararray\"/>
    <column type=\"gchararray\"/>
    <column type=\"gint\"/>
    </columns>
    <data>
    <row>
    <col id=\"0\">John</col>
    <col id=\"1\">Doe</col>
    <col id=\"2\">25</col>
    </row>
    <row>
    <col id=\"0\">Johan</col>
    <col id=\"1\">Dahlin</col>
    <col id=\"2\">50</col>
    </row>
    </data>
    </object>
    ```

    :Constructors:

    ::

        ListStore(**properties)
        new(types:list) -> Gtk.ListStore

    Object GtkListStore

    Signals from GtkTreeModel:
      row-changed (GtkTreePath, GtkTreeIter)
      row-inserted (GtkTreePath, GtkTreeIter)
      row-has-child-toggled (GtkTreePath, GtkTreeIter)
      row-deleted (GtkTreePath)
      rows-reordered (GtkTreePath, GtkTreeIter, gpointer)

    Signals from GtkTreeSortable:
      sort-column-changed ()

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        GObject.Object.Props,
        Buildable.Props,
        TreeDragDest.Props,
        TreeDragSource.Props,
        TreeModel.Props,
        TreeSortable.Props,
    ): ...
    parent: GObject.Object = ...
    priv: ListStorePrivate = ...
    def append(self, row=None): ...  # FIXME Function
    @deprecated("Use list models")
    def clear(self) -> None:
        """
        Removes all rows from the list store.

        Parameters:


        Returns:

        """
        ...

    def insert(self, position, row=None): ...  # FIXME Function
    def insert_after(self, sibling, row=None): ...  # FIXME Function
    def insert_before(self, sibling, row=None): ...  # FIXME Function
    @deprecated("Use list models")
    def insert_with_values(
        self, position: int, columns: Sequence[int], values: Sequence[Any]
    ) -> TreeIter:
        """
        Creates a new row at @position. @iter will be changed to point to this new
        row. If @position is -1, or larger than the number of rows in the list, then
        the new row will be appended to the list. The row will be filled with the
        values given to this function.

        Calling
        `gtk_list_store_insert_with_values (list_store, iter, position...)`
        has the same effect as calling:

        |[<!-- language=\"C\" -->
        static void
        insert_value (GtkListStore *list_store,
        GtkTreeIter *iter,
        int position)
        {
        gtk_list_store_insert (list_store, iter, position);
        gtk_list_store_set (list_store,
        iter
        // ...
        );
        }
        ]|

        with the difference that the former will only emit `GtkTreeModel`::row-inserted
        once, while the latter will emit `GtkTreeModel`::row-inserted,
        `GtkTreeModel`::row-changed and, if the list store is sorted,
        `GtkTreeModel`::rows-reordered for every inserted value.

        Since emitting the `GtkTreeModel::rows-reordered` signal repeatedly can
        affect the performance of the program, gtk_list_store_insert_with_values()
        should generally be preferred when inserting rows in a sorted list store.

        Parameters:
            position: position to insert the new row, or -1 to append after existing
        rows
            columns:
            values:

        Returns:
            TreeIter: An unset `GtkTreeIter` to set to the new row
        """
        ...

    @deprecated("Use list models")
    def insert_with_valuesv(
        self, position: int, columns: Sequence[int], values: Sequence[Any]
    ) -> TreeIter:
        """
        A variant of gtk_list_store_insert_with_values() which
        takes the columns and values as two arrays, instead of
        varargs.

        This function is mainly intended for language-bindings.

        Parameters:
            position: position to insert the new row, or -1 for last
            columns: an array of column numbers
            values: an array of GValues

        Returns:
            TreeIter: An unset `GtkTreeIter` to set to the new row
        """
        ...

    @deprecated("Use list models")
    def iter_is_valid(self, iter: TreeIter) -> bool:
        """
        Checks if the given iter is a valid iter for this `GtkListStore`.

        This function is slow. Only use it for debugging and/or testing
        purposes.

        Parameters:
            iter: the iterator to check

        Returns:
            bool: %TRUE if the iter is valid, %FALSE if the iter is invalid.

        """
        ...

    @deprecated("Use list models")
    def move_after(self, iter: TreeIter, position: Optional[TreeIter] = None) -> None:
        """
        Moves @iter in @store to the position after @position. Note that this
        function only works with unsorted stores. If @position is %NULL, @iter
        will be moved to the start of the list.

        Parameters:
            iter: A `GtkTreeIter`
            position: A `GtkTreeIter`

        Returns:

        """
        ...

    @deprecated("Use list models")
    def move_before(self, iter: TreeIter, position: Optional[TreeIter] = None) -> None:
        """
        Moves @iter in @store to the position before @position. Note that this
        function only works with unsorted stores. If @position is %NULL, @iter
        will be moved to the end of the list.

        Parameters:
            iter: A `GtkTreeIter`
            position: A `GtkTreeIter`

        Returns:

        """
        ...

    @deprecated("Use [class@Gio.ListStore] instead")
    @classmethod
    def new(cls, types: Sequence[Type]) -> ListStore:
        """
        Creates a new list store.

        The list store will have @n_columns columns, with each column using
        the given type passed to this function.


        Note that only types derived from standard GObject fundamental types
        are supported.

        As an example:

        ```c
        gtk_list_store_new (3, G_TYPE_INT, G_TYPE_STRING, GDK_TYPE_TEXTURE);
        ```

        will create a new `GtkListStore` with three columns, of type `int`,
        `gchararray` and `GdkTexture`, respectively.

        Parameters:
            types:

        Returns:
            ListStore: a new `GtkListStore`

        """
        ...

    def prepend(self, row=None): ...  # FIXME Function
    @deprecated("Use list models")
    def remove(self, iter: TreeIter) -> bool:
        """
        Removes the given row from the list store. After being removed,
        @iter is set to be the next valid row, or invalidated if it pointed
        to the last row in @list_store.

        Parameters:
            iter: A valid `GtkTreeIter`

        Returns:
            bool: %TRUE if @iter is valid, %FALSE if not.

        """
        ...

    @deprecated("Use list models")
    def reorder(self, new_order: Sequence[int]) -> None:
        """
        Reorders @store to follow the order indicated by @new_order. Note that
        this function only works with unsorted stores.

        Parameters:
            new_order: an array of integers mapping the new
        position of each child to its old position before the re-ordering,
        i.e. @new_order`[newpos] = oldpos`. It must have
        exactly as many items as the list store’s length.

        Returns:

        """
        ...

    def set(self, treeiter, *args): ...  # FIXME Function
    @deprecated("Use list models")
    def set_column_types(self, types: Sequence[Type]) -> None:
        """
        Sets the types of the columns of a list store.

        This function is meant primarily for objects that inherit
        from `GtkListStore`, and should only be used when constructing
        a new instance.

        This function cannot be called after a row has been added, or
        a method on the `GtkTreeModel` interface is called.

        Parameters:
            types: An array length n of `GType`s

        Returns:

        """
        ...

    def set_value(self, treeiter, column, value): ...  # FIXME Function
    @deprecated("Use list models")
    def swap(self, a: TreeIter, b: TreeIter) -> None:
        """
        Swaps @a and @b in @store. Note that this function only works with
        unsorted stores.

        Parameters:
            a: A `GtkTreeIter`
            b: Another `GtkTreeIter`

        Returns:

        """
        ...

class ListStoreClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ListStoreClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    padding: list[None] = ...

class ListStorePrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ListView(
    ListBase, Accessible, Buildable, ConstraintTarget, Orientable, Scrollable
):
    """
    `GtkListView` presents a large dynamic list of items.

    `GtkListView` uses its factory to generate one row widget for each visible
    item and shows them in a linear display, either vertically or horizontally.

    The [property@Gtk.ListView:show-separators] property offers a simple way to
    display separators between the rows.

    `GtkListView` allows the user to select items according to the selection
    characteristics of the model. For models that allow multiple selected items,
    it is possible to turn on _rubberband selection_, using
    [property@Gtk.ListView:enable-rubberband].

    If you need multiple columns with headers, see [class@Gtk.ColumnView].

    To learn more about the list widget framework, see the
    [overview](section-list-widget.html).

    An example of using `GtkListView`:
    ```c
    static void
    setup_listitem_cb (GtkListItemFactory *factory,
    GtkListItem *list_item)
    {
    GtkWidget *image;

    image = gtk_image_new ();
    gtk_image_set_icon_size (GTK_IMAGE (image), GTK_ICON_SIZE_LARGE);
    gtk_list_item_set_child (list_item, image);
    }

    static void
    bind_listitem_cb (GtkListItemFactory *factory,
    GtkListItem *list_item)
    {
    GtkWidget *image;
    GAppInfo *app_info;

    image = gtk_list_item_get_child (list_item);
    app_info = gtk_list_item_get_item (list_item);
    gtk_image_set_from_gicon (GTK_IMAGE (image), g_app_info_get_icon (app_info));
    }

    static void
    activate_cb (GtkListView *list,
    guint position,
    gpointer unused)
    {
    GAppInfo *app_info;

    app_info = g_list_model_get_item (G_LIST_MODEL (gtk_list_view_get_model (list)), position);
    g_app_info_launch (app_info, NULL, NULL, NULL);
    g_object_unref (app_info);
    }

    ...

    model = create_application_list ();

    factory = gtk_signal_list_item_factory_new ();
    g_signal_connect (factory, \"setup\", G_CALLBACK (setup_listitem_cb), NULL);
    g_signal_connect (factory, \"bind\", G_CALLBACK (bind_listitem_cb), NULL);

    list = gtk_list_view_new (GTK_SELECTION_MODEL (gtk_single_selection_new (model)), factory);

    g_signal_connect (list, \"activate\", G_CALLBACK (activate_cb), NULL);

    gtk_scrolled_window_set_child (GTK_SCROLLED_WINDOW (sw), list);
    ```

    # CSS nodes

    ```
    listview[.separators][.rich-list][.navigation-sidebar][.data-table]
    ├── row[.activatable]
    │
    ├── row[.activatable]
    │
    ┊
    ╰── [rubberband]
    ```

    `GtkListView` uses a single CSS node named `listview`. It may carry the
    `.separators` style class, when [property@Gtk.ListView:show-separators]
    property is set. Each child widget uses a single CSS node named `row`.
    If the [property@Gtk.ListItem:activatable] property is set, the
    corresponding row will have the `.activatable` style class. For
    rubberband selection, a node with name `rubberband` is used.

    The main listview node may also carry style classes to select
    the style of [list presentation](ListContainers.html#list-styles):
    .rich-list, .navigation-sidebar or .data-table.

    # Accessibility

    `GtkListView` uses the %GTK_ACCESSIBLE_ROLE_LIST role, and the list
    items use the %GTK_ACCESSIBLE_ROLE_LIST_ITEM role.

    :Constructors:

    ::

        ListView(**properties)
        new(model:Gtk.SelectionModel=None, factory:Gtk.ListItemFactory=None) -> Gtk.Widget

    Object GtkListView

    Signals from GtkListView:
      activate (guint)

    Properties from GtkListView:
      enable-rubberband -> gboolean: enable-rubberband
      factory -> GtkListItemFactory: factory
      header-factory -> GtkListItemFactory: header-factory
      model -> GtkSelectionModel: model
      show-separators -> gboolean: show-separators
      single-click-activate -> gboolean: single-click-activate
      tab-behavior -> GtkListTabBehavior: tab-behavior

    Properties from GtkListBase:
      orientation -> GtkOrientation: orientation

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        ListBase.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
        Scrollable.Props,
    ):
        enable_rubberband: bool
        """
        Allow rubberband selection.
        """
        factory: Optional[ListItemFactory]
        """
        Factory for populating list items.
        """
        header_factory: Optional[ListItemFactory]
        """
        Factory for creating header widgets.
        """
        model: Optional[SelectionModel]
        """
        Model for the items displayed.
        """
        show_separators: bool
        """
        Show separators between rows.
        """
        single_click_activate: bool
        """
        Activate rows on single click and select them on hover.
        """
        tab_behavior: ListTabBehavior
        """
        Behavior of the <kbd>Tab</kbd> key
        """

    props: Props = ...
    def __init__(
        self,
        enable_rubberband: bool = ...,
        factory: Optional[ListItemFactory] = ...,
        header_factory: Optional[ListItemFactory] = ...,
        model: Optional[SelectionModel] = ...,
        show_separators: bool = ...,
        single_click_activate: bool = ...,
        tab_behavior: ListTabBehavior = ...,
        orientation: Orientation = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        hadjustment: Optional[Adjustment] = ...,
        hscroll_policy: ScrollablePolicy = ...,
        vadjustment: Optional[Adjustment] = ...,
        vscroll_policy: ScrollablePolicy = ...,
    ): ...
    def get_enable_rubberband(self) -> bool:
        """
        Returns whether rows can be selected by dragging with the mouse.

        Parameters:


        Returns:
            bool: %TRUE if rubberband selection is enabled

        """
        ...

    def get_factory(self) -> Optional[ListItemFactory]:
        """
        Gets the factory that's currently used to populate list items.

        Parameters:


        Returns:
            Optional[ListItemFactory]: The factory in use

        """
        ...

    def get_header_factory(self) -> Optional[ListItemFactory]:
        """
        Gets the factory that's currently used to populate section headers.

        Parameters:


        Returns:
            Optional[ListItemFactory]: The factory in use

        """
        ...

    def get_model(self) -> Optional[SelectionModel]:
        """
        Gets the model that's currently used to read the items displayed.

        Parameters:


        Returns:
            Optional[SelectionModel]: The model in use

        """
        ...

    def get_show_separators(self) -> bool:
        """
        Returns whether the list box should show separators
        between rows.

        Parameters:


        Returns:
            bool: %TRUE if the list box shows separators

        """
        ...

    def get_single_click_activate(self) -> bool:
        """
        Returns whether rows will be activated on single click and
        selected on hover.

        Parameters:


        Returns:
            bool: %TRUE if rows are activated on single click

        """
        ...

    def get_tab_behavior(self) -> ListTabBehavior:
        """
        Gets the behavior set for the <kbd>Tab</kbd> key.

        Parameters:


        Returns:
            ListTabBehavior: The behavior of the <kbd>Tab</kbd> key

        """
        ...

    @classmethod
    def new(
        cls,
        model: Optional[SelectionModel] = None,
        factory: Optional[ListItemFactory] = None,
    ) -> ListView:
        """
        Creates a new `GtkListView` that uses the given @factory for
        mapping items to widgets.

        The function takes ownership of the
        arguments, so you can write code like
        ```c
        list_view = gtk_list_view_new (create_model (),
        gtk_builder_list_item_factory_new_from_resource (\"/resource.ui\"));
        ```

        Parameters:
            model: the model to use
            factory: The factory to populate items with

        Returns:
            Widget: a new `GtkListView` using the given @model and @factory

        """
        ...

    def scroll_to(
        self, pos: int, flags: ListScrollFlags, scroll: Optional[ScrollInfo] = None
    ) -> None:
        """
        Scrolls to the item at the given position and performs the actions
        specified in @flags.

        This function works no matter if the listview is shown or focused.
        If it isn't, then the changes will take effect once that happens.

        Parameters:
            pos: position of the item
            flags: actions to perform
            scroll: details of how to perform
        the scroll operation or %NULL to scroll into view

        Returns:

        """
        ...

    def set_enable_rubberband(self, enable_rubberband: bool) -> None:
        """
        Sets whether selections can be changed by dragging with the mouse.

        Parameters:
            enable_rubberband: %TRUE to enable rubberband selection

        Returns:

        """
        ...

    def set_factory(self, factory: Optional[ListItemFactory] = None) -> None:
        """
        Sets the `GtkListItemFactory` to use for populating list items.

        Parameters:
            factory: the factory to use

        Returns:

        """
        ...

    def set_header_factory(self, factory: Optional[ListItemFactory] = None) -> None:
        """
        Sets the `GtkListItemFactory` to use for populating the
        [class@Gtk.ListHeader] objects used in section headers.

        If this factory is set to %NULL, the list will not show section headers.

        Parameters:
            factory: the factory to use

        Returns:

        """
        ...

    def set_model(self, model: Optional[SelectionModel] = None) -> None:
        """
        Sets the model to use.

        This must be a [iface@Gtk.SelectionModel] to use.

        Parameters:
            model: the model to use

        Returns:

        """
        ...

    def set_show_separators(self, show_separators: bool) -> None:
        """
        Sets whether the list box should show separators
        between rows.

        Parameters:
            show_separators: %TRUE to show separators

        Returns:

        """
        ...

    def set_single_click_activate(self, single_click_activate: bool) -> None:
        """
        Sets whether rows should be activated on single click and
        selected on hover.

        Parameters:
            single_click_activate: %TRUE to activate items on single click

        Returns:

        """
        ...

    def set_tab_behavior(self, tab_behavior: ListTabBehavior) -> None:
        """
        Sets the behavior of the <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keys.

        Parameters:
            tab_behavior: The desired tab behavior

        Returns:

        """
        ...

class ListViewClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

@deprecated("This widget will be removed in GTK 5")
class LockButton(Button, Accessible, Actionable, Buildable, ConstraintTarget):
    """
    `GtkLockButton` is a widget to obtain and revoke authorizations
    needed to operate the controls.

    ![An example GtkLockButton](lock-button.png)

    It is typically used in preference dialogs or control panels.

    The required authorization is represented by a `GPermission` object.
    Concrete implementations of `GPermission` may use PolicyKit or some
    other authorization framework. To obtain a PolicyKit-based
    `GPermission`, use `polkit_permission_new()`.

    If the user is not currently allowed to perform the action, but can
    obtain the permission, the widget looks like this:

    ![](lockbutton-locked.png)

    and the user can click the button to request the permission. Depending
    on the platform, this may pop up an authentication dialog or ask the user
    to authenticate in some other way. Once the user has obtained the permission,
    the widget changes to this:

    ![](lockbutton-unlocked.png)

    and the permission can be dropped again by clicking the button. If the user
    is not able to obtain the permission at all, the widget looks like this:

    ![](lockbutton-sorry.png)

    If the user has the permission and cannot drop it, the button is hidden.

    The text (and tooltips) that are shown in the various cases can be adjusted
    with the [property@Gtk.LockButton:text-lock],
    [property@Gtk.LockButton:text-unlock],
    [property@Gtk.LockButton:tooltip-lock],
    [property@Gtk.LockButton:tooltip-unlock] and
    [property@Gtk.LockButton:tooltip-not-authorized] properties.

    :Constructors:

    ::

        LockButton(**properties)
        new(permission:Gio.Permission=None) -> Gtk.Widget

    Object GtkLockButton

    Properties from GtkLockButton:
      permission -> GPermission: permission
      text-lock -> gchararray: text-lock
      text-unlock -> gchararray: text-unlock
      tooltip-lock -> gchararray: tooltip-lock
      tooltip-unlock -> gchararray: tooltip-unlock
      tooltip-not-authorized -> gchararray: tooltip-not-authorized

    Signals from GtkButton:
      activate ()
      clicked ()

    Properties from GtkButton:
      label -> gchararray: label
      has-frame -> gboolean: has-frame
      use-underline -> gboolean: use-underline
      icon-name -> gchararray: icon-name
      child -> GtkWidget: child
      can-shrink -> gboolean: can-shrink

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Button.Props,
        Accessible.Props,
        Actionable.Props,
        Buildable.Props,
        ConstraintTarget.Props,
    ):
        permission: Optional[Gio.Permission]
        """
        The `GPermission object controlling this button.
        """
        text_lock: str
        """
        The text to display when prompting the user to lock.
        """
        text_unlock: str
        """
        The text to display when prompting the user to unlock.
        """
        tooltip_lock: str
        """
        The tooltip to display when prompting the user to lock.
        """
        tooltip_not_authorized: str
        """
        The tooltip to display when the user cannot obtain authorization.
        """
        tooltip_unlock: str
        """
        The tooltip to display when prompting the user to unlock.
        """

    props: Props = ...
    def __init__(
        self,
        permission: Optional[Gio.Permission] = ...,
        text_lock: str = ...,
        text_unlock: str = ...,
        tooltip_lock: str = ...,
        tooltip_not_authorized: str = ...,
        tooltip_unlock: str = ...,
        can_shrink: bool = ...,
        child: Optional[Widget] = ...,
        has_frame: bool = ...,
        icon_name: str = ...,
        label: str = ...,
        use_underline: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        action_name: Optional[str] = ...,
        action_target: GLib.Variant = ...,
    ): ...
    @deprecated("This widget will be removed in GTK 5")
    def get_permission(self) -> Optional[Gio.Permission]:
        """
        Obtains the `GPermission` object that controls @button.

        Parameters:


        Returns:
            Optional[Gio.Permission]: the `GPermission` of @button

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    @classmethod
    def new(cls, permission: Optional[Gio.Permission] = None) -> LockButton:
        """
        Creates a new lock button which reflects the @permission.

        Parameters:
            permission: a `GPermission`

        Returns:
            Widget: a new `GtkLockButton`

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def set_permission(self, permission: Optional[Gio.Permission] = None) -> None:
        """
        Sets the `GPermission` object that controls @button.

        Parameters:
            permission: a `GPermission` object

        Returns:

        """
        ...

class MapListModel(GObject.Object, Gio.ListModel, SectionModel):
    """
    A `GtkMapListModel` maps the items in a list model to different items.

    `GtkMapListModel` uses a [callback@Gtk.MapListModelMapFunc].

    Example: Create a list of `GtkEventControllers`
    ```c
    static gpointer
    map_to_controllers (gpointer widget,
    gpointer data)
    {
    gpointer result = gtk_widget_observe_controllers (widget);
    g_object_unref (widget);
    return result;
    }

    widgets = gtk_widget_observe_children (widget);

    controllers = gtk_map_list_model_new (widgets,
    map_to_controllers,
    NULL, NULL);

    model = gtk_flatten_list_model_new (GTK_TYPE_EVENT_CONTROLLER,
    controllers);
    ```

    `GtkMapListModel` will attempt to discard the mapped objects as soon as
    they are no longer needed and recreate them if necessary.

    `GtkMapListModel` passes through sections from the underlying model.

    :Constructors:

    ::

        MapListModel(**properties)
        new(model:Gio.ListModel=None, map_func:Gtk.MapListModelMapFunc=None, user_data=None) -> Gtk.MapListModel

    Object GtkMapListModel

    Properties from GtkMapListModel:
      has-map -> gboolean: has-map
      item-type -> GType: item-type
      model -> GListModel: model
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkSectionModel:
      sections-changed (guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gio.ListModel.Props, SectionModel.Props):
        has_map: bool
        """
        If a map is set for this model
        """
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        model: Optional[Gio.ListModel]
        """
        The model being mapped.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """

    props: Props = ...
    def __init__(self, model: Gio.ListModel = ...): ...
    def get_model(self) -> Optional[Gio.ListModel]:
        """
        Gets the model that is currently being mapped or %NULL if none.

        Parameters:


        Returns:
            Optional[Gio.ListModel]: The model that gets mapped

        """
        ...

    def has_map(self) -> bool:
        """
        Checks if a map function is currently set on @self.

        Parameters:


        Returns:
            bool: %TRUE if a map function is set

        """
        ...

    @classmethod
    def new(
        cls,
        model: Optional[Gio.ListModel] = None,
        map_func: Optional[Callable[..., GObject.Object]] = None,
        *user_data: Any,
    ) -> MapListModel:
        """
        Creates a new `GtkMapListModel` for the given arguments.

        Parameters:
            model: The model to map
            map_func: map function
            user_data: user data passed to @map_func

        Returns:
            MapListModel: a new `GtkMapListModel`

        """
        ...

    def set_map_func(
        self, map_func: Optional[Callable[..., GObject.Object]] = None, *user_data: Any
    ) -> None:
        """
        Sets the function used to map items.

        The function will be called whenever an item needs to be mapped
        and must return the item to use for the given input item.

        Note that `GtkMapListModel` may call this function multiple times
        on the same item, because it may delete items it doesn't need anymore.

        GTK makes no effort to ensure that @map_func conforms to the item type
        of @self. It assumes that the caller knows what they are doing and the map
        function returns items of the appropriate type.

        Parameters:
            map_func: map function
            user_data: user data passed to @map_func

        Returns:

        """
        ...

    def set_model(self, model: Optional[Gio.ListModel] = None) -> None:
        """
        Sets the model to be mapped.

        GTK makes no effort to ensure that @model conforms to the item type
        expected by the map function. It assumes that the caller knows what
        they are doing and have set up an appropriate map function.

        Parameters:
            model: The model to be mapped

        Returns:

        """
        ...

class MapListModelClass(GObject.GPointer):
    """
    :Constructors:

    ::

        MapListModelClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class MediaControls(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkMediaControls` is a widget to show controls for a video.

    ![An example GtkMediaControls](media-controls.png)

    Usually, `GtkMediaControls` is used as part of [class@Gtk.Video].

    :Constructors:

    ::

        MediaControls(**properties)
        new(stream:Gtk.MediaStream=None) -> Gtk.Widget

    Object GtkMediaControls

    Properties from GtkMediaControls:
      media-stream -> GtkMediaStream: media-stream

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        media_stream: Optional[MediaStream]
        """
        The media-stream managed by this object or %NULL if none.
        """

    props: Props = ...
    def __init__(
        self,
        media_stream: Optional[MediaStream] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_media_stream(self) -> Optional[MediaStream]:
        """
        Gets the media stream managed by @controls or %NULL if none.

        Parameters:


        Returns:
            Optional[MediaStream]: The media stream managed by @controls

        """
        ...

    @classmethod
    def new(cls, stream: Optional[MediaStream] = None) -> MediaControls:
        """
        Creates a new `GtkMediaControls` managing the @stream passed to it.

        Parameters:
            stream: a `GtkMediaStream` to manage

        Returns:
            Widget: a new `GtkMediaControls`

        """
        ...

    def set_media_stream(self, stream: Optional[MediaStream] = None) -> None:
        """
        Sets the stream that is controlled by @controls.

        Parameters:
            stream: a `GtkMediaStream`

        Returns:

        """
        ...

class MediaControlsClass(GObject.GPointer):
    """
    :Constructors:

    ::

        MediaControlsClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class MediaFile(MediaStream, Gdk.Paintable):
    """
    `GtkMediaFile` implements `GtkMediaStream` for files.

    This provides a simple way to play back video files with GTK.

    GTK provides a GIO extension point for `GtkMediaFile` implementations
    to allow for external implementations using various media frameworks.

    GTK itself includes implementations using GStreamer and ffmpeg.

    :Constructors:

    ::

        MediaFile(**properties)
        new() -> Gtk.MediaFile
        new_for_file(file:Gio.File) -> Gtk.MediaFile
        new_for_filename(filename:str) -> Gtk.MediaFile
        new_for_input_stream(stream:Gio.InputStream) -> Gtk.MediaFile
        new_for_resource(resource_path:str) -> Gtk.MediaFile

    Object GtkMediaFile

    Properties from GtkMediaFile:
      file -> GFile: file
      input-stream -> GInputStream: input-stream

    Signals from GdkPaintable:
      invalidate-contents ()
      invalidate-size ()

    Properties from GtkMediaStream:
      prepared -> gboolean: prepared
      error -> GError: error
      has-audio -> gboolean: has-audio
      has-video -> gboolean: has-video
      playing -> gboolean: playing
      ended -> gboolean: ended
      timestamp -> gint64: timestamp
      duration -> gint64: duration
      seekable -> gboolean: seekable
      seeking -> gboolean: seeking
      loop -> gboolean: loop
      muted -> gboolean: muted
      volume -> gdouble: volume

    Signals from GdkPaintable:
      invalidate-contents ()
      invalidate-size ()

    Signals from GObject:
      notify (GParam)
    """

    class Props(MediaStream.Props, Gdk.Paintable.Props):
        file: Optional[Gio.File]
        """
        The file being played back or %NULL if not playing a file.
        """
        input_stream: Optional[Gio.InputStream]
        """
        The stream being played back or %NULL if not playing a stream.

        This is %NULL when playing a file.
        """

    props: Props = ...
    parent_instance: MediaStream = ...
    def __init__(
        self,
        file: Optional[Gio.File] = ...,
        input_stream: Optional[Gio.InputStream] = ...,
        loop: bool = ...,
        muted: bool = ...,
        playing: bool = ...,
        prepared: bool = ...,
        volume: float = ...,
    ): ...
    def clear(self) -> None:
        """
        Resets the media file to be empty.

        Parameters:


        Returns:

        """
        ...

    def do_close(self) -> None: ...
    def do_open(self) -> None: ...
    def get_file(self) -> Optional[Gio.File]:
        """
        Returns the file that @self is currently playing from.

        When @self is not playing or not playing from a file,
        %NULL is returned.

        Parameters:


        Returns:
            Optional[Gio.File]: The currently playing file

        """
        ...

    def get_input_stream(self) -> Optional[Gio.InputStream]:
        """
        Returns the stream that @self is currently playing from.

        When @self is not playing or not playing from a stream,
        %NULL is returned.

        Parameters:


        Returns:
            Optional[Gio.InputStream]: The currently playing stream

        """
        ...

    @classmethod
    def new(cls) -> MediaFile:
        """
        Creates a new empty media file.

        Parameters:


        Returns:
            MediaFile: a new `GtkMediaFile`

        """
        ...

    @classmethod
    def new_for_file(cls, file: Gio.File) -> MediaFile:
        """
        Creates a new media file to play @file.

        Parameters:
            file: The file to play

        Returns:
            MediaFile: a new `GtkMediaFile` playing @file

        """
        ...

    @classmethod
    def new_for_filename(cls, filename: str) -> MediaFile:
        """
        Creates a new media file for the given filename.

        This is a utility function that converts the given @filename
        to a `GFile` and calls [ctor@Gtk.MediaFile.new_for_file].

        Parameters:
            filename: filename to open

        Returns:
            MediaFile: a new `GtkMediaFile` playing @filename

        """
        ...

    @classmethod
    def new_for_input_stream(cls, stream: Gio.InputStream) -> MediaFile:
        """
        Creates a new media file to play @stream.

        If you want the resulting media to be seekable,
        the stream should implement the `GSeekable` interface.

        Parameters:
            stream: The stream to play

        Returns:
            MediaFile: a new `GtkMediaFile`

        """
        ...

    @classmethod
    def new_for_resource(cls, resource_path: str) -> MediaFile:
        """
        Creates a new new media file for the given resource.

        This is a utility function that converts the given @resource
        to a `GFile` and calls [ctor@Gtk.MediaFile.new_for_file].

        Parameters:
            resource_path: resource path to open

        Returns:
            MediaFile: a new `GtkMediaFile` playing @resource_path

        """
        ...

    def set_file(self, file: Optional[Gio.File] = None) -> None:
        """
        Sets the `GtkMediaFile` to play the given file.

        If any file is still playing, stop playing it.

        Parameters:
            file: the file to play

        Returns:

        """
        ...

    def set_filename(self, filename: Optional[str] = None) -> None:
        """
        Sets the `GtkMediaFile to play the given file.

        This is a utility function that converts the given @filename
        to a `GFile` and calls [method@Gtk.MediaFile.set_file].

        Parameters:
            filename: name of file to play

        Returns:

        """
        ...

    def set_input_stream(self, stream: Optional[Gio.InputStream] = None) -> None:
        """
        Sets the `GtkMediaFile` to play the given stream.

        If anything is still playing, stop playing it.

        Full control about the @stream is assumed for the duration of
        playback. The stream will not be closed.

        Parameters:
            stream: the stream to play from

        Returns:

        """
        ...

    def set_resource(self, resource_path: Optional[str] = None) -> None:
        """
        Sets the `GtkMediaFile to play the given resource.

        This is a utility function that converts the given @resource_path
        to a `GFile` and calls [method@Gtk.MediaFile.set_file].

        Parameters:
            resource_path: path to resource to play

        Returns:

        """
        ...

class MediaFileClass(GObject.GPointer):
    """
    :Constructors:

    ::

        MediaFileClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: MediaStreamClass = ...
    open: Callable[[MediaFile], None] = ...
    close: Callable[[MediaFile], None] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...

class MediaStream(GObject.Object, Gdk.Paintable):
    """
    `GtkMediaStream` is the integration point for media playback inside GTK.

    GTK provides an implementation of the `GtkMediaStream` interface that
    is called [class@Gtk.MediaFile].

    Apart from application-facing API for stream playback, `GtkMediaStream`
    has a number of APIs that are only useful for implementations and should
    not be used in applications:
    [method@Gtk.MediaStream.prepared],
    [method@Gtk.MediaStream.unprepared],
    [method@Gtk.MediaStream.update],
    [method@Gtk.MediaStream.ended],
    [method@Gtk.MediaStream.seek_success],
    [method@Gtk.MediaStream.seek_failed],
    [method@Gtk.MediaStream.gerror],
    [method@Gtk.MediaStream.error],
    [method@Gtk.MediaStream.error_valist].

    :Constructors:

    ::

        MediaStream(**properties)

    Object GtkMediaStream

    Properties from GtkMediaStream:
      prepared -> gboolean: prepared
      error -> GError: error
      has-audio -> gboolean: has-audio
      has-video -> gboolean: has-video
      playing -> gboolean: playing
      ended -> gboolean: ended
      timestamp -> gint64: timestamp
      duration -> gint64: duration
      seekable -> gboolean: seekable
      seeking -> gboolean: seeking
      loop -> gboolean: loop
      muted -> gboolean: muted
      volume -> gdouble: volume

    Signals from GdkPaintable:
      invalidate-contents ()
      invalidate-size ()

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gdk.Paintable.Props):
        duration: int
        """
        The stream's duration in microseconds or 0 if unknown.
        """
        ended: bool
        """
        Set when playback has finished.
        """
        error: Optional[GLib.Error]
        """
        %NULL for a properly working stream or the `GError`
        that the stream is in.
        """
        has_audio: bool
        """
        Whether the stream contains audio.
        """
        has_video: bool
        """
        Whether the stream contains video.
        """
        loop: bool
        """
        Try to restart the media from the beginning once it ended.
        """
        muted: bool
        """
        Whether the audio stream should be muted.
        """
        playing: bool
        """
        Whether the stream is currently playing.
        """
        prepared: bool
        """
        Whether the stream has finished initializing and existence of
        audio and video is known.
        """
        seekable: bool
        """
        Set unless the stream is known to not support seeking.
        """
        seeking: bool
        """
        Set while a seek is in progress.
        """
        timestamp: int
        """
        The current presentation timestamp in microseconds.
        """
        volume: float
        """
        Volume of the audio stream.
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    def __init__(
        self,
        loop: bool = ...,
        muted: bool = ...,
        playing: bool = ...,
        prepared: bool = ...,
        volume: float = ...,
    ): ...
    def do_pause(self) -> None:
        """
        Pauses playback of the stream.

        If the stream is not playing, do nothing.

        Parameters:


        Returns:

        """
        ...

    def do_play(self) -> bool: ...
    def do_realize(self, surface: Gdk.Surface) -> None:
        """
        Called by users to attach the media stream to a `GdkSurface` they manage.

        The stream can then access the resources of @surface for its
        rendering purposes. In particular, media streams might want to
        create a `GdkGLContext` or sync to the `GdkFrameClock`.

        Whoever calls this function is responsible for calling
        [method@Gtk.MediaStream.unrealize] before either the stream
        or @surface get destroyed.

        Multiple calls to this function may happen from different
        users of the video, even with the same @surface. Each of these
        calls must be followed by its own call to
        [method@Gtk.MediaStream.unrealize].

        It is not required to call this function to make a media stream work.

        Parameters:
            surface: a `GdkSurface`

        Returns:

        """
        ...

    def do_seek(self, timestamp: int) -> None:
        """
        Start a seek operation on @self to @timestamp.

        If @timestamp is out of range, it will be clamped.

        Seek operations may not finish instantly. While a
        seek operation is in process, the [property@Gtk.MediaStream:seeking]
        property will be set.

        When calling gtk_media_stream_seek() during an
        ongoing seek operation, the new seek will override
        any pending seek.

        Parameters:
            timestamp: timestamp to seek to.

        Returns:

        """
        ...

    def do_unrealize(self, surface: Gdk.Surface) -> None:
        """
        Undoes a previous call to gtk_media_stream_realize().

        This causes the stream to release all resources it had
        allocated from @surface.

        Parameters:
            surface: the `GdkSurface` the stream was realized with

        Returns:

        """
        ...

    def do_update_audio(self, muted: bool, volume: float) -> None: ...
    def gerror(self, error: GLib.Error) -> None:
        """
        Sets @self into an error state.

        This will pause the stream (you can check for an error
        via [method@Gtk.MediaStream.get_error] in your
        GtkMediaStream.pause() implementation), abort pending
        seeks and mark the stream as prepared.

        if the stream is already in an error state, this call
        will be ignored and the existing error will be retained.

        To unset an error, the stream must be reset via a call to
        [method@Gtk.MediaStream.unprepared].

        Parameters:
            error: the `GError` to set

        Returns:

        """
        ...

    def get_duration(self) -> int:
        """
        Gets the duration of the stream.

        If the duration is not known, 0 will be returned.

        Parameters:


        Returns:
            int: the duration of the stream or 0 if not known.

        """
        ...

    def get_ended(self) -> bool:
        """
        Returns whether the streams playback is finished.

        Parameters:


        Returns:
            bool: %TRUE if playback is finished

        """
        ...

    def get_error(self) -> Optional[GLib.Error]:
        """
        If the stream is in an error state, returns the `GError`
        explaining that state.

        Any type of error can be reported here depending on the
        implementation of the media stream.

        A media stream in an error cannot be operated on, calls
        like [method@Gtk.MediaStream.play] or
        [method@Gtk.MediaStream.seek] will not have any effect.

        `GtkMediaStream` itself does not provide a way to unset
        an error, but implementations may provide options. For example,
        a [class@Gtk.MediaFile] will unset errors when a new source is
        set, e.g. with [method@Gtk.MediaFile.set_file].

        Parameters:


        Returns:
            Optional[GLib.Error]: %NULL if not in an
        error state or the `GError` of the stream

        """
        ...

    def get_loop(self) -> bool:
        """
        Returns whether the stream is set to loop.

        See [method@Gtk.MediaStream.set_loop] for details.

        Parameters:


        Returns:
            bool: %TRUE if the stream should loop

        """
        ...

    def get_muted(self) -> bool:
        """
        Returns whether the audio for the stream is muted.

        See [method@Gtk.MediaStream.set_muted] for details.

        Parameters:


        Returns:
            bool: %TRUE if the stream is muted

        """
        ...

    def get_playing(self) -> bool:
        """
        Return whether the stream is currently playing.

        Parameters:


        Returns:
            bool: %TRUE if the stream is playing

        """
        ...

    def get_timestamp(self) -> int:
        """
        Returns the current presentation timestamp in microseconds.

        Parameters:


        Returns:
            int: the timestamp in microseconds

        """
        ...

    def get_volume(self) -> float:
        """
        Returns the volume of the audio for the stream.

        See [method@Gtk.MediaStream.set_volume] for details.

        Parameters:


        Returns:
            float: volume of the stream from 0.0 to 1.0

        """
        ...

    def has_audio(self) -> bool:
        """
        Returns whether the stream has audio.

        Parameters:


        Returns:
            bool: %TRUE if the stream has audio

        """
        ...

    def has_video(self) -> bool:
        """
        Returns whether the stream has video.

        Parameters:


        Returns:
            bool: %TRUE if the stream has video

        """
        ...

    def is_prepared(self) -> bool:
        """
        Returns whether the stream has finished initializing.

        At this point the existence of audio and video is known.

        Parameters:


        Returns:
            bool: %TRUE if the stream is prepared

        """
        ...

    def is_seekable(self) -> bool:
        """
        Checks if a stream may be seekable.

        This is meant to be a hint. Streams may not allow seeking even if
        this function returns %TRUE. However, if this function returns
        %FALSE, streams are guaranteed to not be seekable and user interfaces
        may hide controls that allow seeking.

        It is allowed to call [method@Gtk.MediaStream.seek] on a non-seekable
        stream, though it will not do anything.

        Parameters:


        Returns:
            bool: %TRUE if the stream may support seeking

        """
        ...

    def is_seeking(self) -> bool:
        """
        Checks if there is currently a seek operation going on.

        Parameters:


        Returns:
            bool: %TRUE if a seek operation is ongoing.

        """
        ...

    def pause(self) -> None:
        """
        Pauses playback of the stream.

        If the stream is not playing, do nothing.

        Parameters:


        Returns:

        """
        ...

    def play(self) -> None:
        """
        Starts playing the stream.

        If the stream is in error or already playing, do nothing.

        Parameters:


        Returns:

        """
        ...

    def realize(self, surface: Gdk.Surface) -> None:
        """
        Called by users to attach the media stream to a `GdkSurface` they manage.

        The stream can then access the resources of @surface for its
        rendering purposes. In particular, media streams might want to
        create a `GdkGLContext` or sync to the `GdkFrameClock`.

        Whoever calls this function is responsible for calling
        [method@Gtk.MediaStream.unrealize] before either the stream
        or @surface get destroyed.

        Multiple calls to this function may happen from different
        users of the video, even with the same @surface. Each of these
        calls must be followed by its own call to
        [method@Gtk.MediaStream.unrealize].

        It is not required to call this function to make a media stream work.

        Parameters:
            surface: a `GdkSurface`

        Returns:

        """
        ...

    def seek(self, timestamp: int) -> None:
        """
        Start a seek operation on @self to @timestamp.

        If @timestamp is out of range, it will be clamped.

        Seek operations may not finish instantly. While a
        seek operation is in process, the [property@Gtk.MediaStream:seeking]
        property will be set.

        When calling gtk_media_stream_seek() during an
        ongoing seek operation, the new seek will override
        any pending seek.

        Parameters:
            timestamp: timestamp to seek to.

        Returns:

        """
        ...

    def seek_failed(self) -> None:
        """
        Ends a seek operation started via GtkMediaStream.seek() as a failure.

        This will not cause an error on the stream and will assume that
        playback continues as if no seek had happened.

        See [method@Gtk.MediaStream.seek_success] for the other way of
        ending a seek.

        Parameters:


        Returns:

        """
        ...

    def seek_success(self) -> None:
        """
        Ends a seek operation started via GtkMediaStream.seek() successfully.

        This function will unset the GtkMediaStream:ended property
        if it was set.

        See [method@Gtk.MediaStream.seek_failed] for the other way of
        ending a seek.

        Parameters:


        Returns:

        """
        ...

    def set_loop(self, loop: bool) -> None:
        """
        Sets whether the stream should loop.

        In this case, it will attempt to restart playback
        from the beginning instead of stopping at the end.

        Not all streams may support looping, in particular
        non-seekable streams. Those streams will ignore the
        loop setting and just end.

        Parameters:
            loop: %TRUE if the stream should loop

        Returns:

        """
        ...

    def set_muted(self, muted: bool) -> None:
        """
        Sets whether the audio stream should be muted.

        Muting a stream will cause no audio to be played, but it
        does not modify the volume. This means that muting and
        then unmuting the stream will restore the volume settings.

        If the stream has no audio, calling this function will
        still work but it will not have an audible effect.

        Parameters:
            muted: %TRUE if the stream should be muted

        Returns:

        """
        ...

    def set_playing(self, playing: bool) -> None:
        """
        Starts or pauses playback of the stream.

        Parameters:
            playing: whether to start or pause playback

        Returns:

        """
        ...

    def set_volume(self, volume: float) -> None:
        """
        Sets the volume of the audio stream.

        This function call will work even if the stream is muted.

        The given @volume should range from 0.0 for silence to 1.0
        for as loud as possible. Values outside of this range will
        be clamped to the nearest value.

        If the stream has no audio or is muted, calling this function
        will still work but it will not have an immediate audible effect.
        When the stream is unmuted, the new volume setting will take effect.

        Parameters:
            volume: New volume of the stream from 0.0 to 1.0

        Returns:

        """
        ...

    def stream_ended(self) -> None:
        """
        Pauses the media stream and marks it as ended.

        This is a hint only, calls to [method@Gtk.MediaStream.play]
        may still happen.

        The media stream must be prepared when this function is called.

        Parameters:


        Returns:

        """
        ...

    def stream_prepared(
        self, has_audio: bool, has_video: bool, seekable: bool, duration: int
    ) -> None:
        """
        Called by `GtkMediaStream` implementations to advertise the stream
        being ready to play and providing details about the stream.

        Note that the arguments are hints. If the stream implementation
        cannot determine the correct values, it is better to err on the
        side of caution and return %TRUE. User interfaces will use those
        values to determine what controls to show.

        This function may not be called again until the stream has been
        reset via [method@Gtk.MediaStream.stream_unprepared].

        Parameters:
            has_audio: %TRUE if the stream should advertise audio support
            has_video: %TRUE if the stream should advertise video support
            seekable: %TRUE if the stream should advertise seekability
            duration: The duration of the stream or 0 if unknown

        Returns:

        """
        ...

    def stream_unprepared(self) -> None:
        """
        Resets a given media stream implementation.

        [method@Gtk.MediaStream.stream_prepared] can then be called again.

        This function will also reset any error state the stream was in.

        Parameters:


        Returns:

        """
        ...

    def unrealize(self, surface: Gdk.Surface) -> None:
        """
        Undoes a previous call to gtk_media_stream_realize().

        This causes the stream to release all resources it had
        allocated from @surface.

        Parameters:
            surface: the `GdkSurface` the stream was realized with

        Returns:

        """
        ...

    def update(self, timestamp: int) -> None:
        """
        Media stream implementations should regularly call this
        function to update the timestamp reported by the stream.

        It is up to implementations to call this at the frequency
        they deem appropriate.

        The media stream must be prepared when this function is called.

        Parameters:
            timestamp: the new timestamp

        Returns:

        """
        ...

class MediaStreamClass(GObject.GPointer):
    """
    :Constructors:

    ::

        MediaStreamClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    play: Callable[[MediaStream], bool] = ...
    pause: Callable[[MediaStream], None] = ...
    seek: Callable[[MediaStream, int], None] = ...
    update_audio: Callable[[MediaStream, bool, float], None] = ...
    realize: Callable[[MediaStream, Gdk.Surface], None] = ...
    unrealize: Callable[[MediaStream, Gdk.Surface], None] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...
    _gtk_reserved5: None = ...
    _gtk_reserved6: None = ...
    _gtk_reserved7: None = ...
    _gtk_reserved8: None = ...

class MenuButton(Widget, Accessible, Buildable, ConstraintTarget):
    """
    The `GtkMenuButton` widget is used to display a popup when clicked.

    ![An example GtkMenuButton](menu-button.png)

    This popup can be provided either as a `GtkPopover` or as an abstract
    `GMenuModel`.

    The `GtkMenuButton` widget can show either an icon (set with the
    [property@Gtk.MenuButton:icon-name] property) or a label (set with the
    [property@Gtk.MenuButton:label] property). If neither is explicitly set,
    a [class@Gtk.Image] is automatically created, using an arrow image oriented
    according to [property@Gtk.MenuButton:direction] or the generic
    “open-menu-symbolic” icon if the direction is not set.

    The positioning of the popup is determined by the
    [property@Gtk.MenuButton:direction] property of the menu button.

    For menus, the [property@Gtk.Widget:halign] and [property@Gtk.Widget:valign]
    properties of the menu are also taken into account. For example, when the
    direction is %GTK_ARROW_DOWN and the horizontal alignment is %GTK_ALIGN_START,
    the menu will be positioned below the button, with the starting edge
    (depending on the text direction) of the menu aligned with the starting
    edge of the button. If there is not enough space below the button, the
    menu is popped up above the button instead. If the alignment would move
    part of the menu offscreen, it is “pushed in”.

    | | start | center | end |
    | - | --- | --- | --- |
    | **down** | ![](down-start.png) | ![](down-center.png) | ![](down-end.png) |
    | **up** | ![](up-start.png) | ![](up-center.png) | ![](up-end.png) |
    | **left** | ![](left-start.png) | ![](left-center.png) | ![](left-end.png) |
    | **right** | ![](right-start.png) | ![](right-center.png) | ![](right-end.png) |

    # CSS nodes

    ```
    menubutton
    ╰── button.toggle
    ╰── <content>
    ╰── [arrow]
    ```

    `GtkMenuButton` has a single CSS node with name `menubutton`
    which contains a `button` node with a `.toggle` style class.

    If the button contains an icon, it will have the `.image-button` style class,
    if it contains text, it will have `.text-button` style class. If an arrow is
    visible in addition to an icon, text or a custom child, it will also have
    `.arrow-button` style class.

    Inside the toggle button content, there is an `arrow` node for
    the indicator, which will carry one of the `.none`, `.up`, `.down`,
    `.left` or `.right` style classes to indicate the direction that
    the menu will appear in. The CSS is expected to provide a suitable
    image for each of these cases using the `-gtk-icon-source` property.

    Optionally, the `menubutton` node can carry the `.circular` style class
    to request a round appearance.

    # Accessibility

    `GtkMenuButton` uses the %GTK_ACCESSIBLE_ROLE_BUTTON role.

    :Constructors:

    ::

        MenuButton(**properties)
        new() -> Gtk.Widget

    Object GtkMenuButton

    Signals from GtkMenuButton:
      activate ()

    Properties from GtkMenuButton:
      menu-model -> GMenuModel: menu-model
      direction -> GtkArrowType: direction
      popover -> GtkPopover: popover
      icon-name -> gchararray: icon-name
      always-show-arrow -> gboolean: always-show-arrow
      label -> gchararray: label
      use-underline -> gboolean: use-underline
      has-frame -> gboolean: has-frame
      primary -> gboolean: primary
      child -> GtkWidget: child
      active -> gboolean: active
      can-shrink -> gboolean: can-shrink

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        active: bool
        """
        Whether the menu button is active.
        """
        always_show_arrow: bool
        """
        Whether to show a dropdown arrow even when using an icon or a custom child.
        """
        can_shrink: bool
        """
        Whether the size of the button can be made smaller than the natural
        size of its contents.
        """
        child: Optional[Widget]
        """
        The child widget.
        """
        direction: ArrowType
        """
        The `GtkArrowType` representing the direction in which the
        menu or popover will be popped out.
        """
        has_frame: bool
        """
        Whether the button has a frame.
        """
        icon_name: Optional[str]
        """
        The name of the icon used to automatically populate the button.
        """
        label: Optional[str]
        """
        The label for the button.
        """
        menu_model: Optional[Gio.MenuModel]
        """
        The `GMenuModel` from which the popup will be created.

        See [method@Gtk.MenuButton.set_menu_model] for the interaction
        with the [property@Gtk.MenuButton:popover] property.
        """
        popover: Optional[Popover]
        """
        The `GtkPopover` that will be popped up when the button is clicked.
        """
        primary: bool
        """
        Whether the menu button acts as a primary menu.

        Primary menus can be opened using the <kbd>F10</kbd> key
        """
        use_underline: bool
        """
        If set an underscore in the text indicates a mnemonic.
        """

    props: Props = ...
    def __init__(
        self,
        active: bool = ...,
        always_show_arrow: bool = ...,
        can_shrink: bool = ...,
        child: Optional[Widget] = ...,
        direction: ArrowType = ...,
        has_frame: bool = ...,
        icon_name: str = ...,
        label: str = ...,
        menu_model: Optional[Gio.MenuModel] = ...,
        popover: Optional[Popover] = ...,
        primary: bool = ...,
        use_underline: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_active(self) -> bool:
        """
        Returns whether the menu button is active.

        Parameters:


        Returns:
            bool: TRUE if the button is active

        """
        ...

    def get_always_show_arrow(self) -> bool:
        """
        Gets whether to show a dropdown arrow even when using an icon or a custom
        child.

        Parameters:


        Returns:
            bool: whether to show a dropdown arrow even when using an icon or a custom
        child.

        """
        ...

    def get_can_shrink(self) -> bool:
        """
        Retrieves whether the button can be smaller than the natural
        size of its contents.

        Parameters:


        Returns:
            bool: true if the button can shrink, and false otherwise

        """
        ...

    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @menu_button.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @menu_button

        """
        ...

    def get_direction(self) -> ArrowType:
        """
        Returns the direction the popup will be pointing at when popped up.

        Parameters:


        Returns:
            ArrowType: a `GtkArrowType` value

        """
        ...

    def get_has_frame(self) -> bool:
        """
        Returns whether the button has a frame.

        Parameters:


        Returns:
            bool: %TRUE if the button has a frame

        """
        ...

    def get_icon_name(self) -> Optional[str]:
        """
        Gets the name of the icon shown in the button.

        Parameters:


        Returns:
            Optional[str]: the name of the icon shown in the button

        """
        ...

    def get_label(self) -> Optional[str]:
        """
        Gets the label shown in the button

        Parameters:


        Returns:
            Optional[str]: the label shown in the button

        """
        ...

    def get_menu_model(self) -> Optional[Gio.MenuModel]:
        """
        Returns the `GMenuModel` used to generate the popup.

        Parameters:


        Returns:
            Optional[Gio.MenuModel]: a `GMenuModel`

        """
        ...

    def get_popover(self) -> Optional[Popover]:
        """
        Returns the `GtkPopover` that pops out of the button.

        If the button is not using a `GtkPopover`, this function
        returns %NULL.

        Parameters:


        Returns:
            Optional[Popover]: a `GtkPopover` or %NULL

        """
        ...

    def get_primary(self) -> bool:
        """
        Returns whether the menu button acts as a primary menu.

        Parameters:


        Returns:
            bool: %TRUE if the button is a primary menu

        """
        ...

    def get_use_underline(self) -> bool:
        """
        Returns whether an embedded underline in the text indicates a
        mnemonic.

        Parameters:


        Returns:
            bool: %TRUE whether an embedded underline in the text indicates
        the mnemonic accelerator keys.

        """
        ...

    @classmethod
    def new(cls) -> MenuButton:
        """
        Creates a new `GtkMenuButton` widget with downwards-pointing
        arrow as the only child.

        You can replace the child widget with another `GtkWidget`
        should you wish to.

        Parameters:


        Returns:
            Widget: The newly created `GtkMenuButton`

        """
        ...

    def popdown(self) -> None:
        """
        Dismiss the menu.

        Parameters:


        Returns:

        """
        ...

    def popup(self) -> None:
        """
        Pop up the menu.

        Parameters:


        Returns:

        """
        ...

    def set_active(self, active: bool) -> None:
        """
        Sets whether the menu button is active.

        Parameters:
            active: whether the menu button is active

        Returns:

        """
        ...

    def set_always_show_arrow(self, always_show_arrow: bool) -> None:
        """
        Sets whether to show a dropdown arrow even when using an icon or a custom
        child.

        Parameters:
            always_show_arrow: whether to show a dropdown arrow even when using an icon
        or a custom child

        Returns:

        """
        ...

    def set_can_shrink(self, can_shrink: bool) -> None:
        """
        Sets whether the button size can be smaller than the natural size of
        its contents.

        For text buttons, setting @can_shrink to true will ellipsize the label.

        For icon buttons, this function has no effect.

        Parameters:
            can_shrink: whether the button can shrink

        Returns:

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @menu_button.

        Setting a child resets [property@Gtk.MenuButton:label] and
        [property@Gtk.MenuButton:icon-name].

        If [property@Gtk.MenuButton:always-show-arrow] is set to `TRUE` and
        [property@Gtk.MenuButton:direction] is not `GTK_ARROW_NONE`, a dropdown arrow
        will be shown next to the child.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_create_popup_func(
        self, func: Optional[Callable[..., None]] = None, *user_data: Any
    ) -> None:
        """
        Sets @func to be called when a popup is about to be shown.

        @func should use one of

        - [method@Gtk.MenuButton.set_popover]
        - [method@Gtk.MenuButton.set_menu_model]

        to set a popup for @menu_button.
        If @func is non-%NULL, @menu_button will always be sensitive.

        Using this function will not reset the menu widget attached to
        @menu_button. Instead, this can be done manually in @func.

        Parameters:
            func: function to call when a popup is about to
        be shown, but none has been provided via other means, or %NULL
        to reset to default behavior.
            user_data: user data to pass to @func.

        Returns:

        """
        ...

    def set_direction(self, direction: ArrowType) -> None:
        """
        Sets the direction in which the popup will be popped up.

        If the button is automatically populated with an arrow icon,
        its direction will be changed to match.

        If the does not fit in the available space in the given direction,
        GTK will its best to keep it inside the screen and fully visible.

        If you pass %GTK_ARROW_NONE for a @direction, the popup will behave
        as if you passed %GTK_ARROW_DOWN (although you won’t see any arrows).

        Parameters:
            direction: a `GtkArrowType`

        Returns:

        """
        ...

    def set_has_frame(self, has_frame: bool) -> None:
        """
        Sets the style of the button.

        Parameters:
            has_frame: whether the button should have a visible frame

        Returns:

        """
        ...

    def set_icon_name(self, icon_name: str) -> None:
        """
        Sets the name of an icon to show inside the menu button.

        Setting icon name resets [property@Gtk.MenuButton:label] and
        [property@Gtk.MenuButton:child].

        If [property@Gtk.MenuButton:always-show-arrow] is set to `TRUE` and
        [property@Gtk.MenuButton:direction] is not `GTK_ARROW_NONE`, a dropdown arrow
        will be shown next to the icon.

        Parameters:
            icon_name: the icon name

        Returns:

        """
        ...

    def set_label(self, label: str) -> None:
        """
        Sets the label to show inside the menu button.

        Setting a label resets [property@Gtk.MenuButton:icon-name] and
        [property@Gtk.MenuButton:child].

        If [property@Gtk.MenuButton:direction] is not `GTK_ARROW_NONE`, a dropdown
        arrow will be shown next to the label.

        Parameters:
            label: the label

        Returns:

        """
        ...

    def set_menu_model(self, menu_model: Optional[Gio.MenuModel] = None) -> None:
        """
        Sets the `GMenuModel` from which the popup will be constructed.

        If @menu_model is %NULL, the button is disabled.

        A [class@Gtk.Popover] will be created from the menu model with
        [ctor@Gtk.PopoverMenu.new_from_model]. Actions will be connected
        as documented for this function.

        If [property@Gtk.MenuButton:popover] is already set, it will be
        dissociated from the @menu_button, and the property is set to %NULL.

        Parameters:
            menu_model: a `GMenuModel`, or %NULL to unset and disable the
        button

        Returns:

        """
        ...

    def set_popover(self, popover: Optional[Widget] = None) -> None:
        """
        Sets the `GtkPopover` that will be popped up when the @menu_button is clicked.

        If @popover is %NULL, the button is disabled.

        If [property@Gtk.MenuButton:menu-model] is set, the menu model is dissociated
        from the @menu_button, and the property is set to %NULL.

        Parameters:
            popover: a `GtkPopover`, or %NULL to unset and disable the button

        Returns:

        """
        ...

    def set_primary(self, primary: bool) -> None:
        """
        Sets whether menu button acts as a primary menu.

        Primary menus can be opened with the <kbd>F10</kbd> key.

        Parameters:
            primary: whether the menubutton should act as a primary menu

        Returns:

        """
        ...

    def set_use_underline(self, use_underline: bool) -> None:
        """
        If true, an underline in the text indicates a mnemonic.

        Parameters:
            use_underline: %TRUE if underlines in the text indicate mnemonics

        Returns:

        """
        ...

@deprecated("Use [class@Gtk.AlertDialog] instead")
class MessageDialog(
    Dialog, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager
):
    """
    `GtkMessageDialog` presents a dialog with some message text.

    ![An example GtkMessageDialog](messagedialog.png)

    It’s simply a convenience widget; you could construct the equivalent of
    `GtkMessageDialog` from `GtkDialog` without too much effort, but
    `GtkMessageDialog` saves typing.

    The easiest way to do a modal message dialog is to use the %GTK_DIALOG_MODAL
    flag, which will call [method@Gtk.Window.set_modal] internally. The dialog will
    prevent interaction with the parent window until it's hidden or destroyed.
    You can use the [signal@Gtk.Dialog::response] signal to know when the user
    dismissed the dialog.

    An example for using a modal dialog:
    ```c
    GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_MODAL;
    dialog = gtk_message_dialog_new (parent_window,
    flags,
    GTK_MESSAGE_ERROR,
    GTK_BUTTONS_CLOSE,
    \"Error reading “%s”: %s\",
    filename,
    g_strerror (errno));
    // Destroy the dialog when the user responds to it
    // (e.g. clicks a button)

    g_signal_connect (dialog, \"response\",
    G_CALLBACK (gtk_window_destroy),
    NULL);
    ```

    You might do a non-modal `GtkMessageDialog` simply by omitting the
    %GTK_DIALOG_MODAL flag:

    ```c
    GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
    dialog = gtk_message_dialog_new (parent_window,
    flags,
    GTK_MESSAGE_ERROR,
    GTK_BUTTONS_CLOSE,
    \"Error reading “%s”: %s\",
    filename,
    g_strerror (errno));

    // Destroy the dialog when the user responds to it
    // (e.g. clicks a button)
    g_signal_connect (dialog, \"response\",
    G_CALLBACK (gtk_window_destroy),
    NULL);
    ```

    # GtkMessageDialog as GtkBuildable

    The `GtkMessageDialog` implementation of the `GtkBuildable` interface exposes
    the message area as an internal child with the name “message_area”.

    :Constructors:

    ::

        MessageDialog(**properties)

    Object GtkMessageDialog

    Properties from GtkMessageDialog:
      message-type -> GtkMessageType: message-type
      buttons -> GtkButtonsType: buttons
      text -> gchararray: text
      use-markup -> gboolean: use-markup
      secondary-text -> gchararray: secondary-text
      secondary-use-markup -> gboolean: secondary-use-markup
      message-area -> GtkWidget: message-area

    Signals from GtkDialog:
      response (gint)
      close ()

    Properties from GtkDialog:
      use-header-bar -> gint: use-header-bar

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Dialog.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ):
        message_area: Widget
        """
        The `GtkBox` that corresponds to the message area of this dialog.

        See [method@Gtk.MessageDialog.get_message_area] for a detailed
        description of this area.
        """
        message_type: MessageType
        """
        The type of the message.
        """
        secondary_text: str
        """
        The secondary text of the message dialog.
        """
        secondary_use_markup: bool
        """
        %TRUE if the secondary text of the dialog includes Pango markup.

        See [func@Pango.parse_markup].
        """
        text: str
        """
        The primary text of the message dialog.

        If the dialog has a secondary text, this will appear as the title.
        """
        use_markup: bool
        """
        %TRUE if the primary text of the dialog includes Pango markup.

        See [func@Pango.parse_markup].
        """
        buttons: ButtonsType

    props: Props = ...
    parent_instance: Dialog = ...
    def __init__(
        self,
        buttons: ButtonsType = ...,
        message_type: MessageType = ...,
        secondary_text: str = ...,
        secondary_use_markup: bool = ...,
        text: str = ...,
        use_markup: bool = ...,
        use_header_bar: int = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    @deprecated("Use [class@Gtk.AlertDialog] instead")
    def get_message_area(self) -> Widget:
        """
        Returns the message area of the dialog.

        This is the box where the dialog’s primary and secondary labels
        are packed. You can add your own extra content to that box and it
        will appear below those labels. See [method@Gtk.Dialog.get_content_area]
        for the corresponding function in the parent [class@Gtk.Dialog].

        Parameters:


        Returns:
            Widget: A `GtkBox` corresponding to the
        “message area” in the @message_dialog

        """
        ...

    @deprecated("Use [class@Gtk.AlertDialog] instead")
    def set_markup(self, str: str) -> None:
        """
        Sets the text of the message dialog.

        Parameters:
            str: string with Pango markup

        Returns:

        """
        ...

class MessageDialogClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class MnemonicAction(ShortcutAction):
    """
    A `GtkShortcutAction` that calls gtk_widget_mnemonic_activate().

    :Constructors:

    ::

        MnemonicAction(**properties)

    Object GtkMnemonicAction

    Signals from GObject:
      notify (GParam)
    """

    class Props(ShortcutAction.Props): ...

    @staticmethod
    def get() -> MnemonicAction:
        """
        Gets the mnemonic action.

        This is an action that calls gtk_widget_mnemonic_activate()
        on the given widget upon activation.

        Parameters:


        Returns:
            MnemonicAction: The mnemonic action

        """
        ...

class MnemonicActionClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class MnemonicTrigger(ShortcutTrigger):
    """
    A `GtkShortcutTrigger` that triggers when a specific mnemonic is pressed.

    Mnemonics require a *mnemonic modifier* (typically <kbd>Alt</kbd>) to be
    pressed together with the mnemonic key.

    :Constructors:

    ::

        MnemonicTrigger(**properties)
        new(keyval:int) -> Gtk.MnemonicTrigger

    Object GtkMnemonicTrigger

    Properties from GtkMnemonicTrigger:
      keyval -> guint: keyval

    Signals from GObject:
      notify (GParam)
    """

    class Props(ShortcutTrigger.Props):
        keyval: int
        """
        The key value for the trigger.
        """

    props: Props = ...
    def __init__(self, keyval: int = ...): ...
    def get_keyval(self) -> int:
        """
        Gets the keyval that must be pressed to succeed triggering @self.

        Parameters:


        Returns:
            int: the keyval

        """
        ...

    @classmethod
    def new(cls, keyval: int) -> MnemonicTrigger:
        """
        Creates a `GtkShortcutTrigger` that will trigger whenever the key with
        the given @keyval is pressed and mnemonics have been activated.

        Mnemonics are activated by calling code when a key event with the right
        modifiers is detected.

        Parameters:
            keyval: The keyval to trigger for

        Returns:
            MnemonicTrigger: A new `GtkShortcutTrigger`

        """
        ...

class MnemonicTriggerClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class MountOperation(Gio.MountOperation):
    """
    `GtkMountOperation` is an implementation of `GMountOperation`.

    The functions and objects described here make working with GTK and
    GIO more convenient.

    `GtkMountOperation` is needed when mounting volumes:
    It is an implementation of `GMountOperation` that can be used with
    GIO functions for mounting volumes such as
    g_file_mount_enclosing_volume(), g_file_mount_mountable(),
    g_volume_mount(), g_mount_unmount_with_operation() and others.

    When necessary, `GtkMountOperation` shows dialogs to let the user
    enter passwords, ask questions or show processes blocking unmount.

    :Constructors:

    ::

        MountOperation(**properties)
        new(parent:Gtk.Window=None) -> Gio.MountOperation

    Object GtkMountOperation

    Properties from GtkMountOperation:
      parent -> GtkWindow: parent
      is-showing -> gboolean: is-showing
      display -> GdkDisplay: display

    Signals from GMountOperation:
      ask-password (gchararray, gchararray, gchararray, GAskPasswordFlags)
      ask-question (gchararray, GStrv)
      reply (GMountOperationResult)
      aborted ()
      show-processes (gchararray, GArray, GStrv)
      show-unmount-progress (gchararray, gint64, gint64)

    Properties from GMountOperation:
      username -> gchararray: Username
        The user name
      password -> gchararray: Password
        The password
      anonymous -> gboolean: Anonymous
        Whether to use an anonymous user
      domain -> gchararray: Domain
        The domain of the mount operation
      password-save -> GPasswordSave: Password save
        How passwords should be saved
      choice -> gint: Choice
        The users choice
      is-tcrypt-hidden-volume -> gboolean: TCRYPT Hidden Volume
        Whether to unlock a TCRYPT hidden volume. See https://www.veracrypt.fr/en/Hidden%20Volume.html.
      is-tcrypt-system-volume -> gboolean: TCRYPT System Volume
        Whether to unlock a TCRYPT system volume. Only supported for unlocking Windows system volumes. See https://www.veracrypt.fr/en/System%20Encryption.html.
      pim -> guint: PIM
        The VeraCrypt PIM value

    Signals from GObject:
      notify (GParam)
    """

    class Props(Gio.MountOperation.Props):
        display: Gdk.Display
        """
        The display where dialogs will be shown.
        """
        is_showing: bool
        """
        Whether a dialog is currently shown.
        """
        parent: Optional[Window]
        """
        The parent window.
        """

    props: Props = ...
    parent_instance: Gio.MountOperation = ...
    priv: MountOperationPrivate = ...
    def __init__(
        self,
        display: Gdk.Display = ...,
        parent: Optional[Window] = ...,
        anonymous: bool = ...,
        choice: int = ...,
        domain: Optional[str] = ...,
        is_tcrypt_hidden_volume: bool = ...,
        is_tcrypt_system_volume: bool = ...,
        password: Optional[str] = ...,
        password_save: Gio.PasswordSave = ...,
        pim: int = ...,
        username: Optional[str] = ...,
    ): ...
    def get_display(self) -> Gdk.Display:
        """
        Gets the display on which windows of the `GtkMountOperation`
        will be shown.

        Parameters:


        Returns:
            Gdk.Display: the display on which windows of @op are shown

        """
        ...

    def get_parent(self) -> Optional[Window]:
        """
        Gets the transient parent used by the `GtkMountOperation`.

        Parameters:


        Returns:
            Optional[Window]: the transient parent for windows shown by @op

        """
        ...

    def is_showing(self) -> bool:
        """
        Returns whether the `GtkMountOperation` is currently displaying
        a window.

        Parameters:


        Returns:
            bool: %TRUE if @op is currently displaying a window

        """
        ...

    @classmethod
    def new(cls, parent: Optional[Window] = None) -> MountOperation:
        """
        Creates a new `GtkMountOperation`.

        Parameters:
            parent: transient parent of the window

        Returns:
            Gio.MountOperation: a new `GtkMountOperation`

        """
        ...

    def set_display(self, display: Gdk.Display) -> None:
        """
        Sets the display to show windows of the `GtkMountOperation` on.

        Parameters:
            display: a `GdkDisplay`

        Returns:

        """
        ...

    def set_parent(self, parent: Optional[Window] = None) -> None:
        """
        Sets the transient parent for windows shown by the
        `GtkMountOperation`.

        Parameters:
            parent: transient parent of the window

        Returns:

        """
        ...

class MountOperationClass(GObject.GPointer):
    """
    :Constructors:

    ::

        MountOperationClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: Gio.MountOperationClass = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...

class MountOperationPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class MultiFilter(Filter, Gio.ListModel, Buildable):
    """
    `GtkMultiFilter` is the base class for filters that combine multiple filters.

    :Constructors:

    ::

        MultiFilter(**properties)

    Object GtkMultiFilter

    Properties from GtkMultiFilter:
      item-type -> GType: item-type
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkFilter:
      changed (GtkFilterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Filter.Props, Gio.ListModel.Props, Buildable.Props):
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """

    props: Props = ...
    def append(self, filter: Filter) -> None:
        """
        Adds a @filter to @self to use for matching.

        Parameters:
            filter: A new filter to use

        Returns:

        """
        ...

    def remove(self, position: int) -> None:
        """
        Removes the filter at the given @position from the list of filters used
        by @self.

        If @position is larger than the number of filters, nothing happens and
        the function returns.

        Parameters:
            position: position of filter to remove

        Returns:

        """
        ...

class MultiFilterClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class MultiSelection(GObject.Object, Gio.ListModel, SectionModel, SelectionModel):
    """
    `GtkMultiSelection` is a `GtkSelectionModel` that allows selecting multiple
    elements.

    :Constructors:

    ::

        MultiSelection(**properties)
        new(model:Gio.ListModel=None) -> Gtk.MultiSelection

    Object GtkMultiSelection

    Properties from GtkMultiSelection:
      item-type -> GType: item-type
      model -> GListModel: model
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkSectionModel:
      sections-changed (guint, guint)

    Signals from GtkSelectionModel:
      selection-changed (guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        GObject.Object.Props,
        Gio.ListModel.Props,
        SectionModel.Props,
        SelectionModel.Props,
    ):
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        model: Optional[Gio.ListModel]
        """
        The list managed by this selection.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """

    props: Props = ...
    def __init__(self, model: Optional[Gio.ListModel] = ...): ...
    def get_model(self) -> Optional[Gio.ListModel]:
        """
        Returns the underlying model of @self.

        Parameters:


        Returns:
            Optional[Gio.ListModel]: the underlying model

        """
        ...

    @classmethod
    def new(cls, model: Optional[Gio.ListModel] = None) -> MultiSelection:
        """
        Creates a new selection to handle @model.

        Parameters:
            model: the `GListModel` to manage

        Returns:
            MultiSelection: a new `GtkMultiSelection`

        """
        ...

    def set_model(self, model: Optional[Gio.ListModel] = None) -> None:
        """
        Sets the model that @self should wrap.

        If @model is %NULL, @self will be empty.

        Parameters:
            model: A `GListModel` to wrap

        Returns:

        """
        ...

class MultiSelectionClass(GObject.GPointer):
    """
    :Constructors:

    ::

        MultiSelectionClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class MultiSorter(Sorter, Gio.ListModel, Buildable):
    """
    `GtkMultiSorter` combines multiple sorters by trying them
    in turn.

    If the first sorter compares two items as equal,
    the second is tried next, and so on.

    :Constructors:

    ::

        MultiSorter(**properties)
        new() -> Gtk.MultiSorter

    Object GtkMultiSorter

    Properties from GtkMultiSorter:
      item-type -> GType: item-type
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkSorter:
      changed (GtkSorterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Sorter.Props, Gio.ListModel.Props, Buildable.Props):
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """

    props: Props = ...
    def append(self, sorter: Sorter) -> None:
        """
        Add @sorter to @self to use for sorting at the end.

        @self will consult all existing sorters before it will
        sort with the given @sorter.

        Parameters:
            sorter: a sorter to add

        Returns:

        """
        ...

    @classmethod
    def new(cls) -> MultiSorter:
        """
        Creates a new multi sorter.

        This sorter compares items by trying each of the sorters
        in turn, until one returns non-zero. In particular, if
        no sorter has been added to it, it will always compare
        items as equal.

        Parameters:


        Returns:
            MultiSorter: a new `GtkMultiSorter`

        """
        ...

    def remove(self, position: int) -> None:
        """
        Removes the sorter at the given @position from the list of sorter
        used by @self.

        If @position is larger than the number of sorters, nothing happens.

        Parameters:
            position: position of sorter to remove

        Returns:

        """
        ...

class MultiSorterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        MultiSorterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: SorterClass = ...

class NamedAction(ShortcutAction):
    """
    A `GtkShortcutAction` that activates an action by name.

    :Constructors:

    ::

        NamedAction(**properties)
        new(name:str) -> Gtk.NamedAction

    Object GtkNamedAction

    Properties from GtkNamedAction:
      action-name -> gchararray: action-name

    Signals from GObject:
      notify (GParam)
    """

    class Props(ShortcutAction.Props):
        action_name: str
        """
        The name of the action to activate.
        """

    props: Props = ...
    def __init__(self, action_name: str = ...): ...
    def get_action_name(self) -> str:
        """
        Returns the name of the action that will be activated.

        Parameters:


        Returns:
            str: the name of the action to activate

        """
        ...

    @classmethod
    def new(cls, name: str) -> NamedAction:
        """
        Creates an action that when activated, activates
        the named action on the widget.

        It also passes the given arguments to it.

        See [method@Gtk.Widget.insert_action_group] for
        how to add actions to widgets.

        Parameters:
            name: the detailed name of the action

        Returns:
            NamedAction: a new `GtkShortcutAction`

        """
        ...

class NamedActionClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class Native(GObject.GInterface):
    """
    `GtkNative` is the interface implemented by all widgets that have
    their own `GdkSurface`.

    The obvious example of a `GtkNative` is `GtkWindow`.

    Every widget that is not itself a `GtkNative` is contained in one,
    and you can get it with [method@Gtk.Widget.get_native].

    To get the surface of a `GtkNative`, use [method@Gtk.Native.get_surface].
    It is also possible to find the `GtkNative` to which a surface
    belongs, with [func@Gtk.Native.get_for_surface].

    In addition to a [class@Gdk.Surface], a `GtkNative` also provides
    a [class@Gsk.Renderer] for rendering on that surface. To get the
    renderer, use [method@Gtk.Native.get_renderer].



    Interface GtkNative

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    @staticmethod
    def get_for_surface(surface: Gdk.Surface) -> Optional[Native]:
        """
        Finds the `GtkNative` associated with the surface.

        Parameters:
            surface: a `GdkSurface`

        Returns:
            Optional[Native]: the `GtkNative` that is associated with @surface

        """
        ...

    def get_renderer(self) -> Gsk.Renderer:
        """
        Returns the renderer that is used for this `GtkNative`.

        Parameters:


        Returns:
            Gsk.Renderer: the renderer for @self

        """
        ...

    def get_surface(self) -> Gdk.Surface:
        """
        Returns the surface of this `GtkNative`.

        Parameters:


        Returns:
            Gdk.Surface: the surface of @self

        """
        ...

    def get_surface_transform(self) -> Tuple[float, float]:
        """
        Retrieves the surface transform of @self.

        This is the translation from @self's surface coordinates into
        @self's widget coordinates.

        Parameters:


        Returns:
            float: return location for the x coordinate
            float: return location for the y coordinate
        """
        ...

    def realize(self) -> None:
        """
        Realizes a `GtkNative`.

        This should only be used by subclasses.

        Parameters:


        Returns:

        """
        ...

    def unrealize(self) -> None:
        """
        Unrealizes a `GtkNative`.

        This should only be used by subclasses.

        Parameters:


        Returns:

        """
        ...

class NativeDialog(GObject.Object):
    """
    Native dialogs are platform dialogs that don't use `GtkDialog`.

    They are used in order to integrate better with a platform, by
    looking the same as other native applications and supporting
    platform specific features.

    The [class@Gtk.Dialog] functions cannot be used on such objects,
    but we need a similar API in order to drive them. The `GtkNativeDialog`
    object is an API that allows you to do this. It allows you to set
    various common properties on the dialog, as well as show and hide
    it and get a [signal@Gtk.NativeDialog::response] signal when the user
    finished with the dialog.

    Note that unlike `GtkDialog`, `GtkNativeDialog` objects are not
    toplevel widgets, and GTK does not keep them alive. It is your
    responsibility to keep a reference until you are done with the
    object.

    :Constructors:

    ::

        NativeDialog(**properties)

    Object GtkNativeDialog

    Signals from GtkNativeDialog:
      response (gint)

    Properties from GtkNativeDialog:
      title -> gchararray: title
      visible -> gboolean: visible
      modal -> gboolean: modal
      transient-for -> GtkWindow: transient-for

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        modal: bool
        """
        Whether the window should be modal with respect to its transient parent.
        """
        title: Optional[str]
        """
        The title of the dialog window
        """
        transient_for: Optional[Window]
        """
        The transient parent of the dialog, or %NULL for none.
        """
        visible: bool
        """
        Whether the window is currently visible.
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    def __init__(
        self,
        modal: bool = ...,
        title: str = ...,
        transient_for: Optional[Window] = ...,
        visible: bool = ...,
    ): ...
    def destroy(self) -> None:
        """
        Destroys a dialog.

        When a dialog is destroyed, it will break any references it holds
        to other objects.

        If it is visible it will be hidden and any underlying window system
        resources will be destroyed.

        Note that this does not release any reference to the object (as opposed
        to destroying a `GtkWindow`) because there is no reference from the
        windowing system to the `GtkNativeDialog`.

        Parameters:


        Returns:

        """
        ...

    def do_hide(self) -> None:
        """
        Hides the dialog if it is visible, aborting any interaction.

        Once this is called the [signal@Gtk.NativeDialog::response] signal
        will *not* be emitted until after the next call to
        [method@Gtk.NativeDialog.show].

        If the dialog is not visible this does nothing.

        Parameters:


        Returns:

        """
        ...

    def do_response(self, response_id: int) -> None: ...
    def do_show(self) -> None:
        """
        Shows the dialog on the display.

        When the user accepts the state of the dialog the dialog will
        be automatically hidden and the [signal@Gtk.NativeDialog::response]
        signal will be emitted.

        Multiple calls while the dialog is visible will be ignored.

        Parameters:


        Returns:

        """
        ...

    def get_modal(self) -> bool:
        """
        Returns whether the dialog is modal.

        Parameters:


        Returns:
            bool: %TRUE if the dialog is set to be modal

        """
        ...

    def get_title(self) -> Optional[str]:
        """
        Gets the title of the `GtkNativeDialog`.

        Parameters:


        Returns:
            Optional[str]: the title of the dialog, or %NULL if none has
        been set explicitly. The returned string is owned by the widget
        and must not be modified or freed.

        """
        ...

    def get_transient_for(self) -> Optional[Window]:
        """
        Fetches the transient parent for this window.

        Parameters:


        Returns:
            Optional[Window]: the transient parent for this window,
        or %NULL if no transient parent has been set.

        """
        ...

    def get_visible(self) -> bool:
        """
        Determines whether the dialog is visible.

        Parameters:


        Returns:
            bool: %TRUE if the dialog is visible

        """
        ...

    def hide(self) -> None:
        """
        Hides the dialog if it is visible, aborting any interaction.

        Once this is called the [signal@Gtk.NativeDialog::response] signal
        will *not* be emitted until after the next call to
        [method@Gtk.NativeDialog.show].

        If the dialog is not visible this does nothing.

        Parameters:


        Returns:

        """
        ...

    def set_modal(self, modal: bool) -> None:
        """
        Sets a dialog modal or non-modal.

        Modal dialogs prevent interaction with other windows in the same
        application. To keep modal dialogs on top of main application
        windows, use [method@Gtk.NativeDialog.set_transient_for] to make
        the dialog transient for the parent; most window managers will
        then disallow lowering the dialog below the parent.

        Parameters:
            modal: whether the window is modal

        Returns:

        """
        ...

    def set_title(self, title: str) -> None:
        """
        Sets the title of the `GtkNativeDialog.`

        Parameters:
            title: title of the dialog

        Returns:

        """
        ...

    def set_transient_for(self, parent: Optional[Window] = None) -> None:
        """
        Dialog windows should be set transient for the main application
        window they were spawned from.

        This allows window managers to e.g. keep the dialog on top of the
        main window, or center the dialog over the main window.

        Passing %NULL for @parent unsets the current transient window.

        Parameters:
            parent: parent window

        Returns:

        """
        ...

    def show(self) -> None:
        """
        Shows the dialog on the display.

        When the user accepts the state of the dialog the dialog will
        be automatically hidden and the [signal@Gtk.NativeDialog::response]
        signal will be emitted.

        Multiple calls while the dialog is visible will be ignored.

        Parameters:


        Returns:

        """
        ...

class NativeDialogClass(GObject.GPointer):
    """
    Class structure for `GtkNativeDialog`.

    :Constructors:

    ::

        NativeDialogClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    response: Callable[[NativeDialog, int], None] = ...
    show: Callable[[NativeDialog], None] = ...
    hide: Callable[[NativeDialog], None] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...

class NativeInterface(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class NeverTrigger(ShortcutTrigger):
    """
    A `GtkShortcutTrigger` that never triggers.

    :Constructors:

    ::

        NeverTrigger(**properties)

    Object GtkNeverTrigger

    Signals from GObject:
      notify (GParam)
    """

    class Props(ShortcutTrigger.Props): ...

    @staticmethod
    def get() -> NeverTrigger:
        """
        Gets the never trigger.

        This is a singleton for a trigger that never triggers.
        Use this trigger instead of %NULL because it implements
        all virtual functions.

        Parameters:


        Returns:
            NeverTrigger: The never trigger

        """
        ...

class NeverTriggerClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class NoSelection(GObject.Object, Gio.ListModel, SectionModel, SelectionModel):
    """
    `GtkNoSelection` is a `GtkSelectionModel` that does not allow selecting
    anything.

    This model is meant to be used as a simple wrapper around a `GListModel`
    when a `GtkSelectionModel` is required.

    `GtkNoSelection` passes through sections from the underlying model.

    :Constructors:

    ::

        NoSelection(**properties)
        new(model:Gio.ListModel=None) -> Gtk.NoSelection

    Object GtkNoSelection

    Properties from GtkNoSelection:
      item-type -> GType: item-type
      model -> GListModel: model
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkSectionModel:
      sections-changed (guint, guint)

    Signals from GtkSelectionModel:
      selection-changed (guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        GObject.Object.Props,
        Gio.ListModel.Props,
        SectionModel.Props,
        SelectionModel.Props,
    ):
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        model: Optional[Gio.ListModel]
        """
        The model being managed.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """

    props: Props = ...
    def __init__(self, model: Optional[Gio.ListModel] = ...): ...
    def get_model(self) -> Optional[Gio.ListModel]:
        """
        Gets the model that @self is wrapping.

        Parameters:


        Returns:
            Optional[Gio.ListModel]: The model being wrapped

        """
        ...

    @classmethod
    def new(cls, model: Optional[Gio.ListModel] = None) -> NoSelection:
        """
        Creates a new selection to handle @model.

        Parameters:
            model: the `GListModel` to manage

        Returns:
            NoSelection: a new `GtkNoSelection`

        """
        ...

    def set_model(self, model: Optional[Gio.ListModel] = None) -> None:
        """
        Sets the model that @self should wrap.

        If @model is %NULL, this model will be empty.

        Parameters:
            model: A `GListModel` to wrap

        Returns:

        """
        ...

class NoSelectionClass(GObject.GPointer):
    """
    :Constructors:

    ::

        NoSelectionClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class Notebook(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkNotebook` is a container whose children are pages switched
    between using tabs.

    ![An example GtkNotebook](notebook.png)

    There are many configuration options for `GtkNotebook`. Among
    other things, you can choose on which edge the tabs appear
    (see [method@Gtk.Notebook.set_tab_pos]), whether, if there are
    too many tabs to fit the notebook should be made bigger or scrolling
    arrows added (see [method@Gtk.Notebook.set_scrollable]), and whether
    there will be a popup menu allowing the users to switch pages.
    (see [method@Gtk.Notebook.popup_enable]).

    # GtkNotebook as GtkBuildable

    The `GtkNotebook` implementation of the `GtkBuildable` interface
    supports placing children into tabs by specifying “tab” as the
    “type” attribute of a `<child>` element. Note that the content
    of the tab must be created before the tab can be filled.
    A tab child can be specified without specifying a `<child>`
    type attribute.

    To add a child widget in the notebooks action area, specify
    \"action-start\" or “action-end” as the “type” attribute of the
    `<child>` element.

    An example of a UI definition fragment with `GtkNotebook`:

    ```xml
    <object class=\"GtkNotebook\">
    <child>
    <object class=\"GtkLabel\" id=\"notebook-content\">
    <property name=\"label\">Content</property>
    </object>
    </child>
    <child type=\"tab\">
    <object class=\"GtkLabel\" id=\"notebook-tab\">
    <property name=\"label\">Tab</property>
    </object>
    </child>
    </object>
    ```

    # CSS nodes

    ```
    notebook
    ├── header.top
    │ ├── [<action widget>]
    │ ├── tabs
    │ │ ├── [arrow]
    │ │ ├── tab
    │ │ │ ╰── <tab label>
    ┊ ┊ ┊
    │ │ ├── tab[.reorderable-page]
    │ │ │ ╰── <tab label>
    │ │ ╰── [arrow]
    │ ╰── [<action widget>]
    │
    ╰── stack
    ├── <child>
    ┊
    ╰── <child>
    ```

    `GtkNotebook` has a main CSS node with name `notebook`, a subnode
    with name `header` and below that a subnode with name `tabs` which
    contains one subnode per tab with name `tab`.

    If action widgets are present, their CSS nodes are placed next
    to the `tabs` node. If the notebook is scrollable, CSS nodes with
    name `arrow` are placed as first and last child of the `tabs` node.

    The main node gets the `.frame` style class when the notebook
    has a border (see [method@Gtk.Notebook.set_show_border]).

    The header node gets one of the style class `.top`, `.bottom`,
    `.left` or `.right`, depending on where the tabs are placed. For
    reorderable pages, the tab node gets the `.reorderable-page` class.

    A `tab` node gets the `.dnd` style class while it is moved with drag-and-drop.

    The nodes are always arranged from left-to-right, regardless of text direction.

    # Accessibility

    `GtkNotebook` uses the following roles:

    - %GTK_ACCESSIBLE_ROLE_GROUP for the notebook widget
    - %GTK_ACCESSIBLE_ROLE_TAB_LIST for the list of tabs
    - %GTK_ACCESSIBLE_ROLE_TAB role for each tab
    - %GTK_ACCESSIBLE_ROLE_TAB_PANEL for each page

    :Constructors:

    ::

        Notebook(**properties)
        new() -> Gtk.Widget

    Object GtkNotebook

    Signals from GtkNotebook:
      switch-page (GtkWidget, guint)
      focus-tab (GtkNotebookTab) -> gboolean
      select-page (gboolean) -> gboolean
      change-current-page (gint) -> gboolean
      move-focus-out (GtkDirectionType)
      reorder-tab (GtkDirectionType, gboolean) -> gboolean
      page-reordered (GtkWidget, guint)
      page-removed (GtkWidget, guint)
      page-added (GtkWidget, guint)
      create-window (GtkWidget) -> GtkNotebook

    Properties from GtkNotebook:
      tab-pos -> GtkPositionType: tab-pos
      show-tabs -> gboolean: show-tabs
      show-border -> gboolean: show-border
      scrollable -> gboolean: scrollable
      page -> gint: page
      enable-popup -> gboolean: enable-popup
      group-name -> gchararray: group-name
      pages -> GListModel: pages

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        enable_popup: bool
        """
        If %TRUE, pressing the right mouse button on the notebook shows a page switching menu.
        """
        group_name: Optional[str]
        """
        Group name for tab drag and drop.
        """
        page: int
        """
        The index of the current page.
        """
        pages: Gio.ListModel
        """
        A selection model with the pages.
        """
        scrollable: bool
        """
        If %TRUE, scroll arrows are added if there are too many pages to fit.
        """
        show_border: bool
        """
        Whether the border should be shown.
        """
        show_tabs: bool
        """
        Whether tabs should be shown.
        """
        tab_pos: PositionType
        """
        Which side of the notebook holds the tabs.
        """

    props: Props = ...
    def __init__(
        self,
        enable_popup: bool = ...,
        group_name: Optional[str] = ...,
        page: int = ...,
        scrollable: bool = ...,
        show_border: bool = ...,
        show_tabs: bool = ...,
        tab_pos: PositionType = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def append_page(self, child: Widget, tab_label: Optional[Widget] = None) -> int:
        """
        Appends a page to @notebook.

        Parameters:
            child: the `GtkWidget` to use as the contents of the page
            tab_label: the `GtkWidget` to be used as the label
        for the page, or %NULL to use the default label, “page N”

        Returns:
            int: the index (starting from 0) of the appended
        page in the notebook, or -1 if function fails

        """
        ...

    def append_page_menu(
        self,
        child: Widget,
        tab_label: Optional[Widget] = None,
        menu_label: Optional[Widget] = None,
    ) -> int:
        """
        Appends a page to @notebook, specifying the widget to use as the
        label in the popup menu.

        Parameters:
            child: the `GtkWidget` to use as the contents of the page
            tab_label: the `GtkWidget` to be used as the label
        for the page, or %NULL to use the default label, “page N”
            menu_label: the widget to use as a label for the
        page-switch menu, if that is enabled. If %NULL, and @tab_label
        is a `GtkLabel` or %NULL, then the menu label will be a newly
        created label with the same text as @tab_label; if @tab_label
        is not a `GtkLabel`, @menu_label must be specified if the
        page-switch menu is to be used.

        Returns:
            int: the index (starting from 0) of the appended
        page in the notebook, or -1 if function fails

        """
        ...

    def detach_tab(self, child: Widget) -> None:
        """
        Removes the child from the notebook.

        This function is very similar to [method@Gtk.Notebook.remove_page],
        but additionally informs the notebook that the removal
        is happening as part of a tab DND operation, which should
        not be cancelled.

        Parameters:
            child: a child

        Returns:

        """
        ...

    def get_action_widget(self, pack_type: PackType) -> Optional[Widget]:
        """
        Gets one of the action widgets.

        See [method@Gtk.Notebook.set_action_widget].

        Parameters:
            pack_type: pack type of the action widget to receive

        Returns:
            Optional[Widget]: The action widget
        with the given @pack_type or %NULL when this action
        widget has not been set

        """
        ...

    def get_current_page(self) -> int:
        """
        Returns the page number of the current page.

        Parameters:


        Returns:
            int: the index (starting from 0) of the current
        page in the notebook. If the notebook has no pages,
        then -1 will be returned.

        """
        ...

    def get_group_name(self) -> Optional[str]:
        """
        Gets the current group name for @notebook.

        Parameters:


        Returns:
            Optional[str]: the group name,
        or %NULL if none is set

        """
        ...

    def get_menu_label(self, child: Widget) -> Optional[Widget]:
        """
        Retrieves the menu label widget of the page containing @child.

        Parameters:
            child: a widget contained in a page of @notebook

        Returns:
            Optional[Widget]: the menu label, or %NULL
        if the notebook page does not have a menu label other than
        the default (the tab label).

        """
        ...

    def get_menu_label_text(self, child: Widget) -> Optional[str]:
        """
        Retrieves the text of the menu label for the page containing
        @child.

        Parameters:
            child: the child widget of a page of the notebook.

        Returns:
            Optional[str]: the text of the tab label, or %NULL if
        the widget does not have a menu label other than the default
        menu label, or the menu label widget is not a `GtkLabel`.
        The string is owned by the widget and must not be freed.

        """
        ...

    def get_n_pages(self) -> int:
        """
        Gets the number of pages in a notebook.

        Parameters:


        Returns:
            int: the number of pages in the notebook

        """
        ...

    def get_nth_page(self, page_num: int) -> Optional[Widget]:
        """
        Returns the child widget contained in page number @page_num.

        Parameters:
            page_num: the index of a page in the notebook, or -1
        to get the last page

        Returns:
            Optional[Widget]: the child widget, or %NULL if @page_num
        is out of bounds

        """
        ...

    def get_page(self, child: Widget) -> NotebookPage:
        """
        Returns the `GtkNotebookPage` for @child.

        Parameters:
            child: a child of @notebook

        Returns:
            NotebookPage: the `GtkNotebookPage` for @child

        """
        ...

    def get_pages(self) -> Gio.ListModel:
        """
        Returns a `GListModel` that contains the pages of the notebook.

        This can be used to keep an up-to-date view. The model also
        implements [iface@Gtk.SelectionModel] and can be used to track
        and modify the visible page.

        Parameters:


        Returns:
            Gio.ListModel: a
        `GListModel` for the notebook's children

        """
        ...

    def get_scrollable(self) -> bool:
        """
        Returns whether the tab label area has arrows for scrolling.

        Parameters:


        Returns:
            bool: %TRUE if arrows for scrolling are present

        """
        ...

    def get_show_border(self) -> bool:
        """
        Returns whether a bevel will be drawn around the notebook pages.

        Parameters:


        Returns:
            bool: %TRUE if the bevel is drawn

        """
        ...

    def get_show_tabs(self) -> bool:
        """
        Returns whether the tabs of the notebook are shown.

        Parameters:


        Returns:
            bool: %TRUE if the tabs are shown

        """
        ...

    def get_tab_detachable(self, child: Widget) -> bool:
        """
        Returns whether the tab contents can be detached from @notebook.

        Parameters:
            child: a child `GtkWidget`

        Returns:
            bool: %TRUE if the tab is detachable.

        """
        ...

    def get_tab_label(self, child: Widget) -> Optional[Widget]:
        """
        Returns the tab label widget for the page @child.

        %NULL is returned if @child is not in @notebook or
        if no tab label has specifically been set for @child.

        Parameters:
            child: the page

        Returns:
            Optional[Widget]: the tab label

        """
        ...

    def get_tab_label_text(self, child: Widget) -> Optional[str]:
        """
        Retrieves the text of the tab label for the page containing
        @child.

        Parameters:
            child: a widget contained in a page of @notebook

        Returns:
            Optional[str]: the text of the tab label, or %NULL if
        the tab label widget is not a `GtkLabel`. The string is owned
        by the widget and must not be freed.

        """
        ...

    def get_tab_pos(self) -> PositionType:
        """
        Gets the edge at which the tabs are drawn.

        Parameters:


        Returns:
            PositionType: the edge at which the tabs are drawn

        """
        ...

    def get_tab_reorderable(self, child: Widget) -> bool:
        """
        Gets whether the tab can be reordered via drag and drop or not.

        Parameters:
            child: a child `GtkWidget`

        Returns:
            bool: %TRUE if the tab is reorderable.

        """
        ...

    def insert_page(
        self, child: Widget, tab_label: Optional[Widget], position: int
    ) -> int:
        """
        Insert a page into @notebook at the given position.

        Parameters:
            child: the `GtkWidget` to use as the contents of the page
            tab_label: the `GtkWidget` to be used as the label
        for the page, or %NULL to use the default label, “page N”
            position: the index (starting at 0) at which to insert the page,
        or -1 to append the page after all other pages

        Returns:
            int: the index (starting from 0) of the inserted
        page in the notebook, or -1 if function fails

        """
        ...

    def insert_page_menu(
        self,
        child: Widget,
        tab_label: Optional[Widget],
        menu_label: Optional[Widget],
        position: int,
    ) -> int:
        """
        Insert a page into @notebook at the given position, specifying
        the widget to use as the label in the popup menu.

        Parameters:
            child: the `GtkWidget` to use as the contents of the page
            tab_label: the `GtkWidget` to be used as the label
        for the page, or %NULL to use the default label, “page N”
            menu_label: the widget to use as a label for the
        page-switch menu, if that is enabled. If %NULL, and @tab_label
        is a `GtkLabel` or %NULL, then the menu label will be a newly
        created label with the same text as @tab_label; if @tab_label
        is not a `GtkLabel`, @menu_label must be specified if the
        page-switch menu is to be used.
            position: the index (starting at 0) at which to insert the page,
        or -1 to append the page after all other pages.

        Returns:
            int: the index (starting from 0) of the inserted
        page in the notebook

        """
        ...

    @classmethod
    def new(cls) -> Notebook:
        """
        Creates a new `GtkNotebook` widget with no pages.

        Parameters:


        Returns:
            Widget: the newly created `GtkNotebook`

        """
        ...

    def next_page(self) -> None:
        """
        Switches to the next page.

        Nothing happens if the current page is the last page.

        Parameters:


        Returns:

        """
        ...

    def page_num(self, child: Widget) -> int:
        """
        Finds the index of the page which contains the given child
        widget.

        Parameters:
            child: a `GtkWidget`

        Returns:
            int: the index of the page containing @child, or
        -1 if @child is not in the notebook

        """
        ...

    def popup_disable(self) -> None:
        """
        Disables the popup menu.

        Parameters:


        Returns:

        """
        ...

    def popup_enable(self) -> None:
        """
        Enables the popup menu.

        If the user clicks with the right mouse button on the tab labels,
        a menu with all the pages will be popped up.

        Parameters:


        Returns:

        """
        ...

    def prepend_page(self, child: Widget, tab_label: Optional[Widget] = None) -> int:
        """
        Prepends a page to @notebook.

        Parameters:
            child: the `GtkWidget` to use as the contents of the page
            tab_label: the `GtkWidget` to be used as the label
        for the page, or %NULL to use the default label, “page N”

        Returns:
            int: the index (starting from 0) of the prepended
        page in the notebook, or -1 if function fails

        """
        ...

    def prepend_page_menu(
        self,
        child: Widget,
        tab_label: Optional[Widget] = None,
        menu_label: Optional[Widget] = None,
    ) -> int:
        """
        Prepends a page to @notebook, specifying the widget to use as the
        label in the popup menu.

        Parameters:
            child: the `GtkWidget` to use as the contents of the page
            tab_label: the `GtkWidget` to be used as the label
        for the page, or %NULL to use the default label, “page N”
            menu_label: the widget to use as a label for the
        page-switch menu, if that is enabled. If %NULL, and @tab_label
        is a `GtkLabel` or %NULL, then the menu label will be a newly
        created label with the same text as @tab_label; if @tab_label
        is not a `GtkLabel`, @menu_label must be specified if the
        page-switch menu is to be used.

        Returns:
            int: the index (starting from 0) of the prepended
        page in the notebook, or -1 if function fails

        """
        ...

    def prev_page(self) -> None:
        """
        Switches to the previous page.

        Nothing happens if the current page is the first page.

        Parameters:


        Returns:

        """
        ...

    def remove_page(self, page_num: int) -> None:
        """
        Removes a page from the notebook given its index
        in the notebook.

        Parameters:
            page_num: the index of a notebook page, starting
        from 0. If -1, the last page will be removed.

        Returns:

        """
        ...

    def reorder_child(self, child: Widget, position: int) -> None:
        """
        Reorders the page containing @child, so that it appears in position
        @position.

        If @position is greater than or equal to the number of children in
        the list or negative, @child will be moved to the end of the list.

        Parameters:
            child: the child to move
            position: the new position, or -1 to move to the end

        Returns:

        """
        ...

    def set_action_widget(self, widget: Widget, pack_type: PackType) -> None:
        """
        Sets @widget as one of the action widgets.

        Depending on the pack type the widget will be placed before
        or after the tabs. You can use a `GtkBox` if you need to pack
        more than one widget on the same side.

        Parameters:
            widget: a `GtkWidget`
            pack_type: pack type of the action widget

        Returns:

        """
        ...

    def set_current_page(self, page_num: int) -> None:
        """
        Switches to the page number @page_num.

        Note that due to historical reasons, GtkNotebook refuses
        to switch to a page unless the child widget is visible.
        Therefore, it is recommended to show child widgets before
        adding them to a notebook.

        Parameters:
            page_num: index of the page to switch to, starting from 0.
        If negative, the last page will be used. If greater
        than the number of pages in the notebook, nothing
        will be done.

        Returns:

        """
        ...

    def set_group_name(self, group_name: Optional[str] = None) -> None:
        """
        Sets a group name for @notebook.

        Notebooks with the same name will be able to exchange tabs
        via drag and drop. A notebook with a %NULL group name will
        not be able to exchange tabs with any other notebook.

        Parameters:
            group_name: the name of the notebook group,
        or %NULL to unset it

        Returns:

        """
        ...

    def set_menu_label(
        self, child: Widget, menu_label: Optional[Widget] = None
    ) -> None:
        """
        Changes the menu label for the page containing @child.

        Parameters:
            child: the child widget
            menu_label: the menu label, or %NULL for default

        Returns:

        """
        ...

    def set_menu_label_text(self, child: Widget, menu_text: str) -> None:
        """
        Creates a new label and sets it as the menu label of @child.

        Parameters:
            child: the child widget
            menu_text: the label text

        Returns:

        """
        ...

    def set_scrollable(self, scrollable: bool) -> None:
        """
        Sets whether the tab label area will have arrows for
        scrolling if there are too many tabs to fit in the area.

        Parameters:
            scrollable: %TRUE if scroll arrows should be added

        Returns:

        """
        ...

    def set_show_border(self, show_border: bool) -> None:
        """
        Sets whether a bevel will be drawn around the notebook pages.

        This only has a visual effect when the tabs are not shown.

        Parameters:
            show_border: %TRUE if a bevel should be drawn around the notebook

        Returns:

        """
        ...

    def set_show_tabs(self, show_tabs: bool) -> None:
        """
        Sets whether to show the tabs for the notebook or not.

        Parameters:
            show_tabs: %TRUE if the tabs should be shown

        Returns:

        """
        ...

    def set_tab_detachable(self, child: Widget, detachable: bool) -> None:
        """
        Sets whether the tab can be detached from @notebook to another
        notebook or widget.

        Note that two notebooks must share a common group identifier
        (see [method@Gtk.Notebook.set_group_name]) to allow automatic tabs
        interchange between them.

        If you want a widget to interact with a notebook through DnD
        (i.e.: accept dragged tabs from it) it must be set as a drop
        destination and accept the target “GTK_NOTEBOOK_TAB”. The notebook
        will fill the selection with a GtkWidget** pointing to the child
        widget that corresponds to the dropped tab.

        Note that you should use [method@Gtk.Notebook.detach_tab] instead
        of [method@Gtk.Notebook.remove_page] if you want to remove the tab
        from the source notebook as part of accepting a drop. Otherwise,
        the source notebook will think that the dragged tab was removed
        from underneath the ongoing drag operation, and will initiate a
        drag cancel animation.

        ```c
        static void
        on_drag_data_received (GtkWidget *widget,
        GdkDrop *drop,
        GtkSelectionData *data,
        guint time,
        gpointer user_data)
        {
        GtkDrag *drag;
        GtkWidget *notebook;
        GtkWidget **child;

        drag = gtk_drop_get_drag (drop);
        notebook = g_object_get_data (drag, \"gtk-notebook-drag-origin\");
        child = (void*) gtk_selection_data_get_data (data);

        // process_widget (*child);

        gtk_notebook_detach_tab (GTK_NOTEBOOK (notebook), *child);
        }
        ```

        If you want a notebook to accept drags from other widgets,
        you will have to set your own DnD code to do it.

        Parameters:
            child: a child `GtkWidget`
            detachable: whether the tab is detachable or not

        Returns:

        """
        ...

    def set_tab_label(self, child: Widget, tab_label: Optional[Widget] = None) -> None:
        """
        Changes the tab label for @child.

        If %NULL is specified for @tab_label, then the page will
        have the label “page N”.

        Parameters:
            child: the page
            tab_label: the tab label widget to use, or %NULL
        for default tab label

        Returns:

        """
        ...

    def set_tab_label_text(self, child: Widget, tab_text: str) -> None:
        """
        Creates a new label and sets it as the tab label for the page
        containing @child.

        Parameters:
            child: the page
            tab_text: the label text

        Returns:

        """
        ...

    def set_tab_pos(self, pos: PositionType) -> None:
        """
        Sets the edge at which the tabs are drawn.

        Parameters:
            pos: the edge to draw the tabs at

        Returns:

        """
        ...

    def set_tab_reorderable(self, child: Widget, reorderable: bool) -> None:
        """
        Sets whether the notebook tab can be reordered
        via drag and drop or not.

        Parameters:
            child: a child `GtkWidget`
            reorderable: whether the tab is reorderable or not

        Returns:

        """
        ...

class NotebookPage(GObject.Object):
    """
    `GtkNotebookPage` is an auxiliary object used by `GtkNotebook`.

    :Constructors:

    ::

        NotebookPage(**properties)

    Object GtkNotebookPage

    Properties from GtkNotebookPage:
      tab-label -> gchararray: tab-label
      menu-label -> gchararray: menu-label
      position -> gint: position
      tab-expand -> gboolean: tab-expand
      tab-fill -> gboolean: tab-fill
      reorderable -> gboolean: reorderable
      detachable -> gboolean: detachable
      child -> GtkWidget: child
      tab -> GtkWidget: tab
      menu -> GtkWidget: menu

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        child: Widget
        """
        The child for this page.
        """
        detachable: bool
        """
        Whether the tab is detachable.
        """
        menu: Widget
        """
        The label widget displayed in the child's menu entry.
        """
        menu_label: str
        """
        The text of the menu widget.
        """
        position: int
        """
        The index of the child in the parent.
        """
        reorderable: bool
        """
        Whether the tab is reorderable by user action.
        """
        tab: Widget
        """
        The tab widget for this page.
        """
        tab_expand: bool
        """
        Whether to expand the child's tab.
        """
        tab_fill: bool
        """
        Whether the child's tab should fill the allocated area.
        """
        tab_label: str
        """
        The text of the tab widget.
        """

    props: Props = ...
    def __init__(
        self,
        child: Widget = ...,
        detachable: bool = ...,
        menu: Widget = ...,
        menu_label: str = ...,
        position: int = ...,
        reorderable: bool = ...,
        tab: Widget = ...,
        tab_expand: bool = ...,
        tab_fill: bool = ...,
        tab_label: str = ...,
    ): ...
    def get_child(self) -> Widget:
        """
        Returns the notebook child to which @page belongs.

        Parameters:


        Returns:
            Widget: the child to which @page belongs

        """
        ...

class NothingAction(ShortcutAction):
    """
    A `GtkShortcutAction` that does nothing.

    :Constructors:

    ::

        NothingAction(**properties)

    Object GtkNothingAction

    Signals from GObject:
      notify (GParam)
    """

    class Props(ShortcutAction.Props): ...

    @staticmethod
    def get() -> NothingAction:
        """
        Gets the nothing action.

        This is an action that does nothing and where
        activating it always fails.

        Parameters:


        Returns:
            NothingAction: The nothing action

        """
        ...

class NothingActionClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class NumericSorter(Sorter):
    """
    `GtkNumericSorter` is a `GtkSorter` that compares numbers.

    To obtain the numbers to compare, this sorter evaluates a
    [class@Gtk.Expression].

    :Constructors:

    ::

        NumericSorter(**properties)
        new(expression:Gtk.Expression=None) -> Gtk.NumericSorter

    Object GtkNumericSorter

    Properties from GtkNumericSorter:
      expression -> GtkExpression: expression
      sort-order -> GtkSortType: sort-order

    Signals from GtkSorter:
      changed (GtkSorterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Sorter.Props):
        expression: Optional[Expression]
        """
        The expression to evaluate on items to get a number to compare with.
        """
        sort_order: SortType
        """
        Whether the sorter will sort smaller numbers first.
        """

    props: Props = ...
    def __init__(
        self, expression: Optional[Expression] = ..., sort_order: SortType = ...
    ): ...
    def get_expression(self) -> Optional[Expression]:
        """
        Gets the expression that is evaluated to obtain numbers from items.

        Parameters:


        Returns:
            Optional[Expression]: a `GtkExpression`

        """
        ...

    def get_sort_order(self) -> SortType:
        """
        Gets whether this sorter will sort smaller numbers first.

        Parameters:


        Returns:
            SortType: the order of the numbers

        """
        ...

    @classmethod
    def new(cls, expression: Optional[Expression] = None) -> NumericSorter:
        """
        Creates a new numeric sorter using the given @expression.

        Smaller numbers will be sorted first. You can call
        [method@Gtk.NumericSorter.set_sort_order] to change this.

        Parameters:
            expression: The expression to evaluate

        Returns:
            NumericSorter: a new `GtkNumericSorter`

        """
        ...

    def set_expression(self, expression: Optional[Expression] = None) -> None:
        """
        Sets the expression that is evaluated to obtain numbers from items.

        Unless an expression is set on @self, the sorter will always
        compare items as invalid.

        The expression must have a return type that can be compared
        numerically, such as %G_TYPE_INT or %G_TYPE_DOUBLE.

        Parameters:
            expression: a `GtkExpression`

        Returns:

        """
        ...

    def set_sort_order(self, sort_order: SortType) -> None:
        """
        Sets whether to sort smaller numbers before larger ones.

        Parameters:
            sort_order: whether to sort smaller numbers first

        Returns:

        """
        ...

class NumericSorterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        NumericSorterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: SorterClass = ...

class ObjectExpression(Expression):
    """
    A `GObject` value in a `GtkExpression`.

    :Constructors:

    ::

        ObjectExpression(**properties)
        new(object:GObject.Object) -> Gtk.ObjectExpression
    """

    class Props(Expression.Props): ...

    def get_object(self) -> Optional[GObject.Object]:
        """
        Gets the object that the expression evaluates to.

        Parameters:


        Returns:
            Optional[GObject.Object]: the object, or `NULL`

        """
        ...

    @classmethod
    def new(cls, object: GObject.Object) -> ObjectExpression:
        """
        Creates an expression evaluating to the given `object` with a weak reference.

        Once the `object` is disposed, it will fail to evaluate.

        This expression is meant to break reference cycles.

        If you want to keep a reference to `object`, use [ctor@Gtk.ConstantExpression.new].

        Parameters:
            object: object to watch

        Returns:
            ObjectExpression: a new `GtkExpression`

        """
        ...

class Orientable(GObject.GInterface):
    """
    The `GtkOrientable` interface is implemented by all widgets that can be
    oriented horizontally or vertically.

    `GtkOrientable` is more flexible in that it allows the orientation to be
    changed at runtime, allowing the widgets to “flip”.

    ## CSS nodes

    `GtkWidget` types implementing the `GtkOrientable` interface will
    automatically acquire the `horizontal` or `vertical` CSS class depending on
    the value of the [property@Gtk.Orientable:orientation] property.



    Interface GtkOrientable

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def __init__(self, orientation: Orientation = ...): ...
    def get_orientation(self) -> Orientation:
        """
        Retrieves the orientation of the @orientable.

        Parameters:


        Returns:
            Orientation: the orientation of the @orientable

        """
        ...

    def set_orientation(self, orientation: Orientation) -> None:
        """
        Sets the orientation of the @orientable.

        Parameters:
            orientation: the orientable’s new orientation

        Returns:

        """
        ...

class OrientableIface(GObject.GPointer):
    """
    :Constructors:

    ::

        OrientableIface()
    """

    class Props(GObject.GPointer.Props): ...
    base_iface: GObject.TypeInterface = ...

class Overlay(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkOverlay` is a container which contains a single main child, on top
    of which it can place “overlay” widgets.

    ![An example GtkOverlay](overlay.png)

    The position of each overlay widget is determined by its
    [property@Gtk.Widget:halign] and [property@Gtk.Widget:valign]
    properties. E.g. a widget with both alignments set to %GTK_ALIGN_START
    will be placed at the top left corner of the `GtkOverlay` container,
    whereas an overlay with halign set to %GTK_ALIGN_CENTER and valign set
    to %GTK_ALIGN_END will be placed a the bottom edge of the `GtkOverlay`,
    horizontally centered. The position can be adjusted by setting the margin
    properties of the child to non-zero values.

    More complicated placement of overlays is possible by connecting
    to the [signal@Gtk.Overlay::get-child-position] signal.

    An overlay’s minimum and natural sizes are those of its main child.
    The sizes of overlay children are not considered when measuring these
    preferred sizes.

    # GtkOverlay as GtkBuildable

    The `GtkOverlay` implementation of the `GtkBuildable` interface
    supports placing a child as an overlay by specifying “overlay” as
    the “type” attribute of a `<child>` element.

    # CSS nodes

    `GtkOverlay` has a single CSS node with the name “overlay”. Overlay children
    whose alignments cause them to be positioned at an edge get the style classes
    “.left”, “.right”, “.top”, and/or “.bottom” according to their position.

    :Constructors:

    ::

        Overlay(**properties)
        new() -> Gtk.Widget

    Object GtkOverlay

    Signals from GtkOverlay:
      get-child-position (GtkWidget, GdkRectangle) -> gboolean

    Properties from GtkOverlay:
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        child: Optional[Widget]
        """
        The main child widget.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def add_overlay(self, widget: Widget) -> None:
        """
        Adds @widget to @overlay.

        The widget will be stacked on top of the main widget
        added with [method@Gtk.Overlay.set_child].

        The position at which @widget is placed is determined
        from its [property@Gtk.Widget:halign] and
        [property@Gtk.Widget:valign] properties.

        Parameters:
            widget: a `GtkWidget` to be added to the container

        Returns:

        """
        ...

    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @overlay.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @overlay

        """
        ...

    def get_clip_overlay(self, widget: Widget) -> bool:
        """
        Gets whether @widget should be clipped within the parent.

        Parameters:
            widget: an overlay child of `GtkOverlay`

        Returns:
            bool: whether the widget is clipped within the parent.

        """
        ...

    def get_measure_overlay(self, widget: Widget) -> bool:
        """
        Gets whether @widget's size is included in the measurement of
        @overlay.

        Parameters:
            widget: an overlay child of `GtkOverlay`

        Returns:
            bool: whether the widget is measured

        """
        ...

    @classmethod
    def new(cls) -> Overlay:
        """
        Creates a new `GtkOverlay`.

        Parameters:


        Returns:
            Widget: a new `GtkOverlay` object.

        """
        ...

    def remove_overlay(self, widget: Widget) -> None:
        """
        Removes an overlay that was added with gtk_overlay_add_overlay().

        Parameters:
            widget: a `GtkWidget` to be removed

        Returns:

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @overlay.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_clip_overlay(self, widget: Widget, clip_overlay: bool) -> None:
        """
        Sets whether @widget should be clipped within the parent.

        Parameters:
            widget: an overlay child of `GtkOverlay`
            clip_overlay: whether the child should be clipped

        Returns:

        """
        ...

    def set_measure_overlay(self, widget: Widget, measure: bool) -> None:
        """
        Sets whether @widget is included in the measured size of @overlay.

        The overlay will request the size of the largest child that has
        this property set to %TRUE. Children who are not included may
        be drawn outside of @overlay's allocation if they are too large.

        Parameters:
            widget: an overlay child of `GtkOverlay`
            measure: whether the child should be measured

        Returns:

        """
        ...

class OverlayLayout(LayoutManager):
    """
    `GtkOverlayLayout` is the layout manager used by [class@Gtk.Overlay].

    It places widgets as overlays on top of the main child.

    This is not a reusable layout manager, since it expects its widget
    to be a `GtkOverlay`. It is only listed here so that its layout
    properties get documented.

    :Constructors:

    ::

        OverlayLayout(**properties)
        new() -> Gtk.LayoutManager

    Object GtkOverlayLayout

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutManager.Props): ...

    @classmethod
    def new(cls) -> OverlayLayout:
        """
        Creates a new `GtkOverlayLayout` instance.

        Parameters:


        Returns:
            LayoutManager: the newly created instance

        """
        ...

class OverlayLayoutChild(LayoutChild):
    """
    `GtkLayoutChild` subclass for children in a `GtkOverlayLayout`.

    :Constructors:

    ::

        OverlayLayoutChild(**properties)

    Object GtkOverlayLayoutChild

    Properties from GtkOverlayLayoutChild:
      measure -> gboolean: measure
      clip-overlay -> gboolean: clip-overlay

    Properties from GtkLayoutChild:
      layout-manager -> GtkLayoutManager: layout-manager
      child-widget -> GtkWidget: child-widget

    Signals from GObject:
      notify (GParam)
    """

    class Props(LayoutChild.Props):
        clip_overlay: bool
        """
        Whether the child should be clipped to fit the parent's size.
        """
        measure: bool
        """
        Whether the child size should contribute to the `GtkOverlayLayout`'s
        measurement.
        """

    props: Props = ...
    def __init__(
        self,
        clip_overlay: bool = ...,
        measure: bool = ...,
        child_widget: Widget = ...,
        layout_manager: LayoutManager = ...,
    ): ...
    def get_clip_overlay(self) -> bool:
        """
        Retrieves whether the child is clipped.

        Parameters:


        Returns:
            bool: whether the child is clipped

        """
        ...

    def get_measure(self) -> bool:
        """
        Retrieves whether the child is measured.

        Parameters:


        Returns:
            bool: whether the child is measured

        """
        ...

    def set_clip_overlay(self, clip_overlay: bool) -> None:
        """
        Sets whether to clip this child.

        Parameters:
            clip_overlay: whether to clip this child

        Returns:

        """
        ...

    def set_measure(self, measure: bool) -> None:
        """
        Sets whether to measure this child.

        Parameters:
            measure: whether to measure this child

        Returns:

        """
        ...

class OverlayLayoutChildClass(GObject.GPointer):
    """
    :Constructors:

    ::

        OverlayLayoutChildClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutChildClass = ...

class OverlayLayoutClass(GObject.GPointer):
    """
    :Constructors:

    ::

        OverlayLayoutClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: LayoutManagerClass = ...

class PadActionEntry(GObject.GPointer):
    """
    Struct defining a pad action entry.

    :Constructors:

    ::

        PadActionEntry()
    """

    class Props(GObject.GPointer.Props): ...
    type: PadActionType = ...
    index: int = ...
    mode: int = ...
    label: str = ...
    action_name: str = ...

class PadController(EventController):
    """
    `GtkPadController` is an event controller for the pads found in drawing
    tablets.

    Pads are the collection of buttons and tactile sensors often found around
    the stylus-sensitive area.

    These buttons and sensors have no implicit meaning, and by default they
    perform no action. `GtkPadController` is provided to map those to
    [iface@Gio.Action] objects, thus letting the application give them a more
    semantic meaning.

    Buttons and sensors are not constrained to triggering a single action,
    some %GDK_SOURCE_TABLET_PAD devices feature multiple \"modes\". All these
    input elements have one current mode, which may determine the final action
    being triggered.

    Pad devices often divide buttons and sensors into groups. All elements
    in a group share the same current mode, but different groups may have
    different modes. See [method@Gdk.DevicePad.get_n_groups] and
    [method@Gdk.DevicePad.get_group_n_modes].

    Each of the actions that a given button/strip/ring performs for a given mode
    is defined by a [struct@Gtk.PadActionEntry]. It contains an action name that
    will be looked up in the given [iface@Gio.ActionGroup] and activated whenever
    the specified input element and mode are triggered.

    A simple example of `GtkPadController` usage: Assigning button 1 in all
    modes and pad devices to an \"invert-selection\" action:

    ```c
    GtkPadActionEntry *pad_actions[] = {
    { GTK_PAD_ACTION_BUTTON, 1, -1, \"Invert selection\", \"pad-actions.invert-selection\" },
    …
    };

    …
    action_group = g_simple_action_group_new ();
    action = g_simple_action_new (\"pad-actions.invert-selection\", NULL);
    g_signal_connect (action, \"activate\", on_invert_selection_activated, NULL);
    g_action_map_add_action (G_ACTION_MAP (action_group), action);
    …
    pad_controller = gtk_pad_controller_new (action_group, NULL);
    ```

    The actions belonging to rings/strips will be activated with a parameter
    of type %G_VARIANT_TYPE_DOUBLE bearing the value of the given axis, it
    is required that those are made stateful and accepting this `GVariantType`.

    :Constructors:

    ::

        PadController(**properties)
        new(group:Gio.ActionGroup, pad:Gdk.Device=None) -> Gtk.PadController

    Object GtkPadController

    Properties from GtkPadController:
      action-group -> GActionGroup: action-group
      pad -> GdkDevice: pad

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props):
        action_group: Gio.ActionGroup
        pad: Gdk.Device

    props: Props = ...
    def __init__(
        self,
        action_group: Gio.ActionGroup = ...,
        pad: Gdk.Device = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    @classmethod
    def new(
        cls, group: Gio.ActionGroup, pad: Optional[Gdk.Device] = None
    ) -> PadController:
        """
        Creates a new `GtkPadController` that will associate events from @pad to
        actions.

        A %NULL pad may be provided so the controller manages all pad devices
        generically, it is discouraged to mix `GtkPadController` objects with
        %NULL and non-%NULL @pad argument on the same toplevel window, as execution
        order is not guaranteed.

        The `GtkPadController` is created with no mapped actions. In order to
        map pad events to actions, use [method@Gtk.PadController.set_action_entries]
        or [method@Gtk.PadController.set_action].

        Be aware that pad events will only be delivered to `GtkWindow`s, so adding
        a pad controller to any other type of widget will not have an effect.

        Parameters:
            group: `GActionGroup` to trigger actions from
            pad: A %GDK_SOURCE_TABLET_PAD device, or %NULL to handle all pads

        Returns:
            PadController: A newly created `GtkPadController`

        """
        ...

    def set_action(
        self, type: PadActionType, index: int, mode: int, label: str, action_name: str
    ) -> None:
        """
        Adds an individual action to @controller.

        This action will only be activated if the given button/ring/strip number
        in @index is interacted while the current mode is @mode. -1 may be used
        for simple cases, so the action is triggered on all modes.

        The given @label should be considered user-visible, so internationalization
        rules apply. Some windowing systems may be able to use those for user
        feedback.

        Parameters:
            type: the type of pad feature that will trigger this action
            index: the 0-indexed button/ring/strip number that will trigger this action
            mode: the mode that will trigger this action, or -1 for all modes.
            label: Human readable description of this action, this string should
        be deemed user-visible.
            action_name: action name that will be activated in the `GActionGroup`

        Returns:

        """
        ...

    def set_action_entries(self, entries: Sequence[PadActionEntry]) -> None:
        """
        A convenience function to add a group of action entries on
        @controller.

        See [struct@Gtk.PadActionEntry] and [method@Gtk.PadController.set_action].

        Parameters:
            entries: the action entries to set on @controller

        Returns:

        """
        ...

class PadControllerClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class PageRange(GObject.GPointer):
    """
    A range of pages to print.

    See also [method@Gtk.PrintSettings.set_page_ranges].

    :Constructors:

    ::

        PageRange()
    """

    class Props(GObject.GPointer.Props): ...
    start: int = ...
    end: int = ...

class PageSetup(GObject.Object):
    """
    A `GtkPageSetup` object stores the page size, orientation and margins.

    The idea is that you can get one of these from the page setup dialog
    and then pass it to the `GtkPrintOperation` when printing.
    The benefit of splitting this out of the `GtkPrintSettings` is that
    these affect the actual layout of the page, and thus need to be set
    long before user prints.

    ## Margins

    The margins specified in this object are the “print margins”, i.e. the
    parts of the page that the printer cannot print on. These are different
    from the layout margins that a word processor uses; they are typically
    used to determine the minimal size for the layout margins.

    To obtain a `GtkPageSetup` use [ctor@Gtk.PageSetup.new] to get the defaults,
    or use [func@Gtk.print_run_page_setup_dialog] to show the page setup dialog
    and receive the resulting page setup.

    ## A page setup dialog

    ```c
    static GtkPrintSettings *settings = NULL;
    static GtkPageSetup *page_setup = NULL;

    static void
    do_page_setup (void)
    {
    GtkPageSetup *new_page_setup;

    if (settings == NULL)
    settings = gtk_print_settings_new ();

    new_page_setup = gtk_print_run_page_setup_dialog (GTK_WINDOW (main_window),
    page_setup, settings);

    if (page_setup)
    g_object_unref (page_setup);

    page_setup = new_page_setup;
    }
    ```

    :Constructors:

    ::

        PageSetup(**properties)
        new() -> Gtk.PageSetup
        new_from_file(file_name:str) -> Gtk.PageSetup
        new_from_gvariant(variant:GLib.Variant) -> Gtk.PageSetup
        new_from_key_file(key_file:GLib.KeyFile, group_name:str=None) -> Gtk.PageSetup

    Object GtkPageSetup

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...

    def copy(self) -> PageSetup:
        """
        Copies a `GtkPageSetup`.

        Parameters:


        Returns:
            PageSetup: a copy of @other

        """
        ...

    def get_bottom_margin(self, unit: Unit) -> float:
        """
        Gets the bottom margin in units of @unit.

        Parameters:
            unit: the unit for the return value

        Returns:
            float: the bottom margin

        """
        ...

    def get_left_margin(self, unit: Unit) -> float:
        """
        Gets the left margin in units of @unit.

        Parameters:
            unit: the unit for the return value

        Returns:
            float: the left margin

        """
        ...

    def get_orientation(self) -> PageOrientation:
        """
        Gets the page orientation of the `GtkPageSetup`.

        Parameters:


        Returns:
            PageOrientation: the page orientation

        """
        ...

    def get_page_height(self, unit: Unit) -> float:
        """
        Returns the page height in units of @unit.

        Note that this function takes orientation
        and margins into consideration.
        See [method@Gtk.PageSetup.get_paper_height].

        Parameters:
            unit: the unit for the return value

        Returns:
            float: the page height.

        """
        ...

    def get_page_width(self, unit: Unit) -> float:
        """
        Returns the page width in units of @unit.

        Note that this function takes orientation
        and margins into consideration.
        See [method@Gtk.PageSetup.get_paper_width].

        Parameters:
            unit: the unit for the return value

        Returns:
            float: the page width.

        """
        ...

    def get_paper_height(self, unit: Unit) -> float:
        """
        Returns the paper height in units of @unit.

        Note that this function takes orientation,
        but not margins into consideration.
        See [method@Gtk.PageSetup.get_page_height].

        Parameters:
            unit: the unit for the return value

        Returns:
            float: the paper height.

        """
        ...

    def get_paper_size(self) -> PaperSize:
        """
        Gets the paper size of the `GtkPageSetup`.

        Parameters:


        Returns:
            PaperSize: the paper size

        """
        ...

    def get_paper_width(self, unit: Unit) -> float:
        """
        Returns the paper width in units of @unit.

        Note that this function takes orientation,
        but not margins into consideration.
        See [method@Gtk.PageSetup.get_page_width].

        Parameters:
            unit: the unit for the return value

        Returns:
            float: the paper width.

        """
        ...

    def get_right_margin(self, unit: Unit) -> float:
        """
        Gets the right margin in units of @unit.

        Parameters:
            unit: the unit for the return value

        Returns:
            float: the right margin

        """
        ...

    def get_top_margin(self, unit: Unit) -> float:
        """
        Gets the top margin in units of @unit.

        Parameters:
            unit: the unit for the return value

        Returns:
            float: the top margin

        """
        ...

    def load_file(self, file_name: str) -> bool:
        """
        Reads the page setup from the file @file_name.

        See [method@Gtk.PageSetup.to_file].

        Parameters:
            file_name: the filename to read the page setup from

        Returns:
            bool: %TRUE on success

        """
        ...

    def load_key_file(
        self, key_file: GLib.KeyFile, group_name: Optional[str] = None
    ) -> bool:
        """
        Reads the page setup from the group @group_name in the key file
        @key_file.

        Parameters:
            key_file: the `GKeyFile` to retrieve the page_setup from
            group_name: the name of the group in the key_file to read
        to use the default name “Page Setup”

        Returns:
            bool: %TRUE on success

        """
        ...

    @classmethod
    def new(cls) -> PageSetup:
        """
        Creates a new `GtkPageSetup`.

        Parameters:


        Returns:
            PageSetup: a new `GtkPageSetup`.

        """
        ...

    @classmethod
    def new_from_file(cls, file_name: str) -> PageSetup:
        """
        Reads the page setup from the file @file_name.

        Returns a new `GtkPageSetup` object with the restored
        page setup, or %NULL if an error occurred.
        See [method@Gtk.PageSetup.to_file].

        Parameters:
            file_name: the filename to read the page setup from

        Returns:
            PageSetup: the restored `GtkPageSetup`

        """
        ...

    @classmethod
    def new_from_gvariant(cls, variant: GLib.Variant) -> PageSetup:
        """
        Desrialize a page setup from an a{sv} variant.

        The variant must be in the format produced by
        [method@Gtk.PageSetup.to_gvariant].

        Parameters:
            variant: an a{sv} `GVariant`

        Returns:
            PageSetup: a new `GtkPageSetup` object

        """
        ...

    @classmethod
    def new_from_key_file(
        cls, key_file: GLib.KeyFile, group_name: Optional[str] = None
    ) -> PageSetup:
        """
        Reads the page setup from the group @group_name in the key file
        @key_file.

        Returns a new `GtkPageSetup` object with the restored
        page setup, or %NULL if an error occurred.

        Parameters:
            key_file: the `GKeyFile` to retrieve the page_setup from
            group_name: the name of the group in the key_file to read
        to use the default name “Page Setup”

        Returns:
            PageSetup: the restored `GtkPageSetup`

        """
        ...

    def set_bottom_margin(self, margin: float, unit: Unit) -> None:
        """
        Sets the bottom margin of the `GtkPageSetup`.

        Parameters:
            margin: the new bottom margin in units of @unit
            unit: the units for @margin

        Returns:

        """
        ...

    def set_left_margin(self, margin: float, unit: Unit) -> None:
        """
        Sets the left margin of the `GtkPageSetup`.

        Parameters:
            margin: the new left margin in units of @unit
            unit: the units for @margin

        Returns:

        """
        ...

    def set_orientation(self, orientation: PageOrientation) -> None:
        """
        Sets the page orientation of the `GtkPageSetup`.

        Parameters:
            orientation: a `GtkPageOrientation` value

        Returns:

        """
        ...

    def set_paper_size(self, size: PaperSize) -> None:
        """
        Sets the paper size of the `GtkPageSetup` without
        changing the margins.

        See [method@Gtk.PageSetup.set_paper_size_and_default_margins].

        Parameters:
            size: a `GtkPaperSize`

        Returns:

        """
        ...

    def set_paper_size_and_default_margins(self, size: PaperSize) -> None:
        """
        Sets the paper size of the `GtkPageSetup` and modifies
        the margins according to the new paper size.

        Parameters:
            size: a `GtkPaperSize`

        Returns:

        """
        ...

    def set_right_margin(self, margin: float, unit: Unit) -> None:
        """
        Sets the right margin of the `GtkPageSetup`.

        Parameters:
            margin: the new right margin in units of @unit
            unit: the units for @margin

        Returns:

        """
        ...

    def set_top_margin(self, margin: float, unit: Unit) -> None:
        """
        Sets the top margin of the `GtkPageSetup`.

        Parameters:
            margin: the new top margin in units of @unit
            unit: the units for @margin

        Returns:

        """
        ...

    def to_file(self, file_name: str) -> bool:
        """
        This function saves the information from @setup to @file_name.

        Parameters:
            file_name: the file to save to

        Returns:
            bool: %TRUE on success

        """
        ...

    def to_gvariant(self) -> GLib.Variant:
        """
        Serialize page setup to an a{sv} variant.

        Parameters:


        Returns:
            GLib.Variant: a new, floating, `GVariant`

        """
        ...

    def to_key_file(
        self, key_file: GLib.KeyFile, group_name: Optional[str] = None
    ) -> None:
        """
        This function adds the page setup from @setup to @key_file.

        Parameters:
            key_file: the `GKeyFile` to save the page setup to
            group_name: the group to add the settings to in @key_file,
        or %NULL to use the default name “Page Setup”

        Returns:

        """
        ...

class PageSetupUnixDialog(
    Dialog, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager
):
    """
    `GtkPageSetupUnixDialog` implements a page setup dialog for platforms
    which don’t provide a native page setup dialog, like Unix.

    ![An example GtkPageSetupUnixDialog](pagesetupdialog.png)

    It can be used very much like any other GTK dialog, at the
    cost of the portability offered by the high-level printing
    API in [class@Gtk.PrintOperation].

    ## CSS nodes

    `GtkPageSetupUnixDialog` has a single CSS node with the name `window` and
    style class `.pagesetup`.

    :Constructors:

    ::

        PageSetupUnixDialog(**properties)
        new(title:str=None, parent:Gtk.Window=None) -> Gtk.Widget

    Object GtkPageSetupUnixDialog

    Signals from GtkDialog:
      response (gint)
      close ()

    Properties from GtkDialog:
      use-header-bar -> gint: use-header-bar

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Dialog.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ): ...

    def __init__(
        self,
        use_header_bar: int = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_page_setup(self) -> PageSetup:
        """
        Gets the currently selected page setup from the dialog.

        Parameters:


        Returns:
            PageSetup: the current page setup

        """
        ...

    def get_print_settings(self) -> Optional[PrintSettings]:
        """
        Gets the current print settings from the dialog.

        Parameters:


        Returns:
            Optional[PrintSettings]: the current print settings

        """
        ...

    @classmethod
    def new(
        cls, title: Optional[str] = None, parent: Optional[Window] = None
    ) -> PageSetupUnixDialog:
        """
        Creates a new page setup dialog.

        Parameters:
            title: the title of the dialog
            parent: transient parent of the dialog

        Returns:
            Widget: the new `GtkPageSetupUnixDialog`

        """
        ...

    def set_page_setup(self, page_setup: PageSetup) -> None:
        """
        Sets the `GtkPageSetup` from which the page setup
        dialog takes its values.

        Parameters:
            page_setup: a `GtkPageSetup`

        Returns:

        """
        ...

    def set_print_settings(
        self, print_settings: Optional[PrintSettings] = None
    ) -> None:
        """
        Sets the `GtkPrintSettings` from which the page setup dialog
        takes its values.

        Parameters:
            print_settings: a `GtkPrintSettings`

        Returns:

        """
        ...

class Paned(
    Widget, Accessible, AccessibleRange, Buildable, ConstraintTarget, Orientable
):
    """
    A widget with two panes, arranged either horizontally or vertically.

    ![An example GtkPaned](panes.png)

    The division between the two panes is adjustable by the user
    by dragging a handle.

    Child widgets are added to the panes of the widget with
    [method@Gtk.Paned.set_start_child] and [method@Gtk.Paned.set_end_child].
    The division between the two children is set by default from the size
    requests of the children, but it can be adjusted by the user.

    A paned widget draws a separator between the two child widgets and a
    small handle that the user can drag to adjust the division. It does not
    draw any relief around the children or around the separator. (The space
    in which the separator is called the gutter.) Often, it is useful to put
    each child inside a [class@Gtk.Frame] so that the gutter appears as a
    ridge. No separator is drawn if one of the children is missing.

    Each child has two options that can be set, \"resize\" and \"shrink\". If
    \"resize\" is true then, when the `GtkPaned` is resized, that child will
    expand or shrink along with the paned widget. If \"shrink\" is true, then
    that child can be made smaller than its requisition by the user.
    Setting \"shrink\" to false allows the application to set a minimum size.
    If \"resize\" is false for both children, then this is treated as if
    \"resize\" is true for both children.

    The application can set the position of the slider as if it were set
    by the user, by calling [method@Gtk.Paned.set_position].

    # CSS nodes

    ```
    paned
    ├── <child>
    ├── separator[.wide]
    ╰── <child>
    ```

    `GtkPaned` has a main CSS node with name paned, and a subnode for
    the separator with name separator. The subnode gets a .wide style
    class when the paned is supposed to be wide.

    In horizontal orientation, the nodes are arranged based on the text
    direction, so in left-to-right mode, :first-child will select the
    leftmost child, while it will select the rightmost child in
    RTL layouts.

    ## Creating a paned widget with minimum sizes.

    ```c
    GtkWidget *hpaned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);
    GtkWidget *frame1 = gtk_frame_new (NULL);
    GtkWidget *frame2 = gtk_frame_new (NULL);

    gtk_widget_set_size_request (hpaned, 200, -1);

    gtk_paned_set_start_child (GTK_PANED (hpaned), frame1);
    gtk_paned_set_resize_start_child (GTK_PANED (hpaned), TRUE);
    gtk_paned_set_shrink_start_child (GTK_PANED (hpaned), FALSE);
    gtk_widget_set_size_request (frame1, 50, -1);

    gtk_paned_set_end_child (GTK_PANED (hpaned), frame2);
    gtk_paned_set_resize_end_child (GTK_PANED (hpaned), FALSE);
    gtk_paned_set_shrink_end_child (GTK_PANED (hpaned), FALSE);
    gtk_widget_set_size_request (frame2, 50, -1);
    ```

    :Constructors:

    ::

        Paned(**properties)
        new(orientation:Gtk.Orientation) -> Gtk.Widget

    Object GtkPaned

    Signals from GtkPaned:
      cycle-child-focus (gboolean) -> gboolean
      toggle-handle-focus () -> gboolean
      move-handle (GtkScrollType) -> gboolean
      cycle-handle-focus (gboolean) -> gboolean
      accept-position () -> gboolean
      cancel-position () -> gboolean

    Properties from GtkPaned:
      position -> gint: position
      position-set -> gboolean: position-set
      min-position -> gint: min-position
      max-position -> gint: max-position
      wide-handle -> gboolean: wide-handle
      resize-start-child -> gboolean: resize-start-child
      resize-end-child -> gboolean: resize-end-child
      shrink-start-child -> gboolean: shrink-start-child
      shrink-end-child -> gboolean: shrink-end-child
      start-child -> GtkWidget: start-child
      end-child -> GtkWidget: end-child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        AccessibleRange.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        end_child: Optional[Widget]
        """
        The second child.
        """
        max_position: int
        """
        The largest possible value for the [property@Gtk.Paned:position]
        property.

        This property is derived from the size and shrinkability
        of the widget's children.
        """
        min_position: int
        """
        The smallest possible value for the [property@Gtk.Paned:position]
        property.

        This property is derived from the size and shrinkability
        of the widget's children.
        """
        position: int
        """
        Position of the separator in pixels, from the left/top.
        """
        position_set: bool
        """
        Whether the [property@Gtk.Paned:position] property has been set.
        """
        resize_end_child: bool
        """
        Determines whether the second child expands and shrinks
        along with the paned widget.
        """
        resize_start_child: bool
        """
        Determines whether the first child expands and shrinks
        along with the paned widget.
        """
        shrink_end_child: bool
        """
        Determines whether the second child can be made smaller
        than its requisition.
        """
        shrink_start_child: bool
        """
        Determines whether the first child can be made smaller
        than its requisition.
        """
        start_child: Optional[Widget]
        """
        The first child.
        """
        wide_handle: bool
        """
        Whether the `GtkPaned` should provide a stronger visual separation.

        For example, this could be set when a paned contains two
        [class@Gtk.Notebook]s, whose tab rows would otherwise merge visually.
        """

    props: Props = ...
    def __init__(
        self,
        end_child: Optional[Widget] = ...,
        position: int = ...,
        position_set: bool = ...,
        resize_end_child: bool = ...,
        resize_start_child: bool = ...,
        shrink_end_child: bool = ...,
        shrink_start_child: bool = ...,
        start_child: Optional[Widget] = ...,
        wide_handle: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def get_end_child(self) -> Optional[Widget]:
        """
        Retrieves the end child of the given `GtkPaned`.

        Parameters:


        Returns:
            Optional[Widget]: the end child widget

        """
        ...

    def get_position(self) -> int:
        """
        Obtains the position of the divider between the two panes.

        Parameters:


        Returns:
            int: the position of the divider, in pixels

        """
        ...

    def get_resize_end_child(self) -> bool:
        """
        Returns whether the [property@Gtk.Paned:end-child] can be resized.

        Parameters:


        Returns:
            bool: true if the end child is resizable

        """
        ...

    def get_resize_start_child(self) -> bool:
        """
        Returns whether the [property@Gtk.Paned:start-child] can be resized.

        Parameters:


        Returns:
            bool: true if the start child is resizable

        """
        ...

    def get_shrink_end_child(self) -> bool:
        """
        Returns whether the [property@Gtk.Paned:end-child] can shrink.

        Parameters:


        Returns:
            bool: true if the end child is shrinkable

        """
        ...

    def get_shrink_start_child(self) -> bool:
        """
        Returns whether the [property@Gtk.Paned:start-child] can shrink.

        Parameters:


        Returns:
            bool: true if the start child is shrinkable

        """
        ...

    def get_start_child(self) -> Optional[Widget]:
        """
        Retrieves the start child of the given `GtkPaned`.

        Parameters:


        Returns:
            Optional[Widget]: the start child widget

        """
        ...

    def get_wide_handle(self) -> bool:
        """
        Gets whether the separator should be wide.

        Parameters:


        Returns:
            bool: %TRUE if the paned should have a wide handle

        """
        ...

    @classmethod
    def new(cls, orientation: Orientation) -> Paned:
        """
        Creates a new `GtkPaned` widget.

        Parameters:
            orientation: the paned’s orientation.

        Returns:
            Widget: the newly created paned widget

        """
        ...

    def set_end_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the end child of @paned to @child.

        If @child is `NULL`, the existing child will be removed.

        Parameters:
            child: the widget to add

        Returns:

        """
        ...

    def set_position(self, position: int) -> None:
        """
        Sets the position of the divider between the two panes.

        Parameters:
            position: pixel position of divider, a negative value means that the position
        is unset

        Returns:

        """
        ...

    def set_resize_end_child(self, resize: bool) -> None:
        """
        Sets whether the [property@Gtk.Paned:end-child] can be resized.

        Parameters:
            resize: true to let the end child be resized

        Returns:

        """
        ...

    def set_resize_start_child(self, resize: bool) -> None:
        """
        Sets whether the [property@Gtk.Paned:start-child] can be resized.

        Parameters:
            resize: true to let the start child be resized

        Returns:

        """
        ...

    def set_shrink_end_child(self, resize: bool) -> None:
        """
        Sets whether the [property@Gtk.Paned:end-child] can shrink.

        Parameters:
            resize: true to let the end child be shrunk

        Returns:

        """
        ...

    def set_shrink_start_child(self, resize: bool) -> None:
        """
        Sets whether the [property@Gtk.Paned:start-child] can shrink.

        Parameters:
            resize: true to let the start child be shrunk

        Returns:

        """
        ...

    def set_start_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the start child of @paned to @child.

        If @child is `NULL`, the existing child will be removed.

        Parameters:
            child: the widget to add

        Returns:

        """
        ...

    def set_wide_handle(self, wide: bool) -> None:
        """
        Sets whether the separator should be wide.

        Parameters:
            wide: the new value for the [property@Gtk.Paned:wide-handle] property

        Returns:

        """
        ...

class PaperSize(GObject.GBoxed):
    """
    `GtkPaperSize` handles paper sizes.

    It uses the standard called
    [PWG 5101.1-2002 PWG: Standard for Media Standardized Names](http://www.pwg.org/standards.html)
    to name the paper sizes (and to get the data for the page sizes).
    In addition to standard paper sizes, `GtkPaperSize` allows to
    construct custom paper sizes with arbitrary dimensions.

    The `GtkPaperSize` object stores not only the dimensions (width
    and height) of a paper size and its name, it also provides
    default print margins.

    :Constructors:

    ::

        new(name:str=None) -> Gtk.PaperSize
        new_custom(name:str, display_name:str, width:float, height:float, unit:Gtk.Unit) -> Gtk.PaperSize
        new_from_gvariant(variant:GLib.Variant) -> Gtk.PaperSize
        new_from_ipp(ipp_name:str, width:float, height:float) -> Gtk.PaperSize
        new_from_key_file(key_file:GLib.KeyFile, group_name:str=None) -> Gtk.PaperSize
        new_from_ppd(ppd_name:str, ppd_display_name:str, width:float, height:float) -> Gtk.PaperSize
    """

    class Props(GObject.GBoxed.Props): ...

    def copy(self) -> PaperSize:
        """
        Copies an existing `GtkPaperSize`.

        Parameters:


        Returns:
            PaperSize: a copy of @other

        """
        ...

    def free(self) -> None:
        """
        Free the given `GtkPaperSize` object.

        Parameters:


        Returns:

        """
        ...

    @staticmethod
    def get_default() -> str:
        """
        Returns the name of the default paper size, which
        depends on the current locale.

        Parameters:


        Returns:
            str: the name of the default paper size. The string
        is owned by GTK and should not be modified.

        """
        ...

    def get_default_bottom_margin(self, unit: Unit) -> float:
        """
        Gets the default bottom margin for the `GtkPaperSize`.

        Parameters:
            unit: the unit for the return value, not %GTK_UNIT_NONE

        Returns:
            float: the default bottom margin

        """
        ...

    def get_default_left_margin(self, unit: Unit) -> float:
        """
        Gets the default left margin for the `GtkPaperSize`.

        Parameters:
            unit: the unit for the return value, not %GTK_UNIT_NONE

        Returns:
            float: the default left margin

        """
        ...

    def get_default_right_margin(self, unit: Unit) -> float:
        """
        Gets the default right margin for the `GtkPaperSize`.

        Parameters:
            unit: the unit for the return value, not %GTK_UNIT_NONE

        Returns:
            float: the default right margin

        """
        ...

    def get_default_top_margin(self, unit: Unit) -> float:
        """
        Gets the default top margin for the `GtkPaperSize`.

        Parameters:
            unit: the unit for the return value, not %GTK_UNIT_NONE

        Returns:
            float: the default top margin

        """
        ...

    def get_display_name(self) -> str:
        """
        Gets the human-readable name of the `GtkPaperSize`.

        Parameters:


        Returns:
            str: the human-readable name of @size

        """
        ...

    def get_height(self, unit: Unit) -> float:
        """
        Gets the paper height of the `GtkPaperSize`, in
        units of @unit.

        Parameters:
            unit: the unit for the return value, not %GTK_UNIT_NONE

        Returns:
            float: the paper height

        """
        ...

    def get_name(self) -> str:
        """
        Gets the name of the `GtkPaperSize`.

        Parameters:


        Returns:
            str: the name of @size

        """
        ...

    @staticmethod
    def get_paper_sizes(include_custom: bool) -> list[PaperSize]:
        """
        Creates a list of known paper sizes.

        Parameters:
            include_custom: whether to include custom paper sizes
        as defined in the page setup dialog

        Returns:
            list[PaperSize]: a newly allocated list of newly
        allocated `GtkPaperSize` objects

        """
        ...

    def get_ppd_name(self) -> str:
        """
        Gets the PPD name of the `GtkPaperSize`, which
        may be %NULL.

        Parameters:


        Returns:
            str: the PPD name of @size

        """
        ...

    def get_width(self, unit: Unit) -> float:
        """
        Gets the paper width of the `GtkPaperSize`, in
        units of @unit.

        Parameters:
            unit: the unit for the return value, not %GTK_UNIT_NONE

        Returns:
            float: the paper width

        """
        ...

    def is_custom(self) -> bool:
        """
        Returns %TRUE if @size is not a standard paper size.

        Parameters:


        Returns:
            bool: whether @size is a custom paper size.

        """
        ...

    def is_equal(self, size2: PaperSize) -> bool:
        """
        Compares two `GtkPaperSize` objects.

        Parameters:
            size2: another `GtkPaperSize` object

        Returns:
            bool: %TRUE, if @size1 and @size2
        represent the same paper size

        """
        ...

    def is_ipp(self) -> bool:
        """
        Returns %TRUE if @size is an IPP standard paper size.

        Parameters:


        Returns:
            bool: whether @size is not an IPP custom paper size.

        """
        ...

    @classmethod
    def new(cls, name: Optional[str] = None) -> PaperSize:
        """
        Creates a new `GtkPaperSize` object by parsing a
        [PWG 5101.1-2002](ftp://ftp.pwg.org/pub/pwg/candidates/cs-pwgmsn10-20020226-5101.1.pdf)
        paper name.

        If @name is %NULL, the default paper size is returned,
        see [func@Gtk.PaperSize.get_default].

        Parameters:
            name: a paper size name

        Returns:
            PaperSize: a new `GtkPaperSize`, use [method@Gtk.PaperSize.free]
        to free it

        """
        ...

    @classmethod
    def new_custom(
        cls, name: str, display_name: str, width: float, height: float, unit: Unit
    ) -> PaperSize:
        """
        Creates a new `GtkPaperSize` object with the
        given parameters.

        Parameters:
            name: the paper name
            display_name: the human-readable name
            width: the paper width, in units of @unit
            height: the paper height, in units of @unit
            unit: the unit for @width and @height. not %GTK_UNIT_NONE.

        Returns:
            PaperSize: a new `GtkPaperSize` object, use [method@Gtk.PaperSize.free]
        to free it

        """
        ...

    @classmethod
    def new_from_gvariant(cls, variant: GLib.Variant) -> PaperSize:
        """
        Deserialize a paper size from a `GVariant`.

        The `GVariant must be in the format produced by
        [method@Gtk.PaperSize.to_gvariant].

        Parameters:
            variant: an a{sv} `GVariant`

        Returns:
            PaperSize: a new `GtkPaperSize` object

        """
        ...

    @classmethod
    def new_from_ipp(cls, ipp_name: str, width: float, height: float) -> PaperSize:
        """
        Creates a new `GtkPaperSize` object by using
        IPP information.

        If @ipp_name is not a recognized paper name,
        @width and @height are used to
        construct a custom `GtkPaperSize` object.

        Parameters:
            ipp_name: an IPP paper name
            width: the paper width, in points
            height: the paper height in points

        Returns:
            PaperSize: a new `GtkPaperSize`, use [method@Gtk.PaperSize.free]
        to free it

        """
        ...

    @classmethod
    def new_from_key_file(
        cls, key_file: GLib.KeyFile, group_name: Optional[str] = None
    ) -> PaperSize:
        """
        Reads a paper size from the group @group_name in the key file
        @key_file.

        Parameters:
            key_file: the `GKeyFile` to retrieve the papersize from
            group_name: the name of the group in the key file to read,
        or %NULL to read the first group

        Returns:
            PaperSize: a new `GtkPaperSize` object with the restored paper size

        """
        ...

    @classmethod
    def new_from_ppd(
        cls, ppd_name: str, ppd_display_name: str, width: float, height: float
    ) -> PaperSize:
        """
        Creates a new `GtkPaperSize` object by using
        PPD information.

        If @ppd_name is not a recognized PPD paper name,
        @ppd_display_name, @width and @height are used to
        construct a custom `GtkPaperSize` object.

        Parameters:
            ppd_name: a PPD paper name
            ppd_display_name: the corresponding human-readable name
            width: the paper width, in points
            height: the paper height in points

        Returns:
            PaperSize: a new `GtkPaperSize`, use [method@Gtk.PaperSize.free]
        to free it

        """
        ...

    def set_size(self, width: float, height: float, unit: Unit) -> None:
        """
        Changes the dimensions of a @size to @width x @height.

        Parameters:
            width: the new width in units of @unit
            height: the new height in units of @unit
            unit: the unit for @width and @height

        Returns:

        """
        ...

    def to_gvariant(self) -> GLib.Variant:
        """
        Serialize a paper size to an `a{sv}` variant.

        Parameters:


        Returns:
            GLib.Variant: a new, floating, `GVariant`

        """
        ...

    def to_key_file(self, key_file: GLib.KeyFile, group_name: str) -> None:
        """
        This function adds the paper size from @size to @key_file.

        Parameters:
            key_file: the `GKeyFile` to save the paper size to
            group_name: the group to add the settings to in @key_file

        Returns:

        """
        ...

class ParamSpecExpression(GObject.ParamSpec):
    """
    A `GParamSpec` for properties holding a `GtkExpression`.

    :Constructors:

    ::

        ParamSpecExpression(**properties)
    """

    class Props(GObject.ParamSpec.Props): ...
    parent_instance: GObject.ParamSpec = ...

class PasswordEntry(Widget, Accessible, Buildable, ConstraintTarget, Editable):
    """
    `GtkPasswordEntry` is an entry that has been tailored for entering secrets.

    ![An example GtkPasswordEntry](password-entry.png)

    It does not show its contents in clear text, does not allow to copy it
    to the clipboard, and it shows a warning when Caps Lock is engaged. If
    the underlying platform allows it, `GtkPasswordEntry` will also place
    the text in a non-pageable memory area, to avoid it being written out
    to disk by the operating system.

    Optionally, it can offer a way to reveal the contents in clear text.

    `GtkPasswordEntry` provides only minimal API and should be used with
    the [iface@Gtk.Editable] API.

    # CSS Nodes

    ```
    entry.password
    ╰── text
    ├── image.caps-lock-indicator
    ┊
    ```

    `GtkPasswordEntry` has a single CSS node with name entry that carries
    a .passwordstyle class. The text Css node below it has a child with
    name image and style class .caps-lock-indicator for the Caps Lock
    icon, and possibly other children.

    # Accessibility

    `GtkPasswordEntry` uses the %GTK_ACCESSIBLE_ROLE_TEXT_BOX role.

    :Constructors:

    ::

        PasswordEntry(**properties)
        new() -> Gtk.Widget

    Object GtkPasswordEntry

    Signals from GtkPasswordEntry:
      activate ()

    Properties from GtkPasswordEntry:
      placeholder-text -> gchararray: placeholder-text
      activates-default -> gboolean: activates-default
      show-peek-icon -> gboolean: show-peek-icon
      extra-menu -> GMenuModel: extra-menu

    Signals from GtkEditable:
      changed ()
      insert-text (gchararray, gint, gpointer)
      delete-text (gint, gint)

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Editable.Props,
    ):
        activates_default: bool
        """
        Whether to activate the default widget when Enter is pressed.
        """
        extra_menu: Optional[Gio.MenuModel]
        """
        A menu model whose contents will be appended to
        the context menu.
        """
        placeholder_text: str
        """
        The text that will be displayed in the `GtkPasswordEntry`
        when it is empty and unfocused.
        """
        show_peek_icon: bool
        """
        Whether to show an icon for revealing the content.
        """

    props: Props = ...
    def __init__(
        self,
        activates_default: bool = ...,
        extra_menu: Optional[Gio.MenuModel] = ...,
        placeholder_text: str = ...,
        show_peek_icon: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        editable: bool = ...,
        enable_undo: bool = ...,
        max_width_chars: int = ...,
        text: str = ...,
        width_chars: int = ...,
        xalign: float = ...,
    ): ...
    def get_extra_menu(self) -> Optional[Gio.MenuModel]:
        """
        Gets the menu model set with gtk_password_entry_set_extra_menu().

        Parameters:


        Returns:
            Optional[Gio.MenuModel]: the menu model

        """
        ...

    def get_show_peek_icon(self) -> bool:
        """
        Returns whether the entry is showing an icon to
        reveal the contents.

        Parameters:


        Returns:
            bool: %TRUE if an icon is shown

        """
        ...

    @classmethod
    def new(cls) -> PasswordEntry:
        """
        Creates a `GtkPasswordEntry`.

        Parameters:


        Returns:
            Widget: a new `GtkPasswordEntry`

        """
        ...

    def set_extra_menu(self, model: Optional[Gio.MenuModel] = None) -> None:
        """
        Sets a menu model to add when constructing
        the context menu for @entry.

        Parameters:
            model: a `GMenuModel`

        Returns:

        """
        ...

    def set_show_peek_icon(self, show_peek_icon: bool) -> None:
        """
        Sets whether the entry should have a clickable icon
        to reveal the contents.

        Setting this to %FALSE also hides the text again.

        Parameters:
            show_peek_icon: whether to show the peek icon

        Returns:

        """
        ...

class PasswordEntryBuffer(EntryBuffer):
    """
    A `GtkEntryBuffer` that locks the underlying memory to prevent it
    from being swapped to disk.

    `GtkPasswordEntry` uses a `GtkPasswordEntryBuffer`.

    :Constructors:

    ::

        PasswordEntryBuffer(**properties)
        new() -> Gtk.EntryBuffer

    Object GtkPasswordEntryBuffer

    Signals from GtkEntryBuffer:
      inserted-text (guint, gchararray, guint)
      deleted-text (guint, guint)

    Properties from GtkEntryBuffer:
      text -> gchararray: text
      length -> guint: length
      max-length -> gint: max-length

    Signals from GObject:
      notify (GParam)
    """

    class Props(EntryBuffer.Props): ...

    def __init__(self, max_length: int = ..., text: str = ...): ...
    @classmethod
    def new(cls) -> PasswordEntryBuffer:
        """
        Creates a new `GtkEntryBuffer` using secure memory allocations.

        Parameters:


        Returns:
            EntryBuffer: the newly created instance

        """
        ...

class PasswordEntryBufferClass(GObject.GPointer):
    """
    :Constructors:

    ::

        PasswordEntryBufferClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: EntryBufferClass = ...

class PasswordEntryClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class Picture(Widget, Accessible, Buildable, ConstraintTarget):
    """
    The `GtkPicture` widget displays a `GdkPaintable`.

    ![An example GtkPicture](picture.png)

    Many convenience functions are provided to make pictures simple to use.
    For example, if you want to load an image from a file, and then display
    it, there’s a convenience function to do this:

    ```c
    GtkWidget *widget = gtk_picture_new_for_filename (\"myfile.png\");
    ```

    If the file isn’t loaded successfully, the picture will contain a
    “broken image” icon similar to that used in many web browsers.
    If you want to handle errors in loading the file yourself,
    for example by displaying an error message, then load the image with
    [ctor@Gdk.Texture.new_from_file], then create the `GtkPicture` with
    [ctor@Gtk.Picture.new_for_paintable].

    Sometimes an application will want to avoid depending on external data
    files, such as image files. See the documentation of `GResource` for details.
    In this case, [ctor@Gtk.Picture.new_for_resource] and
    [method@Gtk.Picture.set_resource] should be used.

    `GtkPicture` displays an image at its natural size. See [class@Gtk.Image]
    if you want to display a fixed-size image, such as an icon.

    ## Sizing the paintable

    You can influence how the paintable is displayed inside the `GtkPicture`
    by changing [property@Gtk.Picture:content-fit]. See [enum@Gtk.ContentFit]
    for details. [property@Gtk.Picture:can-shrink] can be unset to make sure
    that paintables are never made smaller than their ideal size - but
    be careful if you do not know the size of the paintable in use (like
    when displaying user-loaded images). This can easily cause the picture to
    grow larger than the screen. And [property@Gtk.Widget:halign] and
    [property@Gtk.Widget:valign] can be used to make sure the paintable doesn't
    fill all available space but is instead displayed at its original size.

    ## CSS nodes

    `GtkPicture` has a single CSS node with the name `picture`.

    ## Accessibility

    `GtkPicture` uses the `GTK_ACCESSIBLE_ROLE_IMG` role.

    :Constructors:

    ::

        Picture(**properties)
        new() -> Gtk.Widget
        new_for_file(file:Gio.File=None) -> Gtk.Widget
        new_for_filename(filename:str=None) -> Gtk.Widget
        new_for_paintable(paintable:Gdk.Paintable=None) -> Gtk.Widget
        new_for_pixbuf(pixbuf:GdkPixbuf.Pixbuf=None) -> Gtk.Widget
        new_for_resource(resource_path:str=None) -> Gtk.Widget

    Object GtkPicture

    Properties from GtkPicture:
      paintable -> GdkPaintable: paintable
      file -> GFile: file
      alternative-text -> gchararray: alternative-text
      keep-aspect-ratio -> gboolean: keep-aspect-ratio
      can-shrink -> gboolean: can-shrink
      content-fit -> GtkContentFit: content-fit

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        alternative_text: Optional[str]
        """
        The alternative textual description for the picture.
        """
        can_shrink: bool
        """
        If the `GtkPicture` can be made smaller than the natural size of its contents.
        """
        content_fit: ContentFit
        """
        How the content should be resized to fit inside the `GtkPicture`.
        """
        file: Optional[Gio.File]
        """
        The `GFile` that is displayed or %NULL if none.
        """
        keep_aspect_ratio: bool
        """
        Whether the GtkPicture will render its contents trying to preserve the aspect
        ratio.
        """
        paintable: Optional[Gdk.Paintable]
        """
        The `GdkPaintable` to be displayed by this `GtkPicture`.
        """

    props: Props = ...
    def __init__(
        self,
        alternative_text: Optional[str] = ...,
        can_shrink: bool = ...,
        content_fit: ContentFit = ...,
        file: Optional[Gio.File] = ...,
        keep_aspect_ratio: bool = ...,
        paintable: Optional[Gdk.Paintable] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_alternative_text(self) -> Optional[str]:
        """
        Gets the alternative textual description of the picture.

        The returned string will be %NULL if the picture cannot be described textually.

        Parameters:


        Returns:
            Optional[str]: the alternative textual description of @self.

        """
        ...

    def get_can_shrink(self) -> bool:
        """
        Returns whether the `GtkPicture` respects its contents size.

        Parameters:


        Returns:
            bool: %TRUE if the picture can be made smaller than its contents

        """
        ...

    def get_content_fit(self) -> ContentFit:
        """
        Returns the fit mode for the content of the `GtkPicture`.

        See [enum@Gtk.ContentFit] for details.

        Parameters:


        Returns:
            ContentFit: the content fit mode

        """
        ...

    def get_file(self) -> Optional[Gio.File]:
        """
        Gets the `GFile` currently displayed if @self is displaying a file.

        If @self is not displaying a file, for example when
        [method@Gtk.Picture.set_paintable] was used, then %NULL is returned.

        Parameters:


        Returns:
            Optional[Gio.File]: The `GFile` displayed by @self.

        """
        ...

    @deprecated(
        "Use [method@Gtk.Picture.get_content_fit] instead. This will now return `FALSE` only if [property@Gtk.Picture:content-fit] is `GTK_CONTENT_FIT_FILL`. Returns `TRUE` otherwise."
    )
    def get_keep_aspect_ratio(self) -> bool:
        """
        Returns whether the `GtkPicture` preserves its contents aspect ratio.

        Parameters:


        Returns:
            bool: %TRUE if the self tries to keep the contents' aspect ratio

        """
        ...

    def get_paintable(self) -> Optional[Gdk.Paintable]:
        """
        Gets the `GdkPaintable` being displayed by the `GtkPicture`.

        Parameters:


        Returns:
            Optional[Gdk.Paintable]: the displayed paintable

        """
        ...

    @classmethod
    def new(cls) -> Picture:
        """
        Creates a new empty `GtkPicture` widget.

        Parameters:


        Returns:
            Widget: a newly created `GtkPicture` widget.

        """
        ...

    @classmethod
    def new_for_file(cls, file: Optional[Gio.File] = None) -> Picture:
        """
        Creates a new `GtkPicture` displaying the given @file.

        If the file isn’t found or can’t be loaded, the resulting
        `GtkPicture` is empty.

        If you need to detect failures to load the file, use
        [ctor@Gdk.Texture.new_from_file] to load the file yourself,
        then create the `GtkPicture` from the texture.

        Parameters:
            file: a `GFile`

        Returns:
            Widget: a new `GtkPicture`

        """
        ...

    @classmethod
    def new_for_filename(cls, filename: Optional[str] = None) -> Picture:
        """
        Creates a new `GtkPicture` displaying the file @filename.

        This is a utility function that calls [ctor@Gtk.Picture.new_for_file].
        See that function for details.

        Parameters:
            filename: a filename

        Returns:
            Widget: a new `GtkPicture`

        """
        ...

    @classmethod
    def new_for_paintable(cls, paintable: Optional[Gdk.Paintable] = None) -> Picture:
        """
        Creates a new `GtkPicture` displaying @paintable.

        The `GtkPicture` will track changes to the @paintable and update
        its size and contents in response to it.

        Parameters:
            paintable: a `GdkPaintable`

        Returns:
            Widget: a new `GtkPicture`

        """
        ...

    @deprecated(
        "Use [ctor@Gtk.Picture.new_for_paintable] and [ctor@Gdk.Texture.new_for_pixbuf] instead"
    )
    @classmethod
    def new_for_pixbuf(cls, pixbuf: Optional[GdkPixbuf.Pixbuf] = None) -> Picture:
        """
        Creates a new `GtkPicture` displaying @pixbuf.

        This is a utility function that calls [ctor@Gtk.Picture.new_for_paintable],
        See that function for details.

        The pixbuf must not be modified after passing it to this function.

        Parameters:
            pixbuf: a `GdkPixbuf`

        Returns:
            Widget: a new `GtkPicture`

        """
        ...

    @classmethod
    def new_for_resource(cls, resource_path: Optional[str] = None) -> Picture:
        """
        Creates a new `GtkPicture` displaying the resource at @resource_path.

        This is a utility function that calls [ctor@Gtk.Picture.new_for_file].
        See that function for details.

        Parameters:
            resource_path: resource path to play back

        Returns:
            Widget: a new `GtkPicture`

        """
        ...

    def set_alternative_text(self, alternative_text: Optional[str] = None) -> None:
        """
        Sets an alternative textual description for the picture contents.

        It is equivalent to the \"alt\" attribute for images on websites.

        This text will be made available to accessibility tools.

        If the picture cannot be described textually, set this property to %NULL.

        Parameters:
            alternative_text: a textual description of the contents

        Returns:

        """
        ...

    def set_can_shrink(self, can_shrink: bool) -> None:
        """
        If set to %TRUE, the @self can be made smaller than its contents.

        The contents will then be scaled down when rendering.

        If you want to still force a minimum size manually, consider using
        [method@Gtk.Widget.set_size_request].

        Also of note is that a similar function for growing does not exist
        because the grow behavior can be controlled via
        [method@Gtk.Widget.set_halign] and [method@Gtk.Widget.set_valign].

        Parameters:
            can_shrink: if @self can be made smaller than its contents

        Returns:

        """
        ...

    def set_content_fit(self, content_fit: ContentFit) -> None:
        """
        Sets how the content should be resized to fit the `GtkPicture`.

        See [enum@Gtk.ContentFit] for details.

        Parameters:
            content_fit: the content fit mode

        Returns:

        """
        ...

    def set_file(self, file: Optional[Gio.File] = None) -> None:
        """
        Makes @self load and display @file.

        See [ctor@Gtk.Picture.new_for_file] for details.

        Parameters:
            file: a `GFile`

        Returns:

        """
        ...

    def set_filename(self, filename: Optional[str] = None) -> None:
        """
        Makes @self load and display the given @filename.

        This is a utility function that calls [method@Gtk.Picture.set_file].

        Parameters:
            filename: the filename to play

        Returns:

        """
        ...

    @deprecated(
        "Use [method@Gtk.Picture.set_content_fit] instead. If still used, this method will always set the [property@Gtk.Picture:content-fit] property to `GTK_CONTENT_FIT_CONTAIN` if @keep_aspect_ratio is true, otherwise it will set it to `GTK_CONTENT_FIT_FILL`."
    )
    def set_keep_aspect_ratio(self, keep_aspect_ratio: bool) -> None:
        """
        If set to %TRUE, the @self will render its contents according to
        their aspect ratio.

        That means that empty space may show up at the top/bottom or
        left/right of @self.

        If set to %FALSE or if the contents provide no aspect ratio,
        the contents will be stretched over the picture's whole area.

        Parameters:
            keep_aspect_ratio: whether to keep aspect ratio

        Returns:

        """
        ...

    def set_paintable(self, paintable: Optional[Gdk.Paintable] = None) -> None:
        """
        Makes @self display the given @paintable.

        If @paintable is %NULL, nothing will be displayed.

        See [ctor@Gtk.Picture.new_for_paintable] for details.

        Parameters:
            paintable: a `GdkPaintable`

        Returns:

        """
        ...

    @deprecated("Use [method@Gtk.Picture.set_paintable] instead")
    def set_pixbuf(self, pixbuf: Optional[GdkPixbuf.Pixbuf] = None) -> None:
        """
        Sets a `GtkPicture` to show a `GdkPixbuf`.

        See [ctor@Gtk.Picture.new_for_pixbuf] for details.

        This is a utility function that calls [method@Gtk.Picture.set_paintable].

        Parameters:
            pixbuf: a `GdkPixbuf`

        Returns:

        """
        ...

    def set_resource(self, resource_path: Optional[str] = None) -> None:
        """
        Makes @self load and display the resource at the given
        @resource_path.

        This is a utility function that calls [method@Gtk.Picture.set_file].

        Parameters:
            resource_path: the resource to set

        Returns:

        """
        ...

class PictureClass(GObject.GPointer):
    """
    :Constructors:

    ::

        PictureClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class Popover(Widget, Accessible, Buildable, ConstraintTarget, Native, ShortcutManager):
    """
    `GtkPopover` is a bubble-like context popup.

    ![An example GtkPopover](popover.png)

    It is primarily meant to provide context-dependent information
    or options. Popovers are attached to a parent widget. By default,
    they point to the whole widget area, although this behavior can be
    changed with [method@Gtk.Popover.set_pointing_to].

    The position of a popover relative to the widget it is attached to
    can also be changed with [method@Gtk.Popover.set_position]

    By default, `GtkPopover` performs a grab, in order to ensure input
    events get redirected to it while it is shown, and also so the popover
    is dismissed in the expected situations (clicks outside the popover,
    or the Escape key being pressed). If no such modal behavior is desired
    on a popover, [method@Gtk.Popover.set_autohide] may be called on it to
    tweak its behavior.

    ## GtkPopover as menu replacement

    `GtkPopover` is often used to replace menus. The best was to do this
    is to use the [class@Gtk.PopoverMenu] subclass which supports being
    populated from a `GMenuModel` with [ctor@Gtk.PopoverMenu.new_from_model].

    ```xml
    <section>
    <attribute name=\"display-hint\">horizontal-buttons</attribute>
    <item>
    <attribute name=\"label\">Cut</attribute>
    <attribute name=\"action\">app.cut</attribute>
    <attribute name=\"verb-icon\">edit-cut-symbolic</attribute>
    </item>
    <item>
    <attribute name=\"label\">Copy</attribute>
    <attribute name=\"action\">app.copy</attribute>
    <attribute name=\"verb-icon\">edit-copy-symbolic</attribute>
    </item>
    <item>
    <attribute name=\"label\">Paste</attribute>
    <attribute name=\"action\">app.paste</attribute>
    <attribute name=\"verb-icon\">edit-paste-symbolic</attribute>
    </item>
    </section>
    ```

    # CSS nodes

    ```
    popover.background[.menu]
    ├── arrow
    ╰── contents
    ╰── <child>
    ```

    `GtkPopover` has a main node with name `popover`, an arrow with name `arrow`,
    and another node for the content named `contents`. The `popover` node always
    gets the `.background` style class. It also gets the `.menu` style class
    if the popover is menu-like, e.g. is a [class@Gtk.PopoverMenu].

    Particular uses of `GtkPopover`, such as touch selection popups or
    magnifiers in `GtkEntry` or `GtkTextView` get style classes like
    `.touch-selection` or `.magnifier` to differentiate from plain popovers.

    When styling a popover directly, the `popover` node should usually
    not have any background. The visible part of the popover can have
    a shadow. To specify it in CSS, set the box-shadow of the `contents` node.

    Note that, in order to accomplish appropriate arrow visuals, `GtkPopover`
    uses custom drawing for the `arrow` node. This makes it possible for the
    arrow to change its shape dynamically, but it also limits the possibilities
    of styling it using CSS. In particular, the `arrow` gets drawn over the
    `content` node's border and shadow, so they look like one shape, which
    means that the border width of the `content` node and the `arrow` node should
    be the same. The arrow also does not support any border shape other than
    solid, no border-radius, only one border width (border-bottom-width is
    used) and no box-shadow.

    :Constructors:

    ::

        Popover(**properties)
        new() -> Gtk.Widget

    Object GtkPopover

    Signals from GtkPopover:
      closed ()
      activate-default ()

    Properties from GtkPopover:
      pointing-to -> GdkRectangle: pointing-to
      position -> GtkPositionType: position
      autohide -> gboolean: autohide
      default-widget -> GtkWidget: default-widget
      has-arrow -> gboolean: has-arrow
      mnemonics-visible -> gboolean: mnemonics-visible
      child -> GtkWidget: child
      cascade-popdown -> gboolean: cascade-popdown

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        ShortcutManager.Props,
    ):
        autohide: bool
        """
        Whether to dismiss the popover on outside clicks.
        """
        cascade_popdown: bool
        """
        Whether the popover pops down after a child popover.

        This is used to implement the expected behavior of submenus.
        """
        child: Optional[Widget]
        """
        The child widget.
        """
        default_widget: Optional[Widget]
        """
        The default widget inside the popover.
        """
        has_arrow: bool
        """
        Whether to draw an arrow.
        """
        mnemonics_visible: bool
        """
        Whether mnemonics are currently visible in this popover.
        """
        pointing_to: Gdk.Rectangle
        """
        Rectangle in the parent widget that the popover points to.
        """
        position: PositionType
        """
        How to place the popover, relative to its parent.
        """

    props: Props = ...
    parent: Widget = ...
    def __init__(
        self,
        autohide: bool = ...,
        cascade_popdown: bool = ...,
        child: Optional[Widget] = ...,
        default_widget: Optional[Widget] = ...,
        has_arrow: bool = ...,
        mnemonics_visible: bool = ...,
        pointing_to: Optional[Gdk.Rectangle] = ...,
        position: PositionType = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def do_activate_default(self) -> None: ...
    def do_closed(self) -> None: ...
    def get_autohide(self) -> bool:
        """
        Returns whether the popover is modal.

        See [method@Gtk.Popover.set_autohide] for the
        implications of this.

        Parameters:


        Returns:
            bool: %TRUE if @popover is modal

        """
        ...

    def get_cascade_popdown(self) -> bool:
        """
        Returns whether the popover will close after a modal child is closed.

        Parameters:


        Returns:
            bool: %TRUE if @popover will close after a modal child.

        """
        ...

    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @popover.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @popover

        """
        ...

    def get_has_arrow(self) -> bool:
        """
        Gets whether this popover is showing an arrow
        pointing at the widget that it is relative to.

        Parameters:


        Returns:
            bool: whether the popover has an arrow

        """
        ...

    def get_mnemonics_visible(self) -> bool:
        """
        Gets whether mnemonics are visible.

        Parameters:


        Returns:
            bool: %TRUE if mnemonics are supposed to be visible
        in this popover

        """
        ...

    def get_offset(self) -> Tuple[int, int]:
        """
        Gets the offset previous set with [method@Gtk.Popover.set_offset()].

        Parameters:


        Returns:
            int: a location for the x_offset
            int: a location for the y_offset
        """
        ...

    def get_pointing_to(self) -> Tuple[bool, Gdk.Rectangle]:
        """
        Gets the rectangle that the popover points to.

        If a rectangle to point to has been set, this function will
        return %TRUE and fill in @rect with such rectangle, otherwise
        it will return %FALSE and fill in @rect with the parent
        widget coordinates.

        Parameters:


        Returns:
            bool: %TRUE if a rectangle to point to was set.
            Gdk.Rectangle: location to store the rectangle
        """
        ...

    def get_position(self) -> PositionType:
        """
        Returns the preferred position of @popover.

        Parameters:


        Returns:
            PositionType: The preferred position.

        """
        ...

    @classmethod
    def new(cls) -> Popover:
        """
        Creates a new `GtkPopover`.

        Parameters:


        Returns:
            Widget: the new `GtkPopover`

        """
        ...

    def popdown(self) -> None:
        """
        Pops @popover down.

        This may have the side-effect of closing a parent popover
        as well. See [property@Gtk.Popover:cascade-popdown].

        Parameters:


        Returns:

        """
        ...

    def popup(self) -> None:
        """
        Pops @popover up.

        Parameters:


        Returns:

        """
        ...

    def present(self) -> None:
        """
        Allocate a size for the `GtkPopover`.

        This function needs to be called in size-allocate by widgets
        who have a `GtkPopover` as child. When using a layout manager,
        this is happening automatically.

        To make a popover appear on screen, use [method@Gtk.Popover.popup].

        Parameters:


        Returns:

        """
        ...

    def set_autohide(self, autohide: bool) -> None:
        """
        Sets whether @popover is modal.

        A modal popover will grab the keyboard focus on it when being
        displayed. Focus will wrap around within the popover. Clicking
        outside the popover area or pressing Esc will dismiss the popover.

        Called this function on an already showing popup with a new
        autohide value different from the current one, will cause the
        popup to be hidden.

        Parameters:
            autohide: %TRUE to dismiss the popover on outside clicks

        Returns:

        """
        ...

    def set_cascade_popdown(self, cascade_popdown: bool) -> None:
        """
        If @cascade_popdown is %TRUE, the popover will be
        closed when a child modal popover is closed.

        If %FALSE, @popover will stay visible.

        Parameters:
            cascade_popdown: %TRUE if the popover should follow a child closing

        Returns:

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @popover.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_default_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Sets the default widget of a `GtkPopover`.

        The default widget is the widget that’s activated when the user
        presses Enter in a dialog (for example). This function sets or
        unsets the default widget for a `GtkPopover`.

        Parameters:
            widget: a child widget of @popover to set as
        the default, or %NULL to unset the default widget for the popover

        Returns:

        """
        ...

    def set_has_arrow(self, has_arrow: bool) -> None:
        """
        Sets whether this popover should draw an arrow
        pointing at the widget it is relative to.

        Parameters:
            has_arrow: %TRUE to draw an arrow

        Returns:

        """
        ...

    def set_mnemonics_visible(self, mnemonics_visible: bool) -> None:
        """
        Sets whether mnemonics should be visible.

        Parameters:
            mnemonics_visible: the new value

        Returns:

        """
        ...

    def set_offset(self, x_offset: int, y_offset: int) -> None:
        """
        Sets the offset to use when calculating the position
        of the popover.

        These values are used when preparing the [struct@Gdk.PopupLayout]
        for positioning the popover.

        Parameters:
            x_offset: the x offset to adjust the position by
            y_offset: the y offset to adjust the position by

        Returns:

        """
        ...

    def set_pointing_to(self, rect: Optional[Gdk.Rectangle] = None) -> None:
        """
        Sets the rectangle that @popover points to.

        This is in the coordinate space of the @popover parent.

        Parameters:
            rect: rectangle to point to

        Returns:

        """
        ...

    def set_position(self, position: PositionType) -> None:
        """
        Sets the preferred position for @popover to appear.

        If the @popover is currently visible, it will be immediately
        updated.

        This preference will be respected where possible, although
        on lack of space (eg. if close to the window edges), the
        `GtkPopover` may choose to appear on the opposite side.

        Parameters:
            position: preferred popover position

        Returns:

        """
        ...

class PopoverClass(GObject.GPointer):
    """
    :Constructors:

    ::

        PopoverClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    closed: Callable[[Popover], None] = ...
    activate_default: Callable[[Popover], None] = ...
    reserved: list[None] = ...

class PopoverMenu(
    Popover, Accessible, Buildable, ConstraintTarget, Native, ShortcutManager
):
    """
    `GtkPopoverMenu` is a subclass of `GtkPopover` that implements menu
    behavior.

    ![An example GtkPopoverMenu](menu.png)

    `GtkPopoverMenu` treats its children like menus and allows switching
    between them. It can open submenus as traditional, nested submenus,
    or in a more touch-friendly sliding fashion.

    `GtkPopoverMenu` is meant to be used primarily with menu models,
    using [ctor@Gtk.PopoverMenu.new_from_model]. If you need to put
    other widgets such as a `GtkSpinButton` or a `GtkSwitch` into a popover,
    you can use [method@Gtk.PopoverMenu.add_child].

    For more dialog-like behavior, use a plain `GtkPopover`.

    ## Menu models

    The XML format understood by `GtkBuilder` for `GMenuModel` consists
    of a toplevel `<menu>` element, which contains one or more `<item>`
    elements. Each `<item>` element contains `<attribute>` and `<link>`
    elements with a mandatory name attribute. `<link>` elements have the
    same content model as `<menu>`. Instead of `<link name=\"submenu\">`
    or `<link name=\"section\">`, you can use `<submenu>` or `<section>`
    elements.

    ```xml
    <menu id='app-menu'>
    <section>
    <item>
    <attribute name='label' translatable='yes'>_New Window</attribute>
    <attribute name='action'>app.new</attribute>
    </item>
    <item>
    <attribute name='label' translatable='yes'>_About Sunny</attribute>
    <attribute name='action'>app.about</attribute>
    </item>
    <item>
    <attribute name='label' translatable='yes'>_Quit</attribute>
    <attribute name='action'>app.quit</attribute>
    </item>
    </section>
    </menu>
    ```

    Attribute values can be translated using gettext, like other `GtkBuilder`
    content. `<attribute>` elements can be marked for translation with a
    `translatable=\"yes\"` attribute. It is also possible to specify message
    context and translator comments, using the context and comments attributes.
    To make use of this, the `GtkBuilder` must have been given the gettext
    domain to use.

    The following attributes are used when constructing menu items:

    - \"label\": a user-visible string to display
    - \"use-markup\": whether the text in the menu item includes [Pango markup](https://docs.gtk.org/Pango/pango_markup.html)
    - \"action\": the prefixed name of the action to trigger
    - \"target\": the parameter to use when activating the action
    - \"icon\" and \"verb-icon\": names of icons that may be displayed
    - \"submenu-action\": name of an action that may be used to track
    whether a submenu is open
    - \"hidden-when\": a string used to determine when the item will be hidden.
    Possible values include \"action-disabled\", \"action-missing\", \"macos-menubar\".
    This is mainly useful for exported menus, see [method@Gtk.Application.set_menubar].
    - \"custom\": a string used to match against the ID of a custom child added with
    [method@Gtk.PopoverMenu.add_child], [method@Gtk.PopoverMenuBar.add_child],
    or in the ui file with `<child type=\"ID\">`.

    The following attributes are used when constructing sections:

    - \"label\": a user-visible string to use as section heading
    - \"display-hint\": a string used to determine special formatting for the section.
    Possible values include \"horizontal-buttons\", \"circular-buttons\" and
    \"inline-buttons\". They all indicate that section should be
    displayed as a horizontal row of buttons.
    - \"text-direction\": a string used to determine the `GtkTextDirection` to use
    when \"display-hint\" is set to \"horizontal-buttons\". Possible values
    include \"rtl\", \"ltr\", and \"none\".

    The following attributes are used when constructing submenus:

    - \"label\": a user-visible string to display
    - \"icon\": icon name to display

    Menu items will also show accelerators, which are usually associated
    with actions via [method@Gtk.Application.set_accels_for_action],
    [id@gtk_widget_class_add_binding_action] or
    [method@Gtk.ShortcutController.add_shortcut].

    # CSS Nodes

    `GtkPopoverMenu` is just a subclass of `GtkPopover` that adds custom content
    to it, therefore it has the same CSS nodes. It is one of the cases that add
    a `.menu` style class to the main `popover` node.

    Menu items have nodes with name `button` and class `.model`. If a section
    display-hint is set, the section gets a node `box` with class `horizontal`
    plus a class with the same text as the display hint. Note that said box may
    not be the direct ancestor of the item `button`s. Thus, for example, to style
    items in an `inline-buttons` section, select `.inline-buttons button.model`.
    Other things that may be of interest to style in menus include `label` nodes.

    # Accessibility

    `GtkPopoverMenu` uses the %GTK_ACCESSIBLE_ROLE_MENU role, and its
    items use the %GTK_ACCESSIBLE_ROLE_MENU_ITEM,
    %GTK_ACCESSIBLE_ROLE_MENU_ITEM_CHECKBOX or
    %GTK_ACCESSIBLE_ROLE_MENU_ITEM_RADIO roles, depending on the
    action they are connected to.

    :Constructors:

    ::

        PopoverMenu(**properties)
        new_from_model(model:Gio.MenuModel=None) -> Gtk.Widget
        new_from_model_full(model:Gio.MenuModel, flags:Gtk.PopoverMenuFlags) -> Gtk.Widget

    Object GtkPopoverMenu

    Properties from GtkPopoverMenu:
      visible-submenu -> gchararray: visible-submenu
      menu-model -> GMenuModel: menu-model

    Signals from GtkPopover:
      closed ()
      activate-default ()

    Properties from GtkPopover:
      pointing-to -> GdkRectangle: pointing-to
      position -> GtkPositionType: position
      autohide -> gboolean: autohide
      default-widget -> GtkWidget: default-widget
      has-arrow -> gboolean: has-arrow
      mnemonics-visible -> gboolean: mnemonics-visible
      child -> GtkWidget: child
      cascade-popdown -> gboolean: cascade-popdown

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Popover.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        ShortcutManager.Props,
    ):
        menu_model: Optional[Gio.MenuModel]
        """
        The model from which the menu is made.
        """
        visible_submenu: str
        """
        The name of the visible submenu.
        """

    props: Props = ...
    def __init__(
        self,
        menu_model: Optional[Gio.MenuModel] = ...,
        visible_submenu: str = ...,
        autohide: bool = ...,
        cascade_popdown: bool = ...,
        child: Optional[Widget] = ...,
        default_widget: Optional[Widget] = ...,
        has_arrow: bool = ...,
        mnemonics_visible: bool = ...,
        pointing_to: Optional[Gdk.Rectangle] = ...,
        position: PositionType = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def add_child(self, child: Widget, id: str) -> bool:
        """
        Adds a custom widget to a generated menu.

        For this to work, the menu model of @popover must have
        an item with a `custom` attribute that matches @id.

        Parameters:
            child: the `GtkWidget` to add
            id: the ID to insert @child at

        Returns:
            bool: %TRUE if @id was found and the widget added

        """
        ...

    def get_menu_model(self) -> Optional[Gio.MenuModel]:
        """
        Returns the menu model used to populate the popover.

        Parameters:


        Returns:
            Optional[Gio.MenuModel]: the menu model of @popover

        """
        ...

    @classmethod
    def new_from_model(cls, model: Optional[Gio.MenuModel] = None) -> PopoverMenu:
        """
        Creates a `GtkPopoverMenu` and populates it according to @model.

        The created buttons are connected to actions found in the
        `GtkApplicationWindow` to which the popover belongs - typically
        by means of being attached to a widget that is contained within
        the `GtkApplicationWindow`s widget hierarchy.

        Actions can also be added using [method@Gtk.Widget.insert_action_group]
        on the menus attach widget or on any of its parent widgets.

        This function creates menus with sliding submenus.
        See [ctor@Gtk.PopoverMenu.new_from_model_full] for a way
        to control this.

        Parameters:
            model: a `GMenuModel`

        Returns:
            Widget: the new `GtkPopoverMenu`

        """
        ...

    @classmethod
    def new_from_model_full(
        cls, model: Gio.MenuModel, flags: PopoverMenuFlags
    ) -> PopoverMenu:
        """
        Creates a `GtkPopoverMenu` and populates it according to @model.

        The created buttons are connected to actions found in the
        action groups that are accessible from the parent widget.
        This includes the `GtkApplicationWindow` to which the popover
        belongs. Actions can also be added using [method@Gtk.Widget.insert_action_group]
        on the parent widget or on any of its parent widgets.

        The only flag that is supported currently is
        %GTK_POPOVER_MENU_NESTED, which makes GTK create traditional,
        nested submenus instead of the default sliding submenus.

        Parameters:
            model: a `GMenuModel`
            flags: flags that affect how the menu is created

        Returns:
            Widget: the new `GtkPopoverMenu`

        """
        ...

    def remove_child(self, child: Widget) -> bool:
        """
        Removes a widget that has previously been added with
        [method@Gtk.PopoverMenu.add_child()]

        Parameters:
            child: the `GtkWidget` to remove

        Returns:
            bool: %TRUE if the widget was removed

        """
        ...

    def set_menu_model(self, model: Optional[Gio.MenuModel] = None) -> None:
        """
        Sets a new menu model on @popover.

        The existing contents of @popover are removed, and
        the @popover is populated with new contents according
        to @model.

        Parameters:
            model: a `GMenuModel`

        Returns:

        """
        ...

class PopoverMenuBar(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkPopoverMenuBar` presents a horizontal bar of items that pop
    up popover menus when clicked.

    ![An example GtkPopoverMenuBar](menubar.png)

    The only way to create instances of `GtkPopoverMenuBar` is
    from a `GMenuModel`.

    # CSS nodes

    ```
    menubar
    ├── item[.active]
    ┊ ╰── popover
    ╰── item
    ╰── popover
    ```

    `GtkPopoverMenuBar` has a single CSS node with name menubar, below which
    each item has its CSS node, and below that the corresponding popover.

    The item whose popover is currently open gets the .active
    style class.

    # Accessibility

    `GtkPopoverMenuBar` uses the %GTK_ACCESSIBLE_ROLE_MENU_BAR role,
    the menu items use the %GTK_ACCESSIBLE_ROLE_MENU_ITEM role and
    the menus use the %GTK_ACCESSIBLE_ROLE_MENU role.

    :Constructors:

    ::

        PopoverMenuBar(**properties)
        new_from_model(model:Gio.MenuModel=None) -> Gtk.Widget

    Object GtkPopoverMenuBar

    Properties from GtkPopoverMenuBar:
      menu-model -> GMenuModel: menu-model

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        menu_model: Optional[Gio.MenuModel]
        """
        The `GMenuModel` from which the menu bar is created.

        The model should only contain submenus as toplevel elements.
        """

    props: Props = ...
    def __init__(
        self,
        menu_model: Optional[Gio.MenuModel] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def add_child(self, child: Widget, id: str) -> bool:
        """
        Adds a custom widget to a generated menubar.

        For this to work, the menu model of @bar must have an
        item with a `custom` attribute that matches @id.

        Parameters:
            child: the `GtkWidget` to add
            id: the ID to insert @child at

        Returns:
            bool: %TRUE if @id was found and the widget added

        """
        ...

    def get_menu_model(self) -> Optional[Gio.MenuModel]:
        """
        Returns the model from which the contents of @bar are taken.

        Parameters:


        Returns:
            Optional[Gio.MenuModel]: a `GMenuModel`

        """
        ...

    @classmethod
    def new_from_model(cls, model: Optional[Gio.MenuModel] = None) -> PopoverMenuBar:
        """
        Creates a `GtkPopoverMenuBar` from a `GMenuModel`.

        Parameters:
            model: a `GMenuModel`

        Returns:
            Widget: a new `GtkPopoverMenuBar`

        """
        ...

    def remove_child(self, child: Widget) -> bool:
        """
        Removes a widget that has previously been added with
        gtk_popover_menu_bar_add_child().

        Parameters:
            child: the `GtkWidget` to remove

        Returns:
            bool: %TRUE if the widget was removed

        """
        ...

    def set_menu_model(self, model: Optional[Gio.MenuModel] = None) -> None:
        """
        Sets a menu model from which @bar should take
        its contents.

        Parameters:
            model: a `GMenuModel`

        Returns:

        """
        ...

class PrintBackend(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class PrintContext(GObject.Object):
    """
    A `GtkPrintContext` encapsulates context information that is required when
    drawing pages for printing.

    This includes the cairo context and important parameters like page size
    and resolution. It also lets you easily create [class@Pango.Layout] and
    [class@Pango.Context] objects that match the font metrics of the cairo surface.

    `GtkPrintContext` objects get passed to the
    [signal@Gtk.PrintOperation::begin-print],
    [signal@Gtk.PrintOperation::end-print],
    [signal@Gtk.PrintOperation::request-page-setup] and
    [signal@Gtk.PrintOperation::draw-page] signals on the
    [class@Gtk.PrintOperation] object.

    ## Using GtkPrintContext in a ::draw-page callback

    ```c
    static void
    draw_page (GtkPrintOperation *operation,
    GtkPrintContext *context,
    int page_nr)
    {
    cairo_t *cr;
    PangoLayout *layout;
    PangoFontDescription *desc;

    cr = gtk_print_context_get_cairo_context (context);

    // Draw a red rectangle, as wide as the paper (inside the margins)
    cairo_set_source_rgb (cr, 1.0, 0, 0);
    cairo_rectangle (cr, 0, 0, gtk_print_context_get_width (context), 50);

    cairo_fill (cr);

    // Draw some lines
    cairo_move_to (cr, 20, 10);
    cairo_line_to (cr, 40, 20);
    cairo_arc (cr, 60, 60, 20, 0, M_PI);
    cairo_line_to (cr, 80, 20);

    cairo_set_source_rgb (cr, 0, 0, 0);
    cairo_set_line_width (cr, 5);
    cairo_set_line_cap (cr, CAIRO_LINE_CAP_ROUND);
    cairo_set_line_join (cr, CAIRO_LINE_JOIN_ROUND);

    cairo_stroke (cr);

    // Draw some text
    layout = gtk_print_context_create_pango_layout (context);
    pango_layout_set_text (layout, \"Hello World! Printing is easy\", -1);
    desc = pango_font_description_from_string (\"sans 28\");
    pango_layout_set_font_description (layout, desc);
    pango_font_description_free (desc);

    cairo_move_to (cr, 30, 20);
    pango_cairo_layout_path (cr, layout);

    // Font Outline
    cairo_set_source_rgb (cr, 0.93, 1.0, 0.47);
    cairo_set_line_width (cr, 0.5);
    cairo_stroke_preserve (cr);

    // Font Fill
    cairo_set_source_rgb (cr, 0, 0.0, 1.0);
    cairo_fill (cr);

    g_object_unref (layout);
    }
    ```

    :Constructors:

    ::

        PrintContext(**properties)

    Object GtkPrintContext

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...

    def create_pango_context(self) -> Pango.Context:
        """
        Creates a new `PangoContext` that can be used with the
        `GtkPrintContext`.

        Parameters:


        Returns:
            Pango.Context: a new Pango context for @context

        """
        ...

    def create_pango_layout(self) -> Pango.Layout:
        """
        Creates a new `PangoLayout` that is suitable for use
        with the `GtkPrintContext`.

        Parameters:


        Returns:
            Pango.Layout: a new Pango layout for @context

        """
        ...

    def get_cairo_context(self) -> cairo.Context:
        """
        Obtains the cairo context that is associated with the
        `GtkPrintContext`.

        Parameters:


        Returns:
            cairo.Context: the cairo context of @context

        """
        ...

    def get_dpi_x(self) -> float:
        """
        Obtains the horizontal resolution of the `GtkPrintContext`,
        in dots per inch.

        Parameters:


        Returns:
            float: the horizontal resolution of @context

        """
        ...

    def get_dpi_y(self) -> float:
        """
        Obtains the vertical resolution of the `GtkPrintContext`,
        in dots per inch.

        Parameters:


        Returns:
            float: the vertical resolution of @context

        """
        ...

    def get_hard_margins(self) -> Tuple[bool, float, float, float, float]:
        """
        Obtains the hardware printer margins of the `GtkPrintContext`,
        in units.

        Parameters:


        Returns:
            bool: %TRUE if the hard margins were retrieved
            float: top hardware printer margin
            float: bottom hardware printer margin
            float: left hardware printer margin
            float: right hardware printer margin
        """
        ...

    def get_height(self) -> float:
        """
        Obtains the height of the `GtkPrintContext`, in pixels.

        Parameters:


        Returns:
            float: the height of @context

        """
        ...

    def get_page_setup(self) -> PageSetup:
        """
        Obtains the `GtkPageSetup` that determines the page
        dimensions of the `GtkPrintContext`.

        Parameters:


        Returns:
            PageSetup: the page setup of @context

        """
        ...

    def get_pango_fontmap(self) -> Pango.FontMap:
        """
        Returns a `PangoFontMap` that is suitable for use
        with the `GtkPrintContext`.

        Parameters:


        Returns:
            Pango.FontMap: the font map of @context

        """
        ...

    def get_width(self) -> float:
        """
        Obtains the width of the `GtkPrintContext`, in pixels.

        Parameters:


        Returns:
            float: the width of @context

        """
        ...

    def set_cairo_context(
        self, cr: cairo.Context[_SomeSurface], dpi_x: float, dpi_y: float
    ) -> None:
        """
        Sets a new cairo context on a print context.

        This function is intended to be used when implementing
        an internal print preview, it is not needed for printing,
        since GTK itself creates a suitable cairo context in that
        case.

        Parameters:
            cr: the cairo context
            dpi_x: the horizontal resolution to use with @cr
            dpi_y: the vertical resolution to use with @cr

        Returns:

        """
        ...

class PrintJob(GObject.Object):
    """
    A `GtkPrintJob` object represents a job that is sent to a printer.

    You only need to deal directly with print jobs if you use the
    non-portable [class@Gtk.PrintUnixDialog] API.

    Use [method@Gtk.PrintJob.get_surface] to obtain the cairo surface
    onto which the pages must be drawn. Use [method@Gtk.PrintJob.send]
    to send the finished job to the printer. If you don’t use cairo
    `GtkPrintJob` also supports printing of manually generated PostScript,
    via [method@Gtk.PrintJob.set_source_file].

    :Constructors:

    ::

        PrintJob(**properties)
        new(title:str, printer:Gtk.Printer, settings:Gtk.PrintSettings, page_setup:Gtk.PageSetup) -> Gtk.PrintJob

    Object GtkPrintJob

    Signals from GtkPrintJob:
      status-changed ()

    Properties from GtkPrintJob:
      title -> gchararray: title
      printer -> GtkPrinter: printer
      page-setup -> GtkPageSetup: page-setup
      settings -> GtkPrintSettings: settings
      track-print-status -> gboolean: track-print-status

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        page_setup: PageSetup
        """
        Page setup.
        """
        printer: Printer
        """
        The printer to send the job to.
        """
        settings: PrintSettings
        """
        Printer settings.
        """
        title: str
        """
        The title of the print job.
        """
        track_print_status: bool
        """
        %TRUE if the print job will continue to emit status-changed
        signals after the print data has been setn to the printer.
        """

    props: Props = ...
    def __init__(
        self,
        page_setup: PageSetup = ...,
        printer: Printer = ...,
        settings: PrintSettings = ...,
        title: str = ...,
        track_print_status: bool = ...,
    ): ...
    def get_collate(self) -> bool:
        """
        Gets whether this job is printed collated.

        Parameters:


        Returns:
            bool: whether the job is printed collated

        """
        ...

    def get_n_up(self) -> int:
        """
        Gets the n-up setting for this job.

        Parameters:


        Returns:
            int: the n-up setting

        """
        ...

    def get_n_up_layout(self) -> NumberUpLayout:
        """
        Gets the n-up layout setting for this job.

        Parameters:


        Returns:
            NumberUpLayout: the n-up layout

        """
        ...

    def get_num_copies(self) -> int:
        """
        Gets the number of copies of this job.

        Parameters:


        Returns:
            int: the number of copies

        """
        ...

    def get_page_ranges(self) -> list[PageRange]:
        """
        Gets the page ranges for this job.

        Parameters:


        Returns:
            list[PageRange]: a pointer to an
        array of `GtkPageRange` structs

        """
        ...

    def get_page_set(self) -> PageSet:
        """
        Gets the `GtkPageSet` setting for this job.

        Parameters:


        Returns:
            PageSet: the `GtkPageSet` setting

        """
        ...

    def get_pages(self) -> PrintPages:
        """
        Gets the `GtkPrintPages` setting for this job.

        Parameters:


        Returns:
            PrintPages: the `GtkPrintPages` setting

        """
        ...

    def get_printer(self) -> Printer:
        """
        Gets the `GtkPrinter` of the print job.

        Parameters:


        Returns:
            Printer: the printer of @job

        """
        ...

    def get_reverse(self) -> bool:
        """
        Gets whether this job is printed reversed.

        Parameters:


        Returns:
            bool: whether the job is printed reversed.

        """
        ...

    def get_rotate(self) -> bool:
        """
        Gets whether the job is printed rotated.

        Parameters:


        Returns:
            bool: whether the job is printed rotated

        """
        ...

    def get_scale(self) -> float:
        """
        Gets the scale for this job.

        Parameters:


        Returns:
            float: the scale

        """
        ...

    def get_settings(self) -> PrintSettings:
        """
        Gets the `GtkPrintSettings` of the print job.

        Parameters:


        Returns:
            PrintSettings: the settings of @job

        """
        ...

    def get_status(self) -> PrintStatus:
        """
        Gets the status of the print job.

        Parameters:


        Returns:
            PrintStatus: the status of @job

        """
        ...

    def get_surface(self) -> cairo.Surface:
        """
        Gets a cairo surface onto which the pages of
        the print job should be rendered.

        Parameters:


        Returns:
            cairo.Surface: the cairo surface of @job

        """
        ...

    def get_title(self) -> str:
        """
        Gets the job title.

        Parameters:


        Returns:
            str: the title of @job

        """
        ...

    def get_track_print_status(self) -> bool:
        """
        Returns whether jobs will be tracked after printing.

        For details, see [method@Gtk.PrintJob.set_track_print_status].

        Parameters:


        Returns:
            bool: %TRUE if print job status will be reported after printing

        """
        ...

    @classmethod
    def new(
        cls,
        title: str,
        printer: Printer,
        settings: PrintSettings,
        page_setup: PageSetup,
    ) -> PrintJob:
        """
        Creates a new `GtkPrintJob`.

        Parameters:
            title: the job title
            printer: a `GtkPrinter`
            settings: a `GtkPrintSettings`
            page_setup: a `GtkPageSetup`

        Returns:
            PrintJob: a new `GtkPrintJob`

        """
        ...

    def send(self, callback: Callable[..., None], *user_data: Any) -> None:
        """
        Sends the print job off to the printer.

        Parameters:
            callback: function to call when the job completes or an error occurs
            user_data: user data that gets passed to @callback

        Returns:

        """
        ...

    def set_collate(self, collate: bool) -> None:
        """
        Sets whether this job is printed collated.

        Parameters:
            collate: whether the job is printed collated

        Returns:

        """
        ...

    def set_n_up(self, n_up: int) -> None:
        """
        Sets the n-up setting for this job.

        Parameters:
            n_up: the n-up value

        Returns:

        """
        ...

    def set_n_up_layout(self, layout: NumberUpLayout) -> None:
        """
        Sets the n-up layout setting for this job.

        Parameters:
            layout: the n-up layout setting

        Returns:

        """
        ...

    def set_num_copies(self, num_copies: int) -> None:
        """
        Sets the number of copies for this job.

        Parameters:
            num_copies: the number of copies

        Returns:

        """
        ...

    def set_page_ranges(self, ranges: Sequence[PageRange]) -> None:
        """
        Sets the page ranges for this job.

        Parameters:
            ranges: pointer to an array of
        `GtkPageRange` structs

        Returns:

        """
        ...

    def set_page_set(self, page_set: PageSet) -> None:
        """
        Sets the `GtkPageSet` setting for this job.

        Parameters:
            page_set: a `GtkPageSet` setting

        Returns:

        """
        ...

    def set_pages(self, pages: PrintPages) -> None:
        """
        Sets the `GtkPrintPages` setting for this job.

        Parameters:
            pages: the `GtkPrintPages` setting

        Returns:

        """
        ...

    def set_reverse(self, reverse: bool) -> None:
        """
        Sets whether this job is printed reversed.

        Parameters:
            reverse: whether the job is printed reversed

        Returns:

        """
        ...

    def set_rotate(self, rotate: bool) -> None:
        """
        Sets whether this job is printed rotated.

        Parameters:
            rotate: whether to print rotated

        Returns:

        """
        ...

    def set_scale(self, scale: float) -> None:
        """
        Sets the scale for this job.

        1.0 means unscaled.

        Parameters:
            scale: the scale

        Returns:

        """
        ...

    def set_source_fd(self, fd: int) -> bool:
        """
        Make the `GtkPrintJob` send an existing document to the
        printing system.

        The file can be in any format understood by the platforms
        printing system (typically PostScript, but on many platforms
        PDF may work too). See [method@Gtk.Printer.accepts_pdf] and
        [method@Gtk.Printer.accepts_ps].

        This is similar to [method@Gtk.PrintJob.set_source_file],
        but takes expects an open file descriptor for the file,
        instead of a filename.

        Parameters:
            fd: a file descriptor

        Returns:
            bool: %FALSE if an error occurred

        """
        ...

    def set_source_file(self, filename: str) -> bool:
        """
        Make the `GtkPrintJob` send an existing document to the
        printing system.

        The file can be in any format understood by the platforms
        printing system (typically PostScript, but on many platforms
        PDF may work too). See [method@Gtk.Printer.accepts_pdf] and
        [method@Gtk.Printer.accepts_ps].

        Parameters:
            filename: the file to be printed

        Returns:
            bool: %FALSE if an error occurred

        """
        ...

    def set_track_print_status(self, track_status: bool) -> None:
        """
        If track_status is %TRUE, the print job will try to continue report
        on the status of the print job in the printer queues and printer.

        This can allow your application to show things like “out of paper”
        issues, and when the print job actually reaches the printer.

        This function is often implemented using some form of polling,
        so it should not be enabled unless needed.

        Parameters:
            track_status: %TRUE to track status after printing

        Returns:

        """
        ...

class PrintOperation(GObject.Object, PrintOperationPreview):
    """
    `GtkPrintOperation` is the high-level, portable printing API.

    It looks a bit different than other GTK dialogs such as the
    `GtkFileChooser`, since some platforms don’t expose enough
    infrastructure to implement a good print dialog. On such
    platforms, `GtkPrintOperation` uses the native print dialog.
    On platforms which do not provide a native print dialog, GTK
    uses its own, see [class@Gtk.PrintUnixDialog].

    The typical way to use the high-level printing API is to create
    a `GtkPrintOperation` object with [ctor@Gtk.PrintOperation.new]
    when the user selects to print. Then you set some properties on it,
    e.g. the page size, any [class@Gtk.PrintSettings] from previous print
    operations, the number of pages, the current page, etc.

    Then you start the print operation by calling [method@Gtk.PrintOperation.run].
    It will then show a dialog, let the user select a printer and options.
    When the user finished the dialog, various signals will be emitted on
    the `GtkPrintOperation`, the main one being
    [signal@Gtk.PrintOperation::draw-page], which you are supposed to handle
    and render the page on the provided [class@Gtk.PrintContext] using Cairo.

    # The high-level printing API

    ```c
    static GtkPrintSettings *settings = NULL;

    static void
    do_print (void)
    {
    GtkPrintOperation *print;
    GtkPrintOperationResult res;

    print = gtk_print_operation_new ();

    if (settings != NULL)
    gtk_print_operation_set_print_settings (print, settings);

    g_signal_connect (print, \"begin_print\", G_CALLBACK (begin_print), NULL);
    g_signal_connect (print, \"draw_page\", G_CALLBACK (draw_page), NULL);

    res = gtk_print_operation_run (print, GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
    GTK_WINDOW (main_window), NULL);

    if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
    {
    if (settings != NULL)
    g_object_unref (settings);
    settings = g_object_ref (gtk_print_operation_get_print_settings (print));
    }

    g_object_unref (print);
    }
    ```

    By default `GtkPrintOperation` uses an external application to do
    print preview. To implement a custom print preview, an application
    must connect to the preview signal. The functions
    [method@Gtk.PrintOperationPreview.render_page],
    [method@Gtk.PrintOperationPreview.end_preview] and
    [method@Gtk.PrintOperationPreview.is_selected]
    are useful when implementing a print preview.

    :Constructors:

    ::

        PrintOperation(**properties)
        new() -> Gtk.PrintOperation

    Object GtkPrintOperation

    Signals from GtkPrintOperation:
      status-changed ()
      done (GtkPrintOperationResult)
      begin-print (GtkPrintContext)
      paginate (GtkPrintContext) -> gboolean
      request-page-setup (GtkPrintContext, gint, GtkPageSetup)
      draw-page (GtkPrintContext, gint)
      end-print (GtkPrintContext)
      create-custom-widget () -> GObject
      update-custom-widget (GtkWidget, GtkPageSetup, GtkPrintSettings)
      custom-widget-apply (GtkWidget)
      preview (GtkPrintOperationPreview, GtkPrintContext, GtkWindow) -> gboolean

    Properties from GtkPrintOperation:
      default-page-setup -> GtkPageSetup: default-page-setup
      print-settings -> GtkPrintSettings: print-settings
      job-name -> gchararray: job-name
      n-pages -> gint: n-pages
      current-page -> gint: current-page
      use-full-page -> gboolean: use-full-page
      track-print-status -> gboolean: track-print-status
      unit -> GtkUnit: unit
      show-progress -> gboolean: show-progress
      allow-async -> gboolean: allow-async
      export-filename -> gchararray: export-filename
      status -> GtkPrintStatus: status
      status-string -> gchararray: status-string
      custom-tab-label -> gchararray: custom-tab-label
      embed-page-setup -> gboolean: embed-page-setup
      has-selection -> gboolean: has-selection
      support-selection -> gboolean: support-selection
      n-pages-to-print -> gint: n-pages-to-print

    Signals from GtkPrintOperationPreview:
      ready (GtkPrintContext)
      got-page-size (GtkPrintContext, GtkPageSetup)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, PrintOperationPreview.Props):
        allow_async: bool
        """
        Determines whether the print operation may run asynchronously or not.

        Some systems don't support asynchronous printing, but those that do
        will return %GTK_PRINT_OPERATION_RESULT_IN_PROGRESS as the status, and
        emit the [signal@Gtk.PrintOperation::done] signal when the operation
        is actually done.

        The Windows port does not support asynchronous operation at all (this
        is unlikely to change). On other platforms, all actions except for
        %GTK_PRINT_OPERATION_ACTION_EXPORT support asynchronous operation.
        """
        current_page: int
        """
        The current page in the document.

        If this is set before [method@Gtk.PrintOperation.run],
        the user will be able to select to print only the current page.

        Note that this only makes sense for pre-paginated documents.
        """
        custom_tab_label: Optional[str]
        """
        Used as the label of the tab containing custom widgets.

        Note that this property may be ignored on some platforms.

        If this is %NULL, GTK uses a default label.
        """
        default_page_setup: PageSetup
        """
        The `GtkPageSetup` used by default.

        This page setup will be used by [method@Gtk.PrintOperation.run],
        but it can be overridden on a per-page basis by connecting
        to the [signal@Gtk.PrintOperation::request-page-setup] signal.
        """
        embed_page_setup: bool
        """
        If %TRUE, page size combo box and orientation combo box
        are embedded into page setup page.
        """
        export_filename: str
        """
        The name of a file to generate instead of showing the print dialog.

        Currently, PDF is the only supported format.

        The intended use of this property is for implementing
        “Export to PDF” actions.

        “Print to PDF” support is independent of this and is done
        by letting the user pick the “Print to PDF” item from the
        list of printers in the print dialog.
        """
        has_selection: bool
        """
        Determines whether there is a selection in your application.

        This can allow your application to print the selection.
        This is typically used to make a \"Selection\" button sensitive.
        """
        job_name: str
        """
        A string used to identify the job (e.g. in monitoring
        applications like eggcups).

        If you don't set a job name, GTK picks a default one
        by numbering successive print jobs.
        """
        n_pages: int
        """
        The number of pages in the document.

        This must be set to a positive number before the rendering
        starts. It may be set in a [signal@Gtk.PrintOperation::begin-print]
        signal handler.

        Note that the page numbers passed to the
        [signal@Gtk.PrintOperation::request-page-setup] and
        [signal@Gtk.PrintOperation::draw-page] signals are 0-based, i.e.
        if the user chooses to print all pages, the last ::draw-page signal
        will be for page @n_pages - 1.
        """
        n_pages_to_print: int
        """
        The number of pages that will be printed.

        Note that this value is set during print preparation phase
        (%GTK_PRINT_STATUS_PREPARING), so this value should never be
        get before the data generation phase (%GTK_PRINT_STATUS_GENERATING_DATA).
        You can connect to the [signal@Gtk.PrintOperation::status-changed] signal
        and call [method@Gtk.PrintOperation.get_n_pages_to_print] when
        print status is %GTK_PRINT_STATUS_GENERATING_DATA.

        This is typically used to track the progress of print operation.
        """
        print_settings: Optional[PrintSettings]
        """
        The `GtkPrintSettings` used for initializing the dialog.

        Setting this property is typically used to re-establish
        print settings from a previous print operation, see
        [method@Gtk.PrintOperation.run].
        """
        show_progress: bool
        """
        Determines whether to show a progress dialog during the
        print operation.
        """
        status: PrintStatus
        """
        The status of the print operation.
        """
        status_string: str
        """
        A string representation of the status of the print operation.

        The string is translated and suitable for displaying the print
        status e.g. in a `GtkStatusbar`.

        See the [property@Gtk.PrintOperation:status] property for a status
        value that is suitable for programmatic use.
        """
        support_selection: bool
        """
        If %TRUE, the print operation will support print of selection.

        This allows the print dialog to show a \"Selection\" button.
        """
        track_print_status: bool
        """
        If %TRUE, the print operation will try to continue report on
        the status of the print job in the printer queues and printer.

        This can allow your application to show things like “out of paper”
        issues, and when the print job actually reaches the printer.
        However, this is often implemented using polling, and should
        not be enabled unless needed.
        """
        unit: Unit
        """
        The transformation for the cairo context obtained from
        `GtkPrintContext` is set up in such a way that distances
        are measured in units of @unit.
        """
        use_full_page: bool
        """
        If %TRUE, the transformation for the cairo context obtained
        from `GtkPrintContext` puts the origin at the top left corner
        of the page.

        This may not be the top left corner of the sheet, depending on
        page orientation and the number of pages per sheet. Otherwise,
        the origin is at the top left corner of the imageable area (i.e.
        inside the margins).
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    priv: PrintOperationPrivate = ...
    def __init__(
        self,
        allow_async: bool = ...,
        current_page: int = ...,
        custom_tab_label: Optional[str] = ...,
        default_page_setup: Optional[PageSetup] = ...,
        embed_page_setup: bool = ...,
        export_filename: str = ...,
        has_selection: bool = ...,
        job_name: str = ...,
        n_pages: int = ...,
        print_settings: Optional[PrintSettings] = ...,
        show_progress: bool = ...,
        support_selection: bool = ...,
        track_print_status: bool = ...,
        unit: Unit = ...,
        use_full_page: bool = ...,
    ): ...
    def cancel(self) -> None:
        """
        Cancels a running print operation.

        This function may be called from a [signal@Gtk.PrintOperation::begin-print],
        [signal@Gtk.PrintOperation::paginate] or [signal@Gtk.PrintOperation::draw-page]
        signal handler to stop the currently running print operation.

        Parameters:


        Returns:

        """
        ...

    def do_begin_print(self, context: PrintContext) -> None: ...
    def do_custom_widget_apply(self, widget: Widget) -> None: ...
    def do_done(self, result: PrintOperationResult) -> None: ...
    def do_draw_page(self, context: PrintContext, page_nr: int) -> None: ...
    def do_end_print(self, context: PrintContext) -> None: ...
    def do_paginate(self, context: PrintContext) -> bool: ...
    def do_preview(
        self, preview: PrintOperationPreview, context: PrintContext, parent: Window
    ) -> bool: ...
    def do_request_page_setup(
        self, context: PrintContext, page_nr: int, setup: PageSetup
    ) -> None: ...
    def do_status_changed(self) -> None: ...
    def do_update_custom_widget(
        self, widget: Widget, setup: PageSetup, settings: PrintSettings
    ) -> None: ...
    def draw_page_finish(self) -> None:
        """
        Signal that drawing of particular page is complete.

        It is called after completion of page drawing (e.g. drawing
        in another thread). If [method@Gtk.PrintOperation.set_defer_drawing]
        was called before, then this function has to be called by application.
        Otherwise it is called by GTK itself.

        Parameters:


        Returns:

        """
        ...

    def get_default_page_setup(self) -> PageSetup:
        """
        Returns the default page setup.

        Parameters:


        Returns:
            PageSetup: the default page setup

        """
        ...

    def get_embed_page_setup(self) -> bool:
        """
        Gets whether page setup selection combos are embedded

        Parameters:


        Returns:
            bool: whether page setup selection combos are embedded

        """
        ...

    def get_error(self) -> None:
        """
        Call this when the result of a print operation is
        %GTK_PRINT_OPERATION_RESULT_ERROR.

        It can be called either after [method@Gtk.PrintOperation.run]
        returns, or in the [signal@Gtk.PrintOperation::done] signal
        handler.

        The returned `GError` will contain more details on what went wrong.

        Parameters:


        Returns:

        """
        ...

    def get_has_selection(self) -> bool:
        """
        Gets whether there is a selection.

        Parameters:


        Returns:
            bool: whether there is a selection

        """
        ...

    def get_n_pages_to_print(self) -> int:
        """
        Returns the number of pages that will be printed.

        Note that this value is set during print preparation phase
        (%GTK_PRINT_STATUS_PREPARING), so this function should never be
        called before the data generation phase (%GTK_PRINT_STATUS_GENERATING_DATA).
        You can connect to the [signal@Gtk.PrintOperation::status-changed]
        signal and call gtk_print_operation_get_n_pages_to_print() when
        print status is %GTK_PRINT_STATUS_GENERATING_DATA.

        This is typically used to track the progress of print operation.

        Parameters:


        Returns:
            int: the number of pages that will be printed

        """
        ...

    def get_print_settings(self) -> Optional[PrintSettings]:
        """
        Returns the current print settings.

        Note that the return value is %NULL until either
        [method@Gtk.PrintOperation.set_print_settings] or
        [method@Gtk.PrintOperation.run] have been called.

        Parameters:


        Returns:
            Optional[PrintSettings]: the current print settings of @op.

        """
        ...

    def get_status(self) -> PrintStatus:
        """
        Returns the status of the print operation.

        Also see [method@Gtk.PrintOperation.get_status_string].

        Parameters:


        Returns:
            PrintStatus: the status of the print operation

        """
        ...

    def get_status_string(self) -> str:
        """
        Returns a string representation of the status of the
        print operation.

        The string is translated and suitable for displaying
        the print status e.g. in a `GtkStatusbar`.

        Use [method@Gtk.PrintOperation.get_status] to obtain
        a status value that is suitable for programmatic use.

        Parameters:


        Returns:
            str: a string representation of the status
        of the print operation

        """
        ...

    def get_support_selection(self) -> bool:
        """
        Gets whether the application supports print of selection

        Parameters:


        Returns:
            bool: whether the application supports print of selection

        """
        ...

    def is_finished(self) -> bool:
        """
        A convenience function to find out if the print operation
        is finished.

        a print operation is finished if its status is either
        %GTK_PRINT_STATUS_FINISHED or %GTK_PRINT_STATUS_FINISHED_ABORTED.

        Note: when you enable print status tracking the print operation
        can be in a non-finished state even after done has been called, as
        the operation status then tracks the print job status on the printer.

        Parameters:


        Returns:
            bool: %TRUE, if the print operation is finished.

        """
        ...

    @classmethod
    def new(cls) -> PrintOperation:
        """
        Creates a new `GtkPrintOperation`.

        Parameters:


        Returns:
            PrintOperation: a new `GtkPrintOperation`

        """
        ...

    def run(
        self, action: PrintOperationAction, parent: Optional[Window] = None
    ) -> PrintOperationResult:
        """
        Runs the print operation.

        Normally that this function does not return until the rendering
        of all pages is complete. You can connect to the
        [signal@Gtk.PrintOperation::status-changed] signal on @op to obtain
        some information about the progress of the print operation.

        Furthermore, it may use a recursive mainloop to show the print dialog.

        If you set the [Gtk.PrintOperation:allow-async] property, the operation
        will run asynchronously if this is supported on the platform. The
        [signal@Gtk.PrintOperation::done] signal will be emitted with the result
        of the operation when the it is done (i.e. when the dialog is canceled,
        or when the print succeeds or fails).

        ```c
        if (settings != NULL)
        gtk_print_operation_set_print_settings (print, settings);

        if (page_setup != NULL)
        gtk_print_operation_set_default_page_setup (print, page_setup);

        g_signal_connect (print, \"begin-print\",
        G_CALLBACK (begin_print), &data);
        g_signal_connect (print, \"draw-page\",
        G_CALLBACK (draw_page), &data);

        res = gtk_print_operation_run (print,
        GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
        parent,
        &error);

        if (res == GTK_PRINT_OPERATION_RESULT_ERROR)
        {
        error_dialog = gtk_message_dialog_new (GTK_WINDOW (parent),
                             GTK_DIALOG_DESTROY_WITH_PARENT,
                                             GTK_MESSAGE_ERROR,
                                             GTK_BUTTONS_CLOSE,
                                             \"Error printing file:\n%s\",
                                             error->message);
        g_signal_connect (error_dialog, \"response\",
        G_CALLBACK (gtk_window_destroy), NULL);
        gtk_window_present (GTK_WINDOW (error_dialog));
        g_error_free (error);
        }
        else if (res == GTK_PRINT_OPERATION_RESULT_APPLY)
        {
        if (settings != NULL)
        g_object_unref (settings);
        settings = g_object_ref (gtk_print_operation_get_print_settings (print));
        }
        ```

        Note that gtk_print_operation_run() can only be called once on a
        given `GtkPrintOperation`.

        Parameters:
            action: the action to start
            parent: Transient parent of the dialog

        Returns:
            PrintOperationResult: the result of the print operation. A return value of
        %GTK_PRINT_OPERATION_RESULT_APPLY indicates that the printing was
        completed successfully. In this case, it is a good idea to obtain
        the used print settings with
        [method@Gtk.PrintOperation.get_print_settings]
        and store them for reuse with the next print operation. A value of
        %GTK_PRINT_OPERATION_RESULT_IN_PROGRESS means the operation is running
        asynchronously, and will emit the [signal@Gtk.PrintOperation::done]
        signal when done.

        """
        ...

    def set_allow_async(self, allow_async: bool) -> None:
        """
        Sets whether gtk_print_operation_run() may return
        before the print operation is completed.

        Note that some platforms may not allow asynchronous
        operation.

        Parameters:
            allow_async: %TRUE to allow asynchronous operation

        Returns:

        """
        ...

    def set_current_page(self, current_page: int) -> None:
        """
        Sets the current page.

        If this is called before [method@Gtk.PrintOperation.run],
        the user will be able to select to print only the current page.

        Note that this only makes sense for pre-paginated documents.

        Parameters:
            current_page: the current page, 0-based

        Returns:

        """
        ...

    def set_custom_tab_label(self, label: Optional[str] = None) -> None:
        """
        Sets the label for the tab holding custom widgets.

        Parameters:
            label: the label to use, or %NULL to use the default label

        Returns:

        """
        ...

    def set_default_page_setup(
        self, default_page_setup: Optional[PageSetup] = None
    ) -> None:
        """
        Makes @default_page_setup the default page setup for @op.

        This page setup will be used by [method@Gtk.PrintOperation.run],
        but it can be overridden on a per-page basis by connecting
        to the [signal@Gtk.PrintOperation::request-page-setup] signal.

        Parameters:
            default_page_setup: a `GtkPageSetup`

        Returns:

        """
        ...

    def set_defer_drawing(self) -> None:
        """
        Sets up the `GtkPrintOperation` to wait for calling of
        [method@Gtk.PrintOperation.draw_page_finish from application.

        This can be used for drawing page in another thread.

        This function must be called in the callback of the
        [signal@Gtk.PrintOperation::draw-page] signal.

        Parameters:


        Returns:

        """
        ...

    def set_embed_page_setup(self, embed: bool) -> None:
        """
        Embed page size combo box and orientation combo box into page setup page.

        Selected page setup is stored as default page setup in `GtkPrintOperation`.

        Parameters:
            embed: %TRUE to embed page setup selection in the `GtkPrintUnixDialog`

        Returns:

        """
        ...

    def set_export_filename(self, filename: str) -> None:
        """
        Sets up the `GtkPrintOperation` to generate a file instead
        of showing the print dialog.

        The intended use of this function is for implementing
        “Export to PDF” actions. Currently, PDF is the only supported
        format.

        “Print to PDF” support is independent of this and is done
        by letting the user pick the “Print to PDF” item from the list
        of printers in the print dialog.

        Parameters:
            filename: the filename for the exported file

        Returns:

        """
        ...

    def set_has_selection(self, has_selection: bool) -> None:
        """
        Sets whether there is a selection to print.

        Application has to set number of pages to which the selection
        will draw by [method@Gtk.PrintOperation.set_n_pages] in a handler
        for the [signal@Gtk.PrintOperation::begin-print] signal.

        Parameters:
            has_selection: %TRUE indicates that a selection exists

        Returns:

        """
        ...

    def set_job_name(self, job_name: str) -> None:
        """
        Sets the name of the print job.

        The name is used to identify the job (e.g. in monitoring
        applications like eggcups).

        If you don’t set a job name, GTK picks a default one by
        numbering successive print jobs.

        Parameters:
            job_name: a string that identifies the print job

        Returns:

        """
        ...

    def set_n_pages(self, n_pages: int) -> None:
        """
        Sets the number of pages in the document.

        This must be set to a positive number before the rendering
        starts. It may be set in a [signal@Gtk.PrintOperation::begin-print]
        signal handler.

        Note that the page numbers passed to the
        [signal@Gtk.PrintOperation::request-page-setup]
        and [signal@Gtk.PrintOperation::draw-page] signals are 0-based, i.e.
        if the user chooses to print all pages, the last ::draw-page signal
        will be for page @n_pages - 1.

        Parameters:
            n_pages: the number of pages

        Returns:

        """
        ...

    def set_print_settings(
        self, print_settings: Optional[PrintSettings] = None
    ) -> None:
        """
        Sets the print settings for @op.

        This is typically used to re-establish print settings
        from a previous print operation, see [method@Gtk.PrintOperation.run].

        Parameters:
            print_settings: `GtkPrintSettings`

        Returns:

        """
        ...

    def set_show_progress(self, show_progress: bool) -> None:
        """
        If @show_progress is %TRUE, the print operation will show
        a progress dialog during the print operation.

        Parameters:
            show_progress: %TRUE to show a progress dialog

        Returns:

        """
        ...

    def set_support_selection(self, support_selection: bool) -> None:
        """
        Sets whether selection is supported by `GtkPrintOperation`.

        Parameters:
            support_selection: %TRUE to support selection

        Returns:

        """
        ...

    def set_track_print_status(self, track_status: bool) -> None:
        """
        If track_status is %TRUE, the print operation will try to continue
        report on the status of the print job in the printer queues and printer.

        This can allow your application to show things like “out of paper”
        issues, and when the print job actually reaches the printer.

        This function is often implemented using some form of polling,
        so it should not be enabled unless needed.

        Parameters:
            track_status: %TRUE to track status after printing

        Returns:

        """
        ...

    def set_unit(self, unit: Unit) -> None:
        """
        Sets up the transformation for the cairo context obtained from
        `GtkPrintContext` in such a way that distances are measured in
        units of @unit.

        Parameters:
            unit: the unit to use

        Returns:

        """
        ...

    def set_use_full_page(self, full_page: bool) -> None:
        """
        If @full_page is %TRUE, the transformation for the cairo context
        obtained from `GtkPrintContext` puts the origin at the top left
        corner of the page.

        This may not be the top left corner of the sheet, depending on page
        orientation and the number of pages per sheet). Otherwise, the origin
        is at the top left corner of the imageable area (i.e. inside the margins).

        Parameters:
            full_page: %TRUE to set up the `GtkPrintContext` for the full page

        Returns:

        """
        ...

class PrintOperationClass(GObject.GPointer):
    """
    :Constructors:

    ::

        PrintOperationClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    done: Callable[[PrintOperation, PrintOperationResult], None] = ...
    begin_print: Callable[[PrintOperation, PrintContext], None] = ...
    paginate: Callable[[PrintOperation, PrintContext], bool] = ...
    request_page_setup: Callable[
        [PrintOperation, PrintContext, int, PageSetup], None
    ] = ...
    draw_page: Callable[[PrintOperation, PrintContext, int], None] = ...
    end_print: Callable[[PrintOperation, PrintContext], None] = ...
    status_changed: Callable[[PrintOperation], None] = ...
    create_custom_widget: None = ...
    custom_widget_apply: Callable[[PrintOperation, Widget], None] = ...
    preview: Callable[
        [PrintOperation, PrintOperationPreview, PrintContext, Window], bool
    ] = ...
    update_custom_widget: Callable[
        [PrintOperation, Widget, PageSetup, PrintSettings], None
    ] = ...
    padding: list[None] = ...

class PrintOperationPreview(GObject.GInterface):
    """
    `GtkPrintOperationPreview` is the interface that is used to
    implement print preview.

    A `GtkPrintOperationPreview` object is passed to the
    [signal@Gtk.PrintOperation::preview] signal by
    [class@Gtk.PrintOperation].



    Interface GtkPrintOperationPreview

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def end_preview(self) -> None:
        """
        Ends a preview.

        This function must be called to finish a custom print preview.

        Parameters:


        Returns:

        """
        ...

    def is_selected(self, page_nr: int) -> bool:
        """
        Returns whether the given page is included in the set of pages that
        have been selected for printing.

        Parameters:
            page_nr: a page number

        Returns:
            bool: %TRUE if the page has been selected for printing

        """
        ...

    def render_page(self, page_nr: int) -> None:
        """
        Renders a page to the preview.

        This is using the print context that was passed to the
        [signal@Gtk.PrintOperation::preview] handler together
        with @preview.

        A custom print preview should use this function to render
        the currently selected page.

        Note that this function requires a suitable cairo context to
        be associated with the print context.

        Parameters:
            page_nr: the page to render

        Returns:

        """
        ...

class PrintOperationPreviewIface(GObject.GPointer):
    """
    :Constructors:

    ::

        PrintOperationPreviewIface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    ready: Callable[[PrintOperationPreview, PrintContext], None] = ...
    got_page_size: Callable[[PrintOperationPreview, PrintContext, PageSetup], None] = (
        ...
    )
    render_page: Callable[[PrintOperationPreview, int], None] = ...
    is_selected: Callable[[PrintOperationPreview, int], bool] = ...
    end_preview: Callable[[PrintOperationPreview], None] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...
    _gtk_reserved5: None = ...
    _gtk_reserved6: None = ...
    _gtk_reserved7: None = ...
    _gtk_reserved8: None = ...

class PrintOperationPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class PrintSettings(GObject.Object):
    """
    A `GtkPrintSettings` object represents the settings of a print dialog in
    a system-independent way.

    The main use for this object is that once you’ve printed you can get a
    settings object that represents the settings the user chose, and the next
    time you print you can pass that object in so that the user doesn’t have
    to re-set all his settings.

    Its also possible to enumerate the settings so that you can easily save
    the settings for the next time your app runs, or even store them in a
    document. The predefined keys try to use shared values as much as possible
    so that moving such a document between systems still works.

    :Constructors:

    ::

        PrintSettings(**properties)
        new() -> Gtk.PrintSettings
        new_from_file(file_name:str) -> Gtk.PrintSettings
        new_from_gvariant(variant:GLib.Variant) -> Gtk.PrintSettings
        new_from_key_file(key_file:GLib.KeyFile, group_name:str=None) -> Gtk.PrintSettings

    Object GtkPrintSettings

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...

    def copy(self) -> PrintSettings:
        """
        Copies a `GtkPrintSettings` object.

        Parameters:


        Returns:
            PrintSettings: a newly allocated copy of @other

        """
        ...

    def foreach(self, func: Callable[..., None], *user_data: Any) -> None:
        """
        Calls @func for each key-value pair of @settings.

        Parameters:
            func: the function to call
            user_data: user data for @func

        Returns:

        """
        ...

    def get(self, key: str) -> Optional[str]:
        """
        Looks up the string value associated with @key.

        Parameters:
            key: a key

        Returns:
            Optional[str]: the string value for @key

        """
        ...

    def get_bool(self, key: str) -> bool:
        """
        Returns the boolean represented by the value
        that is associated with @key.

        The string “true” represents %TRUE, any other
        string %FALSE.

        Parameters:
            key: a key

        Returns:
            bool: %TRUE, if @key maps to a true value.

        """
        ...

    def get_collate(self) -> bool:
        """
        Gets the value of %GTK_PRINT_SETTINGS_COLLATE.

        Parameters:


        Returns:
            bool: whether to collate the printed pages

        """
        ...

    def get_default_source(self) -> Optional[str]:
        """
        Gets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.

        Parameters:


        Returns:
            Optional[str]: the default source

        """
        ...

    def get_dither(self) -> Optional[str]:
        """
        Gets the value of %GTK_PRINT_SETTINGS_DITHER.

        Parameters:


        Returns:
            Optional[str]: the dithering that is used

        """
        ...

    def get_double(self, key: str) -> float:
        """
        Returns the double value associated with @key, or 0.

        Parameters:
            key: a key

        Returns:
            float: the double value of @key

        """
        ...

    def get_double_with_default(self, key: str, def_: float) -> float:
        """
        Returns the floating point number represented by
        the value that is associated with @key, or @default_val
        if the value does not represent a floating point number.

        Floating point numbers are parsed with g_ascii_strtod().

        Parameters:
            key: a key
            def_:

        Returns:
            float: the floating point number associated with @key

        """
        ...

    def get_duplex(self) -> PrintDuplex:
        """
        Gets the value of %GTK_PRINT_SETTINGS_DUPLEX.

        Parameters:


        Returns:
            PrintDuplex: whether to print the output in duplex.

        """
        ...

    def get_finishings(self) -> Optional[str]:
        """
        Gets the value of %GTK_PRINT_SETTINGS_FINISHINGS.

        Parameters:


        Returns:
            Optional[str]: the finishings

        """
        ...

    def get_int(self, key: str) -> int:
        """
        Returns the integer value of @key, or 0.

        Parameters:
            key: a key

        Returns:
            int: the integer value of @key

        """
        ...

    def get_int_with_default(self, key: str, def_: int) -> int:
        """
        Returns the value of @key, interpreted as
        an integer, or the default value.

        Parameters:
            key: a key
            def_:

        Returns:
            int: the integer value of @key

        """
        ...

    def get_length(self, key: str, unit: Unit) -> float:
        """
        Returns the value associated with @key, interpreted
        as a length.

        The returned value is converted to @units.

        Parameters:
            key: a key
            unit: the unit of the return value

        Returns:
            float: the length value of @key, converted to @unit

        """
        ...

    def get_media_type(self) -> Optional[str]:
        """
        Gets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.

        The set of media types is defined in PWG 5101.1-2002 PWG.

        Parameters:


        Returns:
            Optional[str]: the media type

        """
        ...

    def get_n_copies(self) -> int:
        """
        Gets the value of %GTK_PRINT_SETTINGS_N_COPIES.

        Parameters:


        Returns:
            int: the number of copies to print

        """
        ...

    def get_number_up(self) -> int:
        """
        Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.

        Parameters:


        Returns:
            int: the number of pages per sheet

        """
        ...

    def get_number_up_layout(self) -> NumberUpLayout:
        """
        Gets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.

        Parameters:


        Returns:
            NumberUpLayout: layout of page in number-up mode

        """
        ...

    def get_orientation(self) -> PageOrientation:
        """
        Get the value of %GTK_PRINT_SETTINGS_ORIENTATION,
        converted to a `GtkPageOrientation`.

        Parameters:


        Returns:
            PageOrientation: the orientation

        """
        ...

    def get_output_bin(self) -> Optional[str]:
        """
        Gets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.

        Parameters:


        Returns:
            Optional[str]: the output bin

        """
        ...

    def get_page_ranges(self) -> list[PageRange]:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.

        Parameters:


        Returns:
            list[PageRange]: an array
        of `GtkPageRange`s. Use g_free() to free the array when
        it is no longer needed.

        """
        ...

    def get_page_set(self) -> PageSet:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PAGE_SET.

        Parameters:


        Returns:
            PageSet: the set of pages to print

        """
        ...

    def get_paper_height(self, unit: Unit) -> float:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT,
        converted to @unit.

        Parameters:
            unit: the unit for the return value

        Returns:
            float: the paper height, in units of @unit

        """
        ...

    def get_paper_size(self) -> Optional[PaperSize]:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
        converted to a `GtkPaperSize`.

        Parameters:


        Returns:
            Optional[PaperSize]: the paper size

        """
        ...

    def get_paper_width(self, unit: Unit) -> float:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH,
        converted to @unit.

        Parameters:
            unit: the unit for the return value

        Returns:
            float: the paper width, in units of @unit

        """
        ...

    def get_print_pages(self) -> PrintPages:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.

        Parameters:


        Returns:
            PrintPages: which pages to print

        """
        ...

    def get_printer(self) -> Optional[str]:
        """
        Convenience function to obtain the value of
        %GTK_PRINT_SETTINGS_PRINTER.

        Parameters:


        Returns:
            Optional[str]: the printer name

        """
        ...

    def get_printer_lpi(self) -> float:
        """
        Gets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.

        Parameters:


        Returns:
            float: the resolution in lpi (lines per inch)

        """
        ...

    def get_quality(self) -> PrintQuality:
        """
        Gets the value of %GTK_PRINT_SETTINGS_QUALITY.

        Parameters:


        Returns:
            PrintQuality: the print quality

        """
        ...

    def get_resolution(self) -> int:
        """
        Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION.

        Parameters:


        Returns:
            int: the resolution in dpi

        """
        ...

    def get_resolution_x(self) -> int:
        """
        Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_X.

        Parameters:


        Returns:
            int: the horizontal resolution in dpi

        """
        ...

    def get_resolution_y(self) -> int:
        """
        Gets the value of %GTK_PRINT_SETTINGS_RESOLUTION_Y.

        Parameters:


        Returns:
            int: the vertical resolution in dpi

        """
        ...

    def get_reverse(self) -> bool:
        """
        Gets the value of %GTK_PRINT_SETTINGS_REVERSE.

        Parameters:


        Returns:
            bool: whether to reverse the order of the printed pages

        """
        ...

    def get_scale(self) -> float:
        """
        Gets the value of %GTK_PRINT_SETTINGS_SCALE.

        Parameters:


        Returns:
            float: the scale in percent

        """
        ...

    def get_use_color(self) -> bool:
        """
        Gets the value of %GTK_PRINT_SETTINGS_USE_COLOR.

        Parameters:


        Returns:
            bool: whether to use color

        """
        ...

    def has_key(self, key: str) -> bool:
        """
        Returns %TRUE, if a value is associated with @key.

        Parameters:
            key: a key

        Returns:
            bool: %TRUE, if @key has a value

        """
        ...

    def load_file(self, file_name: str) -> bool:
        """
        Reads the print settings from @file_name.

        If the file could not be loaded then error is set to either
        a `GFileError` or `GKeyFileError`.

        See [method@Gtk.PrintSettings.to_file].

        Parameters:
            file_name: the filename to read the settings from

        Returns:
            bool: %TRUE on success

        """
        ...

    def load_key_file(
        self, key_file: GLib.KeyFile, group_name: Optional[str] = None
    ) -> bool:
        """
        Reads the print settings from the group @group_name in @key_file.

        If the file could not be loaded then error is set to either a
        `GFileError` or `GKeyFileError`.

        Parameters:
            key_file: the `GKeyFile` to retrieve the settings from
            group_name: the name of the group to use, or %NULL
        to use the default “Print Settings”

        Returns:
            bool: %TRUE on success

        """
        ...

    @classmethod
    def new(cls) -> PrintSettings:
        """
        Creates a new `GtkPrintSettings` object.

        Parameters:


        Returns:
            PrintSettings: a new `GtkPrintSettings` object

        """
        ...

    @classmethod
    def new_from_file(cls, file_name: str) -> PrintSettings:
        """
        Reads the print settings from @file_name.

        Returns a new `GtkPrintSettings` object with the restored settings,
        or %NULL if an error occurred. If the file could not be loaded then
        error is set to either a `GFileError` or `GKeyFileError`.

        See [method@Gtk.PrintSettings.to_file].

        Parameters:
            file_name: the filename to read the settings from

        Returns:
            PrintSettings: the restored `GtkPrintSettings`

        """
        ...

    @classmethod
    def new_from_gvariant(cls, variant: GLib.Variant) -> PrintSettings:
        """
        Deserialize print settings from an a{sv} variant.

        The variant must be in the format produced by
        [method@Gtk.PrintSettings.to_gvariant].

        Parameters:
            variant: an a{sv} `GVariant`

        Returns:
            PrintSettings: a new `GtkPrintSettings` object

        """
        ...

    @classmethod
    def new_from_key_file(
        cls, key_file: GLib.KeyFile, group_name: Optional[str] = None
    ) -> PrintSettings:
        """
        Reads the print settings from the group @group_name in @key_file.

        Returns a new `GtkPrintSettings` object with the restored settings,
        or %NULL if an error occurred. If the file could not be loaded then
        error is set to either `GFileError` or `GKeyFileError`.

        Parameters:
            key_file: the `GKeyFile` to retrieve the settings from
            group_name: the name of the group to use, or %NULL to use
        the default “Print Settings”

        Returns:
            PrintSettings: the restored `GtkPrintSettings`

        """
        ...

    def set(self, key: str, value: Optional[str] = None) -> None:
        """
        Associates @value with @key.

        Parameters:
            key: a key
            value: a string value

        Returns:

        """
        ...

    def set_bool(self, key: str, value: bool) -> None:
        """
        Sets @key to a boolean value.

        Parameters:
            key: a key
            value: a boolean

        Returns:

        """
        ...

    def set_collate(self, collate: bool) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_COLLATE.

        Parameters:
            collate: whether to collate the output

        Returns:

        """
        ...

    def set_default_source(self, default_source: str) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_DEFAULT_SOURCE.

        Parameters:
            default_source: the default source

        Returns:

        """
        ...

    def set_dither(self, dither: str) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_DITHER.

        Parameters:
            dither: the dithering that is used

        Returns:

        """
        ...

    def set_double(self, key: str, value: float) -> None:
        """
        Sets @key to a double value.

        Parameters:
            key: a key
            value: a double value

        Returns:

        """
        ...

    def set_duplex(self, duplex: PrintDuplex) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_DUPLEX.

        Parameters:
            duplex: a `GtkPrintDuplex` value

        Returns:

        """
        ...

    def set_finishings(self, finishings: str) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_FINISHINGS.

        Parameters:
            finishings: the finishings

        Returns:

        """
        ...

    def set_int(self, key: str, value: int) -> None:
        """
        Sets @key to an integer value.

        Parameters:
            key: a key
            value: an integer

        Returns:

        """
        ...

    def set_length(self, key: str, value: float, unit: Unit) -> None:
        """
        Associates a length in units of @unit with @key.

        Parameters:
            key: a key
            value: a length
            unit: the unit of @length

        Returns:

        """
        ...

    def set_media_type(self, media_type: str) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_MEDIA_TYPE.

        The set of media types is defined in PWG 5101.1-2002 PWG.

        Parameters:
            media_type: the media type

        Returns:

        """
        ...

    def set_n_copies(self, num_copies: int) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_N_COPIES.

        Parameters:
            num_copies: the number of copies

        Returns:

        """
        ...

    def set_number_up(self, number_up: int) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP.

        Parameters:
            number_up: the number of pages per sheet

        Returns:

        """
        ...

    def set_number_up_layout(self, number_up_layout: NumberUpLayout) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT.

        Parameters:
            number_up_layout: a `GtkNumberUpLayout` value

        Returns:

        """
        ...

    def set_orientation(self, orientation: PageOrientation) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_ORIENTATION.

        Parameters:
            orientation: a page orientation

        Returns:

        """
        ...

    def set_output_bin(self, output_bin: str) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_OUTPUT_BIN.

        Parameters:
            output_bin: the output bin

        Returns:

        """
        ...

    def set_page_ranges(self, page_ranges: Sequence[PageRange]) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PAGE_RANGES.

        Parameters:
            page_ranges: an array of `GtkPageRange`s

        Returns:

        """
        ...

    def set_page_set(self, page_set: PageSet) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PAGE_SET.

        Parameters:
            page_set: a `GtkPageSet` value

        Returns:

        """
        ...

    def set_paper_height(self, height: float, unit: Unit) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PAPER_HEIGHT.

        Parameters:
            height: the paper height
            unit: the units of @height

        Returns:

        """
        ...

    def set_paper_size(self, paper_size: PaperSize) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PAPER_FORMAT,
        %GTK_PRINT_SETTINGS_PAPER_WIDTH and
        %GTK_PRINT_SETTINGS_PAPER_HEIGHT.

        Parameters:
            paper_size: a paper size

        Returns:

        """
        ...

    def set_paper_width(self, width: float, unit: Unit) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PAPER_WIDTH.

        Parameters:
            width: the paper width
            unit: the units of @width

        Returns:

        """
        ...

    def set_print_pages(self, pages: PrintPages) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PRINT_PAGES.

        Parameters:
            pages: a `GtkPrintPages` value

        Returns:

        """
        ...

    def set_printer(self, printer: str) -> None:
        """
        Convenience function to set %GTK_PRINT_SETTINGS_PRINTER
        to @printer.

        Parameters:
            printer: the printer name

        Returns:

        """
        ...

    def set_printer_lpi(self, lpi: float) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_PRINTER_LPI.

        Parameters:
            lpi: the resolution in lpi (lines per inch)

        Returns:

        """
        ...

    def set_quality(self, quality: PrintQuality) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_QUALITY.

        Parameters:
            quality: a `GtkPrintQuality` value

        Returns:

        """
        ...

    def set_resolution(self, resolution: int) -> None:
        """
        Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
        %GTK_PRINT_SETTINGS_RESOLUTION_X and
        %GTK_PRINT_SETTINGS_RESOLUTION_Y.

        Parameters:
            resolution: the resolution in dpi

        Returns:

        """
        ...

    def set_resolution_xy(self, resolution_x: int, resolution_y: int) -> None:
        """
        Sets the values of %GTK_PRINT_SETTINGS_RESOLUTION,
        %GTK_PRINT_SETTINGS_RESOLUTION_X and
        %GTK_PRINT_SETTINGS_RESOLUTION_Y.

        Parameters:
            resolution_x: the horizontal resolution in dpi
            resolution_y: the vertical resolution in dpi

        Returns:

        """
        ...

    def set_reverse(self, reverse: bool) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_REVERSE.

        Parameters:
            reverse: whether to reverse the output

        Returns:

        """
        ...

    def set_scale(self, scale: float) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_SCALE.

        Parameters:
            scale: the scale in percent

        Returns:

        """
        ...

    def set_use_color(self, use_color: bool) -> None:
        """
        Sets the value of %GTK_PRINT_SETTINGS_USE_COLOR.

        Parameters:
            use_color: whether to use color

        Returns:

        """
        ...

    def to_file(self, file_name: str) -> bool:
        """
        This function saves the print settings from @settings to @file_name.

        If the file could not be written then error is set to either a
        `GFileError` or `GKeyFileError`.

        Parameters:
            file_name: the file to save to

        Returns:
            bool: %TRUE on success

        """
        ...

    def to_gvariant(self) -> GLib.Variant:
        """
        Serialize print settings to an a{sv} variant.

        Parameters:


        Returns:
            GLib.Variant: a new, floating, `GVariant`

        """
        ...

    def to_key_file(
        self, key_file: GLib.KeyFile, group_name: Optional[str] = None
    ) -> None:
        """
        This function adds the print settings from @settings to @key_file.

        Parameters:
            key_file: the `GKeyFile` to save the print settings to
            group_name: the group to add the settings to in @key_file, or
        %NULL to use the default “Print Settings”

        Returns:

        """
        ...

    def unset(self, key: str) -> None:
        """
        Removes any value associated with @key.

        This has the same effect as setting the value to %NULL.

        Parameters:
            key: a key

        Returns:

        """
        ...

class PrintUnixDialog(
    Dialog, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager
):
    """
    `GtkPrintUnixDialog` implements a print dialog for platforms
    which don’t provide a native print dialog, like Unix.

    ![An example GtkPrintUnixDialog](printdialog.png)

    It can be used very much like any other GTK dialog, at the cost of
    the portability offered by the high-level printing API with
    [class@Gtk.PrintOperation].

    In order to print something with `GtkPrintUnixDialog`, you need to
    use [method@Gtk.PrintUnixDialog.get_selected_printer] to obtain a
    [class@Gtk.Printer] object and use it to construct a [class@Gtk.PrintJob]
    using [ctor@Gtk.PrintJob.new].

    `GtkPrintUnixDialog` uses the following response values:

    - %GTK_RESPONSE_OK: for the “Print” button
    - %GTK_RESPONSE_APPLY: for the “Preview” button
    - %GTK_RESPONSE_CANCEL: for the “Cancel” button

    # GtkPrintUnixDialog as GtkBuildable

    The `GtkPrintUnixDialog` implementation of the `GtkBuildable` interface
    exposes its @notebook internal children with the name “notebook”.

    An example of a `GtkPrintUnixDialog` UI definition fragment:

    ```xml
    <object class=\"GtkPrintUnixDialog\" id=\"dialog1\">
    <child internal-child=\"notebook\">
    <object class=\"GtkNotebook\" id=\"notebook\">
    <child>
    <object type=\"GtkNotebookPage\">
    <property name=\"tab_expand\">False</property>
    <property name=\"tab_fill\">False</property>
    <property name=\"tab\">
    <object class=\"GtkLabel\" id=\"tablabel\">
    <property name=\"label\">Tab label</property>
    </object>
    </property>
    <property name=\"child\">
    <object class=\"GtkLabel\" id=\"tabcontent\">
    <property name=\"label\">Content on notebook tab</property>
    </object>
    </property>
    </object>
    </child>
    </object>
    </child>
    </object>
    ```

    # CSS nodes

    `GtkPrintUnixDialog` has a single CSS node with name window. The style classes
    dialog and print are added.

    :Constructors:

    ::

        PrintUnixDialog(**properties)
        new(title:str=None, parent:Gtk.Window=None) -> Gtk.Widget

    Object GtkPrintUnixDialog

    Properties from GtkPrintUnixDialog:
      page-setup -> GtkPageSetup: page-setup
      current-page -> gint: current-page
      print-settings -> GtkPrintSettings: print-settings
      selected-printer -> GtkPrinter: selected-printer
      manual-capabilities -> GtkPrintCapabilities: manual-capabilities
      support-selection -> gboolean: support-selection
      has-selection -> gboolean: has-selection
      embed-page-setup -> gboolean: embed-page-setup

    Signals from GtkDialog:
      response (gint)
      close ()

    Properties from GtkDialog:
      use-header-bar -> gint: use-header-bar

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Dialog.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ):
        current_page: int
        """
        The current page in the document.
        """
        embed_page_setup: bool
        """
        %TRUE if the page setup controls are embedded.
        """
        has_selection: bool
        """
        Whether the application has a selection.
        """
        manual_capabilities: PrintCapabilities
        """
        Capabilities the application can handle.
        """
        page_setup: PageSetup
        """
        The `GtkPageSetup` object to use.
        """
        print_settings: PrintSettings
        """
        The `GtkPrintSettings` object used for this dialog.
        """
        selected_printer: Optional[Printer]
        """
        The `GtkPrinter` which is selected.
        """
        support_selection: bool
        """
        Whether the dialog supports selection.
        """

    props: Props = ...
    def __init__(
        self,
        current_page: int = ...,
        embed_page_setup: bool = ...,
        has_selection: bool = ...,
        manual_capabilities: PrintCapabilities = ...,
        page_setup: PageSetup = ...,
        print_settings: PrintSettings = ...,
        support_selection: bool = ...,
        use_header_bar: int = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def add_custom_tab(self, child: Widget, tab_label: Widget) -> None:
        """
        Adds a custom tab to the print dialog.

        Parameters:
            child: the widget to put in the custom tab
            tab_label: the widget to use as tab label

        Returns:

        """
        ...

    def get_current_page(self) -> int:
        """
        Gets the current page of the `GtkPrintUnixDialog`.

        Parameters:


        Returns:
            int: the current page of @dialog

        """
        ...

    def get_embed_page_setup(self) -> bool:
        """
        Gets whether to embed the page setup.

        Parameters:


        Returns:
            bool: whether to embed the page setup

        """
        ...

    def get_has_selection(self) -> bool:
        """
        Gets whether there is a selection.

        Parameters:


        Returns:
            bool: whether there is a selection

        """
        ...

    def get_manual_capabilities(self) -> PrintCapabilities:
        """
        Gets the capabilities that have been set on this `GtkPrintUnixDialog`.

        Parameters:


        Returns:
            PrintCapabilities: the printing capabilities

        """
        ...

    def get_page_setup(self) -> PageSetup:
        """
        Gets the page setup that is used by the `GtkPrintUnixDialog`.

        Parameters:


        Returns:
            PageSetup: the page setup of @dialog.

        """
        ...

    def get_page_setup_set(self) -> bool:
        """
        Gets whether a page setup was set by the user.

        Parameters:


        Returns:
            bool: whether a page setup was set by user.

        """
        ...

    def get_selected_printer(self) -> Optional[Printer]:
        """
        Gets the currently selected printer.

        Parameters:


        Returns:
            Optional[Printer]: the currently selected printer

        """
        ...

    def get_settings(self) -> PrintSettings:
        """
        Gets a new `GtkPrintSettings` object that represents the
        current values in the print dialog.

        Note that this creates a new object, and you need to unref
        it if don’t want to keep it.

        Parameters:


        Returns:
            PrintSettings: a new `GtkPrintSettings` object with the values from @dialog

        """
        ...

    def get_support_selection(self) -> bool:
        """
        Gets whether the print dialog allows user to print a selection.

        Parameters:


        Returns:
            bool: whether the application supports print of selection

        """
        ...

    @classmethod
    def new(
        cls, title: Optional[str] = None, parent: Optional[Window] = None
    ) -> PrintUnixDialog:
        """
        Creates a new `GtkPrintUnixDialog`.

        Parameters:
            title: Title of the dialog
            parent: Transient parent of the dialog

        Returns:
            Widget: a new `GtkPrintUnixDialog`

        """
        ...

    def set_current_page(self, current_page: int) -> None:
        """
        Sets the current page number.

        If @current_page is not -1, this enables the current page choice
        for the range of pages to print.

        Parameters:
            current_page: the current page number.

        Returns:

        """
        ...

    def set_embed_page_setup(self, embed: bool) -> None:
        """
        Embed page size combo box and orientation combo box into page setup page.

        Parameters:
            embed: embed page setup selection

        Returns:

        """
        ...

    def set_has_selection(self, has_selection: bool) -> None:
        """
        Sets whether a selection exists.

        Parameters:
            has_selection: %TRUE indicates that a selection exists

        Returns:

        """
        ...

    def set_manual_capabilities(self, capabilities: PrintCapabilities) -> None:
        """
        This lets you specify the printing capabilities your application
        supports.

        For instance, if you can handle scaling the output then you pass
        %GTK_PRINT_CAPABILITY_SCALE. If you don’t pass that, then the dialog
        will only let you select the scale if the printing system automatically
        handles scaling.

        Parameters:
            capabilities: the printing capabilities of your application

        Returns:

        """
        ...

    def set_page_setup(self, page_setup: PageSetup) -> None:
        """
        Sets the page setup of the `GtkPrintUnixDialog`.

        Parameters:
            page_setup: a `GtkPageSetup`

        Returns:

        """
        ...

    def set_settings(self, settings: Optional[PrintSettings] = None) -> None:
        """
        Sets the `GtkPrintSettings` for the `GtkPrintUnixDialog`.

        Typically, this is used to restore saved print settings
        from a previous print operation before the print dialog
        is shown.

        Parameters:
            settings: a `GtkPrintSettings`

        Returns:

        """
        ...

    def set_support_selection(self, support_selection: bool) -> None:
        """
        Sets whether the print dialog allows user to print a selection.

        Parameters:
            support_selection: %TRUE to allow print selection

        Returns:

        """
        ...

class Printer(GObject.Object):
    """
    A `GtkPrinter` object represents a printer.

    You only need to deal directly with printers if you use the
    non-portable [class@Gtk.PrintUnixDialog] API.

    A `GtkPrinter` allows to get status information about the printer,
    such as its description, its location, the number of queued jobs,
    etc. Most importantly, a `GtkPrinter` object can be used to create
    a [class@Gtk.PrintJob] object, which lets you print to the printer.

    :Constructors:

    ::

        Printer(**properties)
        new(name:str, backend:Gtk.PrintBackend, virtual_:bool) -> Gtk.Printer

    Object GtkPrinter

    Signals from GtkPrinter:
      details-acquired (gboolean)

    Properties from GtkPrinter:
      name -> gchararray: name
      backend -> GtkPrintBackend: backend
      is-virtual -> gboolean: is-virtual
      state-message -> gchararray: state-message
      location -> gchararray: location
      icon-name -> gchararray: icon-name
      job-count -> gint: job-count
      accepts-pdf -> gboolean: accepts-pdf
      accepts-ps -> gboolean: accepts-ps
      paused -> gboolean: paused
      accepting-jobs -> gboolean: accepting-jobs

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        accepting_jobs: bool
        """
        %TRUE if the printer is accepting jobs.
        """
        accepts_pdf: bool
        """
        %TRUE if this printer can accept PDF.
        """
        accepts_ps: bool
        """
        %TRUE if this printer can accept PostScript.
        """
        icon_name: str
        """
        Icon name to use for the printer.
        """
        is_virtual: bool
        """
        %FALSE if this represents a real hardware device.
        """
        job_count: int
        """
        Number of jobs queued in the printer.
        """
        location: str
        """
        Information about the location of the printer.
        """
        name: str
        """
        The name of the printer.
        """
        paused: bool
        """
        %TRUE if this printer is paused.

        A paused printer still accepts jobs, but it does
        not print them.
        """
        state_message: str
        """
        String giving the current status of the printer.
        """

    props: Props = ...
    def __init__(
        self,
        accepts_pdf: bool = ...,
        accepts_ps: bool = ...,
        is_virtual: bool = ...,
        name: str = ...,
    ): ...
    def accepts_pdf(self) -> bool:
        """
        Returns whether the printer accepts input in
        PDF format.

        Parameters:


        Returns:
            bool: %TRUE if @printer accepts PDF

        """
        ...

    def accepts_ps(self) -> bool:
        """
        Returns whether the printer accepts input in
        PostScript format.

        Parameters:


        Returns:
            bool: %TRUE if @printer accepts PostScript

        """
        ...

    def compare(self, b: Printer) -> int:
        """
        Compares two printers.

        Parameters:
            b: another `GtkPrinter`

        Returns:
            int: 0 if the printer match, a negative value if @a < @b,
        or a positive value if @a > @b

        """
        ...

    def get_backend(self) -> PrintBackend:
        """
        Returns the backend of the printer.

        Parameters:


        Returns:
            PrintBackend: the backend of @printer

        """
        ...

    def get_capabilities(self) -> PrintCapabilities:
        """
        Returns the printer’s capabilities.

        This is useful when you’re using `GtkPrintUnixDialog`’s
        manual-capabilities setting and need to know which settings
        the printer can handle and which you must handle yourself.

        This will return 0 unless the printer’s details are
        available, see [method@Gtk.Printer.has_details] and
        [method@Gtk.Printer.request_details].

        Parameters:


        Returns:
            PrintCapabilities: the printer’s capabilities

        """
        ...

    def get_default_page_size(self) -> PageSetup:
        """
        Returns default page size of @printer.

        Parameters:


        Returns:
            PageSetup: a newly allocated `GtkPageSetup` with default page size
        of the printer.

        """
        ...

    def get_description(self) -> str:
        """
        Gets the description of the printer.

        Parameters:


        Returns:
            str: the description of @printer

        """
        ...

    def get_hard_margins(self) -> Tuple[bool, float, float, float, float]:
        """
        Retrieve the hard margins of @printer.

        These are the margins that define the area at the borders
        of the paper that the printer cannot print to.

        Note: This will not succeed unless the printer’s details are
        available, see [method@Gtk.Printer.has_details] and
        [method@Gtk.Printer.request_details].

        Parameters:


        Returns:
            bool: %TRUE iff the hard margins were retrieved
            float: a location to store the top margin in
            float: a location to store the bottom margin in
            float: a location to store the left margin in
            float: a location to store the right margin in
        """
        ...

    def get_hard_margins_for_paper_size(
        self, paper_size: PaperSize
    ) -> Tuple[bool, float, float, float, float]:
        """
        Retrieve the hard margins of @printer for @paper_size.

        These are the margins that define the area at the borders
        of the paper that the printer cannot print to.

        Note: This will not succeed unless the printer’s details are
        available, see [method@Gtk.Printer.has_details] and
        [method@Gtk.Printer.request_details].

        Parameters:
            paper_size: a `GtkPaperSize`

        Returns:
            bool: %TRUE iff the hard margins were retrieved
            float: a location to store the top margin in
            float: a location to store the bottom margin in
            float: a location to store the left margin in
            float: a location to store the right margin in
        """
        ...

    def get_icon_name(self) -> str:
        """
        Gets the name of the icon to use for the printer.

        Parameters:


        Returns:
            str: the icon name for @printer

        """
        ...

    def get_job_count(self) -> int:
        """
        Gets the number of jobs currently queued on the printer.

        Parameters:


        Returns:
            int: the number of jobs on @printer

        """
        ...

    def get_location(self) -> str:
        """
        Returns a description of the location of the printer.

        Parameters:


        Returns:
            str: the location of @printer

        """
        ...

    def get_name(self) -> str:
        """
        Returns the name of the printer.

        Parameters:


        Returns:
            str: the name of @printer

        """
        ...

    def get_state_message(self) -> str:
        """
        Returns the state message describing the current state
        of the printer.

        Parameters:


        Returns:
            str: the state message of @printer

        """
        ...

    def has_details(self) -> bool:
        """
        Returns whether the printer details are available.

        Parameters:


        Returns:
            bool: %TRUE if @printer details are available

        """
        ...

    def is_accepting_jobs(self) -> bool:
        """
        Returns whether the printer is accepting jobs

        Parameters:


        Returns:
            bool: %TRUE if @printer is accepting jobs

        """
        ...

    def is_active(self) -> bool:
        """
        Returns whether the printer is currently active (i.e.
        accepts new jobs).

        Parameters:


        Returns:
            bool: %TRUE if @printer is active

        """
        ...

    def is_default(self) -> bool:
        """
        Returns whether the printer is the default printer.

        Parameters:


        Returns:
            bool: %TRUE if @printer is the default

        """
        ...

    def is_paused(self) -> bool:
        """
        Returns whether the printer is currently paused.

        A paused printer still accepts jobs, but it is not
        printing them.

        Parameters:


        Returns:
            bool: %TRUE if @printer is paused

        """
        ...

    def is_virtual(self) -> bool:
        """
        Returns whether the printer is virtual (i.e. does not
        represent actual printer hardware, but something like
        a CUPS class).

        Parameters:


        Returns:
            bool: %TRUE if @printer is virtual

        """
        ...

    def list_papers(self) -> list[PageSetup]:
        """
        Lists all the paper sizes @printer supports.

        This will return and empty list unless the printer’s details
        are available, see [method@Gtk.Printer.has_details] and
        [method@Gtk.Printer.request_details].

        Parameters:


        Returns:
            list[PageSetup]: a newly
        allocated list of newly allocated `GtkPageSetup`s.

        """
        ...

    @classmethod
    def new(cls, name: str, backend: PrintBackend, virtual_: bool) -> Printer:
        """
        Creates a new `GtkPrinter`.

        Parameters:
            name: the name of the printer
            backend: a `GtkPrintBackend`
            virtual_: whether the printer is virtual

        Returns:
            Printer: a new `GtkPrinter`

        """
        ...

    def request_details(self) -> None:
        """
        Requests the printer details.

        When the details are available, the
        [signal@Gtk.Printer::details-acquired] signal
        will be emitted on @printer.

        Parameters:


        Returns:

        """
        ...

class ProgressBar(
    Widget, Accessible, AccessibleRange, Buildable, ConstraintTarget, Orientable
):
    """
    `GtkProgressBar` is typically used to display the progress of a long
    running operation.

    It provides a visual clue that processing is underway. `GtkProgressBar`
    can be used in two different modes: percentage mode and activity mode.

    ![An example GtkProgressBar](progressbar.png)

    When an application can determine how much work needs to take place
    (e.g. read a fixed number of bytes from a file) and can monitor its
    progress, it can use the `GtkProgressBar` in percentage mode and the
    user sees a growing bar indicating the percentage of the work that
    has been completed. In this mode, the application is required to call
    [method@Gtk.ProgressBar.set_fraction] periodically to update the progress bar.

    When an application has no accurate way of knowing the amount of work
    to do, it can use the `GtkProgressBar` in activity mode, which shows
    activity by a block moving back and forth within the progress area. In
    this mode, the application is required to call [method@Gtk.ProgressBar.pulse]
    periodically to update the progress bar.

    There is quite a bit of flexibility provided to control the appearance
    of the `GtkProgressBar`. Functions are provided to control the orientation
    of the bar, optional text can be displayed along with the bar, and the
    step size used in activity mode can be set.

    # CSS nodes

    ```
    progressbar[.osd]
    ├── [text]
    ╰── trough[.empty][.full]
    ╰── progress[.pulse]
    ```

    `GtkProgressBar` has a main CSS node with name progressbar and subnodes with
    names text and trough, of which the latter has a subnode named progress. The
    text subnode is only present if text is shown. The progress subnode has the
    style class .pulse when in activity mode. It gets the style classes .left,
    .right, .top or .bottom added when the progress 'touches' the corresponding
    end of the GtkProgressBar. The .osd class on the progressbar node is for use
    in overlays like the one Epiphany has for page loading progress.

    # Accessibility

    `GtkProgressBar` uses the %GTK_ACCESSIBLE_ROLE_PROGRESS_BAR role.

    :Constructors:

    ::

        ProgressBar(**properties)
        new() -> Gtk.Widget

    Object GtkProgressBar

    Properties from GtkProgressBar:
      fraction -> gdouble: fraction
      pulse-step -> gdouble: pulse-step
      inverted -> gboolean: inverted
      text -> gchararray: text
      show-text -> gboolean: show-text
      ellipsize -> PangoEllipsizeMode: ellipsize

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        AccessibleRange.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        ellipsize: Pango.EllipsizeMode
        """
        The preferred place to ellipsize the string.

        The text will be ellipsized if the progress bar does not have enough room
        to display the entire string, specified as a `PangoEllipsizeMode`.

        Note that setting this property to a value other than
        %PANGO_ELLIPSIZE_NONE has the side-effect that the progress bar requests
        only enough space to display the ellipsis (\"...\"). Another means to set a
        progress bar's width is [method@Gtk.Widget.set_size_request].
        """
        fraction: float
        """
        The fraction of total work that has been completed.
        """
        inverted: bool
        """
        Invert the direction in which the progress bar grows.
        """
        pulse_step: float
        """
        The fraction of total progress to move the bounding block when pulsed.
        """
        show_text: bool
        """
        Sets whether the progress bar will show a text in addition
        to the bar itself.

        The shown text is either the value of the [property@Gtk.ProgressBar:text]
        property or, if that is %NULL, the [property@Gtk.ProgressBar:fraction]
        value, as a percentage.

        To make a progress bar that is styled and sized suitably for showing text
        (even if the actual text is blank), set [property@Gtk.ProgressBar:show-text]
        to %TRUE and [property@Gtk.ProgressBar:text] to the empty string (not %NULL).
        """
        text: Optional[str]
        """
        Text to be displayed in the progress bar.
        """

    props: Props = ...
    def __init__(
        self,
        ellipsize: Pango.EllipsizeMode = ...,
        fraction: float = ...,
        inverted: bool = ...,
        pulse_step: float = ...,
        show_text: bool = ...,
        text: Optional[str] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def get_ellipsize(self) -> Pango.EllipsizeMode:
        """
        Returns the ellipsizing position of the progress bar.

        See [method@Gtk.ProgressBar.set_ellipsize].

        Parameters:


        Returns:
            Pango.EllipsizeMode: `PangoEllipsizeMode`

        """
        ...

    def get_fraction(self) -> float:
        """
        Returns the current fraction of the task that’s been completed.

        Parameters:


        Returns:
            float: a fraction from 0.0 to 1.0

        """
        ...

    def get_inverted(self) -> bool:
        """
        Returns whether the progress bar is inverted.

        Parameters:


        Returns:
            bool: %TRUE if the progress bar is inverted

        """
        ...

    def get_pulse_step(self) -> float:
        """
        Retrieves the pulse step.

        See [method@Gtk.ProgressBar.set_pulse_step].

        Parameters:


        Returns:
            float: a fraction from 0.0 to 1.0

        """
        ...

    def get_show_text(self) -> bool:
        """
        Returns whether the `GtkProgressBar` shows text.

        See [method@Gtk.ProgressBar.set_show_text].

        Parameters:


        Returns:
            bool: %TRUE if text is shown in the progress bar

        """
        ...

    def get_text(self) -> Optional[str]:
        """
        Retrieves the text that is displayed with the progress bar.

        The return value is a reference to the text, not a copy of it,
        so will become invalid if you change the text in the progress bar.

        Parameters:


        Returns:
            Optional[str]: the text

        """
        ...

    @classmethod
    def new(cls) -> ProgressBar:
        """
        Creates a new `GtkProgressBar`.

        Parameters:


        Returns:
            Widget: a `GtkProgressBar`.

        """
        ...

    def pulse(self) -> None:
        """
        Indicates that some progress has been made, but you don’t know how much.

        Causes the progress bar to enter “activity mode,” where a block
        bounces back and forth. Each call to [method@Gtk.ProgressBar.pulse]
        causes the block to move by a little bit (the amount of movement
        per pulse is determined by [method@Gtk.ProgressBar.set_pulse_step]).

        Parameters:


        Returns:

        """
        ...

    def set_ellipsize(self, mode: Pango.EllipsizeMode) -> None:
        """
        Sets the mode used to ellipsize the text.

        The text is ellipsized if there is not enough space
        to render the entire string.

        Parameters:
            mode: a `PangoEllipsizeMode`

        Returns:

        """
        ...

    def set_fraction(self, fraction: float) -> None:
        """
        Causes the progress bar to “fill in” the given fraction
        of the bar.

        The fraction should be between 0.0 and 1.0, inclusive.

        Parameters:
            fraction: fraction of the task that’s been completed

        Returns:

        """
        ...

    def set_inverted(self, inverted: bool) -> None:
        """
        Sets whether the progress bar is inverted.

        Progress bars normally grow from top to bottom or left to right.
        Inverted progress bars grow in the opposite direction.

        Parameters:
            inverted: %TRUE to invert the progress bar

        Returns:

        """
        ...

    def set_pulse_step(self, fraction: float) -> None:
        """
        Sets the fraction of total progress bar length to move the
        bouncing block.

        The bouncing block is moved when [method@Gtk.ProgressBar.pulse]
        is called.

        Parameters:
            fraction: fraction between 0.0 and 1.0

        Returns:

        """
        ...

    def set_show_text(self, show_text: bool) -> None:
        """
        Sets whether the progress bar will show text next to the bar.

        The shown text is either the value of the [property@Gtk.ProgressBar:text]
        property or, if that is %NULL, the [property@Gtk.ProgressBar:fraction] value,
        as a percentage.

        To make a progress bar that is styled and sized suitably for containing
        text (even if the actual text is blank), set [property@Gtk.ProgressBar:show-text]
        to %TRUE and [property@Gtk.ProgressBar:text] to the empty string (not %NULL).

        Parameters:
            show_text: whether to show text

        Returns:

        """
        ...

    def set_text(self, text: Optional[str] = None) -> None:
        """
        Causes the given @text to appear next to the progress bar.

        If @text is %NULL and [property@Gtk.ProgressBar:show-text] is %TRUE,
        the current value of [property@Gtk.ProgressBar:fraction] will be displayed
        as a percentage.

        If @text is non-%NULL and [property@Gtk.ProgressBar:show-text] is %TRUE,
        the text will be displayed. In this case, it will not display the progress
        percentage. If @text is the empty string, the progress bar will still
        be styled and sized suitably for containing text, as long as
        [property@Gtk.ProgressBar:show-text] is %TRUE.

        Parameters:
            text: a UTF-8 string

        Returns:

        """
        ...

class PropertyExpression(Expression):
    """
    A `GObject` property value in a `GtkExpression`.

    :Constructors:

    ::

        PropertyExpression(**properties)
        new(this_type:GType, expression:Gtk.Expression=None, property_name:str) -> Gtk.PropertyExpression
        new_for_pspec(expression:Gtk.Expression=None, pspec:GObject.ParamSpec) -> Gtk.PropertyExpression
    """

    class Props(Expression.Props): ...

    def get_expression(self) -> Optional[Expression]:
        """
        Gets the expression specifying the object of
        a property expression.

        Parameters:


        Returns:
            Optional[Expression]: the object expression

        """
        ...

    def get_pspec(self) -> GObject.ParamSpec:
        """
        Gets the `GParamSpec` specifying the property of
        a property expression.

        Parameters:


        Returns:
            GObject.ParamSpec: the `GParamSpec` for the property

        """
        ...

    @classmethod
    def new(
        cls, this_type: Type, expression: Optional[Expression], property_name: str
    ) -> PropertyExpression:
        """
        Creates an expression that looks up a property.

        The object to use is found by evaluating the `expression`,
        or using the `this` argument when `expression` is `NULL`.

        If the resulting object conforms to `this_type`, its property named
        `property_name` will be queried. Otherwise, this expression's
        evaluation will fail.

        The given `this_type` must have a property with `property_name`.

        Parameters:
            this_type: The type to expect for the this type
            expression: Expression to
        evaluate to get the object to query or `NULL` to
        query the `this` object
            property_name: name of the property

        Returns:
            PropertyExpression: a new `GtkExpression`

        """
        ...

    @classmethod
    def new_for_pspec(
        cls, expression: Optional[Expression], pspec: GObject.ParamSpec
    ) -> PropertyExpression:
        """
        Creates an expression that looks up a property.

        The object to use is found by evaluating the `expression`,
        or using the `this` argument when `expression` is `NULL`.

        If the resulting object conforms to `this_type`, its
        property specified by `pspec` will be queried.
        Otherwise, this expression's evaluation will fail.

        Parameters:
            expression: Expression to
        evaluate to get the object to query or `NULL` to
        query the `this` object
            pspec: the `GParamSpec` for the property to query

        Returns:
            PropertyExpression: a new `GtkExpression`

        """
        ...

class PyGTKDeprecationWarning:
    class Props: ...
    args = ...  # FIXME Constant

    def add_note(self, *args, **kwargs): ...  # FIXME Function
    def with_traceback(self, *args, **kwargs): ...  # FIXME Function

class Range(
    Widget, Accessible, AccessibleRange, Buildable, ConstraintTarget, Orientable
):
    """
    `GtkRange` is the common base class for widgets which visualize an
    adjustment.

    Widgets that are derived from `GtkRange` include
    [class@Gtk.Scale] and [class@Gtk.Scrollbar].

    Apart from signals for monitoring the parameters of the adjustment,
    `GtkRange` provides properties and methods for setting a
    “fill level” on range widgets. See [method@Gtk.Range.set_fill_level].

    :Constructors:

    ::

        Range(**properties)

    Object GtkRange

    Signals from GtkRange:
      value-changed ()
      adjust-bounds (gdouble)
      move-slider (GtkScrollType)
      change-value (GtkScrollType, gdouble) -> gboolean

    Properties from GtkRange:
      adjustment -> GtkAdjustment: adjustment
      inverted -> gboolean: inverted
      show-fill-level -> gboolean: show-fill-level
      restrict-to-fill-level -> gboolean: restrict-to-fill-level
      fill-level -> gdouble: fill-level
      round-digits -> gint: round-digits

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        AccessibleRange.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        adjustment: Adjustment
        """
        The adjustment that is controlled by the range.
        """
        fill_level: float
        """
        The fill level (e.g. prebuffering of a network stream).
        """
        inverted: bool
        """
        If %TRUE, the direction in which the slider moves is inverted.
        """
        restrict_to_fill_level: bool
        """
        Controls whether slider movement is restricted to an
        upper boundary set by the fill level.
        """
        round_digits: int
        """
        The number of digits to round the value to when
        it changes.

        See [signal@Gtk.Range::change-value].
        """
        show_fill_level: bool
        """
        Controls whether fill level indicator graphics are displayed
        on the trough.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        adjustment: Adjustment = ...,
        fill_level: float = ...,
        inverted: bool = ...,
        restrict_to_fill_level: bool = ...,
        round_digits: int = ...,
        show_fill_level: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def do_adjust_bounds(self, new_value: float) -> None: ...
    def do_change_value(self, scroll: ScrollType, new_value: float) -> bool: ...
    def do_get_range_border(self, border_: Border) -> None: ...
    def do_move_slider(self, scroll: ScrollType) -> None: ...
    def do_value_changed(self) -> None: ...
    def get_adjustment(self) -> Adjustment:
        """
        Get the adjustment which is the “model” object for `GtkRange`.

        Parameters:


        Returns:
            Adjustment: a `GtkAdjustment`

        """
        ...

    def get_fill_level(self) -> float:
        """
        Gets the current position of the fill level indicator.

        Parameters:


        Returns:
            float: The current fill level

        """
        ...

    def get_flippable(self) -> bool:
        """
        Gets whether the `GtkRange` respects text direction.

        See [method@Gtk.Range.set_flippable].

        Parameters:


        Returns:
            bool: %TRUE if the range is flippable

        """
        ...

    def get_inverted(self) -> bool:
        """
        Gets whether the range is inverted.

        See [method@Gtk.Range.set_inverted].

        Parameters:


        Returns:
            bool: %TRUE if the range is inverted

        """
        ...

    def get_range_rect(self) -> Gdk.Rectangle:
        """
        This function returns the area that contains the range’s trough,
        in coordinates relative to @range's origin.

        This function is useful mainly for `GtkRange` subclasses.

        Parameters:


        Returns:
            Gdk.Rectangle: return location for the range rectangle
        """
        ...

    def get_restrict_to_fill_level(self) -> bool:
        """
        Gets whether the range is restricted to the fill level.

        Parameters:


        Returns:
            bool: %TRUE if @range is restricted to the fill level.

        """
        ...

    def get_round_digits(self) -> int:
        """
        Gets the number of digits to round the value to when
        it changes.

        See [signal@Gtk.Range::change-value].

        Parameters:


        Returns:
            int: the number of digits to round to

        """
        ...

    def get_show_fill_level(self) -> bool:
        """
        Gets whether the range displays the fill level graphically.

        Parameters:


        Returns:
            bool: %TRUE if @range shows the fill level.

        """
        ...

    def get_slider_range(self) -> Tuple[int, int]:
        """
        This function returns sliders range along the long dimension,
        in widget->window coordinates.

        This function is useful mainly for `GtkRange` subclasses.

        Parameters:


        Returns:
            int: return location for the slider's start
            int: return location for the slider's end
        """
        ...

    def get_slider_size_fixed(self) -> bool:
        """
        This function is useful mainly for `GtkRange` subclasses.

        See [method@Gtk.Range.set_slider_size_fixed].

        Parameters:


        Returns:
            bool: whether the range’s slider has a fixed size.

        """
        ...

    def get_value(self) -> float:
        """
        Gets the current value of the range.

        Parameters:


        Returns:
            float: current value of the range.

        """
        ...

    def set_adjustment(self, adjustment: Adjustment) -> None:
        """
        Sets the adjustment to be used as the “model” object for the `GtkRange`

        The adjustment indicates the current range value, the minimum and
        maximum range values, the step/page increments used for keybindings
        and scrolling, and the page size.

        The page size is normally 0 for `GtkScale` and nonzero for `GtkScrollbar`,
        and indicates the size of the visible area of the widget being scrolled.
        The page size affects the size of the scrollbar slider.

        Parameters:
            adjustment: a `GtkAdjustment`

        Returns:

        """
        ...

    def set_fill_level(self, fill_level: float) -> None:
        """
        Set the new position of the fill level indicator.

        The “fill level” is probably best described by its most prominent
        use case, which is an indicator for the amount of pre-buffering in
        a streaming media player. In that use case, the value of the range
        would indicate the current play position, and the fill level would
        be the position up to which the file/stream has been downloaded.

        This amount of prebuffering can be displayed on the range’s trough
        and is themeable separately from the trough. To enable fill level
        display, use [method@Gtk.Range.set_show_fill_level]. The range defaults
        to not showing the fill level.

        Additionally, it’s possible to restrict the range’s slider position
        to values which are smaller than the fill level. This is controlled
        by [method@Gtk.Range.set_restrict_to_fill_level] and is by default
        enabled.

        Parameters:
            fill_level: the new position of the fill level indicator

        Returns:

        """
        ...

    def set_flippable(self, flippable: bool) -> None:
        """
        Sets whether the `GtkRange` respects text direction.

        If a range is flippable, it will switch its direction
        if it is horizontal and its direction is %GTK_TEXT_DIR_RTL.

        See [method@Gtk.Widget.get_direction].

        Parameters:
            flippable: %TRUE to make the range flippable

        Returns:

        """
        ...

    def set_increments(self, step: float, page: float) -> None:
        """
        Sets the step and page sizes for the range.

        The step size is used when the user clicks the `GtkScrollbar`
        arrows or moves a `GtkScale` via arrow keys. The page size
        is used for example when moving via Page Up or Page Down keys.

        Parameters:
            step: step size
            page: page size

        Returns:

        """
        ...

    def set_inverted(self, setting: bool) -> None:
        """
        Sets whether to invert the range.

        Ranges normally move from lower to higher values as the
        slider moves from top to bottom or left to right. Inverted
        ranges have higher values at the top or on the right rather
        than on the bottom or left.

        Parameters:
            setting: %TRUE to invert the range

        Returns:

        """
        ...

    def set_range(self, min: float, max: float) -> None:
        """
        Sets the allowable values in the `GtkRange`.

        The range value is clamped to be between @min and @max.
        (If the range has a non-zero page size, it is clamped
        between @min and @max - page-size.)

        Parameters:
            min: minimum range value
            max: maximum range value

        Returns:

        """
        ...

    def set_restrict_to_fill_level(self, restrict_to_fill_level: bool) -> None:
        """
        Sets whether the slider is restricted to the fill level.

        See [method@Gtk.Range.set_fill_level] for a general description
        of the fill level concept.

        Parameters:
            restrict_to_fill_level: Whether the fill level restricts slider movement.

        Returns:

        """
        ...

    def set_round_digits(self, round_digits: int) -> None:
        """
        Sets the number of digits to round the value to when
        it changes.

        See [signal@Gtk.Range::change-value].

        Parameters:
            round_digits: the precision in digits, or -1

        Returns:

        """
        ...

    def set_show_fill_level(self, show_fill_level: bool) -> None:
        """
        Sets whether a graphical fill level is show on the trough.

        See [method@Gtk.Range.set_fill_level] for a general description
        of the fill level concept.

        Parameters:
            show_fill_level: Whether a fill level indicator graphics is shown.

        Returns:

        """
        ...

    def set_slider_size_fixed(self, size_fixed: bool) -> None:
        """
        Sets whether the range’s slider has a fixed size, or a size that
        depends on its adjustment’s page size.

        This function is useful mainly for `GtkRange` subclasses.

        Parameters:
            size_fixed: %TRUE to make the slider size constant

        Returns:

        """
        ...

    def set_value(self, value: float) -> None:
        """
        Sets the current value of the range.

        If the value is outside the minimum or maximum range values,
        it will be clamped to fit inside them. The range emits the
        [signal@Gtk.Range::value-changed] signal if the value changes.

        Parameters:
            value: new value of the range

        Returns:

        """
        ...

class RangeClass(GObject.GPointer):
    """
    :Constructors:

    ::

        RangeClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    value_changed: Callable[[Range], None] = ...
    adjust_bounds: Callable[[Range, float], None] = ...
    move_slider: Callable[[Range, ScrollType], None] = ...
    get_range_border: Callable[[Range, Border], None] = ...
    change_value: Callable[[Range, ScrollType, float], bool] = ...
    padding: list[None] = ...

class RecentData(GObject.GPointer):
    """
    Meta-data to be passed to gtk_recent_manager_add_full() when
    registering a recently used resource.

    :Constructors:

    ::

        RecentData()
    """

    class Props(GObject.GPointer.Props): ...
    display_name: str = ...
    description: str = ...
    mime_type: str = ...
    app_name: str = ...
    app_exec: str = ...
    groups: list[str] = ...
    is_private: bool = ...

class RecentInfo(GObject.GBoxed):
    """
    `GtkRecentInfo` contains the metadata associated with an item in the
    recently used files list.
    """

    class Props(GObject.GBoxed.Props): ...

    def create_app_info(self, app_name: Optional[str] = None) -> Optional[Gio.AppInfo]:
        """
        Creates a `GAppInfo` for the specified `GtkRecentInfo`

        In case of error, @error will be set either with a
        %GTK_RECENT_MANAGER_ERROR or a %G_IO_ERROR

        Parameters:
            app_name: the name of the application that should
        be mapped to a `GAppInfo`; if %NULL is used then the default
        application for the MIME type is used

        Returns:
            Optional[Gio.AppInfo]: the newly created `GAppInfo`

        """
        ...

    def exists(self) -> bool:
        """
        Checks whether the resource pointed by @info still exists.
        At the moment this check is done only on resources pointing
        to local files.

        Parameters:


        Returns:
            bool: %TRUE if the resource exists

        """
        ...

    def get_added(self) -> GLib.DateTime:
        """
        Gets the time when the resource
        was added to the recently used resources list.

        Parameters:


        Returns:
            GLib.DateTime: a `GDateTime` for the time
        when the resource was added

        """
        ...

    def get_age(self) -> int:
        """
        Gets the number of days elapsed since the last update
        of the resource pointed by @info.

        Parameters:


        Returns:
            int: a positive integer containing the number of days
        elapsed since the time this resource was last modified

        """
        ...

    def get_application_info(
        self, app_name: str
    ) -> Optional[Tuple[str, int, GLib.DateTime]]:  # CHECK Wrapped function
        """
        Gets the data regarding the application that has registered the resource
        pointed by @info.

        If the command line contains any escape characters defined inside the
        storage specification, they will be expanded.

        Parameters:
            app_name: the name of the application that has registered this item

        Returns:
            str: return location for the string containing
        the command line
            int: return location for the number of times this item was registered
            GLib.DateTime: return location for the time this item was last
        registered for this application
        """
        ...

    def get_applications(self) -> list[str]:
        """
        Retrieves the list of applications that have registered this resource.

        Parameters:


        Returns:
            list[str]: a newly
        allocated %NULL-terminated array of strings. Use g_strfreev() to free it.

        """
        ...

    def get_description(self) -> str:
        """
        Gets the (short) description of the resource.

        Parameters:


        Returns:
            str: the description of the resource. The returned string
        is owned by the recent manager, and should not be freed.

        """
        ...

    def get_display_name(self) -> str:
        """
        Gets the name of the resource.

        If none has been defined, the basename
        of the resource is obtained.

        Parameters:


        Returns:
            str: the display name of the resource. The returned string
        is owned by the recent manager, and should not be freed.

        """
        ...

    def get_gicon(self) -> Optional[Gio.Icon]:
        """
        Retrieves the icon associated to the resource MIME type.

        Parameters:


        Returns:
            Optional[Gio.Icon]: a `GIcon` containing the icon

        """
        ...

    def get_groups(self) -> list[str]:
        """
        Returns all groups registered for the recently used item @info.

        The array of returned group names will be %NULL terminated, so
        length might optionally be %NULL.

        Parameters:


        Returns:
            list[str]:
        a newly allocated %NULL terminated array of strings.
        Use g_strfreev() to free it.

        """
        ...

    def get_mime_type(self) -> str:
        """
        Gets the MIME type of the resource.

        Parameters:


        Returns:
            str: the MIME type of the resource. The returned string
        is owned by the recent manager, and should not be freed.

        """
        ...

    def get_modified(self) -> GLib.DateTime:
        """
        Gets the time when the meta-data
        for the resource was last modified.

        Parameters:


        Returns:
            GLib.DateTime: a `GDateTime` for the time
        when the resource was last modified

        """
        ...

    def get_private_hint(self) -> bool:
        """
        Gets the value of the “private” flag.

        Resources in the recently used list that have this flag
        set to %TRUE should only be displayed by the applications
        that have registered them.

        Parameters:


        Returns:
            bool: %TRUE if the private flag was found, %FALSE otherwise

        """
        ...

    def get_short_name(self) -> str:
        """
        Computes a valid UTF-8 string that can be used as the
        name of the item in a menu or list.

        For example, calling this function on an item that refers
        to “file:///foo/bar.txt” will yield “bar.txt”.

        Parameters:


        Returns:
            str: A newly-allocated string in UTF-8 encoding
        free it with g_free()

        """
        ...

    def get_uri(self) -> str:
        """
        Gets the URI of the resource.

        Parameters:


        Returns:
            str: the URI of the resource. The returned string is
        owned by the recent manager, and should not be freed.

        """
        ...

    def get_uri_display(self) -> Optional[str]:
        """
        Gets a displayable version of the resource’s URI.

        If the resource is local, it returns a local path; if the
        resource is not local, it returns the UTF-8 encoded content
        of [method@Gtk.RecentInfo.get_uri].

        Parameters:


        Returns:
            Optional[str]: a newly allocated UTF-8 string containing the
        resource’s URI or %NULL. Use g_free() when done using it.

        """
        ...

    def get_visited(self) -> GLib.DateTime:
        """
        Gets the time when the meta-data
        for the resource was last visited.

        Parameters:


        Returns:
            GLib.DateTime: a `GDateTime` for the time
        when the resource was last visited

        """
        ...

    def has_application(self, app_name: str) -> bool:
        """
        Checks whether an application registered this resource using @app_name.

        Parameters:
            app_name: a string containing an application name

        Returns:
            bool: %TRUE if an application with name @app_name was found,
        %FALSE otherwise

        """
        ...

    def has_group(self, group_name: str) -> bool:
        """
        Checks whether @group_name appears inside the groups
        registered for the recently used item @info.

        Parameters:
            group_name: name of a group

        Returns:
            bool: %TRUE if the group was found

        """
        ...

    def is_local(self) -> bool:
        """
        Checks whether the resource is local or not by looking at the
        scheme of its URI.

        Parameters:


        Returns:
            bool: %TRUE if the resource is local

        """
        ...

    def last_application(self) -> str:
        """
        Gets the name of the last application that have registered the
        recently used resource represented by @info.

        Parameters:


        Returns:
            str: an application name. Use g_free() to free it.

        """
        ...

    def match(self, info_b: RecentInfo) -> bool:
        """
        Checks whether two `GtkRecentInfo` point to the same resource.

        Parameters:
            info_b: a `GtkRecentInfo`

        Returns:
            bool: %TRUE if both `GtkRecentInfo` point to the same
        resource, %FALSE otherwise

        """
        ...

    def ref(self) -> RecentInfo:
        """
        Increases the reference count of @recent_info by one.

        Parameters:


        Returns:
            RecentInfo: the recent info object with its reference count
        increased by one

        """
        ...

    def unref(self) -> None:
        """
        Decreases the reference count of @info by one.

        If the reference count reaches zero, @info is
        deallocated, and the memory freed.

        Parameters:


        Returns:

        """
        ...

class RecentManager(GObject.Object):
    """
    `GtkRecentManager` manages and looks up recently used files.

    Each recently used file is identified by its URI, and has meta-data
    associated to it, like the names and command lines of the applications
    that have registered it, the number of time each application has
    registered the same file, the mime type of the file and whether
    the file should be displayed only by the applications that have
    registered it.

    The recently used files list is per user.

    `GtkRecentManager` acts like a database of all the recently
    used files. You can create new `GtkRecentManager` objects, but
    it is more efficient to use the default manager created by GTK.

    Adding a new recently used file is as simple as:

    ```c
    GtkRecentManager *manager;

    manager = gtk_recent_manager_get_default ();
    gtk_recent_manager_add_item (manager, file_uri);
    ```

    The `GtkRecentManager` will try to gather all the needed information
    from the file itself through GIO.

    Looking up the meta-data associated with a recently used file
    given its URI requires calling [method@Gtk.RecentManager.lookup_item]:

    ```c
    GtkRecentManager *manager;
    GtkRecentInfo *info;
    GError *error = NULL;

    manager = gtk_recent_manager_get_default ();
    info = gtk_recent_manager_lookup_item (manager, file_uri, &error);
    if (error)
    {
    g_warning (\"Could not find the file: %s\", error->message);
    g_error_free (error);
    }
    else
    {
    // Use the info object
    gtk_recent_info_unref (info);
    }
    ```

    In order to retrieve the list of recently used files, you can use
    [method@Gtk.RecentManager.get_items], which returns a list of
    [struct@Gtk.RecentInfo].

    Note that the maximum age of the recently used files list is
    controllable through the [property@Gtk.Settings:gtk-recent-files-max-age]
    property.

    :Constructors:

    ::

        RecentManager(**properties)
        new() -> Gtk.RecentManager

    Object GtkRecentManager

    Signals from GtkRecentManager:
      changed ()

    Properties from GtkRecentManager:
      filename -> gchararray: filename
      size -> gint: size

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        filename: str
        """
        The full path to the file to be used to store and read the
        recently used resources list
        """
        size: int
        """
        The size of the recently used resources list.
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    priv: RecentManagerPrivate = ...
    def __init__(self, filename: str = ...): ...
    def add_full(self, uri: str, recent_data: RecentData) -> bool:
        """
        Adds a new resource, pointed by @uri, into the recently used
        resources list, using the metadata specified inside the
        `GtkRecentData` passed in @recent_data.

        The passed URI will be used to identify this resource inside the
        list.

        In order to register the new recently used resource, metadata about
        the resource must be passed as well as the URI; the metadata is
        stored in a `GtkRecentData`, which must contain the MIME
        type of the resource pointed by the URI; the name of the application
        that is registering the item, and a command line to be used when
        launching the item.

        Optionally, a `GtkRecentData` might contain a UTF-8 string
        to be used when viewing the item instead of the last component of
        the URI; a short description of the item; whether the item should
        be considered private - that is, should be displayed only by the
        applications that have registered it.

        Parameters:
            uri: a valid URI
            recent_data: metadata of the resource

        Returns:
            bool: %TRUE if the new item was successfully added to the
        recently used resources list, %FALSE otherwise

        """
        ...

    def add_item(self, uri: str) -> bool:
        """
        Adds a new resource, pointed by @uri, into the recently used
        resources list.

        This function automatically retrieves some of the needed
        metadata and setting other metadata to common default values;
        it then feeds the data to [method@Gtk.RecentManager.add_full].

        See [method@Gtk.RecentManager.add_full] if you want to explicitly
        define the metadata for the resource pointed by @uri.

        Parameters:
            uri: a valid URI

        Returns:
            bool: %TRUE if the new item was successfully added
        to the recently used resources list

        """
        ...

    def do_changed(self) -> None: ...
    @staticmethod
    def get_default() -> RecentManager:
        """
        Gets a unique instance of `GtkRecentManager` that you can share
        in your application without caring about memory management.

        Parameters:


        Returns:
            RecentManager: A unique `GtkRecentManager`. Do not ref or
        unref it.

        """
        ...

    def get_items(self) -> list[RecentInfo]:
        """
        Gets the list of recently used resources.

        Parameters:


        Returns:
            list[RecentInfo]: a list of
        newly allocated `GtkRecentInfo objects`. Use
        [method@Gtk.RecentInfo.unref] on each item inside the list, and then
        free the list itself using g_list_free().

        """
        ...

    def has_item(self, uri: str) -> bool:
        """
        Checks whether there is a recently used resource registered
        with @uri inside the recent manager.

        Parameters:
            uri: a URI

        Returns:
            bool: %TRUE if the resource was found, %FALSE otherwise

        """
        ...

    def lookup_item(self, uri: str) -> Optional[RecentInfo]:
        """
        Searches for a URI inside the recently used resources list, and
        returns a `GtkRecentInfo` containing information about the resource
        like its MIME type, or its display name.

        Parameters:
            uri: a URI

        Returns:
            Optional[RecentInfo]: a `GtkRecentInfo` containing information
        about the resource pointed by @uri, or %NULL if the URI was
        not registered in the recently used resources list. Free with
        [method@Gtk.RecentInfo.unref].

        """
        ...

    def move_item(self, uri: str, new_uri: Optional[str] = None) -> bool:
        """
        Changes the location of a recently used resource from @uri to @new_uri.

        Please note that this function will not affect the resource pointed
        by the URIs, but only the URI used in the recently used resources list.

        Parameters:
            uri: the URI of a recently used resource
            new_uri: the new URI of the recently used resource, or
        %NULL to remove the item pointed by @uri in the list

        Returns:
            bool: %TRUE on success

        """
        ...

    @classmethod
    def new(cls) -> RecentManager:
        """
        Creates a new recent manager object.

        Recent manager objects are used to handle the list of recently used
        resources. A `GtkRecentManager` object monitors the recently used
        resources list, and emits the [signal@Gtk.RecentManager::changed]
        signal each time something inside the list changes.

        `GtkRecentManager` objects are expensive: be sure to create them
        only when needed. You should use [func@Gtk.RecentManager.get_default]
        instead.

        Parameters:


        Returns:
            RecentManager: A newly created `GtkRecentManager` object

        """
        ...

    def purge_items(self) -> int:
        """
        Purges every item from the recently used resources list.

        Parameters:


        Returns:
            int: the number of items that have been removed from the
        recently used resources list

        """
        ...

    def remove_item(self, uri: str) -> bool:
        """
        Removes a resource pointed by @uri from the recently used resources
        list handled by a recent manager.

        Parameters:
            uri: the URI of the item you wish to remove

        Returns:
            bool: %TRUE if the item pointed by @uri has been successfully
        removed by the recently used resources list, and %FALSE otherwise

        """
        ...

class RecentManagerClass(GObject.GPointer):
    """
    `GtkRecentManagerClass` contains only private data.

    :Constructors:

    ::

        RecentManagerClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    changed: Callable[[RecentManager], None] = ...
    _gtk_recent1: None = ...
    _gtk_recent2: None = ...
    _gtk_recent3: None = ...
    _gtk_recent4: None = ...

class RecentManagerPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class RequestedSize(GObject.GPointer):
    """
    Represents a request of a screen object in a given orientation. These
    are primarily used in container implementations when allocating a natural
    size for children calling. See [func@distribute_natural_allocation].

    :Constructors:

    ::

        RequestedSize()
    """

    class Props(GObject.GPointer.Props): ...
    data: None = ...
    minimum_size: int = ...
    natural_size: int = ...

class Requisition(GObject.GBoxed):
    """
    A `GtkRequisition` represents the desired size of a widget. See
    [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
    more information.

    :Constructors:

    ::

        Requisition()
        new() -> Gtk.Requisition
    """

    class Props(GObject.GBoxed.Props): ...
    width: int = ...
    height: int = ...
    def copy(self) -> Requisition:
        """
        Copies a `GtkRequisition`.

        Parameters:


        Returns:
            Requisition: a copy of @requisition

        """
        ...

    def free(self) -> None:
        """
        Frees a `GtkRequisition`.

        Parameters:


        Returns:

        """
        ...

    @classmethod
    def new(cls) -> Requisition:
        """
        Allocates a new `GtkRequisition`.

        The struct is initialized to zero.

        Parameters:


        Returns:
            Requisition: a new empty `GtkRequisition`. The newly
        allocated `GtkRequisition` should be freed with
        [method@Gtk.Requisition.free]

        """
        ...

class Revealer(Widget, Accessible, Buildable, ConstraintTarget):
    """
    A `GtkRevealer` animates the transition of its child from invisible to visible.

    The style of transition can be controlled with
    [method@Gtk.Revealer.set_transition_type].

    These animations respect the [property@Gtk.Settings:gtk-enable-animations]
    setting.

    # CSS nodes

    `GtkRevealer` has a single CSS node with name revealer.
    When styling `GtkRevealer` using CSS, remember that it only hides its contents,
    not itself. That means applied margin, padding and borders will be visible even
    when the [property@Gtk.Revealer:reveal-child] property is set to %FALSE.

    # Accessibility

    `GtkRevealer` uses the %GTK_ACCESSIBLE_ROLE_GROUP role.

    The child of `GtkRevealer`, if set, is always available in the accessibility
    tree, regardless of the state of the revealer widget.

    :Constructors:

    ::

        Revealer(**properties)
        new() -> Gtk.Widget

    Object GtkRevealer

    Properties from GtkRevealer:
      transition-type -> GtkRevealerTransitionType: transition-type
      transition-duration -> guint: transition-duration
      reveal-child -> gboolean: reveal-child
      child-revealed -> gboolean: child-revealed
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        child: Optional[Widget]
        """
        The child widget.
        """
        child_revealed: bool
        """
        Whether the child is revealed and the animation target reached.
        """
        reveal_child: bool
        """
        Whether the revealer should reveal the child.
        """
        transition_duration: int
        """
        The animation duration, in milliseconds.
        """
        transition_type: RevealerTransitionType
        """
        The type of animation used to transition.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        reveal_child: bool = ...,
        transition_duration: int = ...,
        transition_type: RevealerTransitionType = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @revealer.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @revealer

        """
        ...

    def get_child_revealed(self) -> bool:
        """
        Returns whether the child is fully revealed.

        In other words, this returns whether the transition
        to the revealed state is completed.

        Parameters:


        Returns:
            bool: %TRUE if the child is fully revealed

        """
        ...

    def get_reveal_child(self) -> bool:
        """
        Returns whether the child is currently revealed.

        This function returns %TRUE as soon as the transition
        is to the revealed state is started. To learn whether
        the child is fully revealed (ie the transition is completed),
        use [method@Gtk.Revealer.get_child_revealed].

        Parameters:


        Returns:
            bool: %TRUE if the child is revealed.

        """
        ...

    def get_transition_duration(self) -> int:
        """
        Returns the amount of time (in milliseconds) that
        transitions will take.

        Parameters:


        Returns:
            int: the transition duration

        """
        ...

    def get_transition_type(self) -> RevealerTransitionType:
        """
        Gets the type of animation that will be used
        for transitions in @revealer.

        Parameters:


        Returns:
            RevealerTransitionType: the current transition type of @revealer

        """
        ...

    @classmethod
    def new(cls) -> Revealer:
        """
        Creates a new `GtkRevealer`.

        Parameters:


        Returns:
            Widget: a newly created `GtkRevealer`

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @revealer.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_reveal_child(self, reveal_child: bool) -> None:
        """
        Tells the `GtkRevealer` to reveal or conceal its child.

        The transition will be animated with the current
        transition type of @revealer.

        Parameters:
            reveal_child: %TRUE to reveal the child

        Returns:

        """
        ...

    def set_transition_duration(self, duration: int) -> None:
        """
        Sets the duration that transitions will take.

        Parameters:
            duration: the new duration, in milliseconds

        Returns:

        """
        ...

    def set_transition_type(self, transition: RevealerTransitionType) -> None:
        """
        Sets the type of animation that will be used for
        transitions in @revealer.

        Available types include various kinds of fades and slides.

        Parameters:
            transition: the new transition type

        Returns:

        """
        ...

class Root(GObject.GInterface):
    """
    `GtkRoot` is the interface implemented by all widgets that can act as a toplevel
    widget.

    The root widget takes care of providing the connection to the windowing system
    and manages layout, drawing and event delivery for its widget hierarchy.

    The obvious example of a `GtkRoot` is `GtkWindow`.

    To get the display to which a `GtkRoot` belongs, use
    [method@Gtk.Root.get_display].

    `GtkRoot` also maintains the location of keyboard focus inside its widget
    hierarchy, with [method@Gtk.Root.set_focus] and [method@Gtk.Root.get_focus].



    Interface GtkRoot

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def get_display(self) -> Gdk.Display:
        """
        Returns the display that this `GtkRoot` is on.

        Parameters:


        Returns:
            Gdk.Display: the display of @root

        """
        ...

    def get_focus(self) -> Optional[Widget]:
        """
        Retrieves the current focused widget within the root.

        Note that this is the widget that would have the focus
        if the root is active; if the root is not focused then
        `gtk_widget_has_focus (widget)` will be %FALSE for the
        widget.

        Parameters:


        Returns:
            Optional[Widget]: the currently focused widget

        """
        ...

    def set_focus(self, focus: Optional[Widget] = None) -> None:
        """
        If @focus is not the current focus widget, and is focusable, sets
        it as the focus widget for the root.

        If @focus is %NULL, unsets the focus widget for the root.

        To set the focus to a particular widget in the root, it is usually
        more convenient to use [method@Gtk.Widget.grab_focus] instead of
        this function.

        Parameters:
            focus: widget to be the new focus widget, or %NULL
        to unset the focus widget

        Returns:

        """
        ...

class RootInterface(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class Scale(
    Range, Accessible, AccessibleRange, Buildable, ConstraintTarget, Orientable
):
    """
    A `GtkScale` is a slider control used to select a numeric value.

    ![An example GtkScale](scales.png)

    To use it, you’ll probably want to investigate the methods on its base
    class, [class@Gtk.Range], in addition to the methods for `GtkScale` itself.
    To set the value of a scale, you would normally use [method@Gtk.Range.set_value].
    To detect changes to the value, you would normally use the
    [signal@Gtk.Range::value-changed] signal.

    Note that using the same upper and lower bounds for the `GtkScale` (through
    the `GtkRange` methods) will hide the slider itself. This is useful for
    applications that want to show an undeterminate value on the scale, without
    changing the layout of the application (such as movie or music players).

    # GtkScale as GtkBuildable

    `GtkScale` supports a custom `<marks>` element, which can contain multiple
    `<mark\>` elements. The “value” and “position” attributes have the same
    meaning as [method@Gtk.Scale.add_mark] parameters of the same name. If
    the element is not empty, its content is taken as the markup to show at
    the mark. It can be translated with the usual ”translatable” and
    “context” attributes.

    # CSS nodes

    ```
    scale[.fine-tune][.marks-before][.marks-after]
    ├── [value][.top][.right][.bottom][.left]
    ├── marks.top
    │ ├── mark
    │ ┊ ├── [label]
    │ ┊ ╰── indicator
    ┊ ┊
    │ ╰── mark
    ├── marks.bottom
    │ ├── mark
    │ ┊ ├── indicator
    │ ┊ ╰── [label]
    ┊ ┊
    │ ╰── mark
    ╰── trough
    ├── [fill]
    ├── [highlight]
    ╰── slider
    ```

    `GtkScale` has a main CSS node with name scale and a subnode for its contents,
    with subnodes named trough and slider.

    The main node gets the style class .fine-tune added when the scale is in
    'fine-tuning' mode.

    If the scale has an origin (see [method@Gtk.Scale.set_has_origin]), there is
    a subnode with name highlight below the trough node that is used for rendering
    the highlighted part of the trough.

    If the scale is showing a fill level (see [method@Gtk.Range.set_show_fill_level]),
    there is a subnode with name fill below the trough node that is used for
    rendering the filled in part of the trough.

    If marks are present, there is a marks subnode before or after the trough
    node, below which each mark gets a node with name mark. The marks nodes get
    either the .top or .bottom style class.

    The mark node has a subnode named indicator. If the mark has text, it also
    has a subnode named label. When the mark is either above or left of the
    scale, the label subnode is the first when present. Otherwise, the indicator
    subnode is the first.

    The main CSS node gets the 'marks-before' and/or 'marks-after' style classes
    added depending on what marks are present.

    If the scale is displaying the value (see [property@Gtk.Scale:draw-value]),
    there is subnode with name value. This node will get the .top or .bottom style
    classes similar to the marks node.

    # Accessibility

    `GtkScale` uses the %GTK_ACCESSIBLE_ROLE_SLIDER role.

    :Constructors:

    ::

        Scale(**properties)
        new(orientation:Gtk.Orientation, adjustment:Gtk.Adjustment=None) -> Gtk.Widget
        new_with_range(orientation:Gtk.Orientation, min:float, max:float, step:float) -> Gtk.Widget

    Object GtkScale

    Properties from GtkScale:
      digits -> gint: digits
      draw-value -> gboolean: draw-value
      has-origin -> gboolean: has-origin
      value-pos -> GtkPositionType: value-pos

    Signals from GtkRange:
      value-changed ()
      adjust-bounds (gdouble)
      move-slider (GtkScrollType)
      change-value (GtkScrollType, gdouble) -> gboolean

    Properties from GtkRange:
      adjustment -> GtkAdjustment: adjustment
      inverted -> gboolean: inverted
      show-fill-level -> gboolean: show-fill-level
      restrict-to-fill-level -> gboolean: restrict-to-fill-level
      fill-level -> gdouble: fill-level
      round-digits -> gint: round-digits

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Range.Props,
        Accessible.Props,
        AccessibleRange.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        digits: int
        """
        The number of decimal places that are displayed in the value.
        """
        draw_value: bool
        """
        Whether the current value is displayed as a string next to the slider.
        """
        has_origin: bool
        """
        Whether the scale has an origin.
        """
        value_pos: PositionType
        """
        The position in which the current value is displayed.
        """

    props: Props = ...
    parent_instance: Range = ...
    def __init__(
        self,
        digits: int = ...,
        draw_value: bool = ...,
        has_origin: bool = ...,
        value_pos: PositionType = ...,
        adjustment: Adjustment = ...,
        fill_level: float = ...,
        inverted: bool = ...,
        restrict_to_fill_level: bool = ...,
        round_digits: int = ...,
        show_fill_level: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def add_mark(
        self, value: float, position: PositionType, markup: Optional[str] = None
    ) -> None:
        """
        Adds a mark at @value.

        A mark is indicated visually by drawing a tick mark next to the scale,
        and GTK makes it easy for the user to position the scale exactly at the
        marks value.

        If @markup is not %NULL, text is shown next to the tick mark.

        To remove marks from a scale, use [method@Gtk.Scale.clear_marks].

        Parameters:
            value: the value at which the mark is placed, must be between
        the lower and upper limits of the scales’ adjustment
            position: where to draw the mark. For a horizontal scale, %GTK_POS_TOP
        and %GTK_POS_LEFT are drawn above the scale, anything else below.
        For a vertical scale, %GTK_POS_LEFT and %GTK_POS_TOP are drawn to
        the left of the scale, anything else to the right.
            markup: Text to be shown at the mark, using Pango markup

        Returns:

        """
        ...

    def clear_marks(self) -> None:
        """
        Removes any marks that have been added.

        Parameters:


        Returns:

        """
        ...

    def do_get_layout_offsets(self) -> Tuple[int, int]:
        """
        Obtains the coordinates where the scale will draw the
        `PangoLayout` representing the text in the scale.

        Remember when using the `PangoLayout` function you need to
        convert to and from pixels using `PANGO_PIXELS()` or `PANGO_SCALE`.

        If the [property@Gtk.Scale:draw-value] property is %FALSE, the return
        values are undefined.

        Parameters:


        Returns:
            int: location to store X offset of layout
            int: location to store Y offset of layout
        """
        ...

    def get_digits(self) -> int:
        """
        Gets the number of decimal places that are displayed in the value.

        Parameters:


        Returns:
            int: the number of decimal places that are displayed

        """
        ...

    def get_draw_value(self) -> bool:
        """
        Returns whether the current value is displayed as a string
        next to the slider.

        Parameters:


        Returns:
            bool: whether the current value is displayed as a string

        """
        ...

    def get_has_origin(self) -> bool:
        """
        Returns whether the scale has an origin.

        Parameters:


        Returns:
            bool: %TRUE if the scale has an origin.

        """
        ...

    def get_layout(self) -> Optional[Pango.Layout]:
        """
        Gets the `PangoLayout` used to display the scale.

        The returned object is owned by the scale so does not need
        to be freed by the caller.

        Parameters:


        Returns:
            Optional[Pango.Layout]: the [class@Pango.Layout]
        for this scale, or %NULL if the [property@Gtk.Scale:draw-value]
        property is %FALSE.

        """
        ...

    def get_layout_offsets(self) -> Tuple[int, int]:
        """
        Obtains the coordinates where the scale will draw the
        `PangoLayout` representing the text in the scale.

        Remember when using the `PangoLayout` function you need to
        convert to and from pixels using `PANGO_PIXELS()` or `PANGO_SCALE`.

        If the [property@Gtk.Scale:draw-value] property is %FALSE, the return
        values are undefined.

        Parameters:


        Returns:
            int: location to store X offset of layout
            int: location to store Y offset of layout
        """
        ...

    def get_value_pos(self) -> PositionType:
        """
        Gets the position in which the current value is displayed.

        Parameters:


        Returns:
            PositionType: the position in which the current value is displayed

        """
        ...

    @classmethod
    def new(
        cls, orientation: Orientation, adjustment: Optional[Adjustment] = None
    ) -> Scale:
        """
        Creates a new `GtkScale`.

        Parameters:
            orientation: the scale’s orientation.
            adjustment: the [class@Gtk.Adjustment] which sets
        the range of the scale, or %NULL to create a new adjustment.

        Returns:
            Widget: a new `GtkScale`

        """
        ...

    @classmethod
    def new_with_range(
        cls, orientation: Orientation, min: float, max: float, step: float
    ) -> Scale:
        """
        Creates a new scale widget with a range from @min to @max.

        The returns scale will have the given orientation and will let the
        user input a number between @min and @max (including @min and @max)
        with the increment @step. @step must be nonzero; it’s the distance
        the slider moves when using the arrow keys to adjust the scale
        value.

        Note that the way in which the precision is derived works best if
        @step is a power of ten. If the resulting precision is not suitable
        for your needs, use [method@Gtk.Scale.set_digits] to correct it.

        Parameters:
            orientation: the scale’s orientation.
            min: minimum value
            max: maximum value
            step: step increment (tick size) used with keyboard shortcuts

        Returns:
            Widget: a new `GtkScale`

        """
        ...

    def set_digits(self, digits: int) -> None:
        """
        Sets the number of decimal places that are displayed in the value.

        Also causes the value of the adjustment to be rounded to this number
        of digits, so the retrieved value matches the displayed one, if
        [property@Gtk.Scale:draw-value] is %TRUE when the value changes. If
        you want to enforce rounding the value when [property@Gtk.Scale:draw-value]
        is %FALSE, you can set [property@Gtk.Range:round-digits] instead.

        Note that rounding to a small number of digits can interfere with
        the smooth autoscrolling that is built into `GtkScale`. As an alternative,
        you can use [method@Gtk.Scale.set_format_value_func] to format the displayed
        value yourself.

        Parameters:
            digits: the number of decimal places to display,
        e.g. use 1 to display 1.0, 2 to display 1.00, etc

        Returns:

        """
        ...

    def set_draw_value(self, draw_value: bool) -> None:
        """
        Specifies whether the current value is displayed as a string next
        to the slider.

        Parameters:
            draw_value: %TRUE to draw the value

        Returns:

        """
        ...

    def set_format_value_func(
        self, func: Optional[Callable[..., str]] = None, *user_data: Any
    ) -> None:
        """
        @func allows you to change how the scale value is displayed.

        The given function will return an allocated string representing
        @value. That string will then be used to display the scale's value.

        If #NULL is passed as @func, the value will be displayed on
        its own, rounded according to the value of the
        [property@Gtk.Scale:digits] property.

        Parameters:
            func: function that formats the value
            user_data: user data to pass to @func

        Returns:

        """
        ...

    def set_has_origin(self, has_origin: bool) -> None:
        """
        Sets whether the scale has an origin.

        If [property@Gtk.Scale:has-origin] is set to %TRUE (the default),
        the scale will highlight the part of the trough between the origin
        (bottom or left side) and the current value.

        Parameters:
            has_origin: %TRUE if the scale has an origin

        Returns:

        """
        ...

    def set_value_pos(self, pos: PositionType) -> None:
        """
        Sets the position in which the current value is displayed.

        Parameters:
            pos: the position in which the current value is displayed

        Returns:

        """
        ...

class ScaleButton(
    Widget, Accessible, AccessibleRange, Buildable, ConstraintTarget, Orientable
):
    """
    `GtkScaleButton` provides a button which pops up a scale widget.

    This kind of widget is commonly used for volume controls in multimedia
    applications, and GTK provides a [class@Gtk.VolumeButton] subclass that
    is tailored for this use case.

    # CSS nodes

    ```
    scalebutton.scale
    ╰── button.toggle
    ╰── <icon>
    ```

    `GtkScaleButton` has a single CSS node with name scalebutton and `.scale`
    style class, and contains a `button` node with a `.toggle` style class.

    :Constructors:

    ::

        ScaleButton(**properties)
        new(min:float, max:float, step:float, icons:list=None) -> Gtk.Widget

    Object GtkScaleButton

    Signals from GtkScaleButton:
      value-changed (gdouble)
      popup ()
      popdown ()

    Properties from GtkScaleButton:
      value -> gdouble: value
      adjustment -> GtkAdjustment: adjustment
      icons -> GStrv: icons
      active -> gboolean: active

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        AccessibleRange.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        active: bool
        """
        If the scale button should be pressed in.
        """
        adjustment: Adjustment
        """
        The `GtkAdjustment` that is used as the model.
        """
        icons: list[str]
        """
        The names of the icons to be used by the scale button.

        The first item in the array will be used in the button
        when the current value is the lowest value, the second
        item for the highest value. All the subsequent icons will
        be used for all the other values, spread evenly over the
        range of values.

        If there's only one icon name in the @icons array, it will
        be used for all the values. If only two icon names are in
        the @icons array, the first one will be used for the bottom
        50% of the scale, and the second one for the top 50%.

        It is recommended to use at least 3 icons so that the
        `GtkScaleButton` reflects the current value of the scale
        better for the users.
        """
        value: float
        """
        The value of the scale.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        adjustment: Adjustment = ...,
        icons: Sequence[str] = ...,
        value: float = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def do_value_changed(self, value: float) -> None: ...
    def get_active(self) -> bool:
        """
        Queries a `GtkScaleButton` and returns its current state.

        Returns %TRUE if the scale button is pressed in and %FALSE
        if it is raised.

        Parameters:


        Returns:
            bool: whether the button is pressed

        """
        ...

    def get_adjustment(self) -> Adjustment:
        """
        Gets the `GtkAdjustment` associated with the `GtkScaleButton`’s scale.

        See [method@Gtk.Range.get_adjustment] for details.

        Parameters:


        Returns:
            Adjustment: the adjustment associated with the scale

        """
        ...

    def get_minus_button(self) -> Button:
        """
        Retrieves the minus button of the `GtkScaleButton`.

        Parameters:


        Returns:
            Button: the minus button
        of the `GtkScaleButton`

        """
        ...

    def get_plus_button(self) -> Button:
        """
        Retrieves the plus button of the `GtkScaleButton.`

        Parameters:


        Returns:
            Button: the plus button
        of the `GtkScaleButton`

        """
        ...

    def get_popup(self) -> Widget:
        """
        Retrieves the popup of the `GtkScaleButton`.

        Parameters:


        Returns:
            Widget: the popup of the `GtkScaleButton`

        """
        ...

    def get_value(self) -> float:
        """
        Gets the current value of the scale button.

        Parameters:


        Returns:
            float: current value of the scale button

        """
        ...

    @classmethod
    def new(
        cls, min: float, max: float, step: float, icons: Optional[Sequence[str]] = None
    ) -> ScaleButton:
        """
        Creates a `GtkScaleButton`.

        The new scale button has a range between @min and @max,
        with a stepping of @step.

        Parameters:
            min: the minimum value of the scale (usually 0)
            max: the maximum value of the scale (usually 100)
            step: the stepping of value when a scroll-wheel event,
        or up/down arrow event occurs (usually 2)
            icons: a %NULL-terminated
        array of icon names, or %NULL if you want to set the list
        later with gtk_scale_button_set_icons()

        Returns:
            Widget: a new `GtkScaleButton`

        """
        ...

    def set_adjustment(self, adjustment: Adjustment) -> None:
        """
        Sets the `GtkAdjustment` to be used as a model
        for the `GtkScaleButton`’s scale.

        See [method@Gtk.Range.set_adjustment] for details.

        Parameters:
            adjustment: a `GtkAdjustment`

        Returns:

        """
        ...

    def set_icons(self, icons: Sequence[str]) -> None:
        """
        Sets the icons to be used by the scale button.

        Parameters:
            icons: a %NULL-terminated array of icon names

        Returns:

        """
        ...

    def set_value(self, value: float) -> None:
        """
        Sets the current value of the scale.

        If the value is outside the minimum or maximum range values,
        it will be clamped to fit inside them.

        The scale button emits the [signal@Gtk.ScaleButton::value-changed]
        signal if the value changes.

        Parameters:
            value: new value of the scale button

        Returns:

        """
        ...

class ScaleButtonClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ScaleButtonClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    value_changed: Callable[[ScaleButton, float], None] = ...
    padding: list[None] = ...

class ScaleClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ScaleClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: RangeClass = ...
    get_layout_offsets: Callable[[Scale], Tuple[int, int]] = ...
    padding: list[None] = ...

class ScrollInfo(GObject.GBoxed):
    """
    The `GtkScrollInfo` can be used to provide more accurate data on how a scroll
    operation should be performed.

    Scrolling functions usually allow passing a %NULL scroll info which will cause
    the default values to be used and just scroll the element into view.

    :Constructors:

    ::

        new() -> Gtk.ScrollInfo
    """

    class Props(GObject.GBoxed.Props): ...

    def get_enable_horizontal(self) -> bool:
        """
        Checks if horizontal scrolling is enabled.

        Parameters:


        Returns:
            bool: %TRUE if horizontal scrolling is enabled.

        """
        ...

    def get_enable_vertical(self) -> bool:
        """
        Checks if vertical scrolling is enabled.

        Parameters:


        Returns:
            bool: %TRUE if vertical scrolling is enabled.

        """
        ...

    @classmethod
    def new(cls) -> ScrollInfo:
        """
        Creates a new scroll info for scrolling an element into view.

        Parameters:


        Returns:
            ScrollInfo: A new scroll info

        """
        ...

    def ref(self) -> ScrollInfo:
        """
        Increases the reference count of a `GtkScrollInfo` by one.

        Parameters:


        Returns:
            ScrollInfo: the passed in `GtkScrollInfo`.

        """
        ...

    def set_enable_horizontal(self, horizontal: bool) -> None:
        """
        Turns horizontal scrolling on or off.

        Parameters:
            horizontal: if scrolling in the horizontal direction
        should happen

        Returns:

        """
        ...

    def set_enable_vertical(self, vertical: bool) -> None:
        """
        Turns vertical scrolling on or off.

        Parameters:
            vertical: if scrolling in the vertical direction
        should happen

        Returns:

        """
        ...

    def unref(self) -> None:
        """
        Decreases the reference count of a `GtkScrollInfo` by one.

        If the resulting reference count is zero, frees the self.

        Parameters:


        Returns:

        """
        ...

class Scrollable(GObject.GInterface):
    """
    `GtkScrollable` is an interface for widgets with native scrolling ability.

    To implement this interface you should override the
    [property@Gtk.Scrollable:hadjustment] and
    [property@Gtk.Scrollable:vadjustment] properties.

    ## Creating a scrollable widget

    All scrollable widgets should do the following.

    - When a parent widget sets the scrollable child widget’s adjustments,
    the widget should connect to the [signal@Gtk.Adjustment::value-changed]
    signal. The child widget should then populate the adjustments’ properties
    as soon as possible, which usually means queueing an allocation right away
    and populating the properties in the [vfunc@Gtk.Widget.size_allocate]
    implementation.

    - Because its preferred size is the size for a fully expanded widget,
    the scrollable widget must be able to cope with underallocations.
    This means that it must accept any value passed to its
    [vfunc@Gtk.Widget.size_allocate] implementation.

    - When the parent allocates space to the scrollable child widget,
    the widget must ensure the adjustments’ property values are correct and up
    to date, for example using [method@Gtk.Adjustment.configure].

    - When any of the adjustments emits the [signal@Gtk.Adjustment::value-changed]
    signal, the scrollable widget should scroll its contents.



    Interface GtkScrollable

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def __init__(
        self,
        hadjustment: Optional[Adjustment] = ...,
        hscroll_policy: ScrollablePolicy = ...,
        vadjustment: Optional[Adjustment] = ...,
        vscroll_policy: ScrollablePolicy = ...,
    ): ...
    def get_border(self) -> Tuple[bool, Border]:
        """
        Returns the size of a non-scrolling border around the
        outside of the scrollable.

        An example for this would be treeview headers. GTK can use
        this information to display overlaid graphics, like the
        overshoot indication, at the right position.

        Parameters:


        Returns:
            bool: %TRUE if @border has been set
            Border: return location for the results
        """
        ...

    def get_hadjustment(self) -> Optional[Adjustment]:
        """
        Retrieves the `GtkAdjustment` used for horizontal scrolling.

        Parameters:


        Returns:
            Optional[Adjustment]: horizontal `GtkAdjustment`.

        """
        ...

    def get_hscroll_policy(self) -> ScrollablePolicy:
        """
        Gets the horizontal `GtkScrollablePolicy`.

        Parameters:


        Returns:
            ScrollablePolicy: The horizontal `GtkScrollablePolicy`.

        """
        ...

    def get_vadjustment(self) -> Optional[Adjustment]:
        """
        Retrieves the `GtkAdjustment` used for vertical scrolling.

        Parameters:


        Returns:
            Optional[Adjustment]: vertical `GtkAdjustment`.

        """
        ...

    def get_vscroll_policy(self) -> ScrollablePolicy:
        """
        Gets the vertical `GtkScrollablePolicy`.

        Parameters:


        Returns:
            ScrollablePolicy: The vertical `GtkScrollablePolicy`.

        """
        ...

    def set_hadjustment(self, hadjustment: Optional[Adjustment] = None) -> None:
        """
        Sets the horizontal adjustment of the `GtkScrollable`.

        Parameters:
            hadjustment: a `GtkAdjustment`

        Returns:

        """
        ...

    def set_hscroll_policy(self, policy: ScrollablePolicy) -> None:
        """
        Sets the `GtkScrollablePolicy`.

        The policy determines whether horizontal scrolling should start
        below the minimum width or below the natural width.

        Parameters:
            policy: the horizontal `GtkScrollablePolicy`

        Returns:

        """
        ...

    def set_vadjustment(self, vadjustment: Optional[Adjustment] = None) -> None:
        """
        Sets the vertical adjustment of the `GtkScrollable`.

        Parameters:
            vadjustment: a `GtkAdjustment`

        Returns:

        """
        ...

    def set_vscroll_policy(self, policy: ScrollablePolicy) -> None:
        """
        Sets the `GtkScrollablePolicy`.

        The policy determines whether vertical scrolling should start
        below the minimum height or below the natural height.

        Parameters:
            policy: the vertical `GtkScrollablePolicy`

        Returns:

        """
        ...

class ScrollableInterface(GObject.GPointer):
    """
    :Constructors:

    ::

        ScrollableInterface()
    """

    class Props(GObject.GPointer.Props): ...
    base_iface: GObject.TypeInterface = ...
    get_border: Callable[[Scrollable], Tuple[bool, Border]] = ...

class Scrollbar(Widget, Accessible, Buildable, ConstraintTarget, Orientable):
    """
    The `GtkScrollbar` widget is a horizontal or vertical scrollbar.

    ![An example GtkScrollbar](scrollbar.png)

    Its position and movement are controlled by the adjustment that is passed to
    or created by [ctor@Gtk.Scrollbar.new]. See [class@Gtk.Adjustment] for more
    details. The [property@Gtk.Adjustment:value] field sets the position of the
    thumb and must be between [property@Gtk.Adjustment:lower] and
    [property@Gtk.Adjustment:upper] - [property@Gtk.Adjustment:page-size].
    The [property@Gtk.Adjustment:page-size] represents the size of the visible
    scrollable area.

    The fields [property@Gtk.Adjustment:step-increment] and
    [property@Gtk.Adjustment:page-increment] fields are added to or subtracted
    from the [property@Gtk.Adjustment:value] when the user asks to move by a step
    (using e.g. the cursor arrow keys) or by a page (using e.g. the Page Down/Up
    keys).

    # CSS nodes

    ```
    scrollbar
    ╰── range[.fine-tune]
    ╰── trough
    ╰── slider
    ```

    `GtkScrollbar` has a main CSS node with name scrollbar and a subnode for its
    contents. The main node gets the .horizontal or .vertical style classes applied,
    depending on the scrollbar's orientation.

    The range node gets the style class .fine-tune added when the scrollbar is
    in 'fine-tuning' mode.

    Other style classes that may be added to scrollbars inside
    [class@Gtk.ScrolledWindow] include the positional classes (.left, .right,
    .top, .bottom) and style classes related to overlay scrolling (.overlay-indicator,
    .dragging, .hovering).

    # Accessibility

    `GtkScrollbar` uses the %GTK_ACCESSIBLE_ROLE_SCROLLBAR role.

    :Constructors:

    ::

        Scrollbar(**properties)
        new(orientation:Gtk.Orientation, adjustment:Gtk.Adjustment=None) -> Gtk.Widget

    Object GtkScrollbar

    Properties from GtkScrollbar:
      adjustment -> GtkAdjustment: adjustment

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        adjustment: Adjustment
        """
        The `GtkAdjustment` controlled by this scrollbar.
        """

    props: Props = ...
    def __init__(
        self,
        adjustment: Optional[Adjustment] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def get_adjustment(self) -> Adjustment:
        """
        Returns the scrollbar's adjustment.

        Parameters:


        Returns:
            Adjustment: the scrollbar's adjustment

        """
        ...

    @classmethod
    def new(
        cls, orientation: Orientation, adjustment: Optional[Adjustment] = None
    ) -> Scrollbar:
        """
        Creates a new scrollbar with the given orientation.

        Parameters:
            orientation: the scrollbar’s orientation.
            adjustment: the [class@Gtk.Adjustment] to use, or %NULL
        to create a new adjustment.

        Returns:
            Widget: the new `GtkScrollbar`.

        """
        ...

    def set_adjustment(self, adjustment: Optional[Adjustment] = None) -> None:
        """
        Makes the scrollbar use the given adjustment.

        Parameters:
            adjustment: the adjustment to set

        Returns:

        """
        ...

class ScrolledWindow(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkScrolledWindow` is a container that makes its child scrollable.

    It does so using either internally added scrollbars or externally
    associated adjustments, and optionally draws a frame around the child.

    Widgets with native scrolling support, i.e. those whose classes implement
    the [iface@Gtk.Scrollable] interface, are added directly. For other types
    of widget, the class [class@Gtk.Viewport] acts as an adaptor, giving
    scrollability to other widgets. [method@Gtk.ScrolledWindow.set_child]
    intelligently accounts for whether or not the added child is a `GtkScrollable`.
    If it isn’t, then it wraps the child in a `GtkViewport`. Therefore, you can
    just add any child widget and not worry about the details.

    If [method@Gtk.ScrolledWindow.set_child] has added a `GtkViewport` for you,
    it will be automatically removed when you unset the child.
    Unless [property@Gtk.ScrolledWindow:hscrollbar-policy] and
    [property@Gtk.ScrolledWindow:vscrollbar-policy] are %GTK_POLICY_NEVER or
    %GTK_POLICY_EXTERNAL, `GtkScrolledWindow` adds internal `GtkScrollbar` widgets
    around its child. The scroll position of the child, and if applicable the
    scrollbars, is controlled by the [property@Gtk.ScrolledWindow:hadjustment]
    and [property@Gtk.ScrolledWindow:vadjustment] that are associated with the
    `GtkScrolledWindow`. See the docs on [class@Gtk.Scrollbar] for the details,
    but note that the “step_increment” and “page_increment” fields are only
    effective if the policy causes scrollbars to be present.

    If a `GtkScrolledWindow` doesn’t behave quite as you would like, or
    doesn’t have exactly the right layout, it’s very possible to set up
    your own scrolling with `GtkScrollbar` and for example a `GtkGrid`.

    # Touch support

    `GtkScrolledWindow` has built-in support for touch devices. When a
    touchscreen is used, swiping will move the scrolled window, and will
    expose 'kinetic' behavior. This can be turned off with the
    [property@Gtk.ScrolledWindow:kinetic-scrolling] property if it is undesired.

    `GtkScrolledWindow` also displays visual 'overshoot' indication when
    the content is pulled beyond the end, and this situation can be
    captured with the [signal@Gtk.ScrolledWindow::edge-overshot] signal.

    If no mouse device is present, the scrollbars will overlaid as
    narrow, auto-hiding indicators over the content. If traditional
    scrollbars are desired although no mouse is present, this behaviour
    can be turned off with the [property@Gtk.ScrolledWindow:overlay-scrolling]
    property.

    # CSS nodes

    `GtkScrolledWindow` has a main CSS node with name scrolledwindow.
    It gets a .frame style class added when [property@Gtk.ScrolledWindow:has-frame]
    is %TRUE.

    It uses subnodes with names overshoot and undershoot to draw the overflow
    and underflow indications. These nodes get the .left, .right, .top or .bottom
    style class added depending on where the indication is drawn.

    `GtkScrolledWindow` also sets the positional style classes (.left, .right,
    .top, .bottom) and style classes related to overlay scrolling
    (.overlay-indicator, .dragging, .hovering) on its scrollbars.

    If both scrollbars are visible, the area where they meet is drawn
    with a subnode named junction.

    # Accessibility

    Until GTK 4.10, `GtkScrolledWindow` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.

    Starting from GTK 4.12, `GtkScrolledWindow` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.

    :Constructors:

    ::

        ScrolledWindow(**properties)
        new() -> Gtk.Widget

    Object GtkScrolledWindow

    Signals from GtkScrolledWindow:
      move-focus-out (GtkDirectionType)
      scroll-child (GtkScrollType, gboolean) -> gboolean
      edge-overshot (GtkPositionType)
      edge-reached (GtkPositionType)

    Properties from GtkScrolledWindow:
      hadjustment -> GtkAdjustment: hadjustment
      vadjustment -> GtkAdjustment: vadjustment
      hscrollbar-policy -> GtkPolicyType: hscrollbar-policy
      vscrollbar-policy -> GtkPolicyType: vscrollbar-policy
      window-placement -> GtkCornerType: window-placement
      has-frame -> gboolean: has-frame
      min-content-width -> gint: min-content-width
      min-content-height -> gint: min-content-height
      kinetic-scrolling -> gboolean: kinetic-scrolling
      overlay-scrolling -> gboolean: overlay-scrolling
      max-content-width -> gint: max-content-width
      max-content-height -> gint: max-content-height
      propagate-natural-width -> gboolean: propagate-natural-width
      propagate-natural-height -> gboolean: propagate-natural-height
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        child: Optional[Widget]
        """
        The child widget.

        When setting this property, if the child widget does not implement
        [iface@Gtk.Scrollable], the scrolled window will add the child to
        a [class@Gtk.Viewport] and then set the viewport as the child.
        """
        hadjustment: Adjustment
        has_frame: bool
        """
        Whether to draw a frame around the contents.
        """
        hscrollbar_policy: PolicyType
        """
        When the horizontal scrollbar is displayed.

        Use [method@Gtk.ScrolledWindow.set_policy] to set
        this property.
        """
        kinetic_scrolling: bool
        """
        Whether kinetic scrolling is enabled or not.

        Kinetic scrolling only applies to devices with source %GDK_SOURCE_TOUCHSCREEN.
        """
        max_content_height: int
        """
        The maximum content height of @scrolled_window.
        """
        max_content_width: int
        """
        The maximum content width of @scrolled_window.
        """
        min_content_height: int
        """
        The minimum content height of @scrolled_window.
        """
        min_content_width: int
        """
        The minimum content width of @scrolled_window.
        """
        overlay_scrolling: bool
        """
        Whether overlay scrolling is enabled or not.

        If it is, the scrollbars are only added as traditional widgets
        when a mouse is present. Otherwise, they are overlaid on top of
        the content, as narrow indicators.

        Note that overlay scrolling can also be globally disabled, with
        the [property@Gtk.Settings:gtk-overlay-scrolling] setting.
        """
        propagate_natural_height: bool
        """
        Whether the natural height of the child should be calculated and propagated
        through the scrolled window’s requested natural height.

        This is useful in cases where an attempt should be made to allocate exactly
        enough space for the natural size of the child.
        """
        propagate_natural_width: bool
        """
        Whether the natural width of the child should be calculated and propagated
        through the scrolled window’s requested natural width.

        This is useful in cases where an attempt should be made to allocate exactly
        enough space for the natural size of the child.
        """
        vadjustment: Adjustment
        vscrollbar_policy: PolicyType
        """
        When the vertical scrollbar is displayed.

        Use [method@Gtk.ScrolledWindow.set_policy] to set
        this property.
        """
        window_placement: CornerType
        """
        Where the contents are located with respect to the scrollbars.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        hadjustment: Optional[Adjustment] = ...,
        has_frame: bool = ...,
        hscrollbar_policy: PolicyType = ...,
        kinetic_scrolling: bool = ...,
        max_content_height: int = ...,
        max_content_width: int = ...,
        min_content_height: int = ...,
        min_content_width: int = ...,
        overlay_scrolling: bool = ...,
        propagate_natural_height: bool = ...,
        propagate_natural_width: bool = ...,
        vadjustment: Optional[Adjustment] = ...,
        vscrollbar_policy: PolicyType = ...,
        window_placement: CornerType = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @scrolled_window.

        If the scrolled window automatically added a [class@Gtk.Viewport], this
        function will return the viewport widget, and you can retrieve its child
        using [method@Gtk.Viewport.get_child].

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @scrolled_window

        """
        ...

    def get_hadjustment(self) -> Adjustment:
        """
        Returns the horizontal scrollbar’s adjustment.

        This is the adjustment used to connect the horizontal scrollbar
        to the child widget’s horizontal scroll functionality.

        Parameters:


        Returns:
            Adjustment: the horizontal `GtkAdjustment`

        """
        ...

    def get_has_frame(self) -> bool:
        """
        Gets whether the scrolled window draws a frame.

        Parameters:


        Returns:
            bool: %TRUE if the @scrolled_window has a frame

        """
        ...

    def get_hscrollbar(self) -> Widget:
        """
        Returns the horizontal scrollbar of @scrolled_window.

        Parameters:


        Returns:
            Widget: the horizontal scrollbar of the scrolled window.

        """
        ...

    def get_kinetic_scrolling(self) -> bool:
        """
        Returns the specified kinetic scrolling behavior.

        Parameters:


        Returns:
            bool: the scrolling behavior flags.

        """
        ...

    def get_max_content_height(self) -> int:
        """
        Returns the maximum content height set.

        Parameters:


        Returns:
            int: the maximum content height, or -1

        """
        ...

    def get_max_content_width(self) -> int:
        """
        Returns the maximum content width set.

        Parameters:


        Returns:
            int: the maximum content width, or -1

        """
        ...

    def get_min_content_height(self) -> int:
        """
        Gets the minimal content height of @scrolled_window.

        Parameters:


        Returns:
            int: the minimal content height

        """
        ...

    def get_min_content_width(self) -> int:
        """
        Gets the minimum content width of @scrolled_window.

        Parameters:


        Returns:
            int: the minimum content width

        """
        ...

    def get_overlay_scrolling(self) -> bool:
        """
        Returns whether overlay scrolling is enabled for this scrolled window.

        Parameters:


        Returns:
            bool: %TRUE if overlay scrolling is enabled

        """
        ...

    def get_placement(self) -> CornerType:
        """
        Gets the placement of the contents with respect to the scrollbars.

        Parameters:


        Returns:
            CornerType: the current placement value.

        """
        ...

    def get_policy(self) -> Tuple[PolicyType, PolicyType]:
        """
        Retrieves the current policy values for the horizontal and vertical
        scrollbars.

        See [method@Gtk.ScrolledWindow.set_policy].

        Parameters:


        Returns:
            PolicyType: location to store the policy
        for the horizontal scrollbar
            PolicyType: location to store the policy
        for the vertical scrollbar
        """
        ...

    def get_propagate_natural_height(self) -> bool:
        """
        Reports whether the natural height of the child will be calculated
        and propagated through the scrolled window’s requested natural height.

        Parameters:


        Returns:
            bool: whether natural height propagation is enabled.

        """
        ...

    def get_propagate_natural_width(self) -> bool:
        """
        Reports whether the natural width of the child will be calculated
        and propagated through the scrolled window’s requested natural width.

        Parameters:


        Returns:
            bool: whether natural width propagation is enabled.

        """
        ...

    def get_vadjustment(self) -> Adjustment:
        """
        Returns the vertical scrollbar’s adjustment.

        This is the adjustment used to connect the vertical
        scrollbar to the child widget’s vertical scroll functionality.

        Parameters:


        Returns:
            Adjustment: the vertical `GtkAdjustment`

        """
        ...

    def get_vscrollbar(self) -> Widget:
        """
        Returns the vertical scrollbar of @scrolled_window.

        Parameters:


        Returns:
            Widget: the vertical scrollbar of the scrolled window.

        """
        ...

    @classmethod
    def new(cls) -> ScrolledWindow:
        """
        Creates a new scrolled window.

        Parameters:


        Returns:
            Widget: a new scrolled window

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @scrolled_window.

        If @child does not implement the [iface@Gtk.Scrollable] interface,
        the scrolled window will add @child to a [class@Gtk.Viewport] instance
        and then add the viewport as its child widget.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_hadjustment(self, hadjustment: Optional[Adjustment] = None) -> None:
        """
        Sets the `GtkAdjustment` for the horizontal scrollbar.

        Parameters:
            hadjustment: the `GtkAdjustment` to use, or %NULL to create a new one

        Returns:

        """
        ...

    def set_has_frame(self, has_frame: bool) -> None:
        """
        Changes the frame drawn around the contents of @scrolled_window.

        Parameters:
            has_frame: whether to draw a frame around scrolled window contents

        Returns:

        """
        ...

    def set_kinetic_scrolling(self, kinetic_scrolling: bool) -> None:
        """
        Turns kinetic scrolling on or off.

        Kinetic scrolling only applies to devices with source
        %GDK_SOURCE_TOUCHSCREEN.

        Parameters:
            kinetic_scrolling: %TRUE to enable kinetic scrolling

        Returns:

        """
        ...

    def set_max_content_height(self, height: int) -> None:
        """
        Sets the maximum height that @scrolled_window should keep visible.

        The @scrolled_window will grow up to this height before it starts
        scrolling the content.

        It is a programming error to set the maximum content height to a value
        smaller than [property@Gtk.ScrolledWindow:min-content-height].

        Parameters:
            height: the maximum content height

        Returns:

        """
        ...

    def set_max_content_width(self, width: int) -> None:
        """
        Sets the maximum width that @scrolled_window should keep visible.

        The @scrolled_window will grow up to this width before it starts
        scrolling the content.

        It is a programming error to set the maximum content width to a
        value smaller than [property@Gtk.ScrolledWindow:min-content-width].

        Parameters:
            width: the maximum content width

        Returns:

        """
        ...

    def set_min_content_height(self, height: int) -> None:
        """
        Sets the minimum height that @scrolled_window should keep visible.

        Note that this can and (usually will) be smaller than the minimum
        size of the content.

        It is a programming error to set the minimum content height to a
        value greater than [property@Gtk.ScrolledWindow:max-content-height].

        Parameters:
            height: the minimal content height

        Returns:

        """
        ...

    def set_min_content_width(self, width: int) -> None:
        """
        Sets the minimum width that @scrolled_window should keep visible.

        Note that this can and (usually will) be smaller than the minimum
        size of the content.

        It is a programming error to set the minimum content width to a
        value greater than [property@Gtk.ScrolledWindow:max-content-width].

        Parameters:
            width: the minimal content width

        Returns:

        """
        ...

    def set_overlay_scrolling(self, overlay_scrolling: bool) -> None:
        """
        Enables or disables overlay scrolling for this scrolled window.

        Parameters:
            overlay_scrolling: whether to enable overlay scrolling

        Returns:

        """
        ...

    def set_placement(self, window_placement: CornerType) -> None:
        """
        Sets the placement of the contents with respect to the scrollbars
        for the scrolled window.

        The default is %GTK_CORNER_TOP_LEFT, meaning the child is
        in the top left, with the scrollbars underneath and to the right.
        Other values in [enum@Gtk.CornerType] are %GTK_CORNER_TOP_RIGHT,
        %GTK_CORNER_BOTTOM_LEFT, and %GTK_CORNER_BOTTOM_RIGHT.

        See also [method@Gtk.ScrolledWindow.get_placement] and
        [method@Gtk.ScrolledWindow.unset_placement].

        Parameters:
            window_placement: position of the child window

        Returns:

        """
        ...

    def set_policy(
        self, hscrollbar_policy: PolicyType, vscrollbar_policy: PolicyType
    ) -> None:
        """
        Sets the scrollbar policy for the horizontal and vertical scrollbars.

        The policy determines when the scrollbar should appear; it is a value
        from the [enum@Gtk.PolicyType] enumeration. If %GTK_POLICY_ALWAYS, the
        scrollbar is always present; if %GTK_POLICY_NEVER, the scrollbar is
        never present; if %GTK_POLICY_AUTOMATIC, the scrollbar is present only
        if needed (that is, if the slider part of the bar would be smaller
        than the trough — the display is larger than the page size).

        Parameters:
            hscrollbar_policy: policy for horizontal bar
            vscrollbar_policy: policy for vertical bar

        Returns:

        """
        ...

    def set_propagate_natural_height(self, propagate: bool) -> None:
        """
        Sets whether the natural height of the child should be calculated
        and propagated through the scrolled window’s requested natural height.

        Parameters:
            propagate: whether to propagate natural height

        Returns:

        """
        ...

    def set_propagate_natural_width(self, propagate: bool) -> None:
        """
        Sets whether the natural width of the child should be calculated
        and propagated through the scrolled window’s requested natural width.

        Parameters:
            propagate: whether to propagate natural width

        Returns:

        """
        ...

    def set_vadjustment(self, vadjustment: Optional[Adjustment] = None) -> None:
        """
        Sets the `GtkAdjustment` for the vertical scrollbar.

        Parameters:
            vadjustment: the `GtkAdjustment` to use, or %NULL to create a new one

        Returns:

        """
        ...

    def unset_placement(self) -> None:
        """
        Unsets the placement of the contents with respect to the scrollbars.

        If no window placement is set for a scrolled window,
        it defaults to %GTK_CORNER_TOP_LEFT.

        Parameters:


        Returns:

        """
        ...

class SearchBar(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkSearchBar` is a container made to have a search entry.

    ![An example GtkSearchBar](search-bar.png)

    It can also contain additional widgets, such as drop-down menus,
    or buttons. The search bar would appear when a search is started
    through typing on the keyboard, or the application’s search mode
    is toggled on.

    For keyboard presses to start a search, the search bar must be told
    of a widget to capture key events from through
    [method@Gtk.SearchBar.set_key_capture_widget]. This widget will
    typically be the top-level window, or a parent container of the
    search bar. Common shortcuts such as Ctrl+F should be handled as an
    application action, or through the menu items.

    You will also need to tell the search bar about which entry you
    are using as your search entry using [method@Gtk.SearchBar.connect_entry].

    ## Creating a search bar

    The following example shows you how to create a more complex search
    entry.

    [A simple example](https://gitlab.gnome.org/GNOME/gtk/tree/main/examples/search-bar.c)

    # CSS nodes

    ```
    searchbar
    ╰── revealer
    ╰── box
    ├── [child]
    ╰── [button.close]
    ```

    `GtkSearchBar` has a main CSS node with name searchbar. It has a child
    node with name revealer that contains a node with name box. The box node
    contains both the CSS node of the child widget as well as an optional button
    node which gets the .close style class applied.

    # Accessibility

    `GtkSearchBar` uses the %GTK_ACCESSIBLE_ROLE_SEARCH role.

    :Constructors:

    ::

        SearchBar(**properties)
        new() -> Gtk.Widget

    Object GtkSearchBar

    Properties from GtkSearchBar:
      search-mode-enabled -> gboolean: search-mode-enabled
      show-close-button -> gboolean: show-close-button
      child -> GtkWidget: child
      key-capture-widget -> GtkWidget: key-capture-widget

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        child: Optional[Widget]
        """
        The child widget.
        """
        key_capture_widget: Optional[Widget]
        """
        The key capture widget.
        """
        search_mode_enabled: bool
        """
        Whether the search mode is on and the search bar shown.
        """
        show_close_button: bool
        """
        Whether to show the close button in the search bar.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        key_capture_widget: Optional[Widget] = ...,
        search_mode_enabled: bool = ...,
        show_close_button: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def connect_entry(self, entry: Editable) -> None:
        """
        Connects the `GtkEditable` widget passed as the one to be used in
        this search bar.

        The entry should be a descendant of the search bar. Calling this
        function manually is only required if the entry isn’t the direct
        child of the search bar (as in our main example).

        Parameters:
            entry: a `GtkEditable`

        Returns:

        """
        ...

    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @bar.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @bar

        """
        ...

    def get_key_capture_widget(self) -> Optional[Widget]:
        """
        Gets the widget that @bar is capturing key events from.

        Parameters:


        Returns:
            Optional[Widget]: The key capture widget.

        """
        ...

    def get_search_mode(self) -> bool:
        """
        Returns whether the search mode is on or off.

        Parameters:


        Returns:
            bool: whether search mode is toggled on

        """
        ...

    def get_show_close_button(self) -> bool:
        """
        Returns whether the close button is shown.

        Parameters:


        Returns:
            bool: whether the close button is shown

        """
        ...

    @classmethod
    def new(cls) -> SearchBar:
        """
        Creates a `GtkSearchBar`.

        You will need to tell it about which widget is going to be your text
        entry using [method@Gtk.SearchBar.connect_entry].

        Parameters:


        Returns:
            Widget: a new `GtkSearchBar`

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @bar.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_key_capture_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Sets @widget as the widget that @bar will capture key events
        from.

        If key events are handled by the search bar, the bar will
        be shown, and the entry populated with the entered text.

        Note that despite the name of this function, the events
        are only 'captured' in the bubble phase, which means that
        editable child widgets of @widget will receive text input
        before it gets captured. If that is not desired, you can
        capture and forward the events yourself with
        [method@Gtk.EventControllerKey.forward].

        Parameters:
            widget: a `GtkWidget`

        Returns:

        """
        ...

    def set_search_mode(self, search_mode: bool) -> None:
        """
        Switches the search mode on or off.

        Parameters:
            search_mode: the new state of the search mode

        Returns:

        """
        ...

    def set_show_close_button(self, visible: bool) -> None:
        """
        Shows or hides the close button.

        Applications that already have a “search” toggle button should not
        show a close button in their search bar, as it duplicates the role
        of the toggle button.

        Parameters:
            visible: whether the close button will be shown or not

        Returns:

        """
        ...

class SearchEntry(Widget, Accessible, Buildable, ConstraintTarget, Editable):
    """
    `GtkSearchEntry` is an entry widget that has been tailored for use
    as a search entry.

    The main API for interacting with a `GtkSearchEntry` as entry
    is the `GtkEditable` interface.

    ![An example GtkSearchEntry](search-entry.png)

    It will show an inactive symbolic “find” icon when the search
    entry is empty, and a symbolic “clear” icon when there is text.
    Clicking on the “clear” icon will empty the search entry.

    To make filtering appear more reactive, it is a good idea to
    not react to every change in the entry text immediately, but
    only after a short delay. To support this, `GtkSearchEntry`
    emits the [signal@Gtk.SearchEntry::search-changed] signal which
    can be used instead of the [signal@Gtk.Editable::changed] signal.

    The [signal@Gtk.SearchEntry::previous-match],
    [signal@Gtk.SearchEntry::next-match] and
    [signal@Gtk.SearchEntry::stop-search] signals can be used to
    implement moving between search results and ending the search.

    Often, `GtkSearchEntry` will be fed events by means of being
    placed inside a [class@Gtk.SearchBar]. If that is not the case,
    you can use [method@Gtk.SearchEntry.set_key_capture_widget] to
    let it capture key input from another widget.

    `GtkSearchEntry` provides only minimal API and should be used with
    the [iface@Gtk.Editable] API.

    ## CSS Nodes

    ```
    entry.search
    ╰── text
    ```

    `GtkSearchEntry` has a single CSS node with name entry that carries
    a `.search` style class, and the text node is a child of that.

    ## Accessibility

    `GtkSearchEntry` uses the %GTK_ACCESSIBLE_ROLE_SEARCH_BOX role.

    :Constructors:

    ::

        SearchEntry(**properties)
        new() -> Gtk.Widget

    Object GtkSearchEntry

    Signals from GtkSearchEntry:
      activate ()
      search-changed ()
      next-match ()
      previous-match ()
      stop-search ()
      search-started ()

    Properties from GtkSearchEntry:
      placeholder-text -> gchararray: placeholder-text
      activates-default -> gboolean: activates-default
      search-delay -> guint: search-delay

    Signals from GtkEditable:
      changed ()
      insert-text (gchararray, gint, gpointer)
      delete-text (gint, gint)

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Editable.Props,
    ):
        activates_default: bool
        """
        Whether to activate the default widget when Enter is pressed.
        """
        placeholder_text: Optional[str]
        """
        The text that will be displayed in the `GtkSearchEntry`
        when it is empty and unfocused.
        """
        search_delay: int
        """
        The delay in milliseconds from last keypress to the search
        changed signal.
        """

    props: Props = ...
    def __init__(
        self,
        activates_default: bool = ...,
        placeholder_text: Optional[str] = ...,
        search_delay: int = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        editable: bool = ...,
        enable_undo: bool = ...,
        max_width_chars: int = ...,
        text: str = ...,
        width_chars: int = ...,
        xalign: float = ...,
    ): ...
    def get_key_capture_widget(self) -> Optional[Widget]:
        """
        Gets the widget that @entry is capturing key events from.

        Parameters:


        Returns:
            Optional[Widget]: The key capture widget.

        """
        ...

    def get_placeholder_text(self) -> Optional[str]:
        """
        Gets the placeholder text associated with @entry.

        Parameters:


        Returns:
            Optional[str]: The placeholder text.

        """
        ...

    def get_search_delay(self) -> int:
        """
        Get the delay to be used between the last keypress and the
        [signal@Gtk.SearchEntry::search-changed] signal being emitted.

        Parameters:


        Returns:
            int: a delay in milliseconds.

        """
        ...

    @classmethod
    def new(cls) -> SearchEntry:
        """
        Creates a `GtkSearchEntry`.

        Parameters:


        Returns:
            Widget: a new `GtkSearchEntry`

        """
        ...

    def set_key_capture_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Sets @widget as the widget that @entry will capture key
        events from.

        Key events are consumed by the search entry to start or
        continue a search.

        If the entry is part of a `GtkSearchBar`, it is preferable
        to call [method@Gtk.SearchBar.set_key_capture_widget] instead,
        which will reveal the entry in addition to triggering the
        search entry.

        Note that despite the name of this function, the events
        are only 'captured' in the bubble phase, which means that
        editable child widgets of @widget will receive text input
        before it gets captured. If that is not desired, you can
        capture and forward the events yourself with
        [method@Gtk.EventControllerKey.forward].

        Parameters:
            widget: a `GtkWidget`

        Returns:

        """
        ...

    def set_placeholder_text(self, text: Optional[str] = None) -> None:
        """
        Sets the placeholder text associated with @entry.

        Parameters:
            text: the text to set as a placeholder

        Returns:

        """
        ...

    def set_search_delay(self, delay: int) -> None:
        """
        Set the delay to be used between the last keypress and the
        [signal@Gtk.SearchEntry::search-changed] signal being emitted.

        Parameters:
            delay: a delay in milliseconds

        Returns:

        """
        ...

class SectionModel(GObject.GInterface):
    """
    `GtkSectionModel` is an interface that adds support for sections to list models.

    A `GtkSectionModel` groups successive items into so-called sections. List widgets
    like `GtkListView` and `GtkGridView` then allow displaying section headers for
    these sections by installing a header factory.

    Many GTK list models support sections inherently, or they pass through the sections
    of a model they are wrapping.

    When the section groupings of a model change, the model will emit the
    [signal@Gtk.SectionModel::sections-changed] signal by calling the
    [method@Gtk.SectionModel.sections_changed] function. All sections in the given range
    then need to be queried again.
    The [signal@Gio.ListModel::items-changed] signal has the same effect, all sections in
    that range are invalidated, too.



    Interface GtkSectionModel

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def get_section(self, position: int) -> Tuple[int, int]:
        """
        Query the section that covers the given position. The number of
        items in the section can be computed by `out_end - out_start`.

        If the position is larger than the number of items, a single
        range from n_items to G_MAXUINT will be returned.

        Parameters:
            position: the position of the item to query

        Returns:
            int: the position of the first item in the section
            int: the position of the first item not part of the section
        anymore.
        """
        ...

    def sections_changed(self, position: int, n_items: int) -> None: ...

class SectionModelInterface(GObject.GPointer):
    """
    The list of virtual functions for the `GtkSectionModel` interface.
    No function must be implemented, but unless `GtkSectionModel::get_section()`
    is implemented, the whole model will just be a single section.

    :Constructors:

    ::

        SectionModelInterface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    get_section: Callable[[SectionModel, int], Tuple[int, int]] = ...

class SelectionFilterModel(GObject.Object, Gio.ListModel):
    """
    `GtkSelectionFilterModel` is a list model that presents the selection from
    a `GtkSelectionModel`.

    :Constructors:

    ::

        SelectionFilterModel(**properties)
        new(model:Gtk.SelectionModel=None) -> Gtk.SelectionFilterModel

    Object GtkSelectionFilterModel

    Properties from GtkSelectionFilterModel:
      item-type -> GType: item-type
      model -> GtkSelectionModel: model
      n-items -> guint: n-items

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gio.ListModel.Props):
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        model: Optional[SelectionModel]
        """
        The model being filtered.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """

    props: Props = ...
    def __init__(self, model: Optional[SelectionModel] = ...): ...
    def get_model(self) -> Optional[SelectionModel]:
        """
        Gets the model currently filtered or %NULL if none.

        Parameters:


        Returns:
            Optional[SelectionModel]: The model that gets filtered

        """
        ...

    @classmethod
    def new(cls, model: Optional[SelectionModel] = None) -> SelectionFilterModel:
        """
        Creates a new `GtkSelectionFilterModel` that will include the
        selected items from the underlying selection model.

        Parameters:
            model: the selection model to filter

        Returns:
            SelectionFilterModel: a new `GtkSelectionFilterModel`

        """
        ...

    def set_model(self, model: Optional[SelectionModel] = None) -> None:
        """
        Sets the model to be filtered.

        Note that GTK makes no effort to ensure that @model conforms to
        the item type of @self. It assumes that the caller knows what they
        are doing and have set up an appropriate filter to ensure that item
        types match.

        Parameters:
            model: The model to be filtered

        Returns:

        """
        ...

class SelectionFilterModelClass(GObject.GPointer):
    """
    :Constructors:

    ::

        SelectionFilterModelClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class SelectionModel(GObject.GInterface):
    """
    `GtkSelectionModel` is an interface that add support for selection to list models.

    This support is then used by widgets using list models to add the ability
    to select and unselect various items.

    GTK provides default implementations of the most common selection modes such
    as [class@Gtk.SingleSelection], so you will only need to implement this
    interface if you want detailed control about how selections should be handled.

    A `GtkSelectionModel` supports a single boolean per item indicating if an item is
    selected or not. This can be queried via [method@Gtk.SelectionModel.is_selected].
    When the selected state of one or more items changes, the model will emit the
    [signal@Gtk.SelectionModel::selection-changed] signal by calling the
    [method@Gtk.SelectionModel.selection_changed] function. The positions given
    in that signal may have their selection state changed, though that is not a
    requirement. If new items added to the model via the
    [signal@Gio.ListModel::items-changed] signal are selected or not is up to the
    implementation.

    Note that items added via [signal@Gio.ListModel::items-changed] may already
    be selected and no [signal@Gtk.SelectionModel::selection-changed] will be
    emitted for them. So to track which items are selected, it is necessary to
    listen to both signals.

    Additionally, the interface can expose functionality to select and unselect
    items. If these functions are implemented, GTK's list widgets will allow users
    to select and unselect items. However, `GtkSelectionModel`s are free to only
    implement them partially or not at all. In that case the widgets will not
    support the unimplemented operations.

    When selecting or unselecting is supported by a model, the return values of
    the selection functions do *not* indicate if selection or unselection happened.
    They are only meant to indicate complete failure, like when this mode of
    selecting is not supported by the model.

    Selections may happen asynchronously, so the only reliable way to find out
    when an item was selected is to listen to the signals that indicate selection.



    Interface GtkSelectionModel

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def get_selection(self) -> Bitset:
        """
        Gets the set containing all currently selected items in the model.

        This function may be slow, so if you are only interested in single item,
        consider using [method@Gtk.SelectionModel.is_selected] or if you are only
        interested in a few, consider [method@Gtk.SelectionModel.get_selection_in_range].

        Parameters:


        Returns:
            Bitset: a `GtkBitset` containing all the values currently
        selected in @model. If no items are selected, the bitset is empty.
        The bitset must not be modified.

        """
        ...

    def get_selection_in_range(self, position: int, n_items: int) -> Bitset:
        """
        Gets the set of selected items in a range.

        This function is an optimization for
        [method@Gtk.SelectionModel.get_selection] when you are only
        interested in part of the model's selected state. A common use
        case is in response to the [signal@Gtk.SelectionModel::selection-changed]
        signal.

        Parameters:
            position: start of the queried range
            n_items: number of items in the queried range

        Returns:
            Bitset: A `GtkBitset` that matches the selection state
        for the given range with all other values being undefined.
        The bitset must not be modified.

        """
        ...

    def is_selected(self, position: int) -> bool:
        """
        Checks if the given item is selected.

        Parameters:
            position: the position of the item to query

        Returns:
            bool: %TRUE if the item is selected

        """
        ...

    def select_all(self) -> bool:
        """
        Requests to select all items in the model.

        Parameters:


        Returns:
            bool: %TRUE if this action was supported and no fallback should be
        tried. This does not mean that all items are now selected.

        """
        ...

    def select_item(self, position: int, unselect_rest: bool) -> bool:
        """
        Requests to select an item in the model.

        Parameters:
            position: the position of the item to select
            unselect_rest: whether previously selected items should be unselected

        Returns:
            bool: %TRUE if this action was supported and no fallback should be
        tried. This does not mean the item was selected.

        """
        ...

    def select_range(self, position: int, n_items: int, unselect_rest: bool) -> bool:
        """
        Requests to select a range of items in the model.

        Parameters:
            position: the first item to select
            n_items: the number of items to select
            unselect_rest: whether previously selected items should be unselected

        Returns:
            bool: %TRUE if this action was supported and no fallback should be
        tried. This does not mean the range was selected.

        """
        ...

    def selection_changed(self, position: int, n_items: int) -> None:
        """
        Helper function for implementations of `GtkSelectionModel`.

        Call this when the selection changes to emit the
        [signal@Gtk.SelectionModel::selection-changed] signal.

        Parameters:
            position: the first changed item
            n_items: the number of changed items

        Returns:

        """
        ...

    def set_selection(self, selected: Bitset, mask: Bitset) -> bool:
        """
        Make selection changes.

        This is the most advanced selection updating method that allows
        the most fine-grained control over selection changes. If you can,
        you should try the simpler versions, as implementations are more
        likely to implement support for those.

        Requests that the selection state of all positions set in @mask
        be updated to the respective value in the @selected bitmask.

        In pseudocode, it would look something like this:

        ```c
        for (i = 0; i < n_items; i++)
        {
        // don't change values not in the mask
        if (!gtk_bitset_contains (mask, i))
        continue;

        if (gtk_bitset_contains (selected, i))
        select_item (i);
        else
        unselect_item (i);
        }

        gtk_selection_model_selection_changed (model,
        first_changed_item,
        n_changed_items);
        ```

        @mask and @selected must not be modified. They may refer to the
        same bitset, which would mean that every item in the set should
        be selected.

        Parameters:
            selected: bitmask specifying if items should be selected or unselected
            mask: bitmask specifying which items should be updated

        Returns:
            bool: %TRUE if this action was supported and no fallback should be
        tried. This does not mean that all items were updated according
        to the inputs.

        """
        ...

    def unselect_all(self) -> bool:
        """
        Requests to unselect all items in the model.

        Parameters:


        Returns:
            bool: %TRUE if this action was supported and no fallback should be
        tried. This does not mean that all items are now unselected.

        """
        ...

    def unselect_item(self, position: int) -> bool:
        """
        Requests to unselect an item in the model.

        Parameters:
            position: the position of the item to unselect

        Returns:
            bool: %TRUE if this action was supported and no fallback should be
        tried. This does not mean the item was unselected.

        """
        ...

    def unselect_range(self, position: int, n_items: int) -> bool:
        """
        Requests to unselect a range of items in the model.

        Parameters:
            position: the first item to unselect
            n_items: the number of items to unselect

        Returns:
            bool: %TRUE if this action was supported and no fallback should be
        tried. This does not mean the range was unselected.

        """
        ...

class SelectionModelInterface(GObject.GPointer):
    """
    The list of virtual functions for the `GtkSelectionModel` interface.
    No function must be implemented, but unless `GtkSelectionModel::is_selected()`
    is implemented, it will not be possible to select items in the set.

    The model does not need to implement any functions to support either
    selecting or unselecting items. Of course, if the model does not do that,
    it means that users cannot select or unselect items in a list widget
    using the model.

    All selection functions fall back to `GtkSelectionModel::set_selection()`
    so it is sufficient to implement just that function for full selection
    support.

    :Constructors:

    ::

        SelectionModelInterface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    is_selected: Callable[[SelectionModel, int], bool] = ...
    get_selection_in_range: Callable[[SelectionModel, int, int], Bitset] = ...
    select_item: Callable[[SelectionModel, int, bool], bool] = ...
    unselect_item: Callable[[SelectionModel, int], bool] = ...
    select_range: Callable[[SelectionModel, int, int, bool], bool] = ...
    unselect_range: Callable[[SelectionModel, int, int], bool] = ...
    select_all: Callable[[SelectionModel], bool] = ...
    unselect_all: Callable[[SelectionModel], bool] = ...
    set_selection: Callable[[SelectionModel, Bitset, Bitset], bool] = ...

class Separator(Widget, Accessible, Buildable, ConstraintTarget, Orientable):
    """
    `GtkSeparator` is a horizontal or vertical separator widget.

    ![An example GtkSeparator](separator.png)

    A `GtkSeparator` can be used to group the widgets within a window.
    It displays a line with a shadow to make it appear sunken into the
    interface.

    # CSS nodes

    `GtkSeparator` has a single CSS node with name separator. The node
    gets one of the .horizontal or .vertical style classes.

    # Accessibility

    `GtkSeparator` uses the %GTK_ACCESSIBLE_ROLE_SEPARATOR role.

    :Constructors:

    ::

        Separator(**properties)
        new(orientation:Gtk.Orientation) -> Gtk.Widget

    Object GtkSeparator

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ): ...

    def __init__(
        self,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    @classmethod
    def new(cls, orientation: Orientation) -> Separator:
        """
        Creates a new `GtkSeparator` with the given orientation.

        Parameters:
            orientation: the separator’s orientation.

        Returns:
            Widget: a new `GtkSeparator`.

        """
        ...

class Settings(GObject.Object, StyleProvider):
    """
    `GtkSettings` provides a mechanism to share global settings between
    applications.

    On the X window system, this sharing is realized by an
    [XSettings](http://www.freedesktop.org/wiki/Specifications/xsettings-spec)
    manager that is usually part of the desktop environment, along with
    utilities that let the user change these settings.

    On Wayland, the settings are obtained either via a settings portal,
    or by reading desktop settings from DConf.

    In the absence of these sharing mechanisms, GTK reads default values for
    settings from `settings.ini` files in `/etc/gtk-4.0`, `$XDG_CONFIG_DIRS/gtk-4.0`
    and `$XDG_CONFIG_HOME/gtk-4.0`. These files must be valid key files (see
    `GKeyFile`), and have a section called Settings. Themes can also provide
    default values for settings by installing a `settings.ini` file
    next to their `gtk.css` file.

    Applications can override system-wide settings by setting the property
    of the `GtkSettings` object with g_object_set(). This should be restricted
    to special cases though; `GtkSettings` are not meant as an application
    configuration facility.

    There is one `GtkSettings` instance per display. It can be obtained with
    [func@Gtk.Settings.get_for_display], but in many cases, it is more
    convenient to use [method@Gtk.Widget.get_settings].

    :Constructors:

    ::

        Settings(**properties)

    Object GtkSettings

    Properties from GtkSettings:
      gtk-double-click-time -> gint: gtk-double-click-time
      gtk-double-click-distance -> gint: gtk-double-click-distance
      gtk-cursor-blink -> gboolean: gtk-cursor-blink
      gtk-cursor-blink-time -> gint: gtk-cursor-blink-time
      gtk-cursor-blink-timeout -> gint: gtk-cursor-blink-timeout
      gtk-split-cursor -> gboolean: gtk-split-cursor
      gtk-cursor-aspect-ratio -> gdouble: gtk-cursor-aspect-ratio
      gtk-theme-name -> gchararray: gtk-theme-name
      gtk-icon-theme-name -> gchararray: gtk-icon-theme-name
      gtk-dnd-drag-threshold -> gint: gtk-dnd-drag-threshold
      gtk-font-name -> gchararray: gtk-font-name
      gtk-xft-antialias -> gint: gtk-xft-antialias
      gtk-xft-hinting -> gint: gtk-xft-hinting
      gtk-xft-hintstyle -> gchararray: gtk-xft-hintstyle
      gtk-xft-rgba -> gchararray: gtk-xft-rgba
      gtk-xft-dpi -> gint: gtk-xft-dpi
      gtk-hint-font-metrics -> gboolean: gtk-hint-font-metrics
      gtk-cursor-theme-name -> gchararray: gtk-cursor-theme-name
      gtk-cursor-theme-size -> gint: gtk-cursor-theme-size
      gtk-alternative-button-order -> gboolean: gtk-alternative-button-order
      gtk-alternative-sort-arrows -> gboolean: gtk-alternative-sort-arrows
      gtk-enable-animations -> gboolean: gtk-enable-animations
      gtk-error-bell -> gboolean: gtk-error-bell
      gtk-print-backends -> gchararray: gtk-print-backends
      gtk-print-preview-command -> gchararray: gtk-print-preview-command
      gtk-enable-accels -> gboolean: gtk-enable-accels
      gtk-im-module -> gchararray: gtk-im-module
      gtk-recent-files-max-age -> gint: gtk-recent-files-max-age
      gtk-fontconfig-timestamp -> guint: gtk-fontconfig-timestamp
      gtk-sound-theme-name -> gchararray: gtk-sound-theme-name
      gtk-enable-input-feedback-sounds -> gboolean: gtk-enable-input-feedback-sounds
      gtk-enable-event-sounds -> gboolean: gtk-enable-event-sounds
      gtk-primary-button-warps-slider -> gboolean: gtk-primary-button-warps-slider
      gtk-application-prefer-dark-theme -> gboolean: gtk-application-prefer-dark-theme
      gtk-entry-select-on-focus -> gboolean: gtk-entry-select-on-focus
      gtk-entry-password-hint-timeout -> guint: gtk-entry-password-hint-timeout
      gtk-label-select-on-focus -> gboolean: gtk-label-select-on-focus
      gtk-shell-shows-app-menu -> gboolean: gtk-shell-shows-app-menu
      gtk-shell-shows-menubar -> gboolean: gtk-shell-shows-menubar
      gtk-shell-shows-desktop -> gboolean: gtk-shell-shows-desktop
      gtk-decoration-layout -> gchararray: gtk-decoration-layout
      gtk-titlebar-double-click -> gchararray: gtk-titlebar-double-click
      gtk-titlebar-middle-click -> gchararray: gtk-titlebar-middle-click
      gtk-titlebar-right-click -> gchararray: gtk-titlebar-right-click
      gtk-dialogs-use-header -> gboolean: gtk-dialogs-use-header
      gtk-enable-primary-paste -> gboolean: gtk-enable-primary-paste
      gtk-recent-files-enabled -> gboolean: gtk-recent-files-enabled
      gtk-long-press-time -> guint: gtk-long-press-time
      gtk-keynav-use-caret -> gboolean: gtk-keynav-use-caret
      gtk-overlay-scrolling -> gboolean: gtk-overlay-scrolling

    Signals from GtkStyleProvider:
      gtk-private-changed ()

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, StyleProvider.Props):
        gtk_alternative_button_order: bool
        """
        Whether buttons in dialogs should use the alternative button order.
        """
        gtk_alternative_sort_arrows: bool
        """
        Controls the direction of the sort indicators in sorted list and tree
        views.

        By default an arrow pointing down means the column is sorted
        in ascending order. When set to %TRUE, this order will be inverted.
        """
        gtk_application_prefer_dark_theme: bool
        """
        Whether the application prefers to use a dark theme.

        If a GTK theme includes a dark variant, it will be used
        instead of the configured theme.

        Some applications benefit from minimizing the amount of light
        pollution that interferes with the content. Good candidates for
        dark themes are photo and video editors that make the actual
        content get all the attention and minimize the distraction of
        the chrome.

        Dark themes should not be used for documents, where large spaces
        are white/light and the dark chrome creates too much contrast
        (web browser, text editor...).
        """
        gtk_cursor_aspect_ratio: float
        """
        The aspect ratio of the text caret.
        """
        gtk_cursor_blink: bool
        """
        Whether the cursor should blink.

        Also see the [property@Gtk.Settings:gtk-cursor-blink-timeout] setting,
        which allows more flexible control over cursor blinking.
        """
        gtk_cursor_blink_time: int
        """
        Length of the cursor blink cycle, in milliseconds.
        """
        gtk_cursor_blink_timeout: int
        """
        Time after which the cursor stops blinking, in seconds.

        The timer is reset after each user interaction.

        Setting this to zero has the same effect as setting
        [property@Gtk.Settings:gtk-cursor-blink] to %FALSE.
        """
        gtk_cursor_theme_name: str
        """
        Name of the cursor theme to use.

        Use %NULL to use the default theme.
        """
        gtk_cursor_theme_size: int
        """
        The size to use for cursors.

        0 means to use the default size.
        """
        gtk_decoration_layout: str
        """
        Determines which buttons should be put in the
        titlebar of client-side decorated windows, and whether they
        should be placed on the left or right.

        The format of the string is button names, separated by commas.
        A colon separates the buttons that should appear on the left
        from those on the right. Recognized button names are minimize,
        maximize, close, icon (the window icon) and menu (a menu button
        for the fallback app menu).

        For example, \"menu:minimize,maximize,close\" specifies a menu
        on the left, and minimize, maximize and close buttons on the right.

        Note that buttons will only be shown when they are meaningful.
        E.g. a menu button only appears when the desktop shell does not
        show the app menu, and a close button only appears on a window
        that can be closed.

        Also note that the setting can be overridden with the
        [property@Gtk.HeaderBar:decoration-layout] property.
        """
        gtk_dialogs_use_header: bool
        """
        Whether builtin GTK dialogs such as the file chooser, the
        color chooser or the font chooser will use a header bar at
        the top to show action widgets, or an action area at the bottom.

        This setting does not affect custom dialogs using `GtkDialog`
        directly, or message dialogs.
        """
        gtk_dnd_drag_threshold: int
        """
        The number of pixels the cursor can move before dragging.
        """
        gtk_double_click_distance: int
        """
        The maximum distance allowed between two clicks for them to be considered
        a double click, in pixels.
        """
        gtk_double_click_time: int
        """
        The maximum time to allow between two clicks for them to be considered
        a double click, in milliseconds.
        """
        gtk_enable_accels: bool
        """
        Whether menu items should have visible accelerators which can be
        activated.
        """
        gtk_enable_animations: bool
        """
        Whether to enable toolkit-wide animations.
        """
        gtk_enable_event_sounds: bool
        """
        Whether to play any event sounds at all.

        See the [Sound Theme Specifications](http://www.freedesktop.org/wiki/Specifications/sound-theme-spec)
        for more information on event sounds and sound themes.

        GTK itself does not support event sounds, you have to use a loadable
        module like the one that comes with libcanberra.
        """
        gtk_enable_input_feedback_sounds: bool
        """
        Whether to play event sounds as feedback to user input.

        See the [Sound Theme Specifications](http://www.freedesktop.org/wiki/Specifications/sound-theme-spec)
        for more information on event sounds and sound themes.

        GTK itself does not support event sounds, you have to use a loadable
        module like the one that comes with libcanberra.
        """
        gtk_enable_primary_paste: bool
        """
        Whether a middle click on a mouse should paste the
        'PRIMARY' clipboard content at the cursor location.
        """
        gtk_entry_password_hint_timeout: int
        """
        How long to show the last input character in hidden
        entries.

        This value is in milliseconds. 0 disables showing the
        last char. 600 is a good value for enabling it.
        """
        gtk_entry_select_on_focus: bool
        """
        Whether to select the contents of an entry when it is focused.
        """
        gtk_error_bell: bool
        """
        When %TRUE, keyboard navigation and other input-related errors
        will cause a beep.

        Since the error bell is implemented using gdk_surface_beep(), the
        windowing system may offer ways to configure the error bell in many
        ways, such as flashing the window or similar visual effects.
        """
        gtk_font_name: str
        """
        The default font to use.

        GTK uses the family name and size from this string.
        """
        gtk_fontconfig_timestamp: int
        """
        Timestamp of the current fontconfig configuration.
        """
        gtk_hint_font_metrics: bool
        """
        Whether hinting should be applied to font metrics.

        Note that this also turns off subpixel positioning of glyphs,
        since it conflicts with metrics hinting.
        """
        gtk_icon_theme_name: str
        """
        Name of the icon theme to use.

        See [class@Gtk.IconTheme] for details about how
        GTK handles icon themes.
        """
        gtk_im_module: str
        """
        Which IM (input method) module should be used by default.

        This is the input method that will be used if the user has not
        explicitly chosen another input method from the IM context menu.
        This also can be a colon-separated list of input methods, which GTK
        will try in turn until it finds one available on the system.

        See [class@Gtk.IMContext].
        """
        gtk_keynav_use_caret: bool
        """
        Whether GTK should make sure that text can be navigated with
        a caret, even if it is not editable.

        This is useful when using a screen reader.
        """
        gtk_label_select_on_focus: bool
        """
        Whether to select the contents of a selectable
        label when it is focused.
        """
        gtk_long_press_time: int
        """
        The time for a button or touch press to be considered a “long press”.

        See [class@Gtk.GestureLongPress].
        """
        gtk_overlay_scrolling: bool
        """
        Whether scrolled windows may use overlaid scrolling indicators.

        If this is set to %FALSE, scrolled windows will have permanent
        scrollbars.
        """
        gtk_primary_button_warps_slider: bool
        """
        If the value of this setting is %TRUE, clicking the primary button in a
        `GtkRange` trough will move the slider, and hence set the range’s value, to
        the point that you clicked.

        If it is %FALSE, a primary click will cause the slider/value to move
        by the range’s page-size towards the point clicked.

        Whichever action you choose for the primary button, the other action will
        be available by holding Shift and primary-clicking, or clicking the middle
        mouse button.
        """
        gtk_print_backends: str
        """
        A comma-separated list of print backends to use in the print
        dialog.

        Available print backends depend on the GTK installation,
        and may include \"file\", \"cups\", \"lpr\" or \"papi\".
        """
        gtk_print_preview_command: str
        """
        A command to run for displaying the print preview.

        The command should contain a `%f` placeholder, which will get
        replaced by the path to the pdf file. The command may also
        contain a `%s` placeholder, which will get replaced by the
        path to a file containing the print settings in the format
        produced by [method@Gtk.PrintSettings.to_file].

        The preview application is responsible for removing the pdf
        file and the print settings file when it is done.
        """
        gtk_recent_files_enabled: bool
        """
        Whether GTK should keep track of items inside the recently used
        resources list.

        If set to %FALSE, the list will always be empty.
        """
        gtk_recent_files_max_age: int
        """
        The maximum age, in days, of the items inside the recently used
        resources list.

        Items older than this setting will be excised from the list.
        If set to 0, the list will always be empty; if set to -1, no
        item will be removed.
        """
        gtk_shell_shows_app_menu: bool
        """
        Set to %TRUE if the desktop environment is displaying
        the app menu, %FALSE if the app should display it itself.
        """
        gtk_shell_shows_desktop: bool
        """
        Set to %TRUE if the desktop environment is displaying
        the desktop folder, %FALSE if not.
        """
        gtk_shell_shows_menubar: bool
        """
        Set to %TRUE if the desktop environment is displaying
        the menubar, %FALSE if the app should display it itself.
        """
        gtk_sound_theme_name: str
        """
        The XDG sound theme to use for event sounds.

        See the [Sound Theme Specifications](http://www.freedesktop.org/wiki/Specifications/sound-theme-spec)
        for more information on event sounds and sound themes.

        GTK itself does not support event sounds, you have to use
        a loadable module like the one that comes with libcanberra.
        """
        gtk_split_cursor: bool
        """
        Whether two cursors should be displayed for mixed left-to-right and
        right-to-left text.
        """
        gtk_theme_name: str
        """
        Name of the theme to load.

        See [class@Gtk.CssProvider] for details about how
        GTK finds the CSS stylesheet for a theme.
        """
        gtk_titlebar_double_click: str
        """
        Determines the action to take when a double-click
        occurs on the titlebar of client-side decorated windows.

        Recognized actions are minimize, toggle-maximize, menu, lower
        or none.
        """
        gtk_titlebar_middle_click: str
        """
        Determines the action to take when a middle-click
        occurs on the titlebar of client-side decorated windows.

        Recognized actions are minimize, toggle-maximize, menu, lower
        or none.
        """
        gtk_titlebar_right_click: str
        """
        Determines the action to take when a right-click
        occurs on the titlebar of client-side decorated windows.

        Recognized actions are minimize, toggle-maximize, menu, lower
        or none.
        """
        gtk_xft_antialias: int
        """
        Whether to antialias fonts.

        The values are 0 for no, 1 for yes, or -1 for the system default.
        """
        gtk_xft_dpi: int
        """
        The font resolution, in 1024 * dots/inch.

        -1 to use the default value.
        """
        gtk_xft_hinting: int
        """
        Whether to enable font hinting.

        The values are 0 for no, 1 for yes, or -1 for the system default.
        """
        gtk_xft_hintstyle: str
        """
        What degree of font hinting to use.

        The possible vaues are hintnone, hintslight,
        hintmedium, hintfull.
        """
        gtk_xft_rgba: str
        """
        The type of subpixel antialiasing to use.

        The possible values are none, rgb, bgr, vrgb, vbgr.
        """

    props: Props = ...
    def __init__(
        self,
        gtk_alternative_button_order: bool = ...,
        gtk_alternative_sort_arrows: bool = ...,
        gtk_application_prefer_dark_theme: bool = ...,
        gtk_cursor_aspect_ratio: float = ...,
        gtk_cursor_blink: bool = ...,
        gtk_cursor_blink_time: int = ...,
        gtk_cursor_blink_timeout: int = ...,
        gtk_cursor_theme_name: str = ...,
        gtk_cursor_theme_size: int = ...,
        gtk_decoration_layout: str = ...,
        gtk_dialogs_use_header: bool = ...,
        gtk_dnd_drag_threshold: int = ...,
        gtk_double_click_distance: int = ...,
        gtk_double_click_time: int = ...,
        gtk_enable_accels: bool = ...,
        gtk_enable_animations: bool = ...,
        gtk_enable_event_sounds: bool = ...,
        gtk_enable_input_feedback_sounds: bool = ...,
        gtk_enable_primary_paste: bool = ...,
        gtk_entry_password_hint_timeout: int = ...,
        gtk_entry_select_on_focus: bool = ...,
        gtk_error_bell: bool = ...,
        gtk_font_name: str = ...,
        gtk_fontconfig_timestamp: int = ...,
        gtk_hint_font_metrics: bool = ...,
        gtk_icon_theme_name: str = ...,
        gtk_im_module: str = ...,
        gtk_keynav_use_caret: bool = ...,
        gtk_label_select_on_focus: bool = ...,
        gtk_long_press_time: int = ...,
        gtk_overlay_scrolling: bool = ...,
        gtk_primary_button_warps_slider: bool = ...,
        gtk_print_backends: str = ...,
        gtk_print_preview_command: str = ...,
        gtk_recent_files_enabled: bool = ...,
        gtk_recent_files_max_age: int = ...,
        gtk_shell_shows_app_menu: bool = ...,
        gtk_shell_shows_desktop: bool = ...,
        gtk_shell_shows_menubar: bool = ...,
        gtk_sound_theme_name: str = ...,
        gtk_split_cursor: bool = ...,
        gtk_theme_name: str = ...,
        gtk_titlebar_double_click: str = ...,
        gtk_titlebar_middle_click: str = ...,
        gtk_titlebar_right_click: str = ...,
        gtk_xft_antialias: int = ...,
        gtk_xft_dpi: int = ...,
        gtk_xft_hinting: int = ...,
        gtk_xft_hintstyle: str = ...,
        gtk_xft_rgba: str = ...,
    ): ...
    @staticmethod
    def get_default() -> Optional[Settings]:
        """
        Gets the `GtkSettings` object for the default display, creating
        it if necessary.

        See [func@Gtk.Settings.get_for_display].

        Parameters:


        Returns:
            Optional[Settings]: a `GtkSettings` object. If there is
        no default display, then returns %NULL.

        """
        ...

    @staticmethod
    def get_for_display(display: Gdk.Display) -> Settings:
        """
        Gets the `GtkSettings` object for @display, creating it if necessary.

        Parameters:
            display: a `GdkDisplay`

        Returns:
            Settings: a `GtkSettings` object

        """
        ...

    def reset_property(self, name: str) -> None:
        """
        Undoes the effect of calling g_object_set() to install an
        application-specific value for a setting.

        After this call, the setting will again follow the session-wide
        value for this setting.

        Parameters:
            name: the name of the setting to reset

        Returns:

        """
        ...

class Shortcut(GObject.Object):
    """
    A `GtkShortcut` describes a keyboard shortcut.

    It contains a description of how to trigger the shortcut via a
    [class@Gtk.ShortcutTrigger] and a way to activate the shortcut
    on a widget via a [class@Gtk.ShortcutAction].

    The actual work is usually done via [class@Gtk.ShortcutController],
    which decides if and when to activate a shortcut. Using that controller
    directly however is rarely necessary as various higher level
    convenience APIs exist on `GtkWidget`s that make it easier to use
    shortcuts in GTK.

    `GtkShortcut` does provide functionality to make it easy for users
    to work with shortcuts, either by providing informational strings
    for display purposes or by allowing shortcuts to be configured.

    :Constructors:

    ::

        Shortcut(**properties)
        new(trigger:Gtk.ShortcutTrigger=None, action:Gtk.ShortcutAction=None) -> Gtk.Shortcut

    Object GtkShortcut

    Properties from GtkShortcut:
      action -> GtkShortcutAction: action
      arguments -> GVariant: arguments
      trigger -> GtkShortcutTrigger: trigger

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        action: Optional[ShortcutAction]
        """
        The action that gets activated by this shortcut.
        """
        arguments: Optional[GLib.Variant]
        """
        Arguments passed to activation.
        """
        trigger: Optional[ShortcutTrigger]
        """
        The trigger that triggers this shortcut.
        """

    props: Props = ...
    def __init__(
        self,
        action: Optional[ShortcutAction] = ...,
        arguments: Optional[GLib.Variant] = ...,
        trigger: Optional[ShortcutTrigger] = ...,
    ): ...
    def get_action(self) -> Optional[ShortcutAction]:
        """
        Gets the action that is activated by this shortcut.

        Parameters:


        Returns:
            Optional[ShortcutAction]: the action

        """
        ...

    def get_arguments(self) -> Optional[GLib.Variant]:
        """
        Gets the arguments that are passed when activating the shortcut.

        Parameters:


        Returns:
            Optional[GLib.Variant]: the arguments

        """
        ...

    def get_trigger(self) -> Optional[ShortcutTrigger]:
        """
        Gets the trigger used to trigger @self.

        Parameters:


        Returns:
            Optional[ShortcutTrigger]: the trigger used

        """
        ...

    @classmethod
    def new(
        cls,
        trigger: Optional[ShortcutTrigger] = None,
        action: Optional[ShortcutAction] = None,
    ) -> Shortcut:
        """
        Creates a new `GtkShortcut` that is triggered by
        @trigger and then activates @action.

        Parameters:
            trigger: The trigger that will trigger the shortcut
            action: The action that will be activated upon
        triggering

        Returns:
            Shortcut: a new `GtkShortcut`

        """
        ...

    def set_action(self, action: Optional[ShortcutAction] = None) -> None:
        """
        Sets the new action for @self to be @action.

        Parameters:
            action: The new action.
        If the @action is %NULL, the nothing action will be used.

        Returns:

        """
        ...

    def set_arguments(self, args: Optional[GLib.Variant] = None) -> None:
        """
        Sets the arguments to pass when activating the shortcut.

        Parameters:
            args: arguments to pass when activating @self

        Returns:

        """
        ...

    def set_trigger(self, trigger: Optional[ShortcutTrigger] = None) -> None:
        """
        Sets the new trigger for @self to be @trigger.

        Parameters:
            trigger: The new trigger.
        If the @trigger is %NULL, the never trigger will be used.

        Returns:

        """
        ...

class ShortcutAction(GObject.Object):
    """
    `GtkShortcutAction` encodes an action that can be triggered by a
    keyboard shortcut.

    `GtkShortcutActions` contain functions that allow easy presentation
    to end users as well as being printed for debugging.

    All `GtkShortcutActions` are immutable, you can only specify their
    properties during construction. If you want to change a action, you
    have to replace it with a new one. If you need to pass arguments to
    an action, these are specified by the higher-level `GtkShortcut` object.

    To activate a `GtkShortcutAction` manually, [method@Gtk.ShortcutAction.activate]
    can be called.

    GTK provides various actions:

    - [class@Gtk.MnemonicAction]: a shortcut action that calls
    gtk_widget_mnemonic_activate()
    - [class@Gtk.CallbackAction]: a shortcut action that invokes
    a given callback
    - [class@Gtk.SignalAction]: a shortcut action that emits a
    given signal
    - [class@Gtk.ActivateAction]: a shortcut action that calls
    gtk_widget_activate()
    - [class@Gtk.NamedAction]: a shortcut action that calls
    gtk_widget_activate_action()
    - [class@Gtk.NothingAction]: a shortcut action that does nothing

    :Constructors:

    ::

        ShortcutAction(**properties)
        parse_string(string:str) -> Gtk.ShortcutAction or None

    Object GtkShortcutAction

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...

    def activate(
        self,
        flags: ShortcutActionFlags,
        widget: Widget,
        args: Optional[GLib.Variant] = None,
    ) -> bool:
        """
        Activates the action on the @widget with the given @args.

        Note that some actions ignore the passed in @flags, @widget or @args.

        Activation of an action can fail for various reasons. If the action
        is not supported by the @widget, if the @args don't match the action
        or if the activation otherwise had no effect, %FALSE will be returned.

        Parameters:
            flags: flags to activate with
            widget: Target of the activation
            args: arguments to pass

        Returns:
            bool: %TRUE if this action was activated successfully

        """
        ...

    @classmethod
    def parse_string(cls, string: str) -> Optional[ShortcutAction]:
        """
        Tries to parse the given string into an action.

        On success, the parsed action is returned. When parsing
        failed, %NULL is returned.

        The accepted strings are:

        - `nothing`, for `GtkNothingAction`
        - `activate`, for `GtkActivateAction`
        - `mnemonic-activate`, for `GtkMnemonicAction`
        - `action(NAME)`, for a `GtkNamedAction` for the action named `NAME`
        - `signal(NAME)`, for a `GtkSignalAction` for the signal `NAME`

        Parameters:
            string: the string to parse

        Returns:
            Optional[ShortcutAction]: a new `GtkShortcutAction`

        """
        ...

    def print_(self, string: GLib.String) -> None: ...
    def to_string(self) -> str:
        """
        Prints the given action into a human-readable string.

        This is a small wrapper around [method@Gtk.ShortcutAction.print]
        to help when debugging.

        Parameters:


        Returns:
            str: a new string

        """
        ...

class ShortcutActionClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ShortcutClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ShortcutClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class ShortcutController(EventController, Gio.ListModel, Buildable):
    """
    `GtkShortcutController` is an event controller that manages shortcuts.

    Most common shortcuts are using this controller implicitly, e.g. by
    adding a mnemonic underline to a [class@Gtk.Label], or by installing a key
    binding using [method@Gtk.WidgetClass.add_binding], or by adding accelerators
    to global actions using [method@Gtk.Application.set_accels_for_action].

    But it is possible to create your own shortcut controller, and add
    shortcuts to it.

    `GtkShortcutController` implements [iface@Gio.ListModel] for querying the
    shortcuts that have been added to it.

    # GtkShortcutController as GtkBuildable

    `GtkShortcutController`s can be created in [class@Gtk.Builder] ui files, to set up
    shortcuts in the same place as the widgets.

    An example of a UI definition fragment with `GtkShortcutController`:
    ```xml
    <object class='GtkButton'>
    <child>
    <object class='GtkShortcutController'>
    <property name='scope'>managed</property>
    <child>
    <object class='GtkShortcut'>
    <property name='trigger'>&lt;Control&gt;k</property>
    <property name='action'>activate</property>
    </object>
    </child>
    </object>
    </child>
    </object>
    ```

    This example creates a [class@Gtk.ActivateAction] for triggering the
    `activate` signal of the [class@Gtk.Button]. See [ctor@Gtk.ShortcutAction.parse_string]
    for the syntax for other kinds of [class@Gtk.ShortcutAction]. See
    [ctor@Gtk.ShortcutTrigger.parse_string] to learn more about the syntax
    for triggers.

    :Constructors:

    ::

        ShortcutController(**properties)
        new() -> Gtk.EventController
        new_for_model(model:Gio.ListModel) -> Gtk.EventController

    Object GtkShortcutController

    Properties from GtkShortcutController:
      item-type -> GType: item-type
      mnemonic-modifiers -> GdkModifierType: mnemonic-modifiers
      model -> GListModel: model
      n-items -> guint: n-items
      scope -> GtkShortcutScope: scope

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Properties from GtkEventController:
      widget -> GtkWidget: widget
      propagation-phase -> GtkPropagationPhase: propagation-phase
      propagation-limit -> GtkPropagationLimit: propagation-limit
      name -> gchararray: name

    Signals from GObject:
      notify (GParam)
    """

    class Props(EventController.Props, Gio.ListModel.Props, Buildable.Props):
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        mnemonic_modifiers: Gdk.ModifierType
        """
        The modifiers that need to be pressed to allow mnemonics activation.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """
        scope: ShortcutScope
        """
        What scope the shortcuts will be handled in.
        """
        model: Gio.ListModel
        """
        A list model to take shortcuts from.
        """

    props: Props = ...
    def __init__(
        self,
        mnemonic_modifiers: Gdk.ModifierType = ...,
        model: Gio.ListModel = ...,
        scope: ShortcutScope = ...,
        name: Optional[str] = ...,
        propagation_limit: PropagationLimit = ...,
        propagation_phase: PropagationPhase = ...,
    ): ...
    def add_shortcut(self, shortcut: Shortcut) -> None:
        """
        Adds @shortcut to the list of shortcuts handled by @self.

        If this controller uses an external shortcut list, this
        function does nothing.

        Parameters:
            shortcut: a `GtkShortcut`

        Returns:

        """
        ...

    def get_mnemonics_modifiers(self) -> Gdk.ModifierType:
        """
        Gets the mnemonics modifiers for when this controller activates its shortcuts.

        Parameters:


        Returns:
            Gdk.ModifierType: the controller's mnemonics modifiers

        """
        ...

    def get_scope(self) -> ShortcutScope:
        """
        Gets the scope for when this controller activates its shortcuts.

        See [method@Gtk.ShortcutController.set_scope] for details.

        Parameters:


        Returns:
            ShortcutScope: the controller's scope

        """
        ...

    @classmethod
    def new(cls) -> ShortcutController:
        """
        Creates a new shortcut controller.

        Parameters:


        Returns:
            EventController: a newly created shortcut controller

        """
        ...

    @classmethod
    def new_for_model(cls, model: Gio.ListModel) -> ShortcutController:
        """
        Creates a new shortcut controller that takes its shortcuts from
        the given list model.

        A controller created by this function does not let you add or
        remove individual shortcuts using the shortcut controller api,
        but you can change the contents of the model.

        Parameters:
            model: a `GListModel` containing shortcuts

        Returns:
            EventController: a newly created shortcut controller

        """
        ...

    def remove_shortcut(self, shortcut: Shortcut) -> None:
        """
        Removes @shortcut from the list of shortcuts handled by @self.

        If @shortcut had not been added to @controller or this controller
        uses an external shortcut list, this function does nothing.

        Parameters:
            shortcut: a `GtkShortcut`

        Returns:

        """
        ...

    def set_mnemonics_modifiers(self, modifiers: Gdk.ModifierType) -> None:
        """
        Sets the controller to use the given modifier for mnemonics.

        The mnemonics modifiers determines which modifiers need to be pressed to allow
        activation of shortcuts with mnemonics triggers.

        GTK normally uses the Alt modifier for mnemonics, except in `GtkPopoverMenu`s,
        where mnemonics can be triggered without any modifiers. It should be very
        rarely necessary to change this, and doing so is likely to interfere with
        other shortcuts.

        This value is only relevant for local shortcut controllers. Global and managed
        shortcut controllers will have their shortcuts activated from other places which
        have their own modifiers for activating mnemonics.

        Parameters:
            modifiers: the new mnemonics_modifiers to use

        Returns:

        """
        ...

    def set_scope(self, scope: ShortcutScope) -> None:
        """
        Sets the controller to have the given @scope.

        The scope allows shortcuts to be activated outside of the normal
        event propagation. In particular, it allows installing global
        keyboard shortcuts that can be activated even when a widget does
        not have focus.

        With %GTK_SHORTCUT_SCOPE_LOCAL, shortcuts will only be activated
        when the widget has focus.

        Parameters:
            scope: the new scope to use

        Returns:

        """
        ...

class ShortcutControllerClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ShortcutLabel(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkShortcutLabel` displays a single keyboard shortcut or gesture.

    The main use case for `GtkShortcutLabel` is inside a [class@Gtk.ShortcutsWindow].

    :Constructors:

    ::

        ShortcutLabel(**properties)
        new(accelerator:str) -> Gtk.Widget

    Object GtkShortcutLabel

    Properties from GtkShortcutLabel:
      accelerator -> gchararray: accelerator
      disabled-text -> gchararray: disabled-text

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        accelerator: Optional[str]
        """
        The accelerator that @self displays.

        See [property@Gtk.ShortcutsShortcut:accelerator]
        for the accepted syntax.
        """
        disabled_text: Optional[str]
        """
        The text that is displayed when no accelerator is set.
        """

    props: Props = ...
    def __init__(
        self,
        accelerator: str = ...,
        disabled_text: str = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_accelerator(self) -> Optional[str]:
        """
        Retrieves the current accelerator of @self.

        Parameters:


        Returns:
            Optional[str]: the current accelerator.

        """
        ...

    def get_disabled_text(self) -> Optional[str]:
        """
        Retrieves the text that is displayed when no accelerator is set.

        Parameters:


        Returns:
            Optional[str]: the current text displayed when no
        accelerator is set.

        """
        ...

    @classmethod
    def new(cls, accelerator: str) -> ShortcutLabel:
        """
        Creates a new `GtkShortcutLabel` with @accelerator set.

        Parameters:
            accelerator: the initial accelerator

        Returns:
            Widget: a newly-allocated `GtkShortcutLabel`

        """
        ...

    def set_accelerator(self, accelerator: str) -> None:
        """
        Sets the accelerator to be displayed by @self.

        Parameters:
            accelerator: the new accelerator

        Returns:

        """
        ...

    def set_disabled_text(self, disabled_text: str) -> None:
        """
        Sets the text to be displayed by @self when no accelerator is set.

        Parameters:
            disabled_text: the text to be displayed when no accelerator is set

        Returns:

        """
        ...

class ShortcutLabelClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ShortcutManager(GObject.GInterface):
    """
    The `GtkShortcutManager` interface is used to implement
    shortcut scopes.

    This is important for [iface@Gtk.Native] widgets that have their
    own surface, since the event controllers that are used to implement
    managed and global scopes are limited to the same native.

    Examples for widgets implementing `GtkShortcutManager` are
    [class@Gtk.Window] and [class@Gtk.Popover].

    Every widget that implements `GtkShortcutManager` will be used as a
    %GTK_SHORTCUT_SCOPE_MANAGED.



    Interface GtkShortcutManager

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

class ShortcutManagerInterface(GObject.GPointer):
    """
    The list of functions that can be implemented for the `GtkShortcutManager`
    interface.

    Note that no function is mandatory to implement, the default implementation
    will work fine.

    :Constructors:

    ::

        ShortcutManagerInterface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    add_controller: Callable[[ShortcutManager, ShortcutController], None] = ...
    remove_controller: Callable[[ShortcutManager, ShortcutController], None] = ...

class ShortcutTrigger(GObject.Object):
    """
    `GtkShortcutTrigger` tracks how a `GtkShortcut` should be activated.

    To find out if a `GtkShortcutTrigger` triggers, you can call
    [method@Gtk.ShortcutTrigger.trigger] on a `GdkEvent`.

    `GtkShortcutTriggers` contain functions that allow easy presentation
    to end users as well as being printed for debugging.

    All `GtkShortcutTriggers` are immutable, you can only specify their
    properties during construction. If you want to change a trigger, you
    have to replace it with a new one.

    :Constructors:

    ::

        ShortcutTrigger(**properties)
        parse_string(string:str) -> Gtk.ShortcutTrigger or None

    Object GtkShortcutTrigger

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...

    def compare(self, trigger2: ShortcutTrigger) -> int:
        """
        The types of @trigger1 and @trigger2 are `gconstpointer` only to allow
        use of this function as a `GCompareFunc`.

        They must each be a `GtkShortcutTrigger`.

        Parameters:
            trigger2: a `GtkShortcutTrigger`

        Returns:
            int: An integer less than, equal to, or greater than zero if
        @trigger1 is found, respectively, to be less than, to match,
        or be greater than @trigger2.

        """
        ...

    def equal(self, trigger2: ShortcutTrigger) -> bool:
        """
        Checks if @trigger1 and @trigger2 trigger under the same conditions.

        The types of @one and @two are `gconstpointer` only to allow use of this
        function with `GHashTable`. They must each be a `GtkShortcutTrigger`.

        Parameters:
            trigger2: a `GtkShortcutTrigger`

        Returns:
            bool: %TRUE if @trigger1 and @trigger2 are equal

        """
        ...

    def hash(self) -> int:
        """
        Generates a hash value for a `GtkShortcutTrigger`.

        The output of this function is guaranteed to be the same for a given
        value only per-process. It may change between different processor
        architectures or even different versions of GTK. Do not use this
        function as a basis for building protocols or file formats.

        The types of @trigger is `gconstpointer` only to allow use of this
        function with `GHashTable`. They must each be a `GtkShortcutTrigger`.

        Parameters:


        Returns:
            int: a hash value corresponding to @trigger

        """
        ...

    @classmethod
    def parse_string(cls, string: str) -> Optional[ShortcutTrigger]:
        """
        Tries to parse the given string into a trigger.

        On success, the parsed trigger is returned.
        When parsing failed, %NULL is returned.

        The accepted strings are:

        - `never`, for `GtkNeverTrigger`
        - a string parsed by gtk_accelerator_parse(), for a `GtkKeyvalTrigger`, e.g. `<Control>C`
        - underscore, followed by a single character, for `GtkMnemonicTrigger`, e.g. `_l`
        - two valid trigger strings, separated by a `|` character, for a
        `GtkAlternativeTrigger`: `<Control>q|<Control>w`

        Note that you will have to escape the `<` and `>` characters when specifying
        triggers in XML files, such as GtkBuilder ui files. Use `&lt;` instead of
        `<` and `&gt;` instead of `>`.

        Parameters:
            string: the string to parse

        Returns:
            Optional[ShortcutTrigger]: a new `GtkShortcutTrigger`

        """
        ...

    def print_(self, string: GLib.String) -> None: ...
    def print_label(self, display: Gdk.Display, string: GLib.String) -> bool:
        """
        Prints the given trigger into a string.

        This function is returning a translated string for presentation
        to end users for example in menu items or in help texts.

        The @display in use may influence the resulting string in
        various forms, such as resolving hardware keycodes or by
        causing display-specific modifier names.

        The form of the representation may change at any time and is
        not guaranteed to stay identical.

        Parameters:
            display: `GdkDisplay` to print for
            string: a `GString` to print into

        Returns:
            bool: %TRUE if something was printed or %FALSE if the
        trigger did not have a textual representation suitable
        for end users.

        """
        ...

    def to_label(self, display: Gdk.Display) -> str:
        """
        Gets textual representation for the given trigger.

        This function is returning a translated string for
        presentation to end users for example in menu items
        or in help texts.

        The @display in use may influence the resulting string in
        various forms, such as resolving hardware keycodes or by
        causing display-specific modifier names.

        The form of the representation may change at any time and is
        not guaranteed to stay identical.

        Parameters:
            display: `GdkDisplay` to print for

        Returns:
            str: a new string

        """
        ...

    def to_string(self) -> str:
        """
        Prints the given trigger into a human-readable string.

        This is a small wrapper around [method@Gtk.ShortcutTrigger.print]
        to help when debugging.

        Parameters:


        Returns:
            str: a new string

        """
        ...

    def trigger(self, event: Gdk.Event, enable_mnemonics: bool) -> Gdk.KeyMatch:
        """
        Checks if the given @event triggers @self.

        Parameters:
            event: the event to check
            enable_mnemonics: %TRUE if mnemonics should trigger. Usually the
        value of this property is determined by checking that the passed
        in @event is a Key event and has the right modifiers set.

        Returns:
            Gdk.KeyMatch: Whether the event triggered the shortcut

        """
        ...

class ShortcutTriggerClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ShortcutsGroup(Box, Accessible, Buildable, ConstraintTarget, Orientable):
    """
    A `GtkShortcutsGroup` represents a group of related keyboard shortcuts
    or gestures.

    The group has a title. It may optionally be associated with a view
    of the application, which can be used to show only relevant shortcuts
    depending on the application context.

    This widget is only meant to be used with [class@Gtk.ShortcutsWindow].

    :Constructors:

    ::

        ShortcutsGroup(**properties)

    Object GtkShortcutsGroup

    Properties from GtkShortcutsGroup:
      title -> gchararray: title
      view -> gchararray: view
      accel-size-group -> GtkSizeGroup: accel-size-group
      title-size-group -> GtkSizeGroup: title-size-group
      height -> guint: height

    Properties from GtkBox:
      spacing -> gint: spacing
      homogeneous -> gboolean: homogeneous
      baseline-child -> gint: baseline-child
      baseline-position -> GtkBaselinePosition: baseline-position

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Box.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        height: int
        """
        A rough measure for the number of lines in this group.

        This is used internally by GTK, and is not useful for applications.
        """
        title: str
        """
        The title for this group of shortcuts.
        """
        view: str
        """
        An optional view that the shortcuts in this group are relevant for.

        The group will be hidden if the [property@Gtk.ShortcutsWindow:view-name]
        property does not match the view of this group.

        Set this to %NULL to make the group always visible.
        """
        accel_size_group: SizeGroup
        """
        The size group for the accelerator portion of shortcuts in this group.

        This is used internally by GTK, and must not be modified by applications.
        """
        title_size_group: SizeGroup
        """
        The size group for the textual portion of shortcuts in this group.

        This is used internally by GTK, and must not be modified by applications.
        """

    props: Props = ...
    def __init__(
        self,
        accel_size_group: SizeGroup = ...,
        title: str = ...,
        title_size_group: SizeGroup = ...,
        view: str = ...,
        baseline_child: int = ...,
        baseline_position: BaselinePosition = ...,
        homogeneous: bool = ...,
        spacing: int = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...

class ShortcutsGroupClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ShortcutsSection(Box, Accessible, Buildable, ConstraintTarget, Orientable):
    """
    A `GtkShortcutsSection` collects all the keyboard shortcuts and gestures
    for a major application mode.

    If your application needs multiple sections, you should give each
    section a unique [property@Gtk.ShortcutsSection:section-name] and
    a [property@Gtk.ShortcutsSection:title] that can be shown in the
    section selector of the [class@Gtk.ShortcutsWindow].

    The [property@Gtk.ShortcutsSection:max-height] property can be used
    to influence how the groups in the section are distributed over pages
    and columns.

    This widget is only meant to be used with [class@Gtk.ShortcutsWindow].

    :Constructors:

    ::

        ShortcutsSection(**properties)

    Object GtkShortcutsSection

    Signals from GtkShortcutsSection:
      change-current-page (gint) -> gboolean

    Properties from GtkShortcutsSection:
      title -> gchararray: title
      section-name -> gchararray: section-name
      view-name -> gchararray: view-name
      max-height -> guint: max-height

    Properties from GtkBox:
      spacing -> gint: spacing
      homogeneous -> gboolean: homogeneous
      baseline-child -> gint: baseline-child
      baseline-position -> GtkBaselinePosition: baseline-position

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Box.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        max_height: int
        """
        The maximum number of lines to allow per column.

        This property can be used to influence how the groups in this
        section are distributed across pages and columns. The default
        value of 15 should work in most cases.
        """
        section_name: str
        """
        A unique name to identify this section among the sections
        added to the `GtkShortcutsWindow`.

        Setting the [property@Gtk.ShortcutsWindow:section-name] property
        to this string will make this section shown in the `GtkShortcutsWindow`.
        """
        title: str
        """
        The string to show in the section selector of the `GtkShortcutsWindow`
        for this section.

        If there is only one section, you don't need to set a title,
        since the section selector will not be shown in this case.
        """
        view_name: str
        """
        A view name to filter the groups in this section by.

        See [property@Gtk.ShortcutsGroup:view].

        Applications are expected to use the
        [property@Gtk.ShortcutsWindow:view-name] property
        for this purpose.
        """

    props: Props = ...
    def __init__(
        self,
        max_height: int = ...,
        section_name: str = ...,
        title: str = ...,
        view_name: str = ...,
        baseline_child: int = ...,
        baseline_position: BaselinePosition = ...,
        homogeneous: bool = ...,
        spacing: int = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...

class ShortcutsSectionClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ShortcutsShortcut(Widget, Accessible, Buildable, ConstraintTarget):
    """
    A `GtkShortcutsShortcut` represents a single keyboard shortcut or gesture
    with a short text.

    This widget is only meant to be used with `GtkShortcutsWindow`.

    :Constructors:

    ::

        ShortcutsShortcut(**properties)

    Object GtkShortcutsShortcut

    Properties from GtkShortcutsShortcut:
      accelerator -> gchararray: accelerator
      icon -> GIcon: icon
      icon-set -> gboolean: icon-set
      title -> gchararray: title
      subtitle -> gchararray: subtitle
      subtitle-set -> gboolean: subtitle-set
      accel-size-group -> GtkSizeGroup: accel-size-group
      title-size-group -> GtkSizeGroup: title-size-group
      direction -> GtkTextDirection: direction
      shortcut-type -> GtkShortcutType: shortcut-type
      action-name -> gchararray: action-name

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        accelerator: str
        """
        The accelerator(s) represented by this object.

        This property is used if [property@Gtk.ShortcutsShortcut:shortcut-type]
        is set to %GTK_SHORTCUT_ACCELERATOR.

        The syntax of this property is (an extension of) the syntax understood
        by [func@Gtk.accelerator_parse]. Multiple accelerators can be specified
        by separating them with a space, but keep in mind that the available width
        is limited.

        It is also possible to specify ranges of shortcuts, using `...` between
        the keys. Sequences of keys can be specified using a `+` or `&` between
        the keys.

        Examples:

        - A single shortcut: `<ctl><alt>delete`
        - Two alternative shortcuts: `<shift>a Home`
        - A range of shortcuts: `<alt>1...<alt>9`
        - Several keys pressed together: `Control_L&Control_R`
        - A sequence of shortcuts or keys: `<ctl>c+<ctl>x`

        Use \"+\" instead of \"&\" when the keys may (or have to be) pressed
        sequentially (e.g use \"t+t\" for 'press the t key twice').

        Note that `<`, `>` and `&` need to be escaped as `&lt;`, `&gt`; and `&amp`; when used
        in .ui files.
        """
        action_name: str
        """
        A detailed action name.

        If this is set for a shortcut of type %GTK_SHORTCUT_ACCELERATOR,
        then GTK will use the accelerators that are associated with the
        action via [method@Gtk.Application.set_accels_for_action], and
        setting [property@Gtk.ShortcutsShortcut:accelerator] is not necessary.
        """
        direction: TextDirection
        """
        The text direction for which this shortcut is active.

        If the shortcut is used regardless of the text direction,
        set this property to %GTK_TEXT_DIR_NONE.
        """
        icon: Gio.Icon
        """
        An icon to represent the shortcut or gesture.

        This property is used if [property@Gtk.ShortcutsShortcut:shortcut-type]
        is set to %GTK_SHORTCUT_GESTURE.

        For the other predefined gesture types, GTK provides an icon on its own.
        """
        icon_set: bool
        """
        %TRUE if an icon has been set.
        """
        shortcut_type: ShortcutType
        """
        The type of shortcut that is represented.
        """
        subtitle: str
        """
        The subtitle for the shortcut or gesture.

        This is typically used for gestures and should be a short, one-line
        text that describes the gesture itself. For the predefined gesture
        types, GTK provides a subtitle on its own.
        """
        subtitle_set: bool
        """
        %TRUE if a subtitle has been set.
        """
        title: str
        """
        The textual description for the shortcut or gesture represented by
        this object.

        This should be a short string that can fit in a single line.
        """
        accel_size_group: SizeGroup
        """
        The size group for the accelerator portion of this shortcut.

        This is used internally by GTK, and must not be modified by applications.
        """
        title_size_group: SizeGroup
        """
        The size group for the textual portion of this shortcut.

        This is used internally by GTK, and must not be modified by applications.
        """

    props: Props = ...
    def __init__(
        self,
        accel_size_group: SizeGroup = ...,
        accelerator: str = ...,
        action_name: str = ...,
        direction: TextDirection = ...,
        icon: Gio.Icon = ...,
        icon_set: bool = ...,
        shortcut_type: ShortcutType = ...,
        subtitle: str = ...,
        subtitle_set: bool = ...,
        title: str = ...,
        title_size_group: SizeGroup = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...

class ShortcutsShortcutClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ShortcutsWindow(
    Window, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager
):
    """
    A `GtkShortcutsWindow` shows information about the keyboard shortcuts
    and gestures of an application.

    The shortcuts can be grouped, and you can have multiple sections in this
    window, corresponding to the major modes of your application.

    Additionally, the shortcuts can be filtered by the current view, to avoid
    showing information that is not relevant in the current application context.

    The recommended way to construct a `GtkShortcutsWindow` is with
    [class@Gtk.Builder], by populating a `GtkShortcutsWindow` with one or
    more `GtkShortcutsSection` objects, which contain `GtkShortcutsGroups`
    that in turn contain objects of class `GtkShortcutsShortcut`.

    # A simple example:

    ![](gedit-shortcuts.png)

    This example has as single section. As you can see, the shortcut groups
    are arranged in columns, and spread across several pages if there are too
    many to find on a single page.

    The .ui file for this example can be found [here](https://gitlab.gnome.org/GNOME/gtk/tree/main/demos/gtk-demo/shortcuts-gedit.ui).

    # An example with multiple views:

    ![](clocks-shortcuts.png)

    This example shows a `GtkShortcutsWindow` that has been configured to show only
    the shortcuts relevant to the \"stopwatch\" view.

    The .ui file for this example can be found [here](https://gitlab.gnome.org/GNOME/gtk/tree/main/demos/gtk-demo/shortcuts-clocks.ui).

    # An example with multiple sections:

    ![](builder-shortcuts.png)

    This example shows a `GtkShortcutsWindow` with two sections, \"Editor Shortcuts\"
    and \"Terminal Shortcuts\".

    The .ui file for this example can be found [here](https://gitlab.gnome.org/GNOME/gtk/tree/main/demos/gtk-demo/shortcuts-builder.ui).

    ## CSS nodes

    `GtkShortcutsWindow` has a single CSS node with the name `window` and style
    class `.shortcuts`.

    :Constructors:

    ::

        ShortcutsWindow(**properties)

    Object GtkShortcutsWindow

    Signals from GtkShortcutsWindow:
      close ()
      search ()

    Properties from GtkShortcutsWindow:
      section-name -> gchararray: section-name
      view-name -> gchararray: view-name

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Window.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ):
        section_name: str
        """
        The name of the section to show.

        This should be the section-name of one of the `GtkShortcutsSection`
        objects that are in this shortcuts window.
        """
        view_name: str
        """
        The view name by which to filter the contents.

        This should correspond to the [property@Gtk.ShortcutsGroup:view]
        property of some of the [class@Gtk.ShortcutsGroup] objects that
        are inside this shortcuts window.

        Set this to %NULL to show all groups.
        """

    props: Props = ...
    def __init__(
        self,
        section_name: str = ...,
        view_name: str = ...,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...

class SignalAction(ShortcutAction):
    """
    A `GtkShortcut`Action that emits a signal.

    Signals that are used in this way are referred to as keybinding signals,
    and they are expected to be defined with the %G_SIGNAL_ACTION flag.

    :Constructors:

    ::

        SignalAction(**properties)
        new(signal_name:str) -> Gtk.SignalAction

    Object GtkSignalAction

    Properties from GtkSignalAction:
      signal-name -> gchararray: signal-name

    Signals from GObject:
      notify (GParam)
    """

    class Props(ShortcutAction.Props):
        signal_name: str
        """
        The name of the signal to emit.
        """

    props: Props = ...
    def __init__(self, signal_name: str = ...): ...
    def get_signal_name(self) -> str:
        """
        Returns the name of the signal that will be emitted.

        Parameters:


        Returns:
            str: the name of the signal to emit

        """
        ...

    @classmethod
    def new(cls, signal_name: str) -> SignalAction:
        """
        Creates an action that when activated, emits the given action signal
        on the provided widget.

        It will also unpack the args into arguments passed to the signal.

        Parameters:
            signal_name: name of the signal to emit

        Returns:
            SignalAction: a new `GtkShortcutAction`

        """
        ...

class SignalActionClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class SignalListItemFactory(ListItemFactory):
    """
    `GtkSignalListItemFactory` is a `GtkListItemFactory` that emits signals
    to manage listitems.

    Signals are emitted for every listitem in the same order:

    1. [signal@Gtk.SignalListItemFactory::setup] is emitted to set up permanent
    things on the listitem. This usually means constructing the widgets used in
    the row and adding them to the listitem.

    2. [signal@Gtk.SignalListItemFactory::bind] is emitted to bind the item passed
    via [property@Gtk.ListItem:item] to the widgets that have been created in
    step 1 or to add item-specific widgets. Signals are connected to listen to
    changes - both to changes in the item to update the widgets or to changes
    in the widgets to update the item. After this signal has been called, the
    listitem may be shown in a list widget.

    3. [signal@Gtk.SignalListItemFactory::unbind] is emitted to undo everything
    done in step 2. Usually this means disconnecting signal handlers. Once this
    signal has been called, the listitem will no longer be used in a list
    widget.

    4. [signal@Gtk.SignalListItemFactory::bind] and
    [signal@Gtk.SignalListItemFactory::unbind] may be emitted multiple times
    again to bind the listitem for use with new items. By reusing listitems,
    potentially costly setup can be avoided. However, it means code needs to
    make sure to properly clean up the listitem in step 3 so that no information
    from the previous use leaks into the next use.

    5. [signal@Gtk.SignalListItemFactory::teardown] is emitted to allow undoing
    the effects of [signal@Gtk.SignalListItemFactory::setup]. After this signal
    was emitted on a listitem, the listitem will be destroyed and not be used again.

    Note that during the signal emissions, changing properties on the
    listitems passed will not trigger notify signals as the listitem's
    notifications are frozen. See g_object_freeze_notify() for details.

    For tracking changes in other properties in the listitem, the
    ::notify signal is recommended. The signal can be connected in the
    [signal@Gtk.SignalListItemFactory::setup] signal and removed again during
    [signal@Gtk.SignalListItemFactory::teardown].

    :Constructors:

    ::

        SignalListItemFactory(**properties)
        new() -> Gtk.ListItemFactory

    Object GtkSignalListItemFactory

    Signals from GtkSignalListItemFactory:
      setup (GObject)
      bind (GObject)
      unbind (GObject)
      teardown (GObject)

    Signals from GObject:
      notify (GParam)
    """

    class Props(ListItemFactory.Props): ...

    @classmethod
    def new(cls) -> SignalListItemFactory:
        """
        Creates a new `GtkSignalListItemFactory`.

        You need to connect signal handlers before you use it.

        Parameters:


        Returns:
            ListItemFactory: a new `GtkSignalListItemFactory`

        """
        ...

class SignalListItemFactoryClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class SingleSelection(GObject.Object, Gio.ListModel, SectionModel, SelectionModel):
    """
    `GtkSingleSelection` is a `GtkSelectionModel` that allows selecting a single
    item.

    Note that the selection is *persistent* -- if the selected item is removed
    and re-added in the same [signal@Gio.ListModel::items-changed] emission, it
    stays selected. In particular, this means that changing the sort order of an
    underlying sort model will preserve the selection.

    :Constructors:

    ::

        SingleSelection(**properties)
        new(model:Gio.ListModel=None) -> Gtk.SingleSelection

    Object GtkSingleSelection

    Properties from GtkSingleSelection:
      autoselect -> gboolean: autoselect
      can-unselect -> gboolean: can-unselect
      item-type -> GType: item-type
      model -> GListModel: model
      n-items -> guint: n-items
      selected -> guint: selected
      selected-item -> GObject: selected-item

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkSectionModel:
      sections-changed (guint, guint)

    Signals from GtkSelectionModel:
      selection-changed (guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        GObject.Object.Props,
        Gio.ListModel.Props,
        SectionModel.Props,
        SelectionModel.Props,
    ):
        autoselect: bool
        """
        If the selection will always select an item.
        """
        can_unselect: bool
        """
        If unselecting the selected item is allowed.
        """
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        model: Optional[Gio.ListModel]
        """
        The model being managed.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """
        selected: int
        """
        Position of the selected item.
        """
        selected_item: Optional[GObject.Object]
        """
        The selected item.
        """

    props: Props = ...
    def __init__(
        self,
        autoselect: bool = ...,
        can_unselect: bool = ...,
        model: Optional[Gio.ListModel] = ...,
        selected: int = ...,
    ): ...
    def get_autoselect(self) -> bool:
        """
        Checks if autoselect has been enabled or disabled via
        gtk_single_selection_set_autoselect().

        Parameters:


        Returns:
            bool: %TRUE if autoselect is enabled

        """
        ...

    def get_can_unselect(self) -> bool:
        """
        If %TRUE, gtk_selection_model_unselect_item() is supported and allows
        unselecting the selected item.

        Parameters:


        Returns:
            bool: %TRUE to support unselecting

        """
        ...

    def get_model(self) -> Optional[Gio.ListModel]:
        """
        Gets the model that @self is wrapping.

        Parameters:


        Returns:
            Optional[Gio.ListModel]: The model being wrapped

        """
        ...

    def get_selected(self) -> int:
        """
        Gets the position of the selected item.

        If no item is selected, %GTK_INVALID_LIST_POSITION is returned.

        Parameters:


        Returns:
            int: The position of the selected item

        """
        ...

    def get_selected_item(self) -> Optional[GObject.Object]:
        """
        Gets the selected item.

        If no item is selected, %NULL is returned.

        Parameters:


        Returns:
            Optional[GObject.Object]: The selected item

        """
        ...

    @classmethod
    def new(cls, model: Optional[Gio.ListModel] = None) -> SingleSelection:
        """
        Creates a new selection to handle @model.

        Parameters:
            model: the `GListModel` to manage

        Returns:
            SingleSelection: a new `GtkSingleSelection`

        """
        ...

    def set_autoselect(self, autoselect: bool) -> None:
        """
        Enables or disables autoselect.

        If @autoselect is %TRUE, @self will enforce that an item is always
        selected. It will select a new item when the currently selected
        item is deleted and it will disallow unselecting the current item.

        Parameters:
            autoselect: %TRUE to always select an item

        Returns:

        """
        ...

    def set_can_unselect(self, can_unselect: bool) -> None:
        """
        If %TRUE, unselecting the current item via
        gtk_selection_model_unselect_item() is supported.

        Note that setting [property@Gtk.SingleSelection:autoselect] will
        cause unselecting to not work, so it practically makes no sense
        to set both at the same time the same time.

        Parameters:
            can_unselect: %TRUE to allow unselecting

        Returns:

        """
        ...

    def set_model(self, model: Optional[Gio.ListModel] = None) -> None:
        """
        Sets the model that @self should wrap.

        If @model is %NULL, @self will be empty.

        Parameters:
            model: A `GListModel` to wrap

        Returns:

        """
        ...

    def set_selected(self, position: int) -> None:
        """
        Selects the item at the given position.

        If the list does not have an item at @position or
        %GTK_INVALID_LIST_POSITION is given, the behavior depends on the
        value of the [property@Gtk.SingleSelection:autoselect] property:
        If it is set, no change will occur and the old item will stay
        selected. If it is unset, the selection will be unset and no item
        will be selected.

        Parameters:
            position: the item to select or %GTK_INVALID_LIST_POSITION

        Returns:

        """
        ...

class SingleSelectionClass(GObject.GPointer):
    """
    :Constructors:

    ::

        SingleSelectionClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class SizeGroup(GObject.Object, Buildable):
    """
    `GtkSizeGroup` groups widgets together so they all request the same size.

    This is typically useful when you want a column of widgets to have the
    same size, but you can’t use a `GtkGrid`.

    In detail, the size requested for each widget in a `GtkSizeGroup` is
    the maximum of the sizes that would have been requested for each
    widget in the size group if they were not in the size group. The mode
    of the size group (see [method@Gtk.SizeGroup.set_mode]) determines whether
    this applies to the horizontal size, the vertical size, or both sizes.

    Note that size groups only affect the amount of space requested, not
    the size that the widgets finally receive. If you want the widgets in
    a `GtkSizeGroup` to actually be the same size, you need to pack them in
    such a way that they get the size they request and not more.

    `GtkSizeGroup` objects are referenced by each widget in the size group,
    so once you have added all widgets to a `GtkSizeGroup`, you can drop
    the initial reference to the size group with g_object_unref(). If the
    widgets in the size group are subsequently destroyed, then they will
    be removed from the size group and drop their references on the size
    group; when all widgets have been removed, the size group will be
    freed.

    Widgets can be part of multiple size groups; GTK will compute the
    horizontal size of a widget from the horizontal requisition of all
    widgets that can be reached from the widget by a chain of size groups
    of type %GTK_SIZE_GROUP_HORIZONTAL or %GTK_SIZE_GROUP_BOTH, and the
    vertical size from the vertical requisition of all widgets that can be
    reached from the widget by a chain of size groups of type
    %GTK_SIZE_GROUP_VERTICAL or %GTK_SIZE_GROUP_BOTH.

    Note that only non-contextual sizes of every widget are ever consulted
    by size groups (since size groups have no knowledge of what size a widget
    will be allocated in one dimension, it cannot derive how much height
    a widget will receive for a given width). When grouping widgets that
    trade height for width in mode %GTK_SIZE_GROUP_VERTICAL or %GTK_SIZE_GROUP_BOTH:
    the height for the minimum width will be the requested height for all
    widgets in the group. The same is of course true when horizontally grouping
    width for height widgets.

    Widgets that trade height-for-width should set a reasonably large minimum
    width by way of [property@Gtk.Label:width-chars] for instance. Widgets with
    static sizes as well as widgets that grow (such as ellipsizing text) need no
    such considerations.

    # GtkSizeGroup as GtkBuildable

    Size groups can be specified in a UI definition by placing an `<object>`
    element with `class=\"GtkSizeGroup\"` somewhere in the UI definition. The
    widgets that belong to the size group are specified by a `<widgets>` element
    that may contain multiple `<widget>` elements, one for each member of the
    size group. The ”name” attribute gives the id of the widget.

    An example of a UI definition fragment with `GtkSizeGroup`:
    ```xml
    <object class=\"GtkSizeGroup\">
    <property name=\"mode\">horizontal</property>
    <widgets>
    <widget name=\"radio1\"/>
    <widget name=\"radio2\"/>
    </widgets>
    </object>
    ```

    :Constructors:

    ::

        SizeGroup(**properties)
        new(mode:Gtk.SizeGroupMode) -> Gtk.SizeGroup

    Object GtkSizeGroup

    Properties from GtkSizeGroup:
      mode -> GtkSizeGroupMode: mode

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Buildable.Props):
        mode: SizeGroupMode
        """
        The direction in which the size group affects requested sizes.
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    def __init__(self, mode: SizeGroupMode = ...): ...
    def add_widget(self, widget: Widget) -> None:
        """
        Adds a widget to a `GtkSizeGroup`.

        In the future, the requisition
        of the widget will be determined as the maximum of its requisition
        and the requisition of the other widgets in the size group.
        Whether this applies horizontally, vertically, or in both directions
        depends on the mode of the size group.
        See [method@Gtk.SizeGroup.set_mode].

        When the widget is destroyed or no longer referenced elsewhere, it
        will be removed from the size group.

        Parameters:
            widget: the `GtkWidget` to add

        Returns:

        """
        ...

    def get_mode(self) -> SizeGroupMode:
        """
        Gets the current mode of the size group.

        Parameters:


        Returns:
            SizeGroupMode: the current mode of the size group.

        """
        ...

    def get_widgets(self) -> list[Widget]:
        """
        Returns the list of widgets associated with @size_group.

        Parameters:


        Returns:
            list[Widget]: a `GSList` of
        widgets. The list is owned by GTK and should not be modified.

        """
        ...

    @classmethod
    def new(cls, mode: SizeGroupMode) -> SizeGroup:
        """
        Create a new `GtkSizeGroup`.

        Parameters:
            mode: the mode for the new size group.

        Returns:
            SizeGroup: a newly created `GtkSizeGroup`

        """
        ...

    def remove_widget(self, widget: Widget) -> None:
        """
        Removes a widget from a `GtkSizeGroup`.

        Parameters:
            widget: the `GtkWidget` to remove

        Returns:

        """
        ...

    def set_mode(self, mode: SizeGroupMode) -> None:
        """
        Sets the `GtkSizeGroupMode` of the size group.

        The mode of the size group determines whether the widgets in the
        size group should all have the same horizontal requisition
        (%GTK_SIZE_GROUP_HORIZONTAL) all have the same vertical requisition
        (%GTK_SIZE_GROUP_VERTICAL), or should all have the same requisition
        in both directions (%GTK_SIZE_GROUP_BOTH).

        Parameters:
            mode: the mode to set for the size group.

        Returns:

        """
        ...

class SliceListModel(GObject.Object, Gio.ListModel, SectionModel):
    """
    `GtkSliceListModel` is a list model that presents a slice of another model.

    This is useful when implementing paging by setting the size to the number
    of elements per page and updating the offset whenever a different page is
    opened.

    `GtkSliceListModel` passes through sections from the underlying model.

    :Constructors:

    ::

        SliceListModel(**properties)
        new(model:Gio.ListModel=None, offset:int, size:int) -> Gtk.SliceListModel

    Object GtkSliceListModel

    Properties from GtkSliceListModel:
      item-type -> GType: item-type
      model -> GListModel: model
      n-items -> guint: n-items
      offset -> guint: offset
      size -> guint: size

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkSectionModel:
      sections-changed (guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gio.ListModel.Props, SectionModel.Props):
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        model: Optional[Gio.ListModel]
        """
        Child model to take slice from.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """
        offset: int
        """
        Offset of slice.
        """
        size: int
        """
        Maximum size of slice.
        """

    props: Props = ...
    def __init__(
        self, model: Optional[Gio.ListModel] = ..., offset: int = ..., size: int = ...
    ): ...
    def get_model(self) -> Optional[Gio.ListModel]:
        """
        Gets the model that is currently being used or %NULL if none.

        Parameters:


        Returns:
            Optional[Gio.ListModel]: The model in use

        """
        ...

    def get_offset(self) -> int:
        """
        Gets the offset set via gtk_slice_list_model_set_offset().

        Parameters:


        Returns:
            int: The offset

        """
        ...

    def get_size(self) -> int:
        """
        Gets the size set via gtk_slice_list_model_set_size().

        Parameters:


        Returns:
            int: The size

        """
        ...

    @classmethod
    def new(
        cls, model: Optional[Gio.ListModel], offset: int, size: int
    ) -> SliceListModel:
        """
        Creates a new slice model.

        It presents the slice from @offset to offset + @size
        of the given @model.

        Parameters:
            model: The model to use
            offset: the offset of the slice
            size: maximum size of the slice

        Returns:
            SliceListModel: A new `GtkSliceListModel`

        """
        ...

    def set_model(self, model: Optional[Gio.ListModel] = None) -> None:
        """
        Sets the model to show a slice of.

        The model's item type must conform to @self's item type.

        Parameters:
            model: The model to be sliced

        Returns:

        """
        ...

    def set_offset(self, offset: int) -> None:
        """
        Sets the offset into the original model for this slice.

        If the offset is too large for the sliced model,
        @self will end up empty.

        Parameters:
            offset: the new offset to use

        Returns:

        """
        ...

    def set_size(self, size: int) -> None:
        """
        Sets the maximum size. @self will never have more items
        than @size.

        It can however have fewer items if the offset is too large
        or the model sliced from doesn't have enough items.

        Parameters:
            size: the maximum size

        Returns:

        """
        ...

class SliceListModelClass(GObject.GPointer):
    """
    :Constructors:

    ::

        SliceListModelClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class Snapshot(Gdk.Snapshot):
    """
    `GtkSnapshot` assists in creating [class@Gsk.RenderNode]s for widgets.

    It functions in a similar way to a cairo context, and maintains a stack
    of render nodes and their associated transformations.

    The node at the top of the stack is the one that `gtk_snapshot_append_…()`
    functions operate on. Use the `gtk_snapshot_push_…()` functions and
    [method@Snapshot.pop] to change the current node.

    The typical way to obtain a `GtkSnapshot` object is as an argument to
    the [vfunc@Gtk.Widget.snapshot] vfunc. If you need to create your own
    `GtkSnapshot`, use [ctor@Gtk.Snapshot.new].

    :Constructors:

    ::

        Snapshot(**properties)
        new() -> Gtk.Snapshot

    Object GtkSnapshot

    Signals from GObject:
      notify (GParam)
    """

    class Props(Gdk.Snapshot.Props): ...

    def append_border(
        self,
        outline: Gsk.RoundedRect,
        border_width: Sequence[float],
        border_color: Sequence[Gdk.RGBA],
    ) -> None:
        """
        Appends a stroked border rectangle inside the given @outline.

        The four sides of the border can have different widths and colors.

        Parameters:
            outline: the outline of the border
            border_width: the stroke width of the border on
        the top, right, bottom and left side respectively.
            border_color: the color used on the top, right,
        bottom and left side.

        Returns:

        """
        ...

    def append_cairo(self, bounds: Graphene.Rect) -> cairo.Context:
        """
        Creates a new [class@Gsk.CairoNode] and appends it to the current
        render node of @snapshot, without changing the current node.

        Parameters:
            bounds: the bounds for the new node

        Returns:
            cairo.Context: a `cairo_t` suitable for drawing the contents of
        the newly created render node

        """
        ...

    def append_color(self, color: Gdk.RGBA, bounds: Graphene.Rect) -> None:
        """
        Creates a new render node drawing the @color into the
        given @bounds and appends it to the current render node
        of @snapshot.

        You should try to avoid calling this function if
        @color is transparent.

        Parameters:
            color: the color to draw
            bounds: the bounds for the new node

        Returns:

        """
        ...

    def append_conic_gradient(
        self,
        bounds: Graphene.Rect,
        center: Graphene.Point,
        rotation: float,
        stops: Sequence[Gsk.ColorStop],
    ) -> None:
        """
        Appends a conic gradient node with the given stops to @snapshot.

        Parameters:
            bounds: the rectangle to render the gradient into
            center: the center point of the conic gradient
            rotation: the clockwise rotation in degrees of the starting angle.
        0 means the starting angle is the top.
            stops: the color stops defining the gradient

        Returns:

        """
        ...

    def append_inset_shadow(
        self,
        outline: Gsk.RoundedRect,
        color: Gdk.RGBA,
        dx: float,
        dy: float,
        spread: float,
        blur_radius: float,
    ) -> None:
        """
        Appends an inset shadow into the box given by @outline.

        Parameters:
            outline: outline of the region surrounded by shadow
            color: color of the shadow
            dx: horizontal offset of shadow
            dy: vertical offset of shadow
            spread: how far the shadow spreads towards the inside
            blur_radius: how much blur to apply to the shadow

        Returns:

        """
        ...

    def append_layout(self, layout: Pango.Layout, color: Gdk.RGBA) -> None: ...
    def append_linear_gradient(
        self,
        bounds: Graphene.Rect,
        start_point: Graphene.Point,
        end_point: Graphene.Point,
        stops: Sequence[Gsk.ColorStop],
    ) -> None:
        """
        Appends a linear gradient node with the given stops to @snapshot.

        Parameters:
            bounds: the rectangle to render the linear gradient into
            start_point: the point at which the linear gradient will begin
            end_point: the point at which the linear gradient will finish
            stops: the color stops defining the gradient

        Returns:

        """
        ...

    def append_node(self, node: Gsk.RenderNode) -> None:
        """
        Appends @node to the current render node of @snapshot,
        without changing the current node.

        If @snapshot does not have a current node yet, @node
        will become the initial node.

        Parameters:
            node: a `GskRenderNode`

        Returns:

        """
        ...

    def append_outset_shadow(
        self,
        outline: Gsk.RoundedRect,
        color: Gdk.RGBA,
        dx: float,
        dy: float,
        spread: float,
        blur_radius: float,
    ) -> None:
        """
        Appends an outset shadow node around the box given by @outline.

        Parameters:
            outline: outline of the region surrounded by shadow
            color: color of the shadow
            dx: horizontal offset of shadow
            dy: vertical offset of shadow
            spread: how far the shadow spreads towards the outside
            blur_radius: how much blur to apply to the shadow

        Returns:

        """
        ...

    def append_radial_gradient(
        self,
        bounds: Graphene.Rect,
        center: Graphene.Point,
        hradius: float,
        vradius: float,
        start: float,
        end: float,
        stops: Sequence[Gsk.ColorStop],
    ) -> None:
        """
        Appends a radial gradient node with the given stops to @snapshot.

        Parameters:
            bounds: the rectangle to render the readial gradient into
            center: the center point for the radial gradient
            hradius: the horizontal radius
            vradius: the vertical radius
            start: the start position (on the horizontal axis)
            end: the end position (on the horizontal axis)
            stops: the color stops defining the gradient

        Returns:

        """
        ...

    def append_repeating_linear_gradient(
        self,
        bounds: Graphene.Rect,
        start_point: Graphene.Point,
        end_point: Graphene.Point,
        stops: Sequence[Gsk.ColorStop],
    ) -> None:
        """
        Appends a repeating linear gradient node with the given stops to @snapshot.

        Parameters:
            bounds: the rectangle to render the linear gradient into
            start_point: the point at which the linear gradient will begin
            end_point: the point at which the linear gradient will finish
            stops: the color stops defining the gradient

        Returns:

        """
        ...

    def append_repeating_radial_gradient(
        self,
        bounds: Graphene.Rect,
        center: Graphene.Point,
        hradius: float,
        vradius: float,
        start: float,
        end: float,
        stops: Sequence[Gsk.ColorStop],
    ) -> None:
        """
        Appends a repeating radial gradient node with the given stops to @snapshot.

        Parameters:
            bounds: the rectangle to render the readial gradient into
            center: the center point for the radial gradient
            hradius: the horizontal radius
            vradius: the vertical radius
            start: the start position (on the horizontal axis)
            end: the end position (on the horizontal axis)
            stops: the color stops defining the gradient

        Returns:

        """
        ...

    def append_scaled_texture(
        self, texture: Gdk.Texture, filter: Gsk.ScalingFilter, bounds: Graphene.Rect
    ) -> None:
        """
        Creates a new render node drawing the @texture
        into the given @bounds and appends it to the
        current render node of @snapshot.

        In contrast to [method@Gtk.Snapshot.append_texture],
        this function provides control about how the filter
        that is used when scaling.

        Parameters:
            texture: the texture to render
            filter: the filter to use
            bounds: the bounds for the new node

        Returns:

        """
        ...

    def append_texture(self, texture: Gdk.Texture, bounds: Graphene.Rect) -> None:
        """
        Creates a new render node drawing the @texture
        into the given @bounds and appends it to the
        current render node of @snapshot.

        If the texture needs to be scaled to fill @bounds,
        linear filtering is used. See [method@Gtk.Snapshot.append_scaled_texture]
        if you need other filtering, such as nearest-neighbour.

        Parameters:
            texture: the texture to render
            bounds: the bounds for the new node

        Returns:

        """
        ...

    def gl_shader_pop_texture(self) -> None:
        """
        Removes the top element from the stack of render nodes and
        adds it to the nearest [class@Gsk.GLShaderNode] below it.

        This must be called the same number of times as the number
        of textures is needed for the shader in
        [method@Gtk.Snapshot.push_gl_shader].

        Parameters:


        Returns:

        """
        ...

    @classmethod
    def new(cls) -> Snapshot:
        """
        Creates a new `GtkSnapshot`.

        Parameters:


        Returns:
            Snapshot: a newly-allocated `GtkSnapshot`

        """
        ...

    def perspective(self, depth: float) -> None:
        """
        Applies a perspective projection transform.

        See [method@Gsk.Transform.perspective] for a discussion on the details.

        Parameters:
            depth: distance of the z=0 plane

        Returns:

        """
        ...

    def pop(self) -> None:
        """
        Removes the top element from the stack of render nodes,
        and appends it to the node underneath it.

        Parameters:


        Returns:

        """
        ...

    def push_blend(self, blend_mode: Gsk.BlendMode) -> None:
        """
        Blends together two images with the given blend mode.

        Until the first call to [method@Gtk.Snapshot.pop], the
        bottom image for the blend operation will be recorded.
        After that call, the top image to be blended will be
        recorded until the second call to [method@Gtk.Snapshot.pop].

        Calling this function requires two subsequent calls
        to [method@Gtk.Snapshot.pop].

        Parameters:
            blend_mode: blend mode to use

        Returns:

        """
        ...

    def push_blur(self, radius: float) -> None:
        """
        Blurs an image.

        The image is recorded until the next call to [method@Gtk.Snapshot.pop].

        Parameters:
            radius: the blur radius to use. Must be positive

        Returns:

        """
        ...

    def push_clip(self, bounds: Graphene.Rect) -> None:
        """
        Clips an image to a rectangle.

        The image is recorded until the next call to [method@Gtk.Snapshot.pop].

        Parameters:
            bounds: the rectangle to clip to

        Returns:

        """
        ...

    def push_color_matrix(
        self, color_matrix: Graphene.Matrix, color_offset: Graphene.Vec4
    ) -> None:
        """
        Modifies the colors of an image by applying an affine transformation
        in RGB space.

        In particular, the colors will be transformed by applying

        pixel = transpose(color_matrix) * pixel + color_offset

        for every pixel. The transformation operates on unpremultiplied
        colors, with color components ordered R, G, B, A.

        The image is recorded until the next call to [method@Gtk.Snapshot.pop].

        Parameters:
            color_matrix: the color matrix to use
            color_offset: the color offset to use

        Returns:

        """
        ...

    def push_cross_fade(self, progress: float) -> None:
        """
        Snapshots a cross-fade operation between two images with the
        given @progress.

        Until the first call to [method@Gtk.Snapshot.pop], the start image
        will be snapshot. After that call, the end image will be recorded
        until the second call to [method@Gtk.Snapshot.pop].

        Calling this function requires two subsequent calls
        to [method@Gtk.Snapshot.pop].

        Parameters:
            progress: progress between 0.0 and 1.0

        Returns:

        """
        ...

    def push_gl_shader(
        self, shader: Gsk.GLShader, bounds: Graphene.Rect, take_args: GLib.Bytes
    ) -> None:
        """
        Push a [class@Gsk.GLShaderNode].

        The node uses the given [class@Gsk.GLShader] and uniform values
        Additionally this takes a list of @n_children other nodes
        which will be passed to the [class@Gsk.GLShaderNode].

        The @take_args argument is a block of data to use for uniform
        arguments, as per types and offsets defined by the @shader.
        Normally this is generated by [method@Gsk.GLShader.format_args]
        or [struct@Gsk.ShaderArgsBuilder].

        The snapshotter takes ownership of @take_args, so the caller should
        not free it after this.

        If the renderer doesn't support GL shaders, or if there is any
        problem when compiling the shader, then the node will draw pink.
        You should use [method@Gsk.GLShader.compile] to ensure the @shader
        will work for the renderer before using it.

        If the shader requires textures (see [method@Gsk.GLShader.get_n_textures]),
        then it is expected that you call [method@Gtk.Snapshot.gl_shader_pop_texture]
        the number of times that are required. Each of these calls will generate
        a node that is added as a child to the `GskGLShaderNode`, which in turn
        will render these offscreen and pass as a texture to the shader.

        Once all textures (if any) are pop:ed, you must call the regular
        [method@Gtk.Snapshot.pop].

        If you want to use pre-existing textures as input to the shader rather
        than rendering new ones, use [method@Gtk.Snapshot.append_texture] to
        push a texture node. These will be used directly rather than being
        re-rendered.

        For details on how to write shaders, see [class@Gsk.GLShader].

        Parameters:
            shader: The code to run
            bounds: the rectangle to render into
            take_args: Data block with arguments for the shader.

        Returns:

        """
        ...

    def push_mask(self, mask_mode: Gsk.MaskMode) -> None:
        """
        Until the first call to [method@Gtk.Snapshot.pop], the
        mask image for the mask operation will be recorded.

        After that call, the source image will be recorded until
        the second call to [method@Gtk.Snapshot.pop].

        Calling this function requires 2 subsequent calls to gtk_snapshot_pop().

        Parameters:
            mask_mode: mask mode to use

        Returns:

        """
        ...

    def push_opacity(self, opacity: float) -> None:
        """
        Modifies the opacity of an image.

        The image is recorded until the next call to [method@Gtk.Snapshot.pop].

        Parameters:
            opacity: the opacity to use

        Returns:

        """
        ...

    def push_repeat(
        self, bounds: Graphene.Rect, child_bounds: Optional[Graphene.Rect] = None
    ) -> None:
        """
        Creates a node that repeats the child node.

        The child is recorded until the next call to [method@Gtk.Snapshot.pop].

        Parameters:
            bounds: the bounds within which to repeat
            child_bounds: the bounds of the child or %NULL
        to use the full size of the collected child node

        Returns:

        """
        ...

    def push_rounded_clip(self, bounds: Gsk.RoundedRect) -> None:
        """
        Clips an image to a rounded rectangle.

        The image is recorded until the next call to [method@Gtk.Snapshot.pop].

        Parameters:
            bounds: the rounded rectangle to clip to

        Returns:

        """
        ...

    def push_shadow(self, shadow: Sequence[Gsk.Shadow]) -> None:
        """
        Applies a shadow to an image.

        The image is recorded until the next call to [method@Gtk.Snapshot.pop].

        Parameters:
            shadow: the first shadow specification

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def render_background(
        self, context: StyleContext, x: float, y: float, width: float, height: float
    ) -> None:
        """
        Creates a render node for the CSS background according to @context,
        and appends it to the current node of @snapshot, without changing
        the current node.

        Parameters:
            context: the style context that defines the background
            x: X origin of the rectangle
            y: Y origin of the rectangle
            width: rectangle width
            height: rectangle height

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def render_focus(
        self, context: StyleContext, x: float, y: float, width: float, height: float
    ) -> None:
        """
        Creates a render node for the focus outline according to @context,
        and appends it to the current node of @snapshot, without changing
        the current node.

        Parameters:
            context: the style context that defines the focus ring
            x: X origin of the rectangle
            y: Y origin of the rectangle
            width: rectangle width
            height: rectangle height

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def render_frame(
        self, context: StyleContext, x: float, y: float, width: float, height: float
    ) -> None:
        """
        Creates a render node for the CSS border according to @context,
        and appends it to the current node of @snapshot, without changing
        the current node.

        Parameters:
            context: the style context that defines the frame
            x: X origin of the rectangle
            y: Y origin of the rectangle
            width: rectangle width
            height: rectangle height

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def render_insertion_cursor(
        self,
        context: StyleContext,
        x: float,
        y: float,
        layout: Pango.Layout,
        index: int,
        direction: Pango.Direction,
    ) -> None:
        """
        Draws a text caret using @snapshot at the specified index of @layout.

        Parameters:
            context: a `GtkStyleContext`
            x: X origin
            y: Y origin
            layout: the `PangoLayout` of the text
            index: the index in the `PangoLayout`
            direction: the `PangoDirection` of the text

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def render_layout(
        self, context: StyleContext, x: float, y: float, layout: Pango.Layout
    ) -> None:
        """
        Creates a render node for rendering @layout according to the style
        information in @context, and appends it to the current node of @snapshot,
        without changing the current node.

        Parameters:
            context: the style context that defines the text
            x: X origin of the rectangle
            y: Y origin of the rectangle
            layout: the `PangoLayout` to render

        Returns:

        """
        ...

    def restore(self) -> None:
        """
        Restores @snapshot to the state saved by a preceding call to
        [method@Snapshot.save] and removes that state from the stack of
        saved states.

        Parameters:


        Returns:

        """
        ...

    def rotate(self, angle: float) -> None:
        """
        Rotates @@snapshot's coordinate system by @angle degrees in 2D space -
        or in 3D speak, rotates around the Z axis. The rotation happens around
        the origin point of (0, 0) in the @snapshot's current coordinate system.

        To rotate around axes other than the Z axis, use [method@Gsk.Transform.rotate_3d].

        Parameters:
            angle: the rotation angle, in degrees (clockwise)

        Returns:

        """
        ...

    def rotate_3d(self, angle: float, axis: Graphene.Vec3) -> None:
        """
        Rotates @snapshot's coordinate system by @angle degrees around @axis.

        For a rotation in 2D space, use [method@Gsk.Transform.rotate].

        Parameters:
            angle: the rotation angle, in degrees (clockwise)
            axis: The rotation axis

        Returns:

        """
        ...

    def save(self) -> None:
        """
        Makes a copy of the current state of @snapshot and saves it
        on an internal stack.

        When [method@Gtk.Snapshot.restore] is called, @snapshot will
        be restored to the saved state.

        Multiple calls to [method@Gtk.Snapshot.save] and [method@Gtk.Snapshot.restore]
        can be nested; each call to `gtk_snapshot_restore()` restores the state from
        the matching paired `gtk_snapshot_save()`.

        It is necessary to clear all saved states with corresponding
        calls to `gtk_snapshot_restore()`.

        Parameters:


        Returns:

        """
        ...

    def scale(self, factor_x: float, factor_y: float) -> None:
        """
        Scales @snapshot's coordinate system in 2-dimensional space by
        the given factors.

        Use [method@Gtk.Snapshot.scale_3d] to scale in all 3 dimensions.

        Parameters:
            factor_x: scaling factor on the X axis
            factor_y: scaling factor on the Y axis

        Returns:

        """
        ...

    def scale_3d(self, factor_x: float, factor_y: float, factor_z: float) -> None:
        """
        Scales @snapshot's coordinate system by the given factors.

        Parameters:
            factor_x: scaling factor on the X axis
            factor_y: scaling factor on the Y axis
            factor_z: scaling factor on the Z axis

        Returns:

        """
        ...

    def to_node(self) -> Optional[Gsk.RenderNode]:
        """
        Returns the render node that was constructed
        by @snapshot.

        Note that this function may return %NULL if nothing has been
        added to the snapshot or if its content does not produce pixels
        to be rendered.

        After calling this function, it is no longer possible to
        add more nodes to @snapshot. The only function that should
        be called after this is [method@GObject.Object.unref].

        Parameters:


        Returns:
            Optional[Gsk.RenderNode]: the constructed `GskRenderNode` or
        %NULL if there are no nodes to render.

        """
        ...

    def to_paintable(
        self, size: Optional[Graphene.Size] = None
    ) -> Optional[Gdk.Paintable]:
        """
        Returns a paintable encapsulating the render node
        that was constructed by @snapshot.

        After calling this function, it is no longer possible to
        add more nodes to @snapshot. The only function that should
        be called after this is [method@GObject.Object.unref].

        Parameters:
            size: The size of the resulting paintable
        or %NULL to use the bounds of the snapshot

        Returns:
            Optional[Gdk.Paintable]: a new `GdkPaintable`

        """
        ...

    def transform(self, transform: Optional[Gsk.Transform] = None) -> None:
        """
        Transforms @snapshot's coordinate system with the given @transform.

        Parameters:
            transform: the transform to apply

        Returns:

        """
        ...

    def transform_matrix(self, matrix: Graphene.Matrix) -> None:
        """
        Transforms @snapshot's coordinate system with the given @matrix.

        Parameters:
            matrix: the matrix to multiply the transform with

        Returns:

        """
        ...

    def translate(self, point: Graphene.Point) -> None:
        """
        Translates @snapshot's coordinate system by @point in 2-dimensional space.

        Parameters:
            point: the point to translate the snapshot by

        Returns:

        """
        ...

    def translate_3d(self, point: Graphene.Point3D) -> None:
        """
        Translates @snapshot's coordinate system by @point.

        Parameters:
            point: the point to translate the snapshot by

        Returns:

        """
        ...

class SnapshotClass(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class SortListModel(GObject.Object, Gio.ListModel, SectionModel):
    """
    A `GListModel` that sorts the elements of an underlying model
    according to a `GtkSorter`.

    The model is a stable sort. If two items compare equal according
    to the sorter, the one that appears first in the original model will
    also appear first after sorting.
    Note that if you change the sorter, the previous order will have no
    influence on the new order. If you want that, consider using a
    `GtkMultiSorter` and appending the previous sorter to it.

    The model can be set up to do incremental sorting, so that
    sorting long lists doesn't block the UI. See
    [method@Gtk.SortListModel.set_incremental] for details.

    `GtkSortListModel` is a generic model and because of that it
    cannot take advantage of any external knowledge when sorting.
    If you run into performance issues with `GtkSortListModel`,
    it is strongly recommended that you write your own sorting list
    model.

    `GtkSortListModel` allows sorting the items into sections. It
    implements `GtkSectionModel` and when [property@Gtk.SortListModel:section-sorter]
    is set, it will sort all items with that sorter and items comparing
    equal with it will be put into the same section.
    The [property@Gtk.SortListModel:sorter] will then be used to sort items
    inside their sections.

    :Constructors:

    ::

        SortListModel(**properties)
        new(model:Gio.ListModel=None, sorter:Gtk.Sorter=None) -> Gtk.SortListModel

    Object GtkSortListModel

    Properties from GtkSortListModel:
      incremental -> gboolean: incremental
      item-type -> GType: item-type
      model -> GListModel: model
      n-items -> guint: n-items
      pending -> guint: pending
      section-sorter -> GtkSorter: section-sorter
      sorter -> GtkSorter: sorter

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GtkSectionModel:
      sections-changed (guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gio.ListModel.Props, SectionModel.Props):
        incremental: bool
        """
        If the model should sort items incrementally.
        """
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        model: Optional[Gio.ListModel]
        """
        The model being sorted.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """
        pending: int
        """
        Estimate of unsorted items remaining.
        """
        section_sorter: Optional[Sorter]
        """
        The section sorter for this model, if one is set.
        """
        sorter: Optional[Sorter]
        """
        The sorter for this model.
        """

    props: Props = ...
    def __init__(
        self,
        incremental: bool = ...,
        model: Optional[Gio.ListModel] = ...,
        section_sorter: Optional[Sorter] = ...,
        sorter: Optional[Sorter] = ...,
    ): ...
    def get_incremental(self) -> bool:
        """
        Returns whether incremental sorting is enabled.

        See [method@Gtk.SortListModel.set_incremental].

        Parameters:


        Returns:
            bool: %TRUE if incremental sorting is enabled

        """
        ...

    def get_model(self) -> Optional[Gio.ListModel]:
        """
        Gets the model currently sorted or %NULL if none.

        Parameters:


        Returns:
            Optional[Gio.ListModel]: The model that gets sorted

        """
        ...

    def get_pending(self) -> int:
        """
        Estimates progress of an ongoing sorting operation.

        The estimate is the number of items that would still need to be
        sorted to finish the sorting operation if this was a linear
        algorithm. So this number is not related to how many items are
        already correctly sorted.

        If you want to estimate the progress, you can use code like this:
        ```c
        pending = gtk_sort_list_model_get_pending (self);
        model = gtk_sort_list_model_get_model (self);
        progress = 1.0 - pending / (double) MAX (1, g_list_model_get_n_items (model));
        ```

        If no sort operation is ongoing - in particular when
        [property@Gtk.SortListModel:incremental] is %FALSE - this
        function returns 0.

        Parameters:


        Returns:
            int: a progress estimate of remaining items to sort

        """
        ...

    def get_section_sorter(self) -> Optional[Sorter]:
        """
        Gets the section sorter that is used to sort items of @self into
        sections.

        Parameters:


        Returns:
            Optional[Sorter]: the sorter of #self

        """
        ...

    def get_sorter(self) -> Optional[Sorter]:
        """
        Gets the sorter that is used to sort @self.

        Parameters:


        Returns:
            Optional[Sorter]: the sorter of #self

        """
        ...

    @classmethod
    def new(
        cls, model: Optional[Gio.ListModel] = None, sorter: Optional[Sorter] = None
    ) -> SortListModel:
        """
        Creates a new sort list model that uses the @sorter to sort @model.

        Parameters:
            model: the model to sort
            sorter: the `GtkSorter` to sort @model with,

        Returns:
            SortListModel: a new `GtkSortListModel`

        """
        ...

    def set_incremental(self, incremental: bool) -> None:
        """
        Sets the sort model to do an incremental sort.

        When incremental sorting is enabled, the `GtkSortListModel` will not do
        a complete sort immediately, but will instead queue an idle handler that
        incrementally sorts the items towards their correct position. This of
        course means that items do not instantly appear in the right place. It
        also means that the total sorting time is a lot slower.

        When your filter blocks the UI while sorting, you might consider
        turning this on. Depending on your model and sorters, this may become
        interesting around 10,000 to 100,000 items.

        By default, incremental sorting is disabled.

        See [method@Gtk.SortListModel.get_pending] for progress information
        about an ongoing incremental sorting operation.

        Parameters:
            incremental: %TRUE to sort incrementally

        Returns:

        """
        ...

    def set_model(self, model: Optional[Gio.ListModel] = None) -> None:
        """
        Sets the model to be sorted.

        The @model's item type must conform to the item type of @self.

        Parameters:
            model: The model to be sorted

        Returns:

        """
        ...

    def set_section_sorter(self, sorter: Optional[Sorter] = None) -> None:
        """
        Sets a new section sorter on @self.

        Parameters:
            sorter: the `GtkSorter` to sort @model with

        Returns:

        """
        ...

    def set_sorter(self, sorter: Optional[Sorter] = None) -> None:
        """
        Sets a new sorter on @self.

        Parameters:
            sorter: the `GtkSorter` to sort @model with

        Returns:

        """
        ...

class SortListModelClass(GObject.GPointer):
    """
    :Constructors:

    ::

        SortListModelClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class Sorter(GObject.Object):
    """
    `GtkSorter` is an object to describe sorting criteria.

    Its primary user is [class@Gtk.SortListModel]

    The model will use a sorter to determine the order in which
    its items should appear by calling [method@Gtk.Sorter.compare]
    for pairs of items.

    Sorters may change their sorting behavior through their lifetime.
    In that case, they will emit the [signal@Gtk.Sorter::changed] signal
    to notify that the sort order is no longer valid and should be updated
    by calling gtk_sorter_compare() again.

    GTK provides various pre-made sorter implementations for common sorting
    operations. [class@Gtk.ColumnView] has built-in support for sorting lists
    via the [property@Gtk.ColumnViewColumn:sorter] property, where the user can
    change the sorting by clicking on list headers.

    Of course, in particular for large lists, it is also possible to subclass
    `GtkSorter` and provide one's own sorter.

    :Constructors:

    ::

        Sorter(**properties)

    Object GtkSorter

    Signals from GtkSorter:
      changed (GtkSorterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...
    parent_instance: GObject.Object = ...
    def changed(self, change: SorterChange) -> None:
        """
        Notifies all users of the sorter that it has changed.

        This emits the [signal@Gtk.Sorter::changed] signal. Users
        of the sorter should then update the sort order via
        [method@Gtk.Sorter.compare].

        Depending on the @change parameter, it may be possible to
        update the sort order without a full resorting. Refer to
        the [enum@Gtk.SorterChange] documentation for details.

        This function is intended for implementors of `GtkSorter`
        subclasses and should not be called from other functions.

        Parameters:
            change: How the sorter changed

        Returns:

        """
        ...

    def compare(self, item1: GObject.Object, item2: GObject.Object) -> Ordering:
        """
        Compares two given items according to the sort order implemented
        by the sorter.

        Sorters implement a partial order:

        * It is reflexive, ie a = a
        * It is antisymmetric, ie if a < b and b < a, then a = b
        * It is transitive, ie given any 3 items with a ≤ b and b ≤ c,
        then a ≤ c

        The sorter may signal it conforms to additional constraints
        via the return value of [method@Gtk.Sorter.get_order].

        Parameters:
            item1: first item to compare
            item2: second item to compare

        Returns:
            Ordering: %GTK_ORDERING_EQUAL if @item1 == @item2,
        %GTK_ORDERING_SMALLER if @item1 < @item2,
        %GTK_ORDERING_LARGER if @item1 > @item2

        """
        ...

    def do_compare(
        self,
        item1: Optional[GObject.Object] = None,
        item2: Optional[GObject.Object] = None,
    ) -> Ordering:
        """
        Compares two given items according to the sort order implemented
        by the sorter.

        Sorters implement a partial order:

        * It is reflexive, ie a = a
        * It is antisymmetric, ie if a < b and b < a, then a = b
        * It is transitive, ie given any 3 items with a ≤ b and b ≤ c,
        then a ≤ c

        The sorter may signal it conforms to additional constraints
        via the return value of [method@Gtk.Sorter.get_order].

        Parameters:
            item1: first item to compare
            item2: second item to compare

        Returns:
            Ordering: %GTK_ORDERING_EQUAL if @item1 == @item2,
        %GTK_ORDERING_SMALLER if @item1 < @item2,
        %GTK_ORDERING_LARGER if @item1 > @item2

        """
        ...

    def do_get_order(self) -> SorterOrder:
        """
        Gets the order that @self conforms to.

        See [enum@Gtk.SorterOrder] for details
        of the possible return values.

        This function is intended to allow optimizations.

        Parameters:


        Returns:
            SorterOrder: The order

        """
        ...

    def get_order(self) -> SorterOrder:
        """
        Gets the order that @self conforms to.

        See [enum@Gtk.SorterOrder] for details
        of the possible return values.

        This function is intended to allow optimizations.

        Parameters:


        Returns:
            SorterOrder: The order

        """
        ...

class SorterClass(GObject.GPointer):
    """
    The virtual table for `GtkSorter`.

    :Constructors:

    ::

        SorterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    compare: Callable[
        [Sorter, Optional[GObject.Object], Optional[GObject.Object]], Ordering
    ] = ...
    get_order: Callable[[Sorter], SorterOrder] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...
    _gtk_reserved5: None = ...
    _gtk_reserved6: None = ...
    _gtk_reserved7: None = ...
    _gtk_reserved8: None = ...

class SpinButton(
    Widget,
    Accessible,
    AccessibleRange,
    Buildable,
    CellEditable,
    ConstraintTarget,
    Editable,
    Orientable,
):
    """
    A `GtkSpinButton` is an ideal way to allow the user to set the
    value of some attribute.

    ![An example GtkSpinButton](spinbutton.png)

    Rather than having to directly type a number into a `GtkEntry`,
    `GtkSpinButton` allows the user to click on one of two arrows
    to increment or decrement the displayed value. A value can still be
    typed in, with the bonus that it can be checked to ensure it is in a
    given range.

    The main properties of a `GtkSpinButton` are through an adjustment.
    See the [class@Gtk.Adjustment] documentation for more details about
    an adjustment's properties.

    Note that `GtkSpinButton` will by default make its entry large enough
    to accommodate the lower and upper bounds of the adjustment. If this
    is not desired, the automatic sizing can be turned off by explicitly
    setting [property@Gtk.Editable:width-chars] to a value != -1.

    ## Using a GtkSpinButton to get an integer

    ```c
    // Provides a function to retrieve an integer value from a GtkSpinButton
    // and creates a spin button to model percentage values.

    int
    grab_int_value (GtkSpinButton *button,
    gpointer user_data)
    {
    return gtk_spin_button_get_value_as_int (button);
    }

    void
    create_integer_spin_button (void)
    {

    GtkWidget *window, *button;
    GtkAdjustment *adjustment;

    adjustment = gtk_adjustment_new (50.0, 0.0, 100.0, 1.0, 5.0, 0.0);

    window = gtk_window_new ();

    // creates the spinbutton, with no decimal places
    button = gtk_spin_button_new (adjustment, 1.0, 0);
    gtk_window_set_child (GTK_WINDOW (window), button);

    gtk_window_present (GTK_WINDOW (window));
    }
    ```

    ## Using a GtkSpinButton to get a floating point value

    ```c
    // Provides a function to retrieve a floating point value from a
    // GtkSpinButton, and creates a high precision spin button.

    float
    grab_float_value (GtkSpinButton *button,
    gpointer user_data)
    {
    return gtk_spin_button_get_value (button);
    }

    void
    create_floating_spin_button (void)
    {
    GtkWidget *window, *button;
    GtkAdjustment *adjustment;

    adjustment = gtk_adjustment_new (2.500, 0.0, 5.0, 0.001, 0.1, 0.0);

    window = gtk_window_new ();

    // creates the spinbutton, with three decimal places
    button = gtk_spin_button_new (adjustment, 0.001, 3);
    gtk_window_set_child (GTK_WINDOW (window), button);

    gtk_window_present (GTK_WINDOW (window));
    }
    ```

    # CSS nodes

    ```
    spinbutton.horizontal
    ├── text
    │ ├── undershoot.left
    │ ╰── undershoot.right
    ├── button.down
    ╰── button.up
    ```

    ```
    spinbutton.vertical
    ├── button.up
    ├── text
    │ ├── undershoot.left
    │ ╰── undershoot.right
    ╰── button.down
    ```

    `GtkSpinButton`s main CSS node has the name spinbutton. It creates subnodes
    for the entry and the two buttons, with these names. The button nodes have
    the style classes .up and .down. The `GtkText` subnodes (if present) are put
    below the text node. The orientation of the spin button is reflected in
    the .vertical or .horizontal style class on the main node.

    # Accessibility

    `GtkSpinButton` uses the %GTK_ACCESSIBLE_ROLE_SPIN_BUTTON role.

    :Constructors:

    ::

        SpinButton(**properties)
        new(adjustment:Gtk.Adjustment=None, climb_rate:float, digits:int) -> Gtk.Widget
        new_with_range(min:float, max:float, step:float) -> Gtk.Widget

    Object GtkSpinButton

    Signals from GtkSpinButton:
      value-changed ()
      change-value (GtkScrollType)
      input (gpointer) -> gint
      output () -> gboolean
      wrapped ()

    Properties from GtkSpinButton:
      adjustment -> GtkAdjustment: adjustment
      climb-rate -> gdouble: climb-rate
      digits -> guint: digits
      snap-to-ticks -> gboolean: snap-to-ticks
      numeric -> gboolean: numeric
      wrap -> gboolean: wrap
      update-policy -> GtkSpinButtonUpdatePolicy: update-policy
      value -> gdouble: value

    Signals from GtkEditable:
      changed ()
      insert-text (gchararray, gint, gpointer)
      delete-text (gint, gint)

    Signals from GtkCellEditable:
      editing-done ()
      remove-widget ()

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        AccessibleRange.Props,
        Buildable.Props,
        CellEditable.Props,
        ConstraintTarget.Props,
        Editable.Props,
        Orientable.Props,
    ):
        adjustment: Adjustment
        """
        The adjustment that holds the value of the spin button.
        """
        climb_rate: float
        """
        The acceleration rate when you hold down a button or key.
        """
        digits: int
        """
        The number of decimal places to display.
        """
        numeric: bool
        """
        Whether non-numeric characters should be ignored.
        """
        snap_to_ticks: bool
        """
        Whether erroneous values are automatically changed to the spin buttons
        nearest step increment.
        """
        update_policy: SpinButtonUpdatePolicy
        """
        Whether the spin button should update always, or only when the value
        is acceptable.
        """
        value: float
        """
        The current value.
        """
        wrap: bool
        """
        Whether a spin button should wrap upon reaching its limits.
        """

    props: Props = ...
    def __init__(
        self,
        adjustment: Adjustment = ...,
        climb_rate: float = ...,
        digits: int = ...,
        numeric: bool = ...,
        snap_to_ticks: bool = ...,
        update_policy: SpinButtonUpdatePolicy = ...,
        value: float = ...,
        wrap: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        editing_canceled: bool = ...,
        editable: bool = ...,
        enable_undo: bool = ...,
        max_width_chars: int = ...,
        text: str = ...,
        width_chars: int = ...,
        xalign: float = ...,
        orientation: Orientation = ...,
    ): ...
    def configure(
        self, adjustment: Optional[Adjustment], climb_rate: float, digits: int
    ) -> None:
        """
        Changes the properties of an existing spin button.

        The adjustment, climb rate, and number of decimal places
        are updated accordingly.

        Parameters:
            adjustment: a `GtkAdjustment` to replace the spin button’s
        existing adjustment, or %NULL to leave its current adjustment unchanged
            climb_rate: the new climb rate
            digits: the number of decimal places to display in the spin button

        Returns:

        """
        ...

    def get_adjustment(self) -> Adjustment:
        """
        Get the adjustment associated with a `GtkSpinButton`.

        Parameters:


        Returns:
            Adjustment: the `GtkAdjustment` of @spin_button

        """
        ...

    def get_climb_rate(self) -> float:
        """
        Returns the acceleration rate for repeated changes.

        Parameters:


        Returns:
            float: the acceleration rate

        """
        ...

    def get_digits(self) -> int:
        """
        Fetches the precision of @spin_button.

        Parameters:


        Returns:
            int: the current precision

        """
        ...

    def get_increments(self) -> Tuple[float, float]:
        """
        Gets the current step and page the increments
        used by @spin_button.

        See [method@Gtk.SpinButton.set_increments].

        Parameters:


        Returns:
            float: location to store step increment
            float: location to store page increment
        """
        ...

    def get_numeric(self) -> bool:
        """
        Returns whether non-numeric text can be typed into the spin button.

        Parameters:


        Returns:
            bool: %TRUE if only numeric text can be entered

        """
        ...

    def get_range(self) -> Tuple[float, float]:
        """
        Gets the range allowed for @spin_button.

        See [method@Gtk.SpinButton.set_range].

        Parameters:


        Returns:
            float: location to store minimum allowed value
            float: location to store maximum allowed value
        """
        ...

    def get_snap_to_ticks(self) -> bool:
        """
        Returns whether the values are corrected to the nearest step.

        Parameters:


        Returns:
            bool: %TRUE if values are snapped to the nearest step

        """
        ...

    def get_update_policy(self) -> SpinButtonUpdatePolicy:
        """
        Gets the update behavior of a spin button.

        See [method@Gtk.SpinButton.set_update_policy].

        Parameters:


        Returns:
            SpinButtonUpdatePolicy: the current update policy

        """
        ...

    def get_value(self) -> float:
        """
        Get the value in the @spin_button.

        Parameters:


        Returns:
            float: the value of @spin_button

        """
        ...

    def get_value_as_int(self) -> int:
        """
        Get the value @spin_button represented as an integer.

        Parameters:


        Returns:
            int: the value of @spin_button

        """
        ...

    def get_wrap(self) -> bool:
        """
        Returns whether the spin button’s value wraps around to the
        opposite limit when the upper or lower limit of the range is
        exceeded.

        Parameters:


        Returns:
            bool: %TRUE if the spin button wraps around

        """
        ...

    @classmethod
    def new(
        cls, adjustment: Optional[Adjustment], climb_rate: float, digits: int
    ) -> SpinButton:
        """
        Creates a new `GtkSpinButton`.

        Parameters:
            adjustment: the `GtkAdjustment` that this spin button should use
            climb_rate: specifies by how much the rate of change in the value will
        accelerate if you continue to hold down an up/down button or arrow key
            digits: the number of decimal places to display

        Returns:
            Widget: The new `GtkSpinButton`

        """
        ...

    @classmethod
    def new_with_range(cls, min: float, max: float, step: float) -> SpinButton:
        """
        Creates a new `GtkSpinButton` with the given properties.

        This is a convenience constructor that allows creation
        of a numeric `GtkSpinButton` without manually creating
        an adjustment. The value is initially set to the minimum
        value and a page increment of 10 * @step is the default.
        The precision of the spin button is equivalent to the
        precision of @step.

        Note that the way in which the precision is derived works
        best if @step is a power of ten. If the resulting precision
        is not suitable for your needs, use
        [method@Gtk.SpinButton.set_digits] to correct it.

        Parameters:
            min: Minimum allowable value
            max: Maximum allowable value
            step: Increment added or subtracted by spinning the widget

        Returns:
            Widget: The new `GtkSpinButton`

        """
        ...

    def set_adjustment(self, adjustment: Adjustment) -> None:
        """
        Replaces the `GtkAdjustment` associated with @spin_button.

        Parameters:
            adjustment: a `GtkAdjustment` to replace the existing adjustment

        Returns:

        """
        ...

    def set_climb_rate(self, climb_rate: float) -> None:
        """
        Sets the acceleration rate for repeated changes when you
        hold down a button or key.

        Parameters:
            climb_rate: the rate of acceleration, must be >= 0

        Returns:

        """
        ...

    def set_digits(self, digits: int) -> None:
        """
        Set the precision to be displayed by @spin_button.

        Up to 20 digit precision is allowed.

        Parameters:
            digits: the number of digits after the decimal point to be
        displayed for the spin button’s value

        Returns:

        """
        ...

    def set_increments(self, step: float, page: float) -> None:
        """
        Sets the step and page increments for spin_button.

        This affects how quickly the value changes when
        the spin button’s arrows are activated.

        Parameters:
            step: increment applied for a button 1 press.
            page: increment applied for a button 2 press.

        Returns:

        """
        ...

    def set_numeric(self, numeric: bool) -> None:
        """
        Sets the flag that determines if non-numeric text can be typed
        into the spin button.

        Parameters:
            numeric: flag indicating if only numeric entry is allowed

        Returns:

        """
        ...

    def set_range(self, min: float, max: float) -> None:
        """
        Sets the minimum and maximum allowable values for @spin_button.

        If the current value is outside this range, it will be adjusted
        to fit within the range, otherwise it will remain unchanged.

        Parameters:
            min: minimum allowable value
            max: maximum allowable value

        Returns:

        """
        ...

    def set_snap_to_ticks(self, snap_to_ticks: bool) -> None:
        """
        Sets the policy as to whether values are corrected to the
        nearest step increment when a spin button is activated after
        providing an invalid value.

        Parameters:
            snap_to_ticks: a flag indicating if invalid values should be corrected

        Returns:

        """
        ...

    def set_update_policy(self, policy: SpinButtonUpdatePolicy) -> None:
        """
        Sets the update behavior of a spin button.

        This determines whether the spin button is always
        updated or only when a valid value is set.

        Parameters:
            policy: a `GtkSpinButtonUpdatePolicy` value

        Returns:

        """
        ...

    def set_value(self, value: float) -> None:
        """
        Sets the value of @spin_button.

        Parameters:
            value: the new value

        Returns:

        """
        ...

    def set_wrap(self, wrap: bool) -> None:
        """
        Sets the flag that determines if a spin button value wraps
        around to the opposite limit when the upper or lower limit
        of the range is exceeded.

        Parameters:
            wrap: a flag indicating if wrapping behavior is performed

        Returns:

        """
        ...

    def spin(self, direction: SpinType, increment: float) -> None:
        """
        Increment or decrement a spin button’s value in a specified
        direction by a specified amount.

        Parameters:
            direction: a `GtkSpinType` indicating the direction to spin
            increment: step increment to apply in the specified direction

        Returns:

        """
        ...

    def update(self) -> None:
        """
        Manually force an update of the spin button.

        Parameters:


        Returns:

        """
        ...

class Spinner(Widget, Accessible, Buildable, ConstraintTarget):
    """
    A `GtkSpinner` widget displays an icon-size spinning animation.

    It is often used as an alternative to a [class@Gtk.ProgressBar]
    for displaying indefinite activity, instead of actual progress.

    ![An example GtkSpinner](spinner.png)

    To start the animation, use [method@Gtk.Spinner.start], to stop it
    use [method@Gtk.Spinner.stop].

    # CSS nodes

    `GtkSpinner` has a single CSS node with the name spinner.
    When the animation is active, the :checked pseudoclass is
    added to this node.

    :Constructors:

    ::

        Spinner(**properties)
        new() -> Gtk.Widget

    Object GtkSpinner

    Properties from GtkSpinner:
      spinning -> gboolean: spinning

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        spinning: bool
        """
        Whether the spinner is spinning
        """

    props: Props = ...
    def __init__(
        self,
        spinning: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_spinning(self) -> bool:
        """
        Returns whether the spinner is spinning.

        Parameters:


        Returns:
            bool: %TRUE if the spinner is active

        """
        ...

    @classmethod
    def new(cls) -> Spinner:
        """
        Returns a new spinner widget. Not yet started.

        Parameters:


        Returns:
            Widget: a new `GtkSpinner`

        """
        ...

    def set_spinning(self, spinning: bool) -> None:
        """
        Sets the activity of the spinner.

        Parameters:
            spinning: whether the spinner should be spinning

        Returns:

        """
        ...

    def start(self) -> None:
        """
        Starts the animation of the spinner.

        Parameters:


        Returns:

        """
        ...

    def stop(self) -> None:
        """
        Stops the animation of the spinner.

        Parameters:


        Returns:

        """
        ...

class Stack(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkStack` is a container which only shows one of its children
    at a time.

    In contrast to `GtkNotebook`, `GtkStack` does not provide a means
    for users to change the visible child. Instead, a separate widget
    such as [class@Gtk.StackSwitcher] or [class@Gtk.StackSidebar] can
    be used with `GtkStack` to provide this functionality.

    Transitions between pages can be animated as slides or fades. This
    can be controlled with [method@Gtk.Stack.set_transition_type].
    These animations respect the [property@Gtk.Settings:gtk-enable-animations]
    setting.

    `GtkStack` maintains a [class@Gtk.StackPage] object for each added
    child, which holds additional per-child properties. You
    obtain the `GtkStackPage` for a child with [method@Gtk.Stack.get_page]
    and you can obtain a `GtkSelectionModel` containing all the pages
    with [method@Gtk.Stack.get_pages].

    # GtkStack as GtkBuildable

    To set child-specific properties in a .ui file, create `GtkStackPage`
    objects explicitly, and set the child widget as a property on it:

    ```xml
    <object class=\"GtkStack\" id=\"stack\">
    <child>
    <object class=\"GtkStackPage\">
    <property name=\"name\">page1</property>
    <property name=\"title\">In the beginning…</property>
    <property name=\"child\">
    <object class=\"GtkLabel\">
    <property name=\"label\">It was dark</property>
    </object>
    </property>
    </object>
    </child>
    ```

    # CSS nodes

    `GtkStack` has a single CSS node named stack.

    # Accessibility

    `GtkStack` uses the %GTK_ACCESSIBLE_ROLE_TAB_PANEL for the stack
    pages, which are the accessible parent objects of the child widgets.

    :Constructors:

    ::

        Stack(**properties)
        new() -> Gtk.Widget

    Object GtkStack

    Properties from GtkStack:
      hhomogeneous -> gboolean: hhomogeneous
      vhomogeneous -> gboolean: vhomogeneous
      visible-child -> GtkWidget: visible-child
      visible-child-name -> gchararray: visible-child-name
      transition-duration -> guint: transition-duration
      transition-type -> GtkStackTransitionType: transition-type
      transition-running -> gboolean: transition-running
      interpolate-size -> gboolean: interpolate-size
      pages -> GtkSelectionModel: pages

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        hhomogeneous: bool
        """
        %TRUE if the stack allocates the same width for all children.
        """
        interpolate_size: bool
        """
        Whether or not the size should smoothly change during the transition.
        """
        pages: SelectionModel
        """
        A selection model with the stack pages.
        """
        transition_duration: int
        """
        The animation duration, in milliseconds.
        """
        transition_running: bool
        """
        Whether or not the transition is currently running.
        """
        transition_type: StackTransitionType
        """
        The type of animation used to transition.
        """
        vhomogeneous: bool
        """
        %TRUE if the stack allocates the same height for all children.
        """
        visible_child: Optional[Widget]
        """
        The widget currently visible in the stack.
        """
        visible_child_name: Optional[str]
        """
        The name of the widget currently visible in the stack.
        """

    props: Props = ...
    def __init__(
        self,
        hhomogeneous: bool = ...,
        interpolate_size: bool = ...,
        transition_duration: int = ...,
        transition_type: StackTransitionType = ...,
        vhomogeneous: bool = ...,
        visible_child: Widget = ...,
        visible_child_name: str = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def add_child(self, child: Widget) -> StackPage:
        """
        Adds a child to @stack.

        Parameters:
            child: the widget to add

        Returns:
            StackPage: the `GtkStackPage` for @child

        """
        ...

    def add_named(self, child: Widget, name: Optional[str] = None) -> StackPage:
        """
        Adds a child to @stack.

        The child is identified by the @name.

        Parameters:
            child: the widget to add
            name: the name for @child

        Returns:
            StackPage: the `GtkStackPage` for @child

        """
        ...

    def add_titled(self, child: Widget, name: Optional[str], title: str) -> StackPage:
        """
        Adds a child to @stack.

        The child is identified by the @name. The @title
        will be used by `GtkStackSwitcher` to represent
        @child in a tab bar, so it should be short.

        Parameters:
            child: the widget to add
            name: the name for @child
            title: a human-readable title for @child

        Returns:
            StackPage: the `GtkStackPage` for @child

        """
        ...

    def get_child_by_name(self, name: str) -> Optional[Widget]:
        """
        Finds the child with the name given as the argument.

        Returns %NULL if there is no child with this name.

        Parameters:
            name: the name of the child to find

        Returns:
            Optional[Widget]: the requested child
        of the `GtkStack`

        """
        ...

    def get_hhomogeneous(self) -> bool:
        """
        Gets whether @stack is horizontally homogeneous.

        Parameters:


        Returns:
            bool: whether @stack is horizontally homogeneous.

        """
        ...

    def get_interpolate_size(self) -> bool:
        """
        Returns whether the `GtkStack` is set up to interpolate between
        the sizes of children on page switch.

        Parameters:


        Returns:
            bool: %TRUE if child sizes are interpolated

        """
        ...

    def get_page(self, child: Widget) -> StackPage:
        """
        Returns the `GtkStackPage` object for @child.

        Parameters:
            child: a child of @stack

        Returns:
            StackPage: the `GtkStackPage` for @child

        """
        ...

    def get_pages(self) -> SelectionModel:
        """
        Returns a `GListModel` that contains the pages of the stack.

        This can be used to keep an up-to-date view. The model also
        implements [iface@Gtk.SelectionModel] and can be used to track
        and modify the visible page.

        Parameters:


        Returns:
            SelectionModel: a `GtkSelectionModel` for the stack's children

        """
        ...

    def get_transition_duration(self) -> int:
        """
        Returns the amount of time (in milliseconds) that
        transitions between pages in @stack will take.

        Parameters:


        Returns:
            int: the transition duration

        """
        ...

    def get_transition_running(self) -> bool:
        """
        Returns whether the @stack is currently in a transition from one page to
        another.

        Parameters:


        Returns:
            bool: %TRUE if the transition is currently running, %FALSE otherwise.

        """
        ...

    def get_transition_type(self) -> StackTransitionType:
        """
        Gets the type of animation that will be used
        for transitions between pages in @stack.

        Parameters:


        Returns:
            StackTransitionType: the current transition type of @stack

        """
        ...

    def get_vhomogeneous(self) -> bool:
        """
        Gets whether @stack is vertically homogeneous.

        Parameters:


        Returns:
            bool: whether @stack is vertically homogeneous.

        """
        ...

    def get_visible_child(self) -> Optional[Widget]:
        """
        Gets the currently visible child of @stack.

        Returns %NULL if there are no visible children.

        Parameters:


        Returns:
            Optional[Widget]: the visible child of the `GtkStack`

        """
        ...

    def get_visible_child_name(self) -> Optional[str]:
        """
        Returns the name of the currently visible child of @stack.

        Returns %NULL if there is no visible child.

        Parameters:


        Returns:
            Optional[str]: the name of the visible child
        of the `GtkStack`

        """
        ...

    @classmethod
    def new(cls) -> Stack:
        """
        Creates a new `GtkStack`.

        Parameters:


        Returns:
            Widget: a new `GtkStack`

        """
        ...

    def remove(self, child: Widget) -> None:
        """
        Removes a child widget from @stack.

        Parameters:
            child: the child to remove

        Returns:

        """
        ...

    def set_hhomogeneous(self, hhomogeneous: bool) -> None:
        """
        Sets the `GtkStack` to be horizontally homogeneous or not.

        If it is homogeneous, the `GtkStack` will request the same
        width for all its children. If it isn't, the stack
        may change width when a different child becomes visible.

        Parameters:
            hhomogeneous: %TRUE to make @stack horizontally homogeneous

        Returns:

        """
        ...

    def set_interpolate_size(self, interpolate_size: bool) -> None:
        """
        Sets whether or not @stack will interpolate its size when
        changing the visible child.

        If the [property@Gtk.Stack:interpolate-size] property is set
        to %TRUE, @stack will interpolate its size between the current
        one and the one it'll take after changing the visible child,
        according to the set transition duration.

        Parameters:
            interpolate_size: the new value

        Returns:

        """
        ...

    def set_transition_duration(self, duration: int) -> None:
        """
        Sets the duration that transitions between pages in @stack
        will take.

        Parameters:
            duration: the new duration, in milliseconds

        Returns:

        """
        ...

    def set_transition_type(self, transition: StackTransitionType) -> None:
        """
        Sets the type of animation that will be used for
        transitions between pages in @stack.

        Available types include various kinds of fades and slides.

        The transition type can be changed without problems
        at runtime, so it is possible to change the animation
        based on the page that is about to become current.

        Parameters:
            transition: the new transition type

        Returns:

        """
        ...

    def set_vhomogeneous(self, vhomogeneous: bool) -> None:
        """
        Sets the `GtkStack` to be vertically homogeneous or not.

        If it is homogeneous, the `GtkStack` will request the same
        height for all its children. If it isn't, the stack
        may change height when a different child becomes visible.

        Parameters:
            vhomogeneous: %TRUE to make @stack vertically homogeneous

        Returns:

        """
        ...

    def set_visible_child(self, child: Widget) -> None:
        """
        Makes @child the visible child of @stack.

        If @child is different from the currently visible child,
        the transition between the two will be animated with the
        current transition type of @stack.

        Note that the @child widget has to be visible itself
        (see [method@Gtk.Widget.show]) in order to become the visible
        child of @stack.

        Parameters:
            child: a child of @stack

        Returns:

        """
        ...

    def set_visible_child_full(
        self, name: str, transition: StackTransitionType
    ) -> None:
        """
        Makes the child with the given name visible.

        Note that the child widget has to be visible itself
        (see [method@Gtk.Widget.show]) in order to become the visible
        child of @stack.

        Parameters:
            name: the name of the child to make visible
            transition: the transition type to use

        Returns:

        """
        ...

    def set_visible_child_name(self, name: str) -> None:
        """
        Makes the child with the given name visible.

        If @child is different from the currently visible child,
        the transition between the two will be animated with the
        current transition type of @stack.

        Note that the child widget has to be visible itself
        (see [method@Gtk.Widget.show]) in order to become the visible
        child of @stack.

        Parameters:
            name: the name of the child to make visible

        Returns:

        """
        ...

class StackPage(GObject.Object, Accessible):
    """
    `GtkStackPage` is an auxiliary class used by `GtkStack`.

    :Constructors:

    ::

        StackPage(**properties)

    Object GtkStackPage

    Properties from GtkStackPage:
      child -> GtkWidget: child
      name -> gchararray: name
      title -> gchararray: title
      icon-name -> gchararray: icon-name
      needs-attention -> gboolean: needs-attention
      visible -> gboolean: visible
      use-underline -> gboolean: use-underline

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Accessible.Props):
        child: Widget
        """
        The child that this page is for.
        """
        icon_name: Optional[str]
        """
        The icon name of the child page.
        """
        name: Optional[str]
        """
        The name of the child page.
        """
        needs_attention: bool
        """
        Whether the page requires the user attention.

        This is used by the [class@Gtk.StackSwitcher] to change the
        appearance of the corresponding button when a page needs
        attention and it is not the current one.
        """
        title: Optional[str]
        """
        The title of the child page.
        """
        use_underline: bool
        """
        If set, an underline in the title indicates a mnemonic.
        """
        visible: bool
        """
        Whether this page is visible.
        """

    props: Props = ...
    def __init__(
        self,
        child: Widget = ...,
        icon_name: str = ...,
        name: str = ...,
        needs_attention: bool = ...,
        title: str = ...,
        use_underline: bool = ...,
        visible: bool = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_child(self) -> Widget:
        """
        Returns the stack child to which @self belongs.

        Parameters:


        Returns:
            Widget: the child to which @self belongs

        """
        ...

    def get_icon_name(self) -> Optional[str]:
        """
        Returns the icon name of the page.

        Parameters:


        Returns:
            Optional[str]: The value of the [property@Gtk.StackPage:icon-name] property

        """
        ...

    def get_name(self) -> Optional[str]:
        """
        Returns the name of the page.

        Parameters:


        Returns:
            Optional[str]: The value of the [property@Gtk.StackPage:name] property

        """
        ...

    def get_needs_attention(self) -> bool:
        """
        Returns whether the page is marked as “needs attention”.

        Parameters:


        Returns:
            bool: The value of the [property@Gtk.StackPage:needs-attention]
        property.

        """
        ...

    def get_title(self) -> Optional[str]:
        """
        Gets the page title.

        Parameters:


        Returns:
            Optional[str]: The value of the [property@Gtk.StackPage:title] property

        """
        ...

    def get_use_underline(self) -> bool:
        """
        Gets whether underlines in the page title indicate mnemonics.

        Parameters:


        Returns:
            bool: The value of the [property@Gtk.StackPage:use-underline] property

        """
        ...

    def get_visible(self) -> bool:
        """
        Returns whether @page is visible in its `GtkStack`.

        This is independent from the [property@Gtk.Widget:visible]
        property of its widget.

        Parameters:


        Returns:
            bool: %TRUE if @page is visible

        """
        ...

    def set_icon_name(self, setting: str) -> None:
        """
        Sets the icon name of the page.

        Parameters:
            setting: the new value to set

        Returns:

        """
        ...

    def set_name(self, setting: str) -> None:
        """
        Sets the name of the page.

        Parameters:
            setting: the new value to set

        Returns:

        """
        ...

    def set_needs_attention(self, setting: bool) -> None:
        """
        Sets whether the page is marked as “needs attention”.

        Parameters:
            setting: the new value to set

        Returns:

        """
        ...

    def set_title(self, setting: str) -> None:
        """
        Sets the page title.

        Parameters:
            setting: the new value to set

        Returns:

        """
        ...

    def set_use_underline(self, setting: bool) -> None:
        """
        Sets whether underlines in the page title indicate mnemonics.

        Parameters:
            setting: the new value to set

        Returns:

        """
        ...

    def set_visible(self, visible: bool) -> None:
        """
        Sets whether @page is visible in its `GtkStack`.

        Parameters:
            visible: The new property value

        Returns:

        """
        ...

class StackSidebar(Widget, Accessible, Buildable, ConstraintTarget):
    """
    A `GtkStackSidebar` uses a sidebar to switch between `GtkStack` pages.

    In order to use a `GtkStackSidebar`, you simply use a `GtkStack` to
    organize your UI flow, and add the sidebar to your sidebar area. You
    can use [method@Gtk.StackSidebar.set_stack] to connect the `GtkStackSidebar`
    to the `GtkStack`.

    # CSS nodes

    `GtkStackSidebar` has a single CSS node with name stacksidebar and
    style class .sidebar.

    When circumstances require it, `GtkStackSidebar` adds the
    .needs-attention style class to the widgets representing the stack
    pages.

    :Constructors:

    ::

        StackSidebar(**properties)
        new() -> Gtk.Widget

    Object GtkStackSidebar

    Properties from GtkStackSidebar:
      stack -> GtkStack: stack

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        stack: Optional[Stack]
        """
        The stack.
        """

    props: Props = ...
    def __init__(
        self,
        stack: Stack = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_stack(self) -> Optional[Stack]:
        """
        Retrieves the stack.

        Parameters:


        Returns:
            Optional[Stack]: the associated `GtkStack` or
        %NULL if none has been set explicitly

        """
        ...

    @classmethod
    def new(cls) -> StackSidebar:
        """
        Creates a new `GtkStackSidebar`.

        Parameters:


        Returns:
            Widget: the new `GtkStackSidebar`

        """
        ...

    def set_stack(self, stack: Stack) -> None:
        """
        Set the `GtkStack` associated with this `GtkStackSidebar`.

        The sidebar widget will automatically update according to
        the order and items within the given `GtkStack`.

        Parameters:
            stack: a `GtkStack`

        Returns:

        """
        ...

class StackSwitcher(Widget, Accessible, Buildable, ConstraintTarget, Orientable):
    """
    The `GtkStackSwitcher` shows a row of buttons to switch between `GtkStack`
    pages.

    ![An example GtkStackSwitcher](stackswitcher.png)

    It acts as a controller for the associated `GtkStack`.

    All the content for the buttons comes from the properties of the stacks
    [class@Gtk.StackPage] objects; the button visibility in a `GtkStackSwitcher`
    widget is controlled by the visibility of the child in the `GtkStack`.

    It is possible to associate multiple `GtkStackSwitcher` widgets
    with the same `GtkStack` widget.

    # CSS nodes

    `GtkStackSwitcher` has a single CSS node named stackswitcher and
    style class .stack-switcher.

    When circumstances require it, `GtkStackSwitcher` adds the
    .needs-attention style class to the widgets representing the
    stack pages.

    # Accessibility

    `GtkStackSwitcher` uses the %GTK_ACCESSIBLE_ROLE_TAB_LIST role
    and uses the %GTK_ACCESSIBLE_ROLE_TAB for its buttons.

    # Orientable

    Since GTK 4.4, `GtkStackSwitcher` implements `GtkOrientable` allowing
    the stack switcher to be made vertical with
    `gtk_orientable_set_orientation()`.

    :Constructors:

    ::

        StackSwitcher(**properties)
        new() -> Gtk.Widget

    Object GtkStackSwitcher

    Properties from GtkStackSwitcher:
      stack -> GtkStack: stack

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        stack: Optional[Stack]
        """
        The stack.
        """

    props: Props = ...
    def __init__(
        self,
        stack: Optional[Stack] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    def get_stack(self) -> Optional[Stack]:
        """
        Retrieves the stack.

        Parameters:


        Returns:
            Optional[Stack]: the stack

        """
        ...

    @classmethod
    def new(cls) -> StackSwitcher:
        """
        Create a new `GtkStackSwitcher`.

        Parameters:


        Returns:
            Widget: a new `GtkStackSwitcher`.

        """
        ...

    def set_stack(self, stack: Optional[Stack] = None) -> None:
        """
        Sets the stack to control.

        Parameters:
            stack: a `GtkStack`

        Returns:

        """
        ...

@deprecated("This widget will be removed in GTK 5")
class Statusbar(Widget, Accessible, Buildable, ConstraintTarget):
    """
    A `GtkStatusbar` widget is usually placed along the bottom of an application's
    main [class@Gtk.Window].

    ![An example GtkStatusbar](statusbar.png)

    A `GtkStatusBar` may provide a regular commentary of the application's
    status (as is usually the case in a web browser, for example), or may be
    used to simply output a message when the status changes, (when an upload
    is complete in an FTP client, for example).

    Status bars in GTK maintain a stack of messages. The message at
    the top of the each bar’s stack is the one that will currently be displayed.

    Any messages added to a statusbar’s stack must specify a context id that
    is used to uniquely identify the source of a message. This context id can
    be generated by [method@Gtk.Statusbar.get_context_id], given a message and
    the statusbar that it will be added to. Note that messages are stored in a
    stack, and when choosing which message to display, the stack structure is
    adhered to, regardless of the context identifier of a message.

    One could say that a statusbar maintains one stack of messages for
    display purposes, but allows multiple message producers to maintain
    sub-stacks of the messages they produced (via context ids).

    Status bars are created using [ctor@Gtk.Statusbar.new].

    Messages are added to the bar’s stack with [method@Gtk.Statusbar.push].

    The message at the top of the stack can be removed using
    [method@Gtk.Statusbar.pop]. A message can be removed from anywhere in the
    stack if its message id was recorded at the time it was added. This is done
    using [method@Gtk.Statusbar.remove].

    ## CSS node

    `GtkStatusbar` has a single CSS node with name `statusbar`.

    :Constructors:

    ::

        Statusbar(**properties)
        new() -> Gtk.Widget

    Object GtkStatusbar

    Signals from GtkStatusbar:
      text-pushed (guint, gchararray)
      text-popped (guint, gchararray)

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ): ...

    def __init__(
        self,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    @deprecated("This widget will be removed in GTK 5")
    def get_context_id(self, context_description: str) -> int:
        """
        Returns a new context identifier, given a description
        of the actual context.

        Note that the description is not shown in the UI.

        Parameters:
            context_description: textual description of what context
        the new message is being used in

        Returns:
            int: an integer id

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    @classmethod
    def new(cls) -> Statusbar:
        """
        Creates a new `GtkStatusbar` ready for messages.

        Parameters:


        Returns:
            Widget: the new `GtkStatusbar`

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def pop(self, context_id: int) -> None:
        """
        Removes the first message in the `GtkStatusbar`’s stack
        with the given context id.

        Note that this may not change the displayed message,
        if the message at the top of the stack has a different
        context id.

        Parameters:
            context_id: a context identifier

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def push(self, context_id: int, text: str) -> int:
        """
        Pushes a new message onto a statusbar’s stack.

        Parameters:
            context_id: the message’s context id, as returned by
        gtk_statusbar_get_context_id()
            text: the message to add to the statusbar

        Returns:
            int: a message id that can be used with
        [method@Gtk.Statusbar.remove].

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def remove(self, context_id: int, message_id: int) -> None:
        """
        Forces the removal of a message from a statusbar’s stack.
        The exact @context_id and @message_id must be specified.

        Parameters:
            context_id: a context identifier
            message_id: a message identifier, as returned by [method@Gtk.Statusbar.push]

        Returns:

        """
        ...

    @deprecated("This widget will be removed in GTK 5")
    def remove_all(self, context_id: int) -> None:
        """
        Forces the removal of all messages from a statusbar's
        stack with the exact @context_id.

        Parameters:
            context_id: a context identifier

        Returns:

        """
        ...

class StringFilter(Filter):
    """
    `GtkStringFilter` determines whether to include items by comparing
    strings to a fixed search term.

    The strings are obtained from the items by evaluating a `GtkExpression`
    set with [method@Gtk.StringFilter.set_expression], and they are
    compared against a search term set with [method@Gtk.StringFilter.set_search].

    `GtkStringFilter` has several different modes of comparison - it
    can match the whole string, just a prefix, or any substring. Use
    [method@Gtk.StringFilter.set_match_mode] choose a mode.

    It is also possible to make case-insensitive comparisons, with
    [method@Gtk.StringFilter.set_ignore_case].

    :Constructors:

    ::

        StringFilter(**properties)
        new(expression:Gtk.Expression=None) -> Gtk.StringFilter

    Object GtkStringFilter

    Properties from GtkStringFilter:
      expression -> GtkExpression: expression
      ignore-case -> gboolean: ignore-case
      match-mode -> GtkStringFilterMatchMode: match-mode
      search -> gchararray: search

    Signals from GtkFilter:
      changed (GtkFilterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Filter.Props):
        expression: Optional[Expression]
        """
        The expression to evaluate on item to get a string to compare with.
        """
        ignore_case: bool
        """
        If matching is case sensitive.
        """
        match_mode: StringFilterMatchMode
        """
        If exact matches are necessary or if substrings are allowed.
        """
        search: Optional[str]
        """
        The search term.
        """

    props: Props = ...
    def __init__(
        self,
        expression: Optional[Expression] = ...,
        ignore_case: bool = ...,
        match_mode: StringFilterMatchMode = ...,
        search: Optional[str] = ...,
    ): ...
    def get_expression(self) -> Optional[Expression]:
        """
        Gets the expression that the string filter uses to
        obtain strings from items.

        Parameters:


        Returns:
            Optional[Expression]: a `GtkExpression`

        """
        ...

    def get_ignore_case(self) -> bool:
        """
        Returns whether the filter ignores case differences.

        Parameters:


        Returns:
            bool: %TRUE if the filter ignores case

        """
        ...

    def get_match_mode(self) -> StringFilterMatchMode:
        """
        Returns the match mode that the filter is using.

        Parameters:


        Returns:
            StringFilterMatchMode: the match mode of the filter

        """
        ...

    def get_search(self) -> Optional[str]:
        """
        Gets the search term.

        Parameters:


        Returns:
            Optional[str]: The search term

        """
        ...

    @classmethod
    def new(cls, expression: Optional[Expression] = None) -> StringFilter:
        """
        Creates a new string filter.

        You will want to set up the filter by providing a string to search for
        and by providing a property to look up on the item.

        Parameters:
            expression: The expression to evaluate

        Returns:
            StringFilter: a new `GtkStringFilter`

        """
        ...

    def set_expression(self, expression: Optional[Expression] = None) -> None:
        """
        Sets the expression that the string filter uses to
        obtain strings from items.

        The expression must have a value type of %G_TYPE_STRING.

        Parameters:
            expression: a `GtkExpression`

        Returns:

        """
        ...

    def set_ignore_case(self, ignore_case: bool) -> None:
        """
        Sets whether the filter ignores case differences.

        Parameters:
            ignore_case: %TRUE to ignore case

        Returns:

        """
        ...

    def set_match_mode(self, mode: StringFilterMatchMode) -> None:
        """
        Sets the match mode for the filter.

        Parameters:
            mode: the new match mode

        Returns:

        """
        ...

    def set_search(self, search: Optional[str] = None) -> None:
        """
        Sets the string to search for.

        Parameters:
            search: The string to search for
        or %NULL to clear the search

        Returns:

        """
        ...

class StringFilterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        StringFilterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: FilterClass = ...

class StringList(GObject.Object, Gio.ListModel, Buildable):
    """
    `GtkStringList` is a list model that wraps an array of strings.

    The objects in the model are of type [class@Gtk.StringObject] and have
    a \"string\" property that can be used inside expressions.

    `GtkStringList` is well-suited for any place where you would
    typically use a `char*[]`, but need a list model.

    ## GtkStringList as GtkBuildable

    The `GtkStringList` implementation of the `GtkBuildable` interface
    supports adding items directly using the `<items>` element and
    specifying `<item>` elements for each item. Each `<item>` element
    supports the regular translation attributes “translatable”,
    “context” and “comments”.

    Here is a UI definition fragment specifying a `GtkStringList`

    ```xml
    <object class=\"GtkStringList\">
    <items>
    <item translatable=\"yes\">Factory</item>
    <item translatable=\"yes\">Home</item>
    <item translatable=\"yes\">Subway</item>
    </items>
    </object>
    ```

    :Constructors:

    ::

        StringList(**properties)
        new(strings:list=None) -> Gtk.StringList

    Object GtkStringList

    Properties from GtkStringList:
      strings -> GStrv: strings

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gio.ListModel.Props, Buildable.Props):
        strings: list[str]

    props: Props = ...
    def __init__(self, strings: Sequence[str] = ...): ...
    def append(self, string: str) -> None:
        """
        Appends @string to @self.

        The @string will be copied. See
        [method@Gtk.StringList.take] for a way to avoid that.

        Parameters:
            string: the string to insert

        Returns:

        """
        ...

    def get_string(self, position: int) -> Optional[str]:
        """
        Gets the string that is at @position in @self.

        If @self does not contain @position items, %NULL is returned.

        This function returns the const char *. To get the
        object wrapping it, use g_list_model_get_item().

        Parameters:
            position: the position to get the string for

        Returns:
            Optional[str]: the string at the given position

        """
        ...

    @classmethod
    def new(cls, strings: Optional[Sequence[str]] = None) -> StringList:
        """
        Creates a new `GtkStringList` with the given @strings.

        Parameters:
            strings: The strings to put in the model

        Returns:
            StringList: a new `GtkStringList`

        """
        ...

    def remove(self, position: int) -> None:
        """
        Removes the string at @position from @self.

        @position must be smaller than the current
        length of the list.

        Parameters:
            position: the position of the string that is to be removed

        Returns:

        """
        ...

    def splice(
        self, position: int, n_removals: int, additions: Optional[Sequence[str]] = None
    ) -> None:
        """
        Changes @self by removing @n_removals strings and adding @additions
        to it.

        This function is more efficient than [method@Gtk.StringList.append]
        and [method@Gtk.StringList.remove], because it only emits the
        ::items-changed signal once for the change.

        This function copies the strings in @additions.

        The parameters @position and @n_removals must be correct (ie:
        @position + @n_removals must be less than or equal to the length
        of the list at the time this function is called).

        Parameters:
            position: the position at which to make the change
            n_removals: the number of strings to remove
            additions: The strings to add

        Returns:

        """
        ...

    def take(self, string: str) -> None:
        """
        Adds @string to self at the end, and takes
        ownership of it.

        This variant of [method@Gtk.StringList.append]
        is convenient for formatting strings:

        ```c
        gtk_string_list_take (self, g_strdup_print (\"%d dollars\", lots));
        ```

        Parameters:
            string: the string to insert

        Returns:

        """
        ...

class StringListClass(GObject.GPointer):
    """
    :Constructors:

    ::

        StringListClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class StringObject(GObject.Object):
    """
    `GtkStringObject` is the type of items in a `GtkStringList`.

    A `GtkStringObject` is a wrapper around a `const char*`; it has
    a [property@Gtk.StringObject:string] property that can be used
    for property bindings and expressions.

    :Constructors:

    ::

        StringObject(**properties)
        new(string:str) -> Gtk.StringObject

    Object GtkStringObject

    Properties from GtkStringObject:
      string -> gchararray: string

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        string: str
        """
        The string.
        """

    props: Props = ...
    def get_string(self) -> str:
        """
        Returns the string contained in a `GtkStringObject`.

        Parameters:


        Returns:
            str: the string of @self

        """
        ...

    @classmethod
    def new(cls, string: str) -> StringObject:
        """
        Wraps a string in an object for use with `GListModel`.

        Parameters:
            string: The string to wrap

        Returns:
            StringObject: a new `GtkStringObject`

        """
        ...

class StringObjectClass(GObject.GPointer):
    """
    :Constructors:

    ::

        StringObjectClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class StringSorter(Sorter):
    """
    `GtkStringSorter` is a `GtkSorter` that compares strings.

    It does the comparison in a linguistically correct way using the
    current locale by normalizing Unicode strings and possibly case-folding
    them before performing the comparison.

    To obtain the strings to compare, this sorter evaluates a
    [class@Gtk.Expression].

    :Constructors:

    ::

        StringSorter(**properties)
        new(expression:Gtk.Expression=None) -> Gtk.StringSorter

    Object GtkStringSorter

    Properties from GtkStringSorter:
      expression -> GtkExpression: expression
      ignore-case -> gboolean: ignore-case
      collation -> GtkCollation: collation

    Signals from GtkSorter:
      changed (GtkSorterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Sorter.Props):
        collation: Collation
        """
        The collation method to use for sorting.

        The `GTK_COLLATION_NONE` value is useful when the expression already
        returns collation keys, or strings that need to be compared byte-by-byte.

        The default value, `GTK_COLLATION_UNICODE`, compares strings according
        to the [Unicode collation algorithm](https://www.unicode.org/reports/tr10/).
        """
        expression: Optional[Expression]
        """
        The expression to evaluate on item to get a string to compare with.
        """
        ignore_case: bool
        """
        If sorting is case sensitive.
        """

    props: Props = ...
    def __init__(
        self,
        collation: Collation = ...,
        expression: Optional[Expression] = ...,
        ignore_case: bool = ...,
    ): ...
    def get_collation(self) -> Collation:
        """
        Gets which collation method the sorter uses.

        Parameters:


        Returns:
            Collation: The collation method

        """
        ...

    def get_expression(self) -> Optional[Expression]:
        """
        Gets the expression that is evaluated to obtain strings from items.

        Parameters:


        Returns:
            Optional[Expression]: a `GtkExpression`

        """
        ...

    def get_ignore_case(self) -> bool:
        """
        Gets whether the sorter ignores case differences.

        Parameters:


        Returns:
            bool: %TRUE if @self is ignoring case differences

        """
        ...

    @classmethod
    def new(cls, expression: Optional[Expression] = None) -> StringSorter:
        """
        Creates a new string sorter that compares items using the given
        @expression.

        Unless an expression is set on it, this sorter will always
        compare items as invalid.

        Parameters:
            expression: The expression to evaluate

        Returns:
            StringSorter: a new `GtkStringSorter`

        """
        ...

    def set_collation(self, collation: Collation) -> None:
        """
        Sets the collation method to use for sorting.

        Parameters:
            collation: the collation method

        Returns:

        """
        ...

    def set_expression(self, expression: Optional[Expression] = None) -> None:
        """
        Sets the expression that is evaluated to obtain strings from items.

        The expression must have the type %G_TYPE_STRING.

        Parameters:
            expression: a `GtkExpression`

        Returns:

        """
        ...

    def set_ignore_case(self, ignore_case: bool) -> None:
        """
        Sets whether the sorter will ignore case differences.

        Parameters:
            ignore_case: %TRUE to ignore case differences

        Returns:

        """
        ...

class StringSorterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        StringSorterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: SorterClass = ...

@deprecated(
    "The relevant API has been moved to [class@Gtk.Widget] where applicable; otherwise, there is no replacement for querying the style machinery. Stylable UI elements should use widgets."
)
class StyleContext(GObject.Object):
    """
    `GtkStyleContext` stores styling information affecting a widget.

    In order to construct the final style information, `GtkStyleContext`
    queries information from all attached `GtkStyleProviders`. Style
    providers can be either attached explicitly to the context through
    [method@Gtk.StyleContext.add_provider], or to the display through
    [func@Gtk.StyleContext.add_provider_for_display]. The resulting
    style is a combination of all providers’ information in priority order.

    For GTK widgets, any `GtkStyleContext` returned by
    [method@Gtk.Widget.get_style_context] will already have a `GdkDisplay`
    and RTL/LTR information set. The style context will also be updated
    automatically if any of these settings change on the widget.

    ## Style Classes

    Widgets can add style classes to their context, which can be used to associate
    different styles by class. The documentation for individual widgets lists
    which style classes it uses itself, and which style classes may be added by
    applications to affect their appearance.

    # Custom styling in UI libraries and applications

    If you are developing a library with custom widgets that render differently
    than standard components, you may need to add a `GtkStyleProvider` yourself
    with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority, either a
    `GtkCssProvider` or a custom object implementing the `GtkStyleProvider`
    interface. This way themes may still attempt to style your UI elements in
    a different way if needed so.

    If you are using custom styling on an applications, you probably want then
    to make your style information prevail to the theme’s, so you must use
    a `GtkStyleProvider` with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
    priority, keep in mind that the user settings in
    `XDG_CONFIG_HOME/gtk-4.0/gtk.css` will
    still take precedence over your changes, as it uses the
    %GTK_STYLE_PROVIDER_PRIORITY_USER priority.

    :Constructors:

    ::

        StyleContext(**properties)

    Object GtkStyleContext

    Properties from GtkStyleContext:
      display -> GdkDisplay: display

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        display: Gdk.Display

    props: Props = ...
    parent_object: GObject.Object = ...
    def __init__(self, display: Gdk.Display = ...): ...
    @deprecated("Use [method@Gtk.Widget.add_css_class] instead")
    def add_class(self, class_name: str) -> None:
        """
        Adds a style class to @context, so later uses of the
        style context will make use of this new class for styling.

        In the CSS file format, a `GtkEntry` defining a “search”
        class, would be matched by:

        ```css
        entry.search { ... }
        ```

        While any widget defining a “search” class would be
        matched by:
        ```css
        .search { ... }
        ```

        Parameters:
            class_name: class name to use in styling

        Returns:

        """
        ...

    @deprecated("Use style classes instead")
    def add_provider(self, provider: StyleProvider, priority: int) -> None:
        """
        Adds a style provider to @context, to be used in style construction.

        Note that a style provider added by this function only affects
        the style of the widget to which @context belongs. If you want
        to affect the style of all widgets, use
        [func@Gtk.StyleContext.add_provider_for_display].

        Note: If both priorities are the same, a `GtkStyleProvider`
        added through this function takes precedence over another added
        through [func@Gtk.StyleContext.add_provider_for_display].

        Parameters:
            provider: a `GtkStyleProvider`
            priority: the priority of the style provider. The lower
        it is, the earlier it will be used in the style construction.
        Typically this will be in the range between
        %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK and
        %GTK_STYLE_PROVIDER_PRIORITY_USER

        Returns:

        """
        ...

    @staticmethod
    def add_provider_for_display(
        display: Gdk.Display, provider: StyleProvider, priority: int
    ) -> None:
        """
        Adds a global style provider to @display, which will be used
        in style construction for all `GtkStyleContexts` under @display.

        GTK uses this to make styling information from `GtkSettings`
        available.

        Note: If both priorities are the same, A `GtkStyleProvider`
        added through [method@Gtk.StyleContext.add_provider] takes
        precedence over another added through this function.

        Parameters:
            display: a `GdkDisplay`
            provider: a `GtkStyleProvider`
            priority: the priority of the style provider. The lower
        it is, the earlier it will be used in the style construction.
        Typically this will be in the range between
        %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK and
        %GTK_STYLE_PROVIDER_PRIORITY_USER

        Returns:

        """
        ...

    def do_changed(self) -> None: ...
    @deprecated("This api will be removed in GTK 5")
    def get_border(self) -> Border:
        """
        Gets the border for a given state as a `GtkBorder`.

        Parameters:


        Returns:
            Border: return value for the border settings
        """
        ...

    @deprecated("Use [method@Gtk.Widget.get_color] instead")
    def get_color(self) -> Gdk.RGBA:
        """
        Gets the foreground color for a given state.

        Parameters:


        Returns:
            Gdk.RGBA: return value for the foreground color
        """
        ...

    @deprecated("Use [method@Gtk.Widget.get_display] instead")
    def get_display(self) -> Gdk.Display:
        """
        Returns the `GdkDisplay` to which @context is attached.

        Parameters:


        Returns:
            Gdk.Display: a `GdkDisplay`.

        """
        ...

    @deprecated("This api will be removed in GTK 5")
    def get_margin(self) -> Border:
        """
        Gets the margin for a given state as a `GtkBorder`.

        Parameters:


        Returns:
            Border: return value for the margin settings
        """
        ...

    @deprecated("This api will be removed in GTK 5")
    def get_padding(self) -> Border:
        """
        Gets the padding for a given state as a `GtkBorder`.

        Parameters:


        Returns:
            Border: return value for the padding settings
        """
        ...

    def get_scale(self) -> int:
        """
        Returns the scale used for assets.

        Parameters:


        Returns:
            int: the scale

        Deprecated 4.10: Use [method@Gtk.Widget.get_scale_factor] instead

        """
        ...

    @deprecated("Use [method@Gtk.Widget.get_state_flags] instead")
    def get_state(self) -> StateFlags:
        """
        Returns the state used for style matching.

        This method should only be used to retrieve the `GtkStateFlags`
        to pass to `GtkStyleContext` methods, like
        [method@Gtk.StyleContext.get_padding].
        If you need to retrieve the current state of a `GtkWidget`, use
        [method@Gtk.Widget.get_state_flags].

        Parameters:


        Returns:
            StateFlags: the state flags

        """
        ...

    @deprecated("Use [method@Gtk.Widget.has_css_class] instead")
    def has_class(self, class_name: str) -> bool:
        """
        Returns %TRUE if @context currently has defined the
        given class name.

        Parameters:
            class_name: a class name

        Returns:
            bool: %TRUE if @context has @class_name defined

        """
        ...

    @deprecated("This api will be removed in GTK 5")
    def lookup_color(self, color_name: str) -> Tuple[bool, Gdk.RGBA]:
        """
        Looks up and resolves a color name in the @context color map.

        Parameters:
            color_name: color name to lookup

        Returns:
            bool: %TRUE if @color_name was found and resolved, %FALSE otherwise
            Gdk.RGBA: Return location for the looked up color
        """
        ...

    @deprecated("Use [method@Gtk.Widget.remove_css_class] instead")
    def remove_class(self, class_name: str) -> None:
        """
        Removes @class_name from @context.

        Parameters:
            class_name: class name to remove

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def remove_provider(self, provider: StyleProvider) -> None:
        """
        Removes @provider from the style providers list in @context.

        Parameters:
            provider: a `GtkStyleProvider`

        Returns:

        """
        ...

    @staticmethod
    def remove_provider_for_display(
        display: Gdk.Display, provider: StyleProvider
    ) -> None:
        """
        Removes @provider from the global style providers list in @display.

        Parameters:
            display: a `GdkDisplay`
            provider: a `GtkStyleProvider`

        Returns:

        """
        ...

    @deprecated("This API will be removed in GTK 5")
    def restore(self) -> None:
        """
        Restores @context state to a previous stage.

        See [method@Gtk.StyleContext.save].

        Parameters:


        Returns:

        """
        ...

    @deprecated("This API will be removed in GTK 5")
    def save(self) -> None:
        """
        Saves the @context state.

        This allows temporary modifications done through
        [method@Gtk.StyleContext.add_class],
        [method@Gtk.StyleContext.remove_class],
        [method@Gtk.StyleContext.set_state] to be quickly
        reverted in one go through [method@Gtk.StyleContext.restore].

        The matching call to [method@Gtk.StyleContext.restore]
        must be done before GTK returns to the main loop.

        Parameters:


        Returns:

        """
        ...

    @deprecated("You should not use this api")
    def set_display(self, display: Gdk.Display) -> None:
        """
        Attaches @context to the given display.

        The display is used to add style information from “global”
        style providers, such as the display's `GtkSettings` instance.

        If you are using a `GtkStyleContext` returned from
        [method@Gtk.Widget.get_style_context], you do not need to
        call this yourself.

        Parameters:
            display: a `GdkDisplay`

        Returns:

        """
        ...

    @deprecated("You should not use this api")
    def set_scale(self, scale: int) -> None:
        """
        Sets the scale to use when getting image assets for the style.

        Parameters:
            scale: scale

        Returns:

        """
        ...

    @deprecated("You should not use this api")
    def set_state(self, flags: StateFlags) -> None:
        """
        Sets the state to be used for style matching.

        Parameters:
            flags: state to represent

        Returns:

        """
        ...

    @deprecated("This api will be removed in GTK 5")
    def to_string(self, flags: StyleContextPrintFlags) -> str:
        """
        Converts the style context into a string representation.

        The string representation always includes information about
        the name, state, id, visibility and style classes of the CSS
        node that is backing @context. Depending on the flags, more
        information may be included.

        This function is intended for testing and debugging of the
        CSS implementation in GTK. There are no guarantees about
        the format of the returned string, it may change.

        Parameters:
            flags: Flags that determine what to print

        Returns:
            str: a newly allocated string representing @context

        """
        ...

class StyleContextClass(GObject.GPointer):
    """
    :Constructors:

    ::

        StyleContextClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    changed: Callable[[StyleContext], None] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...

class StyleProvider(GObject.GInterface):
    """
    `GtkStyleProvider` is an interface for style information used by
    `GtkStyleContext`.

    See [method@Gtk.StyleContext.add_provider] and
    [func@Gtk.StyleContext.add_provider_for_display] for
    adding `GtkStyleProviders`.

    GTK uses the `GtkStyleProvider` implementation for CSS in
    [class@Gtk.CssProvider].



    Interface GtkStyleProvider

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

class Switch(Widget, Accessible, Actionable, Buildable, ConstraintTarget):
    """
    `GtkSwitch` is a \"light switch\" that has two states: on or off.

    ![An example GtkSwitch](switch.png)

    The user can control which state should be active by clicking the
    empty area, or by dragging the handle.

    `GtkSwitch` can also handle situations where the underlying state
    changes with a delay. In this case, the slider position indicates
    the user's recent change (as indicated by the [property@Gtk.Switch:active]
    property), and the color indicates whether the underlying state (represented
    by the [property@Gtk.Switch:state] property) has been updated yet.

    ![GtkSwitch with delayed state change](switch-state.png)

    See [signal@Gtk.Switch::state-set] for details.

    # CSS nodes

    ```
    switch
    ├── image
    ├── image
    ╰── slider
    ```

    `GtkSwitch` has four css nodes, the main node with the name switch and
    subnodes for the slider and the on and off images. Neither of them is
    using any style classes.

    # Accessibility

    `GtkSwitch` uses the %GTK_ACCESSIBLE_ROLE_SWITCH role.

    :Constructors:

    ::

        Switch(**properties)
        new() -> Gtk.Widget

    Object GtkSwitch

    Signals from GtkSwitch:
      activate ()
      state-set (gboolean) -> gboolean

    Properties from GtkSwitch:
      active -> gboolean: active
      state -> gboolean: state

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Actionable.Props,
        Buildable.Props,
        ConstraintTarget.Props,
    ):
        active: bool
        """
        Whether the `GtkSwitch` widget is in its on or off state.
        """
        state: bool
        """
        The backend state that is controlled by the switch.

        See [signal@Gtk.Switch::state-set] for details.
        """

    props: Props = ...
    def __init__(
        self,
        active: bool = ...,
        state: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        action_name: Optional[str] = ...,
        action_target: GLib.Variant = ...,
    ): ...
    def get_active(self) -> bool:
        """
        Gets whether the `GtkSwitch` is in its “on” or “off” state.

        Parameters:


        Returns:
            bool: %TRUE if the `GtkSwitch` is active, and %FALSE otherwise

        """
        ...

    def get_state(self) -> bool:
        """
        Gets the underlying state of the `GtkSwitch`.

        Parameters:


        Returns:
            bool: the underlying state

        """
        ...

    @classmethod
    def new(cls) -> Switch:
        """
        Creates a new `GtkSwitch` widget.

        Parameters:


        Returns:
            Widget: the newly created `GtkSwitch` instance

        """
        ...

    def set_active(self, is_active: bool) -> None:
        """
        Changes the state of @self to the desired one.

        Parameters:
            is_active: %TRUE if @self should be active, and %FALSE otherwise

        Returns:

        """
        ...

    def set_state(self, state: bool) -> None:
        """
        Sets the underlying state of the `GtkSwitch`.

        This function is typically called from a [signal@Gtk.Switch::state-set]
        signal handler in order to set up delayed state changes.

        See [signal@Gtk.Switch::state-set] for details.

        Parameters:
            state: the new state

        Returns:

        """
        ...

class SymbolicPaintable(GObject.GInterface):
    """
    `GtkSymbolicPaintable` is an interface that support symbolic colors in
    paintables.

    `GdkPaintable`s implementing the interface will have the
    [vfunc@Gtk.SymbolicPaintable.snapshot_symbolic] function called and
    have the colors for drawing symbolic icons passed. At least 4 colors are guaranteed
    to be passed every time.

    These 4 colors are the foreground color, and the colors to use for errors, warnings
    and success information in that order.

    More colors may be added in the future.



    Interface GtkSymbolicPaintable

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def snapshot_symbolic(
        self,
        snapshot: Gdk.Snapshot,
        width: float,
        height: float,
        colors: Sequence[Gdk.RGBA],
    ) -> None:
        """
        Snapshots the paintable with the given colors.

        If less than 4 colors are provided, GTK will pad the array with default
        colors.

        Parameters:
            snapshot: a `GdkSnapshot` to snapshot to
            width: width to snapshot in
            height: height to snapshot in
            colors: a pointer to an array of colors

        Returns:

        """
        ...

class SymbolicPaintableInterface(GObject.GPointer):
    """
    The list of virtual functions for the `GtkSymbolicPaintable` interface.
    No function must be implemented, default implementations exist for each one.

    :Constructors:

    ::

        SymbolicPaintableInterface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    snapshot_symbolic: Callable[
        [SymbolicPaintable, Gdk.Snapshot, float, float, Sequence[Gdk.RGBA]], None
    ] = ...

# override
class Template:
    def __init__(
        self, filename: str = ..., resource_path: str = ..., string: str = ...
    ) -> None: ...
    @classmethod
    def from_file(cls, filename: str): ...
    @classmethod
    def from_resource(cls, resource_path: str): ...
    @classmethod
    def from_string(cls, string: str): ...
    def __call__(self, cls): ...

    class Callback:
        def __init__(self, name: str = ...) -> None: ...
        def __call__(self, func: Callable[..., Any]) -> Any: ...

    class Child: ...

class Text(Widget, Accessible, Buildable, ConstraintTarget, Editable):
    """
    The `GtkText` widget is a single-line text entry widget.

    `GtkText` is the common implementation of single-line text editing
    that is shared between [class@Gtk.Entry], [class@Gtk.PasswordEntry],
    [class@Gtk.SpinButton], and other widgets. In all of these, `GtkText` is
    used as the delegate for the [iface@Gtk.Editable] implementation.

    A fairly large set of key bindings are supported by default. If the
    entered text is longer than the allocation of the widget, the widget
    will scroll so that the cursor position is visible.

    When using an entry for passwords and other sensitive information,
    it can be put into “password mode” using [method@Gtk.Text.set_visibility].
    In this mode, entered text is displayed using a “invisible” character.
    By default, GTK picks the best invisible character that is available
    in the current font, but it can be changed with
    [method@Gtk.Text.set_invisible_char].

    If you are looking to add icons or progress display in an entry, look
    at [class@Gtk.Entry]. There other alternatives for more specialized use
    cases, such as [class@Gtk.SearchEntry].

    If you need multi-line editable text, look at [class@Gtk.TextView].

    # CSS nodes

    ```
    text[.read-only]
    ├── placeholder
    ├── undershoot.left
    ├── undershoot.right
    ├── [selection]
    ├── [block-cursor]
    ╰── [window.popup]
    ```

    `GtkText` has a main node with the name `text`. Depending on the properties
    of the widget, the `.read-only` style class may appear.

    When the entry has a selection, it adds a subnode with the name `selection`.

    When the entry is in overwrite mode, it adds a subnode with the name
    `block-cursor` that determines how the block cursor is drawn.

    The CSS node for a context menu is added as a subnode with the name `popup`.

    The `undershoot` nodes are used to draw the underflow indication when content
    is scrolled out of view. These nodes get the `.left` or `.right` style class
    added depending on where the indication is drawn.

    When touch is used and touch selection handles are shown, they are using
    CSS nodes with name `cursor-handle`. They get the `.top` or `.bottom` style
    class depending on where they are shown in relation to the selection. If
    there is just a single handle for the text cursor, it gets the style class
    `.insertion-cursor`.

    # Accessibility

    `GtkText` uses the %GTK_ACCESSIBLE_ROLE_NONE role, which causes it to be
    skipped for accessibility. This is because `GtkText` is expected to be used
    as a delegate for a `GtkEditable` implementation that will be represented
    to accessibility.

    :Constructors:

    ::

        Text(**properties)
        new() -> Gtk.Widget
        new_with_buffer(buffer:Gtk.EntryBuffer) -> Gtk.Widget

    Object GtkText

    Signals from GtkText:
      activate ()
      move-cursor (GtkMovementStep, gint, gboolean)
      preedit-changed (gchararray)
      copy-clipboard ()
      insert-at-cursor (gchararray)
      delete-from-cursor (GtkDeleteType, gint)
      backspace ()
      cut-clipboard ()
      paste-clipboard ()
      toggle-overwrite ()
      insert-emoji ()

    Properties from GtkText:
      buffer -> GtkEntryBuffer: buffer
      max-length -> gint: max-length
      visibility -> gboolean: visibility
      invisible-char -> guint: invisible-char
      invisible-char-set -> gboolean: invisible-char-set
      activates-default -> gboolean: activates-default
      scroll-offset -> gint: scroll-offset
      truncate-multiline -> gboolean: truncate-multiline
      overwrite-mode -> gboolean: overwrite-mode
      im-module -> gchararray: im-module
      placeholder-text -> gchararray: placeholder-text
      input-purpose -> GtkInputPurpose: input-purpose
      input-hints -> GtkInputHints: input-hints
      attributes -> PangoAttrList: attributes
      tabs -> PangoTabArray: tabs
      enable-emoji-completion -> gboolean: enable-emoji-completion
      propagate-text-width -> gboolean: propagate-text-width
      extra-menu -> GMenuModel: extra-menu

    Signals from GtkEditable:
      changed ()
      insert-text (gchararray, gint, gpointer)
      delete-text (gint, gint)

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Editable.Props,
    ):
        activates_default: bool
        """
        Whether to activate the default widget when Enter is pressed.
        """
        attributes: Optional[Pango.AttrList]
        """
        A list of Pango attributes to apply to the text of the `GtkText`.

        This is mainly useful to change the size or weight of the text.

        The `PangoAttribute`'s @start_index and @end_index must refer to the
        `GtkEntryBuffer` text, i.e. without the preedit string.
        """
        buffer: EntryBuffer
        """
        The `GtkEntryBuffer` object which stores the text.
        """
        enable_emoji_completion: bool
        """
        Whether to suggest Emoji replacements.
        """
        extra_menu: Optional[Gio.MenuModel]
        """
        A menu model whose contents will be appended to
        the context menu.
        """
        im_module: str
        """
        Which IM (input method) module should be used for this self.

        See [class@Gtk.IMMulticontext].

        Setting this to a non-%NULL value overrides the system-wide
        IM module setting. See the [property@Gtk.Settings:gtk-im-module]
        property.
        """
        input_hints: InputHints
        """
        Additional hints that allow input methods to fine-tune
        their behaviour.
        """
        input_purpose: InputPurpose
        """
        The purpose of this text field.

        This property can be used by on-screen keyboards and other input
        methods to adjust their behaviour.

        Note that setting the purpose to %GTK_INPUT_PURPOSE_PASSWORD or
        %GTK_INPUT_PURPOSE_PIN is independent from setting
        [property@Gtk.Text:visibility].
        """
        invisible_char: int
        """
        The character to used when masking contents (in “password mode”).
        """
        invisible_char_set: bool
        """
        Whether the invisible char has been set for the `GtkText`.
        """
        max_length: int
        """
        Maximum number of characters that are allowed.

        Zero indicates no limit.
        """
        overwrite_mode: bool
        """
        If text is overwritten when typing in the `GtkText`.
        """
        placeholder_text: Optional[str]
        """
        The text that will be displayed in the `GtkText` when it is empty
        and unfocused.
        """
        propagate_text_width: bool
        """
        Whether the widget should grow and shrink with the content.
        """
        scroll_offset: int
        """
        Number of pixels scrolled of the screen to the left.
        """
        tabs: Optional[Pango.TabArray]
        """
        A list of tabstops to apply to the text of the `GtkText`.
        """
        truncate_multiline: bool
        """
        When %TRUE, pasted multi-line text is truncated to the first line.
        """
        visibility: bool
        """
        If %FALSE, the text is masked with the “invisible char”.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        activates_default: bool = ...,
        attributes: Optional[Pango.AttrList] = ...,
        buffer: EntryBuffer = ...,
        enable_emoji_completion: bool = ...,
        extra_menu: Optional[Gio.MenuModel] = ...,
        im_module: str = ...,
        input_hints: InputHints = ...,
        input_purpose: InputPurpose = ...,
        invisible_char: int = ...,
        invisible_char_set: bool = ...,
        max_length: int = ...,
        overwrite_mode: bool = ...,
        placeholder_text: Optional[str] = ...,
        propagate_text_width: bool = ...,
        tabs: Optional[Pango.TabArray] = ...,
        truncate_multiline: bool = ...,
        visibility: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        editable: bool = ...,
        enable_undo: bool = ...,
        max_width_chars: int = ...,
        text: str = ...,
        width_chars: int = ...,
        xalign: float = ...,
    ): ...
    def compute_cursor_extents(
        self, position: int
    ) -> Tuple[Graphene.Rect, Graphene.Rect]:
        """
        Determine the positions of the strong and weak cursors if the
        insertion point in the layout is at @position.

        The position of each cursor is stored as a zero-width rectangle.
        The strong cursor location is the location where characters of
        the directionality equal to the base direction are inserted.
        The weak cursor location is the location where characters of
        the directionality opposite to the base direction are inserted.

        The rectangle positions are in widget coordinates.

        Parameters:
            position: the character position

        Returns:
            Graphene.Rect: location to store the strong cursor position
            Graphene.Rect: location to store the weak cursor position
        """
        ...

    def get_activates_default(self) -> bool:
        """
        Returns whether pressing Enter will activate
        the default widget for the window containing @self.

        See [method@Gtk.Text.set_activates_default].

        Parameters:


        Returns:
            bool: %TRUE if the `GtkText` will activate the default widget

        """
        ...

    def get_attributes(self) -> Optional[Pango.AttrList]:
        """
        Gets the attribute list that was set on the `GtkText`.

        See [method@Gtk.Text.set_attributes].

        Parameters:


        Returns:
            Optional[Pango.AttrList]: the attribute list

        """
        ...

    def get_buffer(self) -> EntryBuffer:
        """
        Get the `GtkEntryBuffer` object which holds the text for
        this widget.

        Parameters:


        Returns:
            EntryBuffer: A `GtkEntryBuffer` object.

        """
        ...

    def get_enable_emoji_completion(self) -> bool:
        """
        Returns whether Emoji completion is enabled for this
        `GtkText` widget.

        Parameters:


        Returns:
            bool: %TRUE if Emoji completion is enabled

        """
        ...

    def get_extra_menu(self) -> Optional[Gio.MenuModel]:
        """
        Gets the menu model for extra items in the context menu.

        See [method@Gtk.Text.set_extra_menu].

        Parameters:


        Returns:
            Optional[Gio.MenuModel]: the menu model

        """
        ...

    def get_input_hints(self) -> InputHints:
        """
        Gets the input hints of the `GtkText`.

        Parameters:


        Returns:
            InputHints: Not documented

        """
        ...

    def get_input_purpose(self) -> InputPurpose:
        """
        Gets the input purpose of the `GtkText`.

        Parameters:


        Returns:
            InputPurpose: Not documented

        """
        ...

    def get_invisible_char(self) -> str:
        """
        Retrieves the character displayed when visibility is set to false.

        Note that GTK does not compute this value unless it needs it,
        so the value returned by this function is not very useful unless
        it has been explicitly set with [method@Gtk.Text.set_invisible_char].

        Parameters:


        Returns:
            str: the current invisible char, or 0, if @text does not
        show invisible text at all.

        """
        ...

    def get_max_length(self) -> int:
        """
        Retrieves the maximum allowed length of the text in @self.

        See [method@Gtk.Text.set_max_length].

        This is equivalent to getting @self's `GtkEntryBuffer` and
        calling [method@Gtk.EntryBuffer.get_max_length] on it.

        Parameters:


        Returns:
            int: the maximum allowed number of characters
        in `GtkText`, or 0 if there is no maximum.

        """
        ...

    def get_overwrite_mode(self) -> bool:
        """
        Gets whether text is overwritten when typing in the `GtkText`.

        See [method@Gtk.Text.set_overwrite_mode].

        Parameters:


        Returns:
            bool: whether the text is overwritten when typing

        """
        ...

    def get_placeholder_text(self) -> Optional[str]:
        """
        Retrieves the text that will be displayed when
        @self is empty and unfocused

        If no placeholder text has been set, %NULL will be returned.

        Parameters:


        Returns:
            Optional[str]: the placeholder text

        """
        ...

    def get_propagate_text_width(self) -> bool:
        """
        Returns whether the `GtkText` will grow and shrink
        with the content.

        Parameters:


        Returns:
            bool: %TRUE if @self will propagate the text width

        """
        ...

    def get_tabs(self) -> Optional[Pango.TabArray]:
        """
        Gets the tabstops that were set on the `GtkText`.

        See [method@Gtk.Text.set_tabs].

        Parameters:


        Returns:
            Optional[Pango.TabArray]: the tabstops

        """
        ...

    def get_text_length(self) -> int:
        """
        Retrieves the current length of the text in @self.

        This is equivalent to getting @self's `GtkEntryBuffer`
        and calling [method@Gtk.EntryBuffer.get_length] on it.

        Parameters:


        Returns:
            int: the current number of characters
        in `GtkText`, or 0 if there are none.

        """
        ...

    def get_truncate_multiline(self) -> bool:
        """
        Returns whether the `GtkText` will truncate multi-line text
        that is pasted into the widget

        Parameters:


        Returns:
            bool: %TRUE if @self will truncate multi-line text

        """
        ...

    def get_visibility(self) -> bool:
        """
        Retrieves whether the text in @self is visible.

        Parameters:


        Returns:
            bool: %TRUE if the text is currently visible

        """
        ...

    def grab_focus_without_selecting(self) -> bool:
        """
        Causes @self to have keyboard focus.

        It behaves like [method@Gtk.Widget.grab_focus],
        except that it doesn't select the contents of @self.
        You only want to call this on some special entries
        which the user usually doesn't want to replace all text in,
        such as search-as-you-type entries.

        Parameters:


        Returns:
            bool: %TRUE if focus is now inside @self

        """
        ...

    @classmethod
    def new(cls) -> Text:
        """
        Creates a new `GtkText`.

        Parameters:


        Returns:
            Widget: a new `GtkText`.

        """
        ...

    @classmethod
    def new_with_buffer(cls, buffer: EntryBuffer) -> Text:
        """
        Creates a new `GtkText` with the specified text buffer.

        Parameters:
            buffer: The buffer to use for the new `GtkText`.

        Returns:
            Widget: a new `GtkText`

        """
        ...

    def set_activates_default(self, activates: bool) -> None:
        """
        If @activates is %TRUE, pressing Enter will activate
        the default widget for the window containing @self.

        This usually means that the dialog containing the `GtkText`
        will be closed, since the default widget is usually one of
        the dialog buttons.

        Parameters:
            activates: %TRUE to activate window’s default widget on Enter keypress

        Returns:

        """
        ...

    def set_attributes(self, attrs: Optional[Pango.AttrList] = None) -> None:
        """
        Sets attributes that are applied to the text.

        Parameters:
            attrs: a `PangoAttrList`

        Returns:

        """
        ...

    def set_buffer(self, buffer: EntryBuffer) -> None:
        """
        Set the `GtkEntryBuffer` object which holds the text for
        this widget.

        Parameters:
            buffer: a `GtkEntryBuffer`

        Returns:

        """
        ...

    def set_enable_emoji_completion(self, enable_emoji_completion: bool) -> None:
        """
        Sets whether Emoji completion is enabled.

        If it is, typing ':', followed by a recognized keyword,
        will pop up a window with suggested Emojis matching the
        keyword.

        Parameters:
            enable_emoji_completion: %TRUE to enable Emoji completion

        Returns:

        """
        ...

    def set_extra_menu(self, model: Optional[Gio.MenuModel] = None) -> None:
        """
        Sets a menu model to add when constructing
        the context menu for @self.

        Parameters:
            model: a `GMenuModel`

        Returns:

        """
        ...

    def set_input_hints(self, hints: InputHints) -> None:
        """
        Sets input hints that allow input methods
        to fine-tune their behaviour.

        Parameters:
            hints: the hints

        Returns:

        """
        ...

    def set_input_purpose(self, purpose: InputPurpose) -> None:
        """
        Sets the input purpose of the `GtkText`.

        This can be used by on-screen keyboards and other
        input methods to adjust their behaviour.

        Parameters:
            purpose: the purpose

        Returns:

        """
        ...

    def set_invisible_char(self, ch: str) -> None:
        """
        Sets the character to use when in “password mode”.

        By default, GTK picks the best invisible char available in the
        current font. If you set the invisible char to 0, then the user
        will get no feedback at all; there will be no text on the screen
        as they type.

        Parameters:
            ch: a Unicode character

        Returns:

        """
        ...

    def set_max_length(self, length: int) -> None:
        """
        Sets the maximum allowed length of the contents of the widget.

        If the current contents are longer than the given length, then
        they will be truncated to fit.

        This is equivalent to getting @self's `GtkEntryBuffer` and
        calling [method@Gtk.EntryBuffer.set_max_length] on it.

        Parameters:
            length: the maximum length of the `GtkText`, or 0 for no maximum.
        (other than the maximum length of entries.) The value passed
        in will be clamped to the range 0-65536.

        Returns:

        """
        ...

    def set_overwrite_mode(self, overwrite: bool) -> None:
        """
        Sets whether the text is overwritten when typing
        in the `GtkText`.

        Parameters:
            overwrite: new value

        Returns:

        """
        ...

    def set_placeholder_text(self, text: Optional[str] = None) -> None:
        """
        Sets text to be displayed in @self when it is empty.

        This can be used to give a visual hint of the expected
        contents of the `GtkText`.

        Parameters:
            text: a string to be displayed when @self
        is empty and unfocused

        Returns:

        """
        ...

    def set_propagate_text_width(self, propagate_text_width: bool) -> None:
        """
        Sets whether the `GtkText` should grow and shrink with the content.

        Parameters:
            propagate_text_width: %TRUE to propagate the text width

        Returns:

        """
        ...

    def set_tabs(self, tabs: Optional[Pango.TabArray] = None) -> None:
        """
        Sets tabstops that are applied to the text.

        Parameters:
            tabs: a `PangoTabArray`

        Returns:

        """
        ...

    def set_truncate_multiline(self, truncate_multiline: bool) -> None:
        """
        Sets whether the `GtkText` should truncate multi-line text
        that is pasted into the widget.

        Parameters:
            truncate_multiline: %TRUE to truncate multi-line text

        Returns:

        """
        ...

    def set_visibility(self, visible: bool) -> None:
        """
        Sets whether the contents of the `GtkText` are visible or not.

        When visibility is set to %FALSE, characters are displayed
        as the invisible char, and will also appear that way when
        the text in the widget is copied to the clipboard.

        By default, GTK picks the best invisible character available
        in the current font, but it can be changed with
        [method@Gtk.Text.set_invisible_char].

        Note that you probably want to set [property@Gtk.Text:input-purpose]
        to %GTK_INPUT_PURPOSE_PASSWORD or %GTK_INPUT_PURPOSE_PIN to
        inform input methods about the purpose of this self,
        in addition to setting visibility to %FALSE.

        Parameters:
            visible: %TRUE if the contents of the `GtkText` are displayed
        as plaintext

        Returns:

        """
        ...

    def unset_invisible_char(self) -> None:
        """
        Unsets the invisible char.

        After calling this, the default invisible
        char is used again.

        Parameters:


        Returns:

        """
        ...

class TextBuffer(GObject.Object):
    """
    Stores text and attributes for display in a `GtkTextView`.

    You may wish to begin by reading the
    [text widget conceptual overview](section-text-widget.html),
    which gives an overview of all the objects and data types
    related to the text widget and how they work together.

    GtkTextBuffer can support undoing changes to the buffer
    content, see [method@Gtk.TextBuffer.set_enable_undo].

    :Constructors:

    ::

        TextBuffer(**properties)
        new(table:Gtk.TextTagTable=None) -> Gtk.TextBuffer

    Object GtkTextBuffer

    Signals from GtkTextBuffer:
      changed ()
      insert-text (GtkTextIter, gchararray, gint)
      insert-paintable (GtkTextIter, GdkPaintable)
      insert-child-anchor (GtkTextIter, GtkTextChildAnchor)
      delete-range (GtkTextIter, GtkTextIter)
      modified-changed ()
      mark-set (GtkTextIter, GtkTextMark)
      mark-deleted (GtkTextMark)
      apply-tag (GtkTextTag, GtkTextIter, GtkTextIter)
      remove-tag (GtkTextTag, GtkTextIter, GtkTextIter)
      begin-user-action ()
      end-user-action ()
      paste-done (GdkClipboard)
      redo ()
      undo ()

    Properties from GtkTextBuffer:
      tag-table -> GtkTextTagTable: tag-table
      text -> gchararray: text
      has-selection -> gboolean: has-selection
      cursor-position -> gint: cursor-position
      can-undo -> gboolean: can-undo
      can-redo -> gboolean: can-redo
      enable-undo -> gboolean: enable-undo

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        can_redo: bool
        """
        Denotes that the buffer can reapply the last undone action.
        """
        can_undo: bool
        """
        Denotes that the buffer can undo the last applied action.
        """
        cursor_position: int
        """
        The position of the insert mark.

        This is an offset from the beginning of the buffer.
        It is useful for getting notified when the cursor moves.
        """
        enable_undo: bool
        """
        Denotes if support for undoing and redoing changes to the buffer is allowed.
        """
        has_selection: bool
        """
        Whether the buffer has some text currently selected.
        """
        tag_table: TextTagTable
        """
        The GtkTextTagTable for the buffer.
        """
        text: str
        """
        The text content of the buffer.

        Without child widgets and images,
        see [method@Gtk.TextBuffer.get_text] for more information.
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    priv: TextBufferPrivate = ...
    def __init__(
        self, enable_undo: bool = ..., tag_table: TextTagTable = ..., text: str = ...
    ): ...
    def add_mark(self, mark: TextMark, where: TextIter) -> None:
        """
        Adds the mark at position @where.

        The mark must not be added to another buffer, and if its name
        is not %NULL then there must not be another mark in the buffer
        with the same name.

        Emits the [signal@Gtk.TextBuffer::mark-set] signal as notification
        of the mark's initial placement.

        Parameters:
            mark: the mark to add
            where: location to place mark

        Returns:

        """
        ...

    def add_selection_clipboard(self, clipboard: Gdk.Clipboard) -> None:
        """
        Adds @clipboard to the list of clipboards in which the selection
        contents of @buffer are available.

        In most cases, @clipboard will be the `GdkClipboard` returned by
        [method@Gtk.Widget.get_primary_clipboard] for a view of @buffer.

        Parameters:
            clipboard: a `GdkClipboard`

        Returns:

        """
        ...

    def apply_tag(self, tag: TextTag, start: TextIter, end: TextIter) -> None:
        """
        Emits the “apply-tag” signal on @buffer.

        The default handler for the signal applies
        @tag to the given range. @start and @end do
        not have to be in order.

        Parameters:
            tag: a `GtkTextTag`
            start: one bound of range to be tagged
            end: other bound of range to be tagged

        Returns:

        """
        ...

    def apply_tag_by_name(self, name: str, start: TextIter, end: TextIter) -> None:
        """
        Emits the “apply-tag” signal on @buffer.

        Calls [method@Gtk.TextTagTable.lookup] on the buffer’s
        tag table to get a `GtkTextTag`, then calls
        [method@Gtk.TextBuffer.apply_tag].

        Parameters:
            name: name of a named `GtkTextTag`
            start: one bound of range to be tagged
            end: other bound of range to be tagged

        Returns:

        """
        ...

    def backspace(
        self, iter: TextIter, interactive: bool, default_editable: bool
    ) -> bool:
        """
        Performs the appropriate action as if the user hit the delete
        key with the cursor at the position specified by @iter.

        In the normal case a single character will be deleted, but when
        combining accents are involved, more than one character can
        be deleted, and when precomposed character and accent combinations
        are involved, less than one character will be deleted.

        Because the buffer is modified, all outstanding iterators become
        invalid after calling this function; however, the @iter will be
        re-initialized to point to the location where text was deleted.

        Parameters:
            iter: a position in @buffer
            interactive: whether the deletion is caused by user interaction
            default_editable: whether the buffer is editable by default

        Returns:
            bool: %TRUE if the buffer was modified

        """
        ...

    def begin_irreversible_action(self) -> None:
        """
        Denotes the beginning of an action that may not be undone.

        This will cause any previous operations in the undo/redo queue
        to be cleared.

        This should be paired with a call to
        [method@Gtk.TextBuffer.end_irreversible_action] after the irreversible
        action has completed.

        You may nest calls to gtk_text_buffer_begin_irreversible_action()
        and gtk_text_buffer_end_irreversible_action() pairs.

        Parameters:


        Returns:

        """
        ...

    def begin_user_action(self) -> None:
        """
        Called to indicate that the buffer operations between here and a
        call to gtk_text_buffer_end_user_action() are part of a single
        user-visible operation.

        The operations between gtk_text_buffer_begin_user_action() and
        gtk_text_buffer_end_user_action() can then be grouped when creating
        an undo stack. `GtkTextBuffer` maintains a count of calls to
        gtk_text_buffer_begin_user_action() that have not been closed with
        a call to gtk_text_buffer_end_user_action(), and emits the
        “begin-user-action” and “end-user-action” signals only for the
        outermost pair of calls. This allows you to build user actions
        from other user actions.

        The “interactive” buffer mutation functions, such as
        [method@Gtk.TextBuffer.insert_interactive], automatically call
        begin/end user action around the buffer operations they perform,
        so there's no need to add extra calls if you user action consists
        solely of a single call to one of those functions.

        Parameters:


        Returns:

        """
        ...

    def copy_clipboard(self, clipboard: Gdk.Clipboard) -> None:
        """
        Copies the currently-selected text to a clipboard.

        Parameters:
            clipboard: the `GdkClipboard` object to copy to

        Returns:

        """
        ...

    def create_child_anchor(self, iter: TextIter) -> TextChildAnchor:
        """
        Creates and inserts a child anchor.

        This is a convenience function which simply creates a child anchor
        with [ctor@Gtk.TextChildAnchor.new] and inserts it into the buffer
        with [method@Gtk.TextBuffer.insert_child_anchor].

        The new anchor is owned by the buffer; no reference count is
        returned to the caller of this function.

        Parameters:
            iter: location in the buffer

        Returns:
            TextChildAnchor: the created child anchor

        """
        ...

    def create_mark(self, mark_name, where, left_gravity=False): ...  # FIXME Function
    # override
    def create_tag(self, tag_name: str, **properties) -> None: ...
    def cut_clipboard(self, clipboard: Gdk.Clipboard, default_editable: bool) -> None:
        """
        Copies the currently-selected text to a clipboard,
        then deletes said text if it’s editable.

        Parameters:
            clipboard: the `GdkClipboard` object to cut to
            default_editable: default editability of the buffer

        Returns:

        """
        ...

    def delete(self, start: TextIter, end: TextIter) -> None:
        """
        Deletes text between @start and @end.

        The order of @start and @end is not actually relevant;
        gtk_text_buffer_delete() will reorder them.

        This function actually emits the “delete-range” signal, and
        the default handler of that signal deletes the text. Because the
        buffer is modified, all outstanding iterators become invalid after
        calling this function; however, the @start and @end will be
        re-initialized to point to the location where text was deleted.

        Parameters:
            start: a position in @buffer
            end: another position in @buffer

        Returns:

        """
        ...

    def delete_interactive(
        self, start_iter: TextIter, end_iter: TextIter, default_editable: bool
    ) -> bool:
        """
        Deletes all editable text in the given range.

        Calls [method@Gtk.TextBuffer.delete] for each editable
        sub-range of [@start,@end). @start and @end are revalidated
        to point to the location of the last deleted range, or left
        untouched if no text was deleted.

        Parameters:
            start_iter: start of range to delete
            end_iter: end of range
            default_editable: whether the buffer is editable by default

        Returns:
            bool: whether some text was actually deleted

        """
        ...

    def delete_mark(self, mark: TextMark) -> None:
        """
        Deletes @mark, so that it’s no longer located anywhere in the
        buffer.

        Removes the reference the buffer holds to the mark, so if
        you haven’t called g_object_ref() on the mark, it will be freed.
        Even if the mark isn’t freed, most operations on @mark become
        invalid, until it gets added to a buffer again with
        [method@Gtk.TextBuffer.add_mark]. Use [method@Gtk.TextMark.get_deleted]
        to find out if a mark has been removed from its buffer.

        The [signal@Gtk.TextBuffer::mark-deleted] signal will be emitted as
        notification after the mark is deleted.

        Parameters:
            mark: a `GtkTextMark` in @buffer

        Returns:

        """
        ...

    def delete_mark_by_name(self, name: str) -> None:
        """
        Deletes the mark named @name; the mark must exist.

        See [method@Gtk.TextBuffer.delete_mark] for details.

        Parameters:
            name: name of a mark in @buffer

        Returns:

        """
        ...

    def delete_selection(self, interactive: bool, default_editable: bool) -> bool:
        """
        Deletes the range between the “insert” and “selection_bound” marks,
        that is, the currently-selected text.

        If @interactive is %TRUE, the editability of the selection will be
        considered (users can’t delete uneditable text).

        Parameters:
            interactive: whether the deletion is caused by user interaction
            default_editable: whether the buffer is editable by default

        Returns:
            bool: whether there was a non-empty selection to delete

        """
        ...

    def do_apply_tag(self, tag: TextTag, start: TextIter, end: TextIter) -> None:
        """
        Emits the “apply-tag” signal on @buffer.

        The default handler for the signal applies
        @tag to the given range. @start and @end do
        not have to be in order.

        Parameters:
            tag: a `GtkTextTag`
            start: one bound of range to be tagged
            end: other bound of range to be tagged

        Returns:

        """
        ...

    def do_begin_user_action(self) -> None:
        """
        Called to indicate that the buffer operations between here and a
        call to gtk_text_buffer_end_user_action() are part of a single
        user-visible operation.

        The operations between gtk_text_buffer_begin_user_action() and
        gtk_text_buffer_end_user_action() can then be grouped when creating
        an undo stack. `GtkTextBuffer` maintains a count of calls to
        gtk_text_buffer_begin_user_action() that have not been closed with
        a call to gtk_text_buffer_end_user_action(), and emits the
        “begin-user-action” and “end-user-action” signals only for the
        outermost pair of calls. This allows you to build user actions
        from other user actions.

        The “interactive” buffer mutation functions, such as
        [method@Gtk.TextBuffer.insert_interactive], automatically call
        begin/end user action around the buffer operations they perform,
        so there's no need to add extra calls if you user action consists
        solely of a single call to one of those functions.

        Parameters:


        Returns:

        """
        ...

    def do_changed(self) -> None: ...
    def do_delete_range(self, start: TextIter, end: TextIter) -> None: ...
    def do_end_user_action(self) -> None:
        """
        Ends a user-visible operation.

        Should be paired with a call to
        [method@Gtk.TextBuffer.begin_user_action].
        See that function for a full explanation.

        Parameters:


        Returns:

        """
        ...

    def do_insert_child_anchor(self, iter: TextIter, anchor: TextChildAnchor) -> None:
        """
        Inserts a child widget anchor into the text buffer at @iter.

        The anchor will be counted as one character in character counts, and
        when obtaining the buffer contents as a string, will be represented
        by the Unicode “object replacement character” 0xFFFC. Note that the
        “slice” variants for obtaining portions of the buffer as a string
        include this character for child anchors, but the “text” variants do
        not. E.g. see [method@Gtk.TextBuffer.get_slice] and
        [method@Gtk.TextBuffer.get_text].

        Consider [method@Gtk.TextBuffer.create_child_anchor] as a more
        convenient alternative to this function. The buffer will add a
        reference to the anchor, so you can unref it after insertion.

        Parameters:
            iter: location to insert the anchor
            anchor: a `GtkTextChildAnchor`

        Returns:

        """
        ...

    def do_insert_paintable(self, iter: TextIter, paintable: Gdk.Paintable) -> None:
        """
        Inserts an image into the text buffer at @iter.

        The image will be counted as one character in character counts,
        and when obtaining the buffer contents as a string, will be
        represented by the Unicode “object replacement character” 0xFFFC.
        Note that the “slice” variants for obtaining portions of the buffer
        as a string include this character for paintable, but the “text”
        variants do not. e.g. see [method@Gtk.TextBuffer.get_slice] and
        [method@Gtk.TextBuffer.get_text].

        Parameters:
            iter: location to insert the paintable
            paintable: a `GdkPaintable`

        Returns:

        """
        ...

    def do_insert_text(
        self, pos: TextIter, new_text: str, new_text_length: int
    ) -> None: ...
    def do_mark_deleted(self, mark: TextMark) -> None: ...
    def do_mark_set(self, location: TextIter, mark: TextMark) -> None: ...
    def do_modified_changed(self) -> None: ...
    def do_paste_done(self, clipboard: Gdk.Clipboard) -> None: ...
    def do_redo(self) -> None:
        """
        Redoes the next redoable action on the buffer, if there is one.

        Parameters:


        Returns:

        """
        ...

    def do_remove_tag(self, tag: TextTag, start: TextIter, end: TextIter) -> None:
        """
        Emits the “remove-tag” signal.

        The default handler for the signal removes all occurrences
        of @tag from the given range. @start and @end don’t have
        to be in order.

        Parameters:
            tag: a `GtkTextTag`
            start: one bound of range to be untagged
            end: other bound of range to be untagged

        Returns:

        """
        ...

    def do_undo(self) -> None:
        """
        Undoes the last undoable action on the buffer, if there is one.

        Parameters:


        Returns:

        """
        ...

    def end_irreversible_action(self) -> None:
        """
        Denotes the end of an action that may not be undone.

        This will cause any previous operations in the undo/redo
        queue to be cleared.

        This should be called after completing modifications to the
        text buffer after [method@Gtk.TextBuffer.begin_irreversible_action]
        was called.

        You may nest calls to gtk_text_buffer_begin_irreversible_action()
        and gtk_text_buffer_end_irreversible_action() pairs.

        Parameters:


        Returns:

        """
        ...

    def end_user_action(self) -> None:
        """
        Ends a user-visible operation.

        Should be paired with a call to
        [method@Gtk.TextBuffer.begin_user_action].
        See that function for a full explanation.

        Parameters:


        Returns:

        """
        ...

    def get_bounds(self) -> Tuple[TextIter, TextIter]:
        """
        Retrieves the first and last iterators in the buffer, i.e. the
        entire buffer lies within the range [@start,@end).

        Parameters:


        Returns:
            TextIter: iterator to initialize with first position in the buffer
            TextIter: iterator to initialize with the end iterator
        """
        ...

    def get_can_redo(self) -> bool:
        """
        Gets whether there is a redoable action in the history.

        Parameters:


        Returns:
            bool: %TRUE if there is a redoable action

        """
        ...

    def get_can_undo(self) -> bool:
        """
        Gets whether there is an undoable action in the history.

        Parameters:


        Returns:
            bool: %TRUE if there is an undoable action

        """
        ...

    def get_char_count(self) -> int:
        """
        Gets the number of characters in the buffer.

        Note that characters and bytes are not the same, you can’t e.g.
        expect the contents of the buffer in string form to be this
        many bytes long.

        The character count is cached, so this function is very fast.

        Parameters:


        Returns:
            int: number of characters in the buffer

        """
        ...

    def get_enable_undo(self) -> bool:
        """
        Gets whether the buffer is saving modifications to the buffer
        to allow for undo and redo actions.

        See [method@Gtk.TextBuffer.begin_irreversible_action] and
        [method@Gtk.TextBuffer.end_irreversible_action] to create
        changes to the buffer that cannot be undone.

        Parameters:


        Returns:
            bool: %TRUE if undoing and redoing changes to the buffer is allowed.

        """
        ...

    def get_end_iter(self) -> TextIter:
        """
        Initializes @iter with the “end iterator,” one past the last valid
        character in the text buffer.

        If dereferenced with [method@Gtk.TextIter.get_char], the end
        iterator has a character value of 0.
        The entire buffer lies in the range from the first position in
        the buffer (call [method@Gtk.TextBuffer.get_start_iter] to get
        character position 0) to the end iterator.

        Parameters:


        Returns:
            TextIter: iterator to initialize
        """
        ...

    def get_has_selection(self) -> bool:
        """
        Indicates whether the buffer has some text currently selected.

        Parameters:


        Returns:
            bool: %TRUE if the there is text selected

        """
        ...

    def get_insert(self) -> TextMark:
        """
        Returns the mark that represents the cursor (insertion point).

        Equivalent to calling [method@Gtk.TextBuffer.get_mark]
        to get the mark named “insert”, but very slightly more
        efficient, and involves less typing.

        Parameters:


        Returns:
            TextMark: insertion point mark

        """
        ...

    def get_iter_at_child_anchor(self, anchor: TextChildAnchor) -> TextIter:
        """
        Obtains the location of @anchor within @buffer.

        Parameters:
            anchor: a child anchor that appears in @buffer

        Returns:
            TextIter: an iterator to be initialized
        """
        ...

    def get_iter_at_line(self, line_number: int) -> Tuple[bool, TextIter]:
        """
        Initializes @iter to the start of the given line.

        If @line_number is greater than or equal to the number of lines
        in the @buffer, the end iterator is returned.

        Parameters:
            line_number: line number counting from 0

        Returns:
            bool: whether the exact position has been found
            TextIter: iterator to initialize
        """
        ...

    def get_iter_at_line_index(
        self, line_number: int, byte_index: int
    ) -> Tuple[bool, TextIter]:
        """
        Obtains an iterator pointing to @byte_index within the given line.

        @byte_index must be the start of a UTF-8 character. Note bytes, not
        characters; UTF-8 may encode one character as multiple bytes.

        If @line_number is greater than or equal to the number of lines in the @buffer,
        the end iterator is returned. And if @byte_index is off the
        end of the line, the iterator at the end of the line is returned.

        Parameters:
            line_number: line number counting from 0
            byte_index: byte index from start of line

        Returns:
            bool: whether the exact position has been found
            TextIter: iterator to initialize
        """
        ...

    def get_iter_at_line_offset(
        self, line_number: int, char_offset: int
    ) -> Tuple[bool, TextIter]:
        """
        Obtains an iterator pointing to @char_offset within the given line.

        Note characters, not bytes; UTF-8 may encode one character as multiple
        bytes.

        If @line_number is greater than or equal to the number of lines in the @buffer,
        the end iterator is returned. And if @char_offset is off the
        end of the line, the iterator at the end of the line is returned.

        Parameters:
            line_number: line number counting from 0
            char_offset: char offset from start of line

        Returns:
            bool: whether the exact position has been found
            TextIter: iterator to initialize
        """
        ...

    def get_iter_at_mark(self, mark: TextMark) -> TextIter:
        """
        Initializes @iter with the current position of @mark.

        Parameters:
            mark: a `GtkTextMark` in @buffer

        Returns:
            TextIter: iterator to initialize
        """
        ...

    def get_iter_at_offset(self, char_offset: int) -> TextIter:
        """
        Initializes @iter to a position @char_offset chars from the start
        of the entire buffer.

        If @char_offset is -1 or greater than the number
        of characters in the buffer, @iter is initialized to the end iterator,
        the iterator one past the last valid character in the buffer.

        Parameters:
            char_offset: char offset from start of buffer, counting from 0, or -1

        Returns:
            TextIter: iterator to initialize
        """
        ...

    def get_line_count(self) -> int:
        """
        Obtains the number of lines in the buffer.

        This value is cached, so the function is very fast.

        Parameters:


        Returns:
            int: number of lines in the buffer

        """
        ...

    def get_mark(self, name: str) -> Optional[TextMark]:
        """
        Returns the mark named @name in buffer @buffer, or %NULL if no such
        mark exists in the buffer.

        Parameters:
            name: a mark name

        Returns:
            Optional[TextMark]: a `GtkTextMark`

        """
        ...

    def get_max_undo_levels(self) -> int:
        """
        Gets the maximum number of undo levels to perform.

        If 0, unlimited undo actions may be performed. Note that this may
        have a memory usage impact as it requires storing an additional
        copy of the inserted or removed text within the text buffer.

        Parameters:


        Returns:
            int: The max number of undo levels allowed (0 indicates unlimited).

        """
        ...

    def get_modified(self) -> bool:
        """
        Indicates whether the buffer has been modified since the last call
        to [method@Gtk.TextBuffer.set_modified] set the modification flag to
        %FALSE.

        Used for example to enable a “save” function in a text editor.

        Parameters:


        Returns:
            bool: %TRUE if the buffer has been modified

        """
        ...

    def get_selection_bound(self) -> TextMark:
        """
        Returns the mark that represents the selection bound.

        Equivalent to calling [method@Gtk.TextBuffer.get_mark]
        to get the mark named “selection_bound”, but very slightly
        more efficient, and involves less typing.

        The currently-selected text in @buffer is the region between the
        “selection_bound” and “insert” marks. If “selection_bound” and
        “insert” are in the same place, then there is no current selection.
        [method@Gtk.TextBuffer.get_selection_bounds] is another convenient
        function for handling the selection, if you just want to know whether
        there’s a selection and what its bounds are.

        Parameters:


        Returns:
            TextMark: selection bound mark

        """
        ...

    def get_selection_bounds(
        self,
    ) -> Tuple[TextIter, TextIter] | Tuple[()]:  # CHECK Wrapped function
        """
        Returns %TRUE if some text is selected; places the bounds
        of the selection in @start and @end.

        If the selection has length 0, then @start and @end are filled
        in with the same value. @start and @end will be in ascending order.
        If @start and @end are %NULL, then they are not filled in, but the
        return value still indicates whether text is selected.

        Parameters:


        Returns:
            TextIter: iterator to initialize with selection start
            TextIter: iterator to initialize with selection end
        """
        ...

    def get_selection_content(self) -> Gdk.ContentProvider:
        """
        Get a content provider for this buffer.

        It can be used to make the content of @buffer available
        in a `GdkClipboard`, see [method@Gdk.Clipboard.set_content].

        Parameters:


        Returns:
            Gdk.ContentProvider: a new `GdkContentProvider`.

        """
        ...

    def get_slice(
        self, start: TextIter, end: TextIter, include_hidden_chars: bool
    ) -> str:
        """
        Returns the text in the range [@start,@end).

        Excludes undisplayed text (text marked with tags that set the
        invisibility attribute) if @include_hidden_chars is %FALSE.
        The returned string includes a 0xFFFC character whenever the
        buffer contains embedded images, so byte and character indexes
        into the returned string do correspond to byte and character
        indexes into the buffer. Contrast with [method@Gtk.TextBuffer.get_text].
        Note that 0xFFFC can occur in normal text as well, so it is not a
        reliable indicator that a paintable or widget is in the buffer.

        Parameters:
            start: start of a range
            end: end of a range
            include_hidden_chars: whether to include invisible text

        Returns:
            str: an allocated UTF-8 string

        """
        ...

    def get_start_iter(self) -> TextIter:
        """
        Initialized @iter with the first position in the text buffer.

        This is the same as using [method@Gtk.TextBuffer.get_iter_at_offset]
        to get the iter at character offset 0.

        Parameters:


        Returns:
            TextIter: iterator to initialize
        """
        ...

    def get_tag_table(self) -> TextTagTable:
        """
        Get the `GtkTextTagTable` associated with this buffer.

        Parameters:


        Returns:
            TextTagTable: the buffer’s tag table

        """
        ...

    def get_text(
        self, start: TextIter, end: TextIter, include_hidden_chars: bool
    ) -> str:
        """
        Returns the text in the range [@start,@end).

        Excludes undisplayed text (text marked with tags that set the
        invisibility attribute) if @include_hidden_chars is %FALSE.
        Does not include characters representing embedded images, so
        byte and character indexes into the returned string do not
        correspond to byte and character indexes into the buffer.
        Contrast with [method@Gtk.TextBuffer.get_slice].

        Parameters:
            start: start of a range
            end: end of a range
            include_hidden_chars: whether to include invisible text

        Returns:
            str: an allocated UTF-8 string

        """
        ...

    def insert(self, iter, text, length=-1): ...  # FIXME Function
    def insert_at_cursor(self, text, length=-1): ...  # FIXME Function
    def insert_child_anchor(self, iter: TextIter, anchor: TextChildAnchor) -> None:
        """
        Inserts a child widget anchor into the text buffer at @iter.

        The anchor will be counted as one character in character counts, and
        when obtaining the buffer contents as a string, will be represented
        by the Unicode “object replacement character” 0xFFFC. Note that the
        “slice” variants for obtaining portions of the buffer as a string
        include this character for child anchors, but the “text” variants do
        not. E.g. see [method@Gtk.TextBuffer.get_slice] and
        [method@Gtk.TextBuffer.get_text].

        Consider [method@Gtk.TextBuffer.create_child_anchor] as a more
        convenient alternative to this function. The buffer will add a
        reference to the anchor, so you can unref it after insertion.

        Parameters:
            iter: location to insert the anchor
            anchor: a `GtkTextChildAnchor`

        Returns:

        """
        ...

    def insert_interactive(
        self, iter: TextIter, text: str, len: int, default_editable: bool
    ) -> bool:
        """
        Inserts @text in @buffer.

        Like [method@Gtk.TextBuffer.insert], but the insertion will not occur
        if @iter is at a non-editable location in the buffer. Usually you
        want to prevent insertions at ineditable locations if the insertion
        results from a user action (is interactive).

        @default_editable indicates the editability of text that doesn't
        have a tag affecting editability applied to it. Typically the
        result of [method@Gtk.TextView.get_editable] is appropriate here.

        Parameters:
            iter: a position in @buffer
            text: some UTF-8 text
            len: length of text in bytes, or -1
            default_editable: default editability of buffer

        Returns:
            bool: whether text was actually inserted

        """
        ...

    def insert_interactive_at_cursor(
        self, text: str, len: int, default_editable: bool
    ) -> bool:
        """
        Inserts @text in @buffer.

        Calls [method@Gtk.TextBuffer.insert_interactive]
        at the cursor position.

        @default_editable indicates the editability of text that doesn't
        have a tag affecting editability applied to it. Typically the
        result of [method@Gtk.TextView.get_editable] is appropriate here.

        Parameters:
            text: text in UTF-8 format
            len: length of text in bytes, or -1
            default_editable: default editability of buffer

        Returns:
            bool: whether text was actually inserted

        """
        ...

    def insert_markup(self, iter: TextIter, markup: str, len: int) -> None:
        """
        Inserts the text in @markup at position @iter.

        @markup will be inserted in its entirety and must be nul-terminated
        and valid UTF-8. Emits the [signal@Gtk.TextBuffer::insert-text] signal,
        possibly multiple times; insertion actually occurs in the default handler
        for the signal. @iter will point to the end of the inserted text on return.

        Parameters:
            iter: location to insert the markup
            markup: a nul-terminated UTF-8 string containing Pango markup
            len: length of @markup in bytes, or -1

        Returns:

        """
        ...

    def insert_paintable(self, iter: TextIter, paintable: Gdk.Paintable) -> None:
        """
        Inserts an image into the text buffer at @iter.

        The image will be counted as one character in character counts,
        and when obtaining the buffer contents as a string, will be
        represented by the Unicode “object replacement character” 0xFFFC.
        Note that the “slice” variants for obtaining portions of the buffer
        as a string include this character for paintable, but the “text”
        variants do not. e.g. see [method@Gtk.TextBuffer.get_slice] and
        [method@Gtk.TextBuffer.get_text].

        Parameters:
            iter: location to insert the paintable
            paintable: a `GdkPaintable`

        Returns:

        """
        ...

    def insert_range(self, iter: TextIter, start: TextIter, end: TextIter) -> None:
        """
        Copies text, tags, and paintables between @start and @end
        and inserts the copy at @iter.

        The order of @start and @end doesn’t matter.

        Used instead of simply getting/inserting text because it preserves
        images and tags. If @start and @end are in a different buffer from
        @buffer, the two buffers must share the same tag table.

        Implemented via emissions of the ::insert-text and ::apply-tag signals,
        so expect those.

        Parameters:
            iter: a position in @buffer
            start: a position in a `GtkTextBuffer`
            end: another position in the same buffer as @start

        Returns:

        """
        ...

    def insert_range_interactive(
        self, iter: TextIter, start: TextIter, end: TextIter, default_editable: bool
    ) -> bool:
        """
        Copies text, tags, and paintables between @start and @end
        and inserts the copy at @iter.

        Same as [method@Gtk.TextBuffer.insert_range], but does nothing
        if the insertion point isn’t editable. The @default_editable
        parameter indicates whether the text is editable at @iter if
        no tags enclosing @iter affect editability. Typically the result
        of [method@Gtk.TextView.get_editable] is appropriate here.

        Parameters:
            iter: a position in @buffer
            start: a position in a `GtkTextBuffer`
            end: another position in the same buffer as @start
            default_editable: default editability of the buffer

        Returns:
            bool: whether an insertion was possible at @iter

        """
        ...

    def insert_with_tags(self, iter, text, *tags): ...  # FIXME Function
    # override
    def insert_with_tags_by_name(
        self, iter: TextIter, text: str, *tags: Any
    ) -> None: ...
    def move_mark(self, mark: TextMark, where: TextIter) -> None:
        """
        Moves @mark to the new location @where.

        Emits the [signal@Gtk.TextBuffer::mark-set] signal
        as notification of the move.

        Parameters:
            mark: a `GtkTextMark`
            where: new location for @mark in @buffer

        Returns:

        """
        ...

    def move_mark_by_name(self, name: str, where: TextIter) -> None:
        """
        Moves the mark named @name (which must exist) to location @where.

        See [method@Gtk.TextBuffer.move_mark] for details.

        Parameters:
            name: name of a mark
            where: new location for mark

        Returns:

        """
        ...

    @classmethod
    def new(cls, table: Optional[TextTagTable] = None) -> TextBuffer:
        """
        Creates a new text buffer.

        Parameters:
            table: a tag table, or %NULL to create a new one

        Returns:
            TextBuffer: a new text buffer

        """
        ...

    def paste_clipboard(
        self,
        clipboard: Gdk.Clipboard,
        override_location: Optional[TextIter],
        default_editable: bool,
    ) -> None:
        """
        Pastes the contents of a clipboard.

        If @override_location is %NULL, the pasted text will be inserted
        at the cursor position, or the buffer selection will be replaced
        if the selection is non-empty.

        Note: pasting is asynchronous, that is, we’ll ask for the paste data
        and return, and at some point later after the main loop runs, the paste
        data will be inserted.

        Parameters:
            clipboard: the `GdkClipboard` to paste from
            override_location: location to insert pasted text
            default_editable: whether the buffer is editable by default

        Returns:

        """
        ...

    def place_cursor(self, where: TextIter) -> None:
        """
        This function moves the “insert” and “selection_bound” marks
        simultaneously.

        If you move them to the same place in two steps with
        [method@Gtk.TextBuffer.move_mark], you will temporarily select a
        region in between their old and new locations, which can be pretty
        inefficient since the temporarily-selected region will force stuff
        to be recalculated. This function moves them as a unit, which can
        be optimized.

        Parameters:
            where: where to put the cursor

        Returns:

        """
        ...

    def redo(self) -> None:
        """
        Redoes the next redoable action on the buffer, if there is one.

        Parameters:


        Returns:

        """
        ...

    def remove_all_tags(self, start: TextIter, end: TextIter) -> None:
        """
        Removes all tags in the range between @start and @end.

        Be careful with this function; it could remove tags added in code
        unrelated to the code you’re currently writing. That is, using this
        function is probably a bad idea if you have two or more unrelated
        code sections that add tags.

        Parameters:
            start: one bound of range to be untagged
            end: other bound of range to be untagged

        Returns:

        """
        ...

    def remove_selection_clipboard(self, clipboard: Gdk.Clipboard) -> None:
        """
        Removes a `GdkClipboard` added with
        [method@Gtk.TextBuffer.add_selection_clipboard]

        Parameters:
            clipboard: a `GdkClipboard` added to @buffer by
        [method@Gtk.TextBuffer.add_selection_clipboard]

        Returns:

        """
        ...

    def remove_tag(self, tag: TextTag, start: TextIter, end: TextIter) -> None:
        """
        Emits the “remove-tag” signal.

        The default handler for the signal removes all occurrences
        of @tag from the given range. @start and @end don’t have
        to be in order.

        Parameters:
            tag: a `GtkTextTag`
            start: one bound of range to be untagged
            end: other bound of range to be untagged

        Returns:

        """
        ...

    def remove_tag_by_name(self, name: str, start: TextIter, end: TextIter) -> None:
        """
        Emits the “remove-tag” signal.

        Calls [method@Gtk.TextTagTable.lookup] on the buffer’s
        tag table to get a `GtkTextTag`, then calls
        [method@Gtk.TextBuffer.remove_tag].

        Parameters:
            name: name of a `GtkTextTag`
            start: one bound of range to be untagged
            end: other bound of range to be untagged

        Returns:

        """
        ...

    def select_range(self, ins: TextIter, bound: TextIter) -> None:
        """
        This function moves the “insert” and “selection_bound” marks
        simultaneously.

        If you move them in two steps with
        [method@Gtk.TextBuffer.move_mark], you will temporarily select a
        region in between their old and new locations, which can be pretty
        inefficient since the temporarily-selected region will force stuff
        to be recalculated. This function moves them as a unit, which can
        be optimized.

        Parameters:
            ins: where to put the “insert” mark
            bound: where to put the “selection_bound” mark

        Returns:

        """
        ...

    def set_enable_undo(self, enable_undo: bool) -> None:
        """
        Sets whether or not to enable undoable actions in the text buffer.

        Undoable actions in this context are changes to the text content of
        the buffer. Changes to tags and marks are not tracked.

        If enabled, the user will be able to undo the last number of actions
        up to [method@Gtk.TextBuffer.get_max_undo_levels].

        See [method@Gtk.TextBuffer.begin_irreversible_action] and
        [method@Gtk.TextBuffer.end_irreversible_action] to create
        changes to the buffer that cannot be undone.

        Parameters:
            enable_undo: %TRUE to enable undo

        Returns:

        """
        ...

    def set_max_undo_levels(self, max_undo_levels: int) -> None:
        """
        Sets the maximum number of undo levels to perform.

        If 0, unlimited undo actions may be performed. Note that this may
        have a memory usage impact as it requires storing an additional
        copy of the inserted or removed text within the text buffer.

        Parameters:
            max_undo_levels: the maximum number of undo actions to perform

        Returns:

        """
        ...

    def set_modified(self, setting: bool) -> None:
        """
        Used to keep track of whether the buffer has been
        modified since the last time it was saved.

        Whenever the buffer is saved to disk, call
        `gtk_text_buffer_set_modified (@buffer, FALSE)`.
        When the buffer is modified, it will automatically
        toggle on the modified bit again. When the modified
        bit flips, the buffer emits the
        [signal@Gtk.TextBuffer::modified-changed] signal.

        Parameters:
            setting: modification flag setting

        Returns:

        """
        ...
    # override
    def set_text(self, text: str, len: int = -1) -> None: ...
    def undo(self) -> None:
        """
        Undoes the last undoable action on the buffer, if there is one.

        Parameters:


        Returns:

        """
        ...

class TextBufferClass(GObject.GPointer):
    """
    The class structure for `GtkTextBuffer`.

    :Constructors:

    ::

        TextBufferClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    insert_text: Callable[[TextBuffer, TextIter, str, int], None] = ...
    insert_paintable: Callable[[TextBuffer, TextIter, Gdk.Paintable], None] = ...
    insert_child_anchor: Callable[[TextBuffer, TextIter, TextChildAnchor], None] = ...
    delete_range: Callable[[TextBuffer, TextIter, TextIter], None] = ...
    changed: Callable[[TextBuffer], None] = ...
    modified_changed: Callable[[TextBuffer], None] = ...
    mark_set: Callable[[TextBuffer, TextIter, TextMark], None] = ...
    mark_deleted: Callable[[TextBuffer, TextMark], None] = ...
    apply_tag: Callable[[TextBuffer, TextTag, TextIter, TextIter], None] = ...
    remove_tag: Callable[[TextBuffer, TextTag, TextIter, TextIter], None] = ...
    begin_user_action: Callable[[TextBuffer], None] = ...
    end_user_action: Callable[[TextBuffer], None] = ...
    paste_done: Callable[[TextBuffer, Gdk.Clipboard], None] = ...
    undo: Callable[[TextBuffer], None] = ...
    redo: Callable[[TextBuffer], None] = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...

class TextBufferPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class TextChildAnchor(GObject.Object):
    """
    A `GtkTextChildAnchor` is a spot in a `GtkTextBuffer` where child widgets can
    be “anchored”.

    The anchor can have multiple widgets anchored, to allow for multiple views.

    :Constructors:

    ::

        TextChildAnchor(**properties)
        new() -> Gtk.TextChildAnchor
        new_with_replacement(character:str) -> Gtk.TextChildAnchor

    Object GtkTextChildAnchor

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...
    parent_instance: GObject.Object = ...
    segment: None = ...
    def get_deleted(self) -> bool:
        """
        Determines whether a child anchor has been deleted from
        the buffer.

        Keep in mind that the child anchor will be unreferenced
        when removed from the buffer, so you need to hold your own
        reference (with g_object_ref()) if you plan to use this
        function — otherwise all deleted child anchors will also
        be finalized.

        Parameters:


        Returns:
            bool: %TRUE if the child anchor has been deleted from its buffer

        """
        ...

    def get_widgets(self) -> list[Widget]:
        """
        Gets a list of all widgets anchored at this child anchor.

        The order in which the widgets are returned is not defined.

        Parameters:


        Returns:
            list[Widget]: an
        array of widgets anchored at @anchor

        """
        ...

    @classmethod
    def new(cls) -> TextChildAnchor:
        """
        Creates a new `GtkTextChildAnchor`.

        Usually you would then insert it into a `GtkTextBuffer` with
        [method@Gtk.TextBuffer.insert_child_anchor]. To perform the
        creation and insertion in one step, use the convenience
        function [method@Gtk.TextBuffer.create_child_anchor].

        Parameters:


        Returns:
            TextChildAnchor: a new `GtkTextChildAnchor`

        """
        ...

    @classmethod
    def new_with_replacement(cls, character: str) -> TextChildAnchor:
        """
        Creates a new `GtkTextChildAnchor` with the given replacement character.

        Usually you would then insert it into a `GtkTextBuffer` with
        [method@Gtk.TextBuffer.insert_child_anchor].

        Parameters:
            character:

        Returns:
            TextChildAnchor: a new `GtkTextChildAnchor`

        """
        ...

class TextChildAnchorClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TextChildAnchorClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...

class TextIter(GObject.GBoxed):
    """
    An iterator for the contents of a `GtkTextBuffer`.

    You may wish to begin by reading the
    [text widget conceptual overview](section-text-widget.html),
    which gives an overview of all the objects and data types
    related to the text widget and how they work together.

    :Constructors:

    ::

        TextIter()
    """

    class Props(GObject.GBoxed.Props): ...
    dummy1: None = ...
    dummy2: None = ...
    dummy3: int = ...
    dummy4: int = ...
    dummy5: int = ...
    dummy6: int = ...
    dummy7: int = ...
    dummy8: int = ...
    dummy9: None = ...
    dummy10: None = ...
    dummy11: int = ...
    dummy12: int = ...
    dummy13: int = ...
    dummy14: None = ...
    def assign(self, other: TextIter) -> None:
        """
        Assigns the value of @other to @iter.

        This function is not useful in applications, because
        iterators can be assigned with `GtkTextIter i = j;`.

        The function is used by language bindings.

        Parameters:
            other: another `GtkTextIter`

        Returns:

        """
        ...

    def backward_char(self) -> bool:
        """
        Moves backward by one character offset.

        Returns %TRUE if movement was possible; if @iter was the first
        in the buffer (character offset 0), this function returns %FALSE
        for convenience when writing loops.

        Parameters:


        Returns:
            bool: whether movement was possible

        """
        ...

    def backward_chars(self, count: int) -> bool:
        """
        Moves @count characters backward, if possible.

        If @count would move past the start or end of the buffer, moves
        to the start or end of the buffer.

        The return value indicates whether the iterator moved
        onto a dereferenceable position; if the iterator didn’t move, or
        moved onto the end iterator, then %FALSE is returned. If @count is 0,
        the function does nothing and returns %FALSE.

        Parameters:
            count: number of characters to move

        Returns:
            bool: whether @iter moved and is dereferenceable

        """
        ...

    def backward_cursor_position(self) -> bool:
        """
        Like [method@Gtk.TextIter.forward_cursor_position], but moves backward.

        Parameters:


        Returns:
            bool: %TRUE if we moved

        """
        ...

    def backward_cursor_positions(self, count: int) -> bool:
        """
        Moves up to @count cursor positions.

        See [method@Gtk.TextIter.forward_cursor_position] for details.

        Parameters:
            count: number of positions to move

        Returns:
            bool: %TRUE if we moved and the new position is dereferenceable

        """
        ...

    def backward_find_char(
        self,
        pred: Callable[..., bool],
        limit: Optional[TextIter] = None,
        *user_data: Any,
    ) -> bool:
        """
        Same as [method@Gtk.TextIter.forward_find_char],
        but goes backward from @iter.

        Parameters:
            pred: function to be called on each character
            limit: search limit
            user_data: user data for @pred

        Returns:
            bool: whether a match was found

        """
        ...

    def backward_line(self) -> bool:
        """
        Moves @iter to the start of the previous line.

        Returns %TRUE if @iter could be moved; i.e. if @iter was at
        character offset 0, this function returns %FALSE. Therefore,
        if @iter was already on line 0, but not at the start of the line,
        @iter is snapped to the start of the line and the function returns
        %TRUE. (Note that this implies that
        in a loop calling this function, the line number may not change on
        every iteration, if your first iteration is on line 0.)

        Parameters:


        Returns:
            bool: whether @iter moved

        """
        ...

    def backward_lines(self, count: int) -> bool:
        """
        Moves @count lines backward, if possible.

        If @count would move past the start or end of the buffer, moves to
        the start or end of the buffer.

        The return value indicates whether the iterator moved
        onto a dereferenceable position; if the iterator didn’t move, or
        moved onto the end iterator, then %FALSE is returned. If @count is 0,
        the function does nothing and returns %FALSE. If @count is negative,
        moves forward by 0 - @count lines.

        Parameters:
            count: number of lines to move backward

        Returns:
            bool: whether @iter moved and is dereferenceable

        """
        ...

    def backward_search(
        self, str: str, flags: TextSearchFlags, limit: Optional[TextIter] = None
    ) -> Optional[Tuple[TextIter, TextIter]]:  # CHECK Wrapped function
        """
        Same as [method@Gtk.TextIter.forward_search], but moves backward.

        @match_end will never be set to a `GtkTextIter` located after @iter,
        even if there is a possible @match_start before or at @iter.

        Parameters:
            str: search string
            flags: bitmask of flags affecting the search
            limit: location of last possible @match_start, or %NULL for start of buffer

        Returns:
            TextIter: return location for start of match
            TextIter: return location for end of match
        """
        ...

    def backward_sentence_start(self) -> bool:
        """
        Moves backward to the previous sentence start.

        If @iter is already at the start of a sentence, moves backward
        to the next one.

        Sentence boundaries are determined by Pango and should
        be correct for nearly any language.

        Parameters:


        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def backward_sentence_starts(self, count: int) -> bool:
        """
        Calls [method@Gtk.TextIter.backward_sentence_start] up to @count times.

        If @count is negative, moves forward instead of backward.

        Parameters:
            count: number of sentences to move

        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def backward_to_tag_toggle(self, tag: Optional[TextTag] = None) -> bool:
        """
        Moves backward to the next toggle (on or off) of the
        @tag, or to the next toggle of any tag if
        @tag is %NULL.

        If no matching tag toggles are found,
        returns %FALSE, otherwise %TRUE. Does not return toggles
        located at @iter, only toggles before @iter. Sets @iter
        to the location of the toggle, or the start of the buffer
        if no toggle is found.

        Parameters:
            tag: a `GtkTextTag`

        Returns:
            bool: whether we found a tag toggle before @iter

        """
        ...

    def backward_visible_cursor_position(self) -> bool:
        """
        Moves @iter backward to the previous visible cursor position.

        See [method@Gtk.TextIter.backward_cursor_position] for details.

        Parameters:


        Returns:
            bool: %TRUE if we moved and the new position is dereferenceable

        """
        ...

    def backward_visible_cursor_positions(self, count: int) -> bool:
        """
        Moves up to @count visible cursor positions.

        See [method@Gtk.TextIter.backward_cursor_position] for details.

        Parameters:
            count: number of positions to move

        Returns:
            bool: %TRUE if we moved and the new position is dereferenceable

        """
        ...

    def backward_visible_line(self) -> bool:
        """
        Moves @iter to the start of the previous visible line.

        Returns %TRUE if
        @iter could be moved; i.e. if @iter was at character offset 0, this
        function returns %FALSE. Therefore if @iter was already on line 0,
        but not at the start of the line, @iter is snapped to the start of
        the line and the function returns %TRUE. (Note that this implies that
        in a loop calling this function, the line number may not change on
        every iteration, if your first iteration is on line 0.)

        Parameters:


        Returns:
            bool: whether @iter moved

        """
        ...

    def backward_visible_lines(self, count: int) -> bool:
        """
        Moves @count visible lines backward, if possible.

        If @count would move past the start or end of the buffer, moves to
        the start or end of the buffer.

        The return value indicates whether the iterator moved
        onto a dereferenceable position; if the iterator didn’t move, or
        moved onto the end iterator, then %FALSE is returned. If @count is 0,
        the function does nothing and returns %FALSE. If @count is negative,
        moves forward by 0 - @count lines.

        Parameters:
            count: number of lines to move backward

        Returns:
            bool: whether @iter moved and is dereferenceable

        """
        ...

    def backward_visible_word_start(self) -> bool:
        """
        Moves backward to the previous visible word start.

        If @iter is currently on a word start, moves backward to the
        next one after that.

        Word breaks are determined by Pango and should be correct
        for nearly any language.

        Parameters:


        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def backward_visible_word_starts(self, count: int) -> bool:
        """
        Calls [method@Gtk.TextIter.backward_visible_word_start] up to @count times.

        Parameters:
            count: number of times to move

        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def backward_word_start(self) -> bool:
        """
        Moves backward to the previous word start.

        If @iter is currently on a word start, moves backward to the
        next one after that.

        Word breaks are determined by Pango and should be correct
        for nearly any language

        Parameters:


        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def backward_word_starts(self, count: int) -> bool:
        """
        Calls [method@Gtk.TextIter.backward_word_start] up to @count times.

        Parameters:
            count: number of times to move

        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def can_insert(self, default_editability: bool) -> bool:
        """
        Considering the default editability of the buffer, and tags that
        affect editability, determines whether text inserted at @iter would
        be editable.

        If text inserted at @iter would be editable then the
        user should be allowed to insert text at @iter.
        [method@Gtk.TextBuffer.insert_interactive] uses this function
        to decide whether insertions are allowed at a given position.

        Parameters:
            default_editability: %TRUE if text is editable by default

        Returns:
            bool: whether text inserted at @iter would be editable

        """
        ...

    def compare(self, rhs: TextIter) -> int:
        """
        A qsort()-style function that returns negative if @lhs is less than
        @rhs, positive if @lhs is greater than @rhs, and 0 if they’re equal.

        Ordering is in character offset order, i.e. the first character
        in the buffer is less than the second character in the buffer.

        Parameters:
            rhs: another `GtkTextIter`

        Returns:
            int: -1 if @lhs is less than @rhs, 1 if @lhs is greater, 0 if they are equal

        """
        ...

    def copy(self) -> TextIter:
        """
        Creates a dynamically-allocated copy of an iterator.

        This function is not useful in applications, because
        iterators can be copied with a simple assignment
        (`GtkTextIter i = j;`).

        The function is used by language bindings.

        Parameters:


        Returns:
            TextIter: a copy of the @iter, free with [method@Gtk.TextIter.free]

        """
        ...

    def editable(self, default_setting: bool) -> bool:
        """
        Returns whether the character at @iter is within an editable region
        of text.

        Non-editable text is “locked” and can’t be changed by the
        user via `GtkTextView`. If no tags applied to this text affect
        editability, @default_setting will be returned.

        You don’t want to use this function to decide whether text can be
        inserted at @iter, because for insertion you don’t want to know
        whether the char at @iter is inside an editable range, you want to
        know whether a new character inserted at @iter would be inside an
        editable range. Use [method@Gtk.TextIter.can_insert] to handle this
        case.

        Parameters:
            default_setting: %TRUE if text is editable by default

        Returns:
            bool: whether @iter is inside an editable range

        """
        ...

    def ends_line(self) -> bool:
        """
        Returns %TRUE if @iter points to the start of the paragraph
        delimiter characters for a line.

        Delimiters will be either a newline, a carriage return, a carriage
        return followed by a newline, or a Unicode paragraph separator
        character.

        Note that an iterator pointing to the \n of a \r\n pair will not be
        counted as the end of a line, the line ends before the \r. The end
        iterator is considered to be at the end of a line, even though there
        are no paragraph delimiter chars there.

        Parameters:


        Returns:
            bool: whether @iter is at the end of a line

        """
        ...

    def ends_sentence(self) -> bool:
        """
        Determines whether @iter ends a sentence.

        Sentence boundaries are determined by Pango and should
        be correct for nearly any language.

        Parameters:


        Returns:
            bool: %TRUE if @iter is at the end of a sentence.

        """
        ...

    def ends_tag(self, tag: Optional[TextTag] = None) -> bool:
        """
        Returns %TRUE if @tag is toggled off at exactly this point.

        If @tag is %NULL, returns %TRUE if any tag is toggled off at this point.

        Note that if this function returns %TRUE, it means that
        @iter is at the end of the tagged range, but that the character
        at @iter is outside the tagged range. In other words,
        unlike [method@Gtk.TextIter.starts_tag], if this function
        returns %TRUE, [method@Gtk.TextIter.has_tag] will return
        %FALSE for the same parameters.

        Parameters:
            tag: a `GtkTextTag`

        Returns:
            bool: whether @iter is the end of a range tagged with @tag

        """
        ...

    def ends_word(self) -> bool:
        """
        Determines whether @iter ends a natural-language word.

        Word breaks are determined by Pango and should be correct
        for nearly any language.

        Parameters:


        Returns:
            bool: %TRUE if @iter is at the end of a word

        """
        ...

    def equal(self, rhs: TextIter) -> bool:
        """
        Tests whether two iterators are equal, using the fastest possible
        mechanism.

        This function is very fast; you can expect it to perform
        better than e.g. getting the character offset for each
        iterator and comparing the offsets yourself. Also, it’s a
        bit faster than [method@Gtk.TextIter.compare].

        Parameters:
            rhs: another `GtkTextIter`

        Returns:
            bool: %TRUE if the iterators point to the same place in the buffer

        """
        ...

    def forward_char(self) -> bool:
        """
        Moves @iter forward by one character offset.

        Note that images embedded in the buffer occupy 1 character slot, so
        this function may actually move onto an image instead of a character,
        if you have images in your buffer. If @iter is the end iterator or
        one character before it, @iter will now point at the end iterator,
        and this function returns %FALSE for convenience when writing loops.

        Parameters:


        Returns:
            bool: whether @iter moved and is dereferenceable

        """
        ...

    def forward_chars(self, count: int) -> bool:
        """
        Moves @count characters if possible.

        If @count would move past the start or end of the buffer,
        moves to the start or end of the buffer.

        The return value indicates whether the new position of
        @iter is different from its original position, and dereferenceable
        (the last iterator in the buffer is not dereferenceable). If @count
        is 0, the function does nothing and returns %FALSE.

        Parameters:
            count: number of characters to move, may be negative

        Returns:
            bool: whether @iter moved and is dereferenceable

        """
        ...

    def forward_cursor_position(self) -> bool:
        """
        Moves @iter forward by a single cursor position.

        Cursor positions are (unsurprisingly) positions where the
        cursor can appear. Perhaps surprisingly, there may not be
        a cursor position between all characters. The most common
        example for European languages would be a carriage return/newline
        sequence.

        For some Unicode characters, the equivalent of say the letter “a”
        with an accent mark will be represented as two characters, first
        the letter then a \"combining mark\" that causes the accent to be
        rendered; so the cursor can’t go between those two characters.

        See also the [struct@Pango.LogAttr] struct and the [func@Pango.break]
        function.

        Parameters:


        Returns:
            bool: %TRUE if we moved and the new position is dereferenceable

        """
        ...

    def forward_cursor_positions(self, count: int) -> bool:
        """
        Moves up to @count cursor positions.

        See [method@Gtk.TextIter.forward_cursor_position] for details.

        Parameters:
            count: number of positions to move

        Returns:
            bool: %TRUE if we moved and the new position is dereferenceable

        """
        ...

    def forward_find_char(
        self,
        pred: Callable[..., bool],
        limit: Optional[TextIter] = None,
        *user_data: Any,
    ) -> bool:
        """
        Advances @iter, calling @pred on each character.

        If @pred returns %TRUE, returns %TRUE and stops scanning.
        If @pred never returns %TRUE, @iter is set to @limit if
        @limit is non-%NULL, otherwise to the end iterator.

        Parameters:
            pred: a function to be called on each character
            limit: search limit
            user_data: user data for @pred

        Returns:
            bool: whether a match was found

        """
        ...

    def forward_line(self) -> bool:
        """
        Moves @iter to the start of the next line.

        If the iter is already on the last line of the buffer,
        moves the iter to the end of the current line. If after
        the operation, the iter is at the end of the buffer and not
        dereferenceable, returns %FALSE. Otherwise, returns %TRUE.

        Parameters:


        Returns:
            bool: whether @iter can be dereferenced

        """
        ...

    def forward_lines(self, count: int) -> bool:
        """
        Moves @count lines forward, if possible.

        If @count would move past the start or end of the buffer, moves to
        the start or end of the buffer.

        The return value indicates whether the iterator moved
        onto a dereferenceable position; if the iterator didn’t move, or
        moved onto the end iterator, then %FALSE is returned. If @count is 0,
        the function does nothing and returns %FALSE. If @count is negative,
        moves backward by 0 - @count lines.

        Parameters:
            count: number of lines to move forward

        Returns:
            bool: whether @iter moved and is dereferenceable

        """
        ...

    def forward_search(
        self, str: str, flags: TextSearchFlags, limit: Optional[TextIter] = None
    ) -> Optional[Tuple[TextIter, TextIter]]:  # CHECK Wrapped function
        """
        Searches forward for @str.

        Any match is returned by setting @match_start to the first character
        of the match and @match_end to the first character after the match.
        The search will not continue past @limit. Note that a search is a
        linear or O(n) operation, so you may wish to use @limit to avoid
        locking up your UI on large buffers.

        @match_start will never be set to a `GtkTextIter` located before @iter,
        even if there is a possible @match_end after or at @iter.

        Parameters:
            str: a search string
            flags: flags affecting how the search is done
            limit: location of last possible @match_end, or %NULL for the end of the buffer

        Returns:
            TextIter: return location for start of match
            TextIter: return location for end of match
        """
        ...

    def forward_sentence_end(self) -> bool:
        """
        Moves forward to the next sentence end.

        If @iter is at the end of a sentence, moves to the next
        end of sentence.

        Sentence boundaries are determined by Pango and should
        be correct for nearly any language.

        Parameters:


        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def forward_sentence_ends(self, count: int) -> bool:
        """
        Calls [method@Gtk.TextIter.forward_sentence_end] @count times.

        If @count is negative, moves backward instead of forward.

        Parameters:
            count: number of sentences to move

        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def forward_to_end(self) -> None:
        """
        Moves @iter forward to the “end iterator”, which points
        one past the last valid character in the buffer.

        [method@Gtk.TextIter.get_char] called on the end iterator
        returns 0, which is convenient for writing loops.

        Parameters:


        Returns:

        """
        ...

    def forward_to_line_end(self) -> bool:
        """
        Moves the iterator to point to the paragraph delimiter characters.

        The possible characters are either a newline, a carriage return,
        a carriage return/newline in sequence, or the Unicode paragraph
        separator character.

        If the iterator is already at the paragraph delimiter
        characters, moves to the paragraph delimiter characters for the
        next line. If @iter is on the last line in the buffer, which does
        not end in paragraph delimiters, moves to the end iterator (end of
        the last line), and returns %FALSE.

        Parameters:


        Returns:
            bool: %TRUE if we moved and the new location is not the end iterator

        """
        ...

    def forward_to_tag_toggle(self, tag: Optional[TextTag] = None) -> bool:
        """
        Moves forward to the next toggle (on or off) of the
        @tag, or to the next toggle of any tag if
        @tag is %NULL.

        If no matching tag toggles are found,
        returns %FALSE, otherwise %TRUE. Does not return toggles
        located at @iter, only toggles after @iter. Sets @iter to
        the location of the toggle, or to the end of the buffer
        if no toggle is found.

        Parameters:
            tag: a `GtkTextTag`

        Returns:
            bool: whether we found a tag toggle after @iter

        """
        ...

    def forward_visible_cursor_position(self) -> bool:
        """
        Moves @iter forward to the next visible cursor position.

        See [method@Gtk.TextIter.forward_cursor_position] for details.

        Parameters:


        Returns:
            bool: %TRUE if we moved and the new position is dereferenceable

        """
        ...

    def forward_visible_cursor_positions(self, count: int) -> bool:
        """
        Moves up to @count visible cursor positions.

        See [method@Gtk.TextIter.forward_cursor_position] for details.

        Parameters:
            count: number of positions to move

        Returns:
            bool: %TRUE if we moved and the new position is dereferenceable

        """
        ...

    def forward_visible_line(self) -> bool:
        """
        Moves @iter to the start of the next visible line.

        Returns %TRUE if there
        was a next line to move to, and %FALSE if @iter was simply moved to
        the end of the buffer and is now not dereferenceable, or if @iter was
        already at the end of the buffer.

        Parameters:


        Returns:
            bool: whether @iter can be dereferenced

        """
        ...

    def forward_visible_lines(self, count: int) -> bool:
        """
        Moves @count visible lines forward, if possible.

        If @count would move past the start or end of the buffer, moves to
        the start or end of the buffer.

        The return value indicates whether the iterator moved
        onto a dereferenceable position; if the iterator didn’t move, or
        moved onto the end iterator, then %FALSE is returned. If @count is 0,
        the function does nothing and returns %FALSE. If @count is negative,
        moves backward by 0 - @count lines.

        Parameters:
            count: number of lines to move forward

        Returns:
            bool: whether @iter moved and is dereferenceable

        """
        ...

    def forward_visible_word_end(self) -> bool:
        """
        Moves forward to the next visible word end.

        If @iter is currently on a word end, moves forward to the
        next one after that.

        Word breaks are determined by Pango and should be correct
        for nearly any language

        Parameters:


        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def forward_visible_word_ends(self, count: int) -> bool:
        """
        Calls [method@Gtk.TextIter.forward_visible_word_end] up to @count times.

        Parameters:
            count: number of times to move

        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def forward_word_end(self) -> bool:
        """
        Moves forward to the next word end.

        If @iter is currently on a word end, moves forward to the
        next one after that.

        Word breaks are determined by Pango and should be correct
        for nearly any language.

        Parameters:


        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def forward_word_ends(self, count: int) -> bool:
        """
        Calls [method@Gtk.TextIter.forward_word_end] up to @count times.

        Parameters:
            count: number of times to move

        Returns:
            bool: %TRUE if @iter moved and is not the end iterator

        """
        ...

    def free(self) -> None:
        """
        Free an iterator allocated on the heap.

        This function is intended for use in language bindings,
        and is not especially useful for applications, because
        iterators can simply be allocated on the stack.

        Parameters:


        Returns:

        """
        ...

    def get_buffer(self) -> TextBuffer:
        """
        Returns the `GtkTextBuffer` this iterator is associated with.

        Parameters:


        Returns:
            TextBuffer: the buffer

        """
        ...

    def get_bytes_in_line(self) -> int:
        """
        Returns the number of bytes in the line containing @iter,
        including the paragraph delimiters.

        Parameters:


        Returns:
            int: number of bytes in the line

        """
        ...

    def get_char(self) -> str:
        """
        The Unicode character at this iterator is returned.

        Equivalent to operator* on a C++ iterator. If the element at
        this iterator is a non-character element, such as an image
        embedded in the buffer, the Unicode “unknown” character 0xFFFC
        is returned. If invoked on the end iterator, zero is returned;
        zero is not a valid Unicode character.

        So you can write a loop which ends when this function returns 0.

        Parameters:


        Returns:
            str: a Unicode character, or 0 if @iter is not dereferenceable

        """
        ...

    def get_chars_in_line(self) -> int:
        """
        Returns the number of characters in the line containing @iter,
        including the paragraph delimiters.

        Parameters:


        Returns:
            int: number of characters in the line

        """
        ...

    def get_child_anchor(self) -> Optional[TextChildAnchor]:
        """
        If the location at @iter contains a child anchor, the
        anchor is returned.

        Otherwise, %NULL is returned.

        Parameters:


        Returns:
            Optional[TextChildAnchor]: the anchor at @iter

        """
        ...

    def get_language(self) -> Pango.Language:
        """
        Returns the language in effect at @iter.

        If no tags affecting language apply to @iter, the return
        value is identical to that of [func@Gtk.get_default_language].

        Parameters:


        Returns:
            Pango.Language: language in effect at @iter

        """
        ...

    def get_line(self) -> int:
        """
        Returns the line number containing the iterator.

        Lines in a `GtkTextBuffer` are numbered beginning
        with 0 for the first line in the buffer.

        Parameters:


        Returns:
            int: a line number

        """
        ...

    def get_line_index(self) -> int:
        """
        Returns the byte index of the iterator, counting
        from the start of a newline-terminated line.

        Remember that `GtkTextBuffer` encodes text in
        UTF-8, and that characters can require a variable
        number of bytes to represent.

        Parameters:


        Returns:
            int: distance from start of line, in bytes

        """
        ...

    def get_line_offset(self) -> int:
        """
        Returns the character offset of the iterator,
        counting from the start of a newline-terminated line.

        The first character on the line has offset 0.

        Parameters:


        Returns:
            int: offset from start of line

        """
        ...

    def get_marks(self) -> list[TextMark]:
        """
        Returns a list of all `GtkTextMark` at this location.

        Because marks are not iterable (they don’t take up any \"space\"
        in the buffer, they are just marks in between iterable locations),
        multiple marks can exist in the same place.

        The returned list is not in any meaningful order.

        Parameters:


        Returns:
            list[TextMark]:
        list of `GtkTextMark`

        """
        ...

    def get_offset(self) -> int:
        """
        Returns the character offset of an iterator.

        Each character in a `GtkTextBuffer` has an offset,
        starting with 0 for the first character in the buffer.
        Use [method@Gtk.TextBuffer.get_iter_at_offset] to convert
        an offset back into an iterator.

        Parameters:


        Returns:
            int: a character offset

        """
        ...

    def get_paintable(self) -> Optional[Gdk.Paintable]:
        """
        If the element at @iter is a paintable, the paintable is returned.

        Otherwise, %NULL is returned.

        Parameters:


        Returns:
            Optional[Gdk.Paintable]: the paintable at @iter

        """
        ...

    def get_slice(self, end: TextIter) -> str:
        """
        Returns the text in the given range.

        A “slice” is an array of characters encoded in UTF-8 format,
        including the Unicode “unknown” character 0xFFFC for iterable
        non-character elements in the buffer, such as images.
        Because images are encoded in the slice, byte and
        character offsets in the returned array will correspond to byte
        offsets in the text buffer. Note that 0xFFFC can occur in normal
        text as well, so it is not a reliable indicator that a paintable or
        widget is in the buffer.

        Parameters:
            end: iterator at end of a range

        Returns:
            str: slice of text from the buffer

        """
        ...

    def get_tags(self) -> list[TextTag]:
        """
        Returns a list of tags that apply to @iter, in ascending order of
        priority.

        The highest-priority tags are last.

        The `GtkTextTag`s in the list don’t have a reference added,
        but you have to free the list itself.

        Parameters:


        Returns:
            list[TextTag]: list of
        `GtkTextTag`

        """
        ...

    def get_text(self, end: TextIter) -> str:
        """
        Returns text in the given range.

        If the range
        contains non-text elements such as images, the character and byte
        offsets in the returned string will not correspond to character and
        byte offsets in the buffer. If you want offsets to correspond, see
        [method@Gtk.TextIter.get_slice].

        Parameters:
            end: iterator at end of a range

        Returns:
            str: array of characters from the buffer

        """
        ...

    def get_toggled_tags(self, toggled_on: bool) -> list[TextTag]:
        """
        Returns a list of `GtkTextTag` that are toggled on or off at this
        point.

        If @toggled_on is %TRUE, the list contains tags that are
        toggled on. If a tag is toggled on at @iter, then some non-empty
        range of characters following @iter has that tag applied to it. If
        a tag is toggled off, then some non-empty range following @iter
        does not have the tag applied to it.

        Parameters:
            toggled_on: %TRUE to get toggled-on tags

        Returns:
            list[TextTag]: tags
        toggled at this point

        """
        ...

    def get_visible_line_index(self) -> int:
        """
        Returns the number of bytes from the start of the
        line to the given @iter, not counting bytes that
        are invisible due to tags with the “invisible” flag
        toggled on.

        Parameters:


        Returns:
            int: byte index of @iter with respect to the start of the line

        """
        ...

    def get_visible_line_offset(self) -> int:
        """
        Returns the offset in characters from the start of the
        line to the given @iter, not counting characters that
        are invisible due to tags with the “invisible” flag
        toggled on.

        Parameters:


        Returns:
            int: offset in visible characters from the start of the line

        """
        ...

    def get_visible_slice(self, end: TextIter) -> str:
        """
        Returns visible text in the given range.

        Like [method@Gtk.TextIter.get_slice], but invisible text
        is not included. Invisible text is usually invisible because
        a `GtkTextTag` with the “invisible” attribute turned on has
        been applied to it.

        Parameters:
            end: iterator at end of range

        Returns:
            str: slice of text from the buffer

        """
        ...

    def get_visible_text(self, end: TextIter) -> str:
        """
        Returns visible text in the given range.

        Like [method@Gtk.TextIter.get_text], but invisible text
        is not included. Invisible text is usually invisible because
        a `GtkTextTag` with the “invisible” attribute turned on has
        been applied to it.

        Parameters:
            end: iterator at end of range

        Returns:
            str: string containing visible text in the
        range

        """
        ...

    def has_tag(self, tag: TextTag) -> bool:
        """
        Returns %TRUE if @iter points to a character that is part
        of a range tagged with @tag.

        See also [method@Gtk.TextIter.starts_tag] and
        [method@Gtk.TextIter.ends_tag].

        Parameters:
            tag: a `GtkTextTag`

        Returns:
            bool: whether @iter is tagged with @tag

        """
        ...

    def in_range(self, start: TextIter, end: TextIter) -> bool:
        """
        Checks whether @iter falls in the range [@start, @end).

        @start and @end must be in ascending order.

        Parameters:
            start: start of range
            end: end of range

        Returns:
            bool: %TRUE if @iter is in the range

        """
        ...

    def inside_sentence(self) -> bool:
        """
        Determines whether @iter is inside a sentence (as opposed to in
        between two sentences, e.g. after a period and before the first
        letter of the next sentence).

        Sentence boundaries are determined by Pango and should be correct
        for nearly any language.

        Parameters:


        Returns:
            bool: %TRUE if @iter is inside a sentence.

        """
        ...

    def inside_word(self) -> bool:
        """
        Determines whether the character pointed by @iter is part of a
        natural-language word (as opposed to say inside some whitespace).

        Word breaks are determined by Pango and should be correct
        for nearly any language.

        Note that if [method@Gtk.TextIter.starts_word] returns %TRUE,
        then this function returns %TRUE too, since @iter points to
        the first character of the word.

        Parameters:


        Returns:
            bool: %TRUE if @iter is inside a word

        """
        ...

    def is_cursor_position(self) -> bool:
        """
        Determine if @iter is at a cursor position.

        See [method@Gtk.TextIter.forward_cursor_position] or
        [struct@Pango.LogAttr] or [func@Pango.break] for details
        on what a cursor position is.

        Parameters:


        Returns:
            bool: %TRUE if the cursor can be placed at @iter

        """
        ...

    def is_end(self) -> bool:
        """
        Returns %TRUE if @iter is the end iterator.

        This means it is one past the last dereferenceable iterator
        in the buffer. [method@Gtk.TextIter.is_end] is the most efficient
        way to check whether an iterator is the end iterator.

        Parameters:


        Returns:
            bool: whether @iter is the end iterator

        """
        ...

    def is_start(self) -> bool:
        """
        Returns %TRUE if @iter is the first iterator in the buffer.

        Parameters:


        Returns:
            bool: whether @iter is the first in the buffer

        """
        ...

    def order(self, second: TextIter) -> None:
        """
        Swaps the value of @first and @second if @second comes before
        @first in the buffer.

        That is, ensures that @first and @second are in sequence.
        Most text buffer functions that take a range call this
        automatically on your behalf, so there’s no real reason to
        call it yourself in those cases. There are some exceptions,
        such as [method@Gtk.TextIter.in_range], that expect a
        pre-sorted range.

        Parameters:
            second: another `GtkTextIter`

        Returns:

        """
        ...

    def set_line(self, line_number: int) -> None:
        """
        Moves iterator @iter to the start of the line @line_number.

        If @line_number is negative or larger than or equal to the number of lines
        in the buffer, moves @iter to the start of the last line in the buffer.

        Parameters:
            line_number: line number (counted from 0)

        Returns:

        """
        ...

    def set_line_index(self, byte_on_line: int) -> None:
        """
        Same as [method@Gtk.TextIter.set_line_offset], but works with a
        byte index. The given byte index must be at
        the start of a character, it can’t be in the middle of a UTF-8
        encoded character.

        Parameters:
            byte_on_line: a byte index relative to the start of @iter’s current line

        Returns:

        """
        ...

    def set_line_offset(self, char_on_line: int) -> None:
        """
        Moves @iter within a line, to a new character (not byte) offset.

        The given character offset must be less than or equal to the number
        of characters in the line; if equal, @iter moves to the start of the
        next line. See [method@Gtk.TextIter.set_line_index] if you have a byte
        index rather than a character offset.

        Parameters:
            char_on_line: a character offset relative to the start of @iter’s current line

        Returns:

        """
        ...

    def set_offset(self, char_offset: int) -> None:
        """
        Sets @iter to point to @char_offset.

        @char_offset counts from the start
        of the entire text buffer, starting with 0.

        Parameters:
            char_offset: a character number

        Returns:

        """
        ...

    def set_visible_line_index(self, byte_on_line: int) -> None:
        """
        Like [method@Gtk.TextIter.set_line_index], but the index is in visible
        bytes, i.e. text with a tag making it invisible is not counted
        in the index.

        Parameters:
            byte_on_line: a byte index

        Returns:

        """
        ...

    def set_visible_line_offset(self, char_on_line: int) -> None:
        """
        Like [method@Gtk.TextIter.set_line_offset], but the offset is in visible
        characters, i.e. text with a tag making it invisible is not
        counted in the offset.

        Parameters:
            char_on_line: a character offset

        Returns:

        """
        ...

    def starts_line(self) -> bool:
        """
        Returns %TRUE if @iter begins a paragraph.

        This is the case if [method@Gtk.TextIter.get_line_offset]
        would return 0. However this function is potentially more
        efficient than [method@Gtk.TextIter.get_line_offset], because
        it doesn’t have to compute the offset, it just has to see
        whether it’s 0.

        Parameters:


        Returns:
            bool: whether @iter begins a line

        """
        ...

    def starts_sentence(self) -> bool:
        """
        Determines whether @iter begins a sentence.

        Sentence boundaries are determined by Pango and
        should be correct for nearly any language.

        Parameters:


        Returns:
            bool: %TRUE if @iter is at the start of a sentence.

        """
        ...

    def starts_tag(self, tag: Optional[TextTag] = None) -> bool:
        """
        Returns %TRUE if @tag is toggled on at exactly this point.

        If @tag is %NULL, returns %TRUE if any tag is toggled on at this point.

        Note that if this function returns %TRUE, it means that
        @iter is at the beginning of the tagged range, and that the
        character at @iter is inside the tagged range. In other
        words, unlike [method@Gtk.TextIter.ends_tag], if
        this function returns %TRUE, [method@Gtk.TextIter.has_tag]
        will also return %TRUE for the same parameters.

        Parameters:
            tag: a `GtkTextTag`

        Returns:
            bool: whether @iter is the start of a range tagged with @tag

        """
        ...

    def starts_word(self) -> bool:
        """
        Determines whether @iter begins a natural-language word.

        Word breaks are determined by Pango and should be correct
        for nearly any language.

        Parameters:


        Returns:
            bool: %TRUE if @iter is at the start of a word

        """
        ...

    def toggles_tag(self, tag: Optional[TextTag] = None) -> bool:
        """
        Gets whether a range with @tag applied to it begins
        or ends at @iter.

        This is equivalent to (gtk_text_iter_starts_tag() ||
        gtk_text_iter_ends_tag())

        Parameters:
            tag: a `GtkTextTag`

        Returns:
            bool: whether @tag is toggled on or off at @iter

        """
        ...

class TextMark(GObject.Object):
    """
    A `GtkTextMark` is a position in a `GtkTextbuffer` that is preserved
    across modifications.

    You may wish to begin by reading the
    [text widget conceptual overview](section-text-widget.html),
    which gives an overview of all the objects and data types
    related to the text widget and how they work together.

    A `GtkTextMark` is like a bookmark in a text buffer; it preserves
    a position in the text. You can convert the mark to an iterator using
    [method@Gtk.TextBuffer.get_iter_at_mark]. Unlike iterators, marks remain
    valid across buffer mutations, because their behavior is defined when
    text is inserted or deleted. When text containing a mark is deleted,
    the mark remains in the position originally occupied by the deleted
    text. When text is inserted at a mark, a mark with “left gravity” will
    be moved to the beginning of the newly-inserted text, and a mark with
    “right gravity” will be moved to the end.

    Note that “left” and “right” here refer to logical direction (left
    is the toward the start of the buffer); in some languages such as
    Hebrew the logically-leftmost text is not actually on the left when
    displayed.

    Marks are reference counted, but the reference count only controls
    the validity of the memory; marks can be deleted from the buffer at
    any time with [method@Gtk.TextBuffer.delete_mark]. Once deleted from
    the buffer, a mark is essentially useless.

    Marks optionally have names; these can be convenient to avoid passing
    the `GtkTextMark` object around.

    Marks are typically created using the [method@Gtk.TextBuffer.create_mark]
    function.

    :Constructors:

    ::

        TextMark(**properties)
        new(name:str=None, left_gravity:bool) -> Gtk.TextMark

    Object GtkTextMark

    Properties from GtkTextMark:
      name -> gchararray: name
      left-gravity -> gboolean: left-gravity

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        left_gravity: bool
        """
        Whether the mark has left gravity.

        When text is inserted at the mark’s current location, if the mark
        has left gravity it will be moved to the left of the newly-inserted
        text, otherwise to the right.
        """
        name: Optional[str]
        """
        The name of the mark or %NULL if the mark is anonymous.
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    segment: None = ...
    def __init__(self, left_gravity: bool = ..., name: str = ...): ...
    def get_buffer(self) -> Optional[TextBuffer]:
        """
        Gets the buffer this mark is located inside.

        Returns %NULL if the mark is deleted.

        Parameters:


        Returns:
            Optional[TextBuffer]: the mark’s `GtkTextBuffer`

        """
        ...

    def get_deleted(self) -> bool:
        """
        Returns %TRUE if the mark has been removed from its buffer.

        See [method@Gtk.TextBuffer.add_mark] for a way to add it
        to a buffer again.

        Parameters:


        Returns:
            bool: whether the mark is deleted

        """
        ...

    def get_left_gravity(self) -> bool:
        """
        Determines whether the mark has left gravity.

        Parameters:


        Returns:
            bool: %TRUE if the mark has left gravity, %FALSE otherwise

        """
        ...

    def get_name(self) -> Optional[str]:
        """
        Returns the mark name.

        Returns %NULL for anonymous marks.

        Parameters:


        Returns:
            Optional[str]: mark name

        """
        ...

    def get_visible(self) -> bool:
        """
        Returns %TRUE if the mark is visible.

        A cursor is displayed for visible marks.

        Parameters:


        Returns:
            bool: %TRUE if visible

        """
        ...

    @classmethod
    def new(cls, name: Optional[str], left_gravity: bool) -> TextMark:
        """
        Creates a text mark.

        Add it to a buffer using [method@Gtk.TextBuffer.add_mark].
        If @name is %NULL, the mark is anonymous; otherwise, the mark can be
        retrieved by name using [method@Gtk.TextBuffer.get_mark]. If a mark
        has left gravity, and text is inserted at the mark’s current location,
        the mark will be moved to the left of the newly-inserted text. If the
        mark has right gravity (@left_gravity = %FALSE), the mark will end up
        on the right of newly-inserted text. The standard left-to-right cursor
        is a mark with right gravity (when you type, the cursor stays on the
        right side of the text you’re typing).

        Parameters:
            name: mark name
            left_gravity: whether the mark should have left gravity

        Returns:
            TextMark: new `GtkTextMark`

        """
        ...

    def set_visible(self, setting: bool) -> None: ...

class TextMarkClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TextMarkClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    padding: list[None] = ...

class TextTag(GObject.Object):
    """
    A tag that can be applied to text contained in a `GtkTextBuffer`.

    You may wish to begin by reading the
    [text widget conceptual overview](section-text-widget.html),
    which gives an overview of all the objects and data types
    related to the text widget and how they work together.

    Tags should be in the [class@Gtk.TextTagTable] for a given
    `GtkTextBuffer` before using them with that buffer.

    [method@Gtk.TextBuffer.create_tag] is the best way to create tags.
    See “gtk4-demo” for numerous examples.

    For each property of `GtkTextTag`, there is a “set” property, e.g.
    “font-set” corresponds to “font”. These “set” properties reflect
    whether a property has been set or not.

    They are maintained by GTK and you should not set them independently.

    :Constructors:

    ::

        TextTag(**properties)
        new(name:str=None) -> Gtk.TextTag

    Object GtkTextTag

    Properties from GtkTextTag:
      name -> gchararray: name
      background -> gchararray: background
      foreground -> gchararray: foreground
      background-rgba -> GdkRGBA: background-rgba
      foreground-rgba -> GdkRGBA: foreground-rgba
      font -> gchararray: font
      font-desc -> PangoFontDescription: font-desc
      family -> gchararray: family
      style -> PangoStyle: style
      variant -> PangoVariant: variant
      weight -> gint: weight
      stretch -> PangoStretch: stretch
      size -> gint: size
      size-points -> gdouble: size-points
      scale -> gdouble: scale
      pixels-above-lines -> gint: pixels-above-lines
      pixels-below-lines -> gint: pixels-below-lines
      pixels-inside-wrap -> gint: pixels-inside-wrap
      line-height -> gfloat: line-height
      editable -> gboolean: editable
      wrap-mode -> GtkWrapMode: wrap-mode
      justification -> GtkJustification: justification
      direction -> GtkTextDirection: direction
      left-margin -> gint: left-margin
      indent -> gint: indent
      strikethrough -> gboolean: strikethrough
      strikethrough-rgba -> GdkRGBA: strikethrough-rgba
      right-margin -> gint: right-margin
      underline -> PangoUnderline: underline
      underline-rgba -> GdkRGBA: underline-rgba
      overline -> PangoOverline: overline
      overline-rgba -> GdkRGBA: overline-rgba
      rise -> gint: rise
      background-full-height -> gboolean: background-full-height
      language -> gchararray: language
      tabs -> PangoTabArray: tabs
      invisible -> gboolean: invisible
      paragraph-background -> gchararray: paragraph-background
      paragraph-background-rgba -> GdkRGBA: paragraph-background-rgba
      fallback -> gboolean: fallback
      letter-spacing -> gint: letter-spacing
      font-features -> gchararray: font-features
      allow-breaks -> gboolean: allow-breaks
      show-spaces -> PangoShowFlags: show-spaces
      insert-hyphens -> gboolean: insert-hyphens
      text-transform -> PangoTextTransform: text-transform
      word -> gboolean: word
      sentence -> gboolean: sentence
      accumulative-margin -> gboolean: accumulative-margin
      background-set -> gboolean: background-set
      foreground-set -> gboolean: foreground-set
      family-set -> gboolean: family-set
      style-set -> gboolean: style-set
      variant-set -> gboolean: variant-set
      weight-set -> gboolean: weight-set
      stretch-set -> gboolean: stretch-set
      size-set -> gboolean: size-set
      scale-set -> gboolean: scale-set
      pixels-above-lines-set -> gboolean: pixels-above-lines-set
      pixels-below-lines-set -> gboolean: pixels-below-lines-set
      pixels-inside-wrap-set -> gboolean: pixels-inside-wrap-set
      line-height-set -> gboolean: line-height-set
      editable-set -> gboolean: editable-set
      wrap-mode-set -> gboolean: wrap-mode-set
      justification-set -> gboolean: justification-set
      left-margin-set -> gboolean: left-margin-set
      indent-set -> gboolean: indent-set
      strikethrough-set -> gboolean: strikethrough-set
      strikethrough-rgba-set -> gboolean: strikethrough-rgba-set
      right-margin-set -> gboolean: right-margin-set
      underline-set -> gboolean: underline-set
      underline-rgba-set -> gboolean: underline-rgba-set
      overline-set -> gboolean: overline-set
      overline-rgba-set -> gboolean: overline-rgba-set
      rise-set -> gboolean: rise-set
      background-full-height-set -> gboolean: background-full-height-set
      language-set -> gboolean: language-set
      tabs-set -> gboolean: tabs-set
      invisible-set -> gboolean: invisible-set
      paragraph-background-set -> gboolean: paragraph-background-set
      fallback-set -> gboolean: fallback-set
      letter-spacing-set -> gboolean: letter-spacing-set
      font-features-set -> gboolean: font-features-set
      allow-breaks-set -> gboolean: allow-breaks-set
      show-spaces-set -> gboolean: show-spaces-set
      insert-hyphens-set -> gboolean: insert-hyphens-set
      text-transform-set -> gboolean: text-transform-set
      sentence-set -> gboolean: sentence-set
      word-set -> gboolean: word-set

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        accumulative_margin: bool
        """
        Whether the margins accumulate or override each other.

        When set to %TRUE the margins of this tag are added to the margins
        of any other non-accumulative margins present. When set to %FALSE
        the margins override one another (the default).
        """
        allow_breaks: bool
        """
        Whether breaks are allowed.
        """
        allow_breaks_set: bool
        background_full_height: bool
        """
        Whether the background color fills the entire line height
        or only the height of the tagged characters.
        """
        background_full_height_set: bool
        background_rgba: Gdk.RGBA
        """
        Background color as a `GdkRGBA`.
        """
        background_set: bool
        direction: TextDirection
        """
        Text direction, e.g. right-to-left or left-to-right.
        """
        editable: bool
        """
        Whether the text can be modified by the user.
        """
        editable_set: bool
        fallback: bool
        """
        Whether font fallback is enabled.

        When set to %TRUE, other fonts will be substituted
        where the current font is missing glyphs.
        """
        fallback_set: bool
        family: str
        """
        Name of the font family, e.g. Sans, Helvetica, Times, Monospace.
        """
        family_set: bool
        font: str
        """
        Font description as string, e.g. \\"Sans Italic 12\\".

        Note that the initial value of this property depends on
        the internals of `PangoFontDescription`.
        """
        font_desc: Pango.FontDescription
        """
        Font description as a `PangoFontDescription`.
        """
        font_features: str
        """
        OpenType font features, as a string.
        """
        font_features_set: bool
        foreground_rgba: Gdk.RGBA
        """
        Foreground color as a `GdkRGBA`.
        """
        foreground_set: bool
        indent: int
        """
        Amount to indent the paragraph, in pixels.

        A negative value of indent will produce a hanging indentation.
        That is, the first line will have the full width, and subsequent
        lines will be indented by the absolute value of indent.
        """
        indent_set: bool
        insert_hyphens: bool
        """
        Whether to insert hyphens at breaks.
        """
        insert_hyphens_set: bool
        invisible: bool
        """
        Whether this text is hidden.

        Note that there may still be problems with the support for invisible
        text, in particular when navigating programmatically inside a buffer
        containing invisible segments.
        """
        invisible_set: bool
        justification: Justification
        """
        Left, right, or center justification.
        """
        justification_set: bool
        language: str
        """
        The language this text is in, as an ISO code.

        Pango can use this as a hint when rendering the text.
        If not set, an appropriate default will be used.

        Note that the initial value of this property depends
        on the current locale, see also [func@Gtk.get_default_language].
        """
        language_set: bool
        left_margin: int
        """
        Width of the left margin in pixels.
        """
        left_margin_set: bool
        letter_spacing: int
        """
        Extra spacing between graphemes, in Pango units.
        """
        letter_spacing_set: bool
        line_height: float
        """
        Factor to scale line height by.
        """
        line_height_set: bool
        name: str
        """
        The name used to refer to the tag.

        %NULL for anonymous tags.
        """
        overline: Pango.Overline
        """
        Style of overline for this text.
        """
        overline_rgba: Gdk.RGBA
        """
        This property modifies the color of overlines.

        If not set, overlines will use the foreground color.
        """
        overline_rgba_set: bool
        overline_set: bool
        paragraph_background_rgba: Gdk.RGBA
        """
        The paragraph background color as a `GdkRGBA`.
        """
        paragraph_background_set: bool
        pixels_above_lines: int
        """
        Pixels of blank space above paragraphs.
        """
        pixels_above_lines_set: bool
        pixels_below_lines: int
        """
        Pixels of blank space below paragraphs.
        """
        pixels_below_lines_set: bool
        pixels_inside_wrap: int
        """
        Pixels of blank space between wrapped lines in a paragraph.
        """
        pixels_inside_wrap_set: bool
        right_margin: int
        """
        Width of the right margin, in pixels.
        """
        right_margin_set: bool
        rise: int
        """
        Offset of text above the baseline, in Pango units.

        Negative values go below the baseline.
        """
        rise_set: bool
        scale: float
        """
        Font size as a scale factor relative to the default font size.

        This properly adapts to theme changes, etc. so is recommended.
        Pango predefines some scales such as %PANGO_SCALE_X_LARGE.
        """
        scale_set: bool
        sentence: bool
        """
        Whether this tag represents a single sentence.

        This affects cursor movement.
        """
        sentence_set: bool
        show_spaces: Pango.ShowFlags
        """
        How to render invisible characters.
        """
        show_spaces_set: bool
        size: int
        """
        Font size in Pango units.
        """
        size_points: float
        """
        Font size in points.
        """
        size_set: bool
        stretch: Pango.Stretch
        """
        Font stretch as a `PangoStretch`, e.g. %PANGO_STRETCH_CONDENSED.
        """
        stretch_set: bool
        strikethrough: bool
        """
        Whether to strike through the text.
        """
        strikethrough_rgba: Gdk.RGBA
        """
        This property modifies the color of strikeouts.

        If not set, strikeouts will use the foreground color.
        """
        strikethrough_rgba_set: bool
        """
        If the `strikethrough-rgba` property has been set.
        """
        strikethrough_set: bool
        style: Pango.Style
        """
        Font style as a `PangoStyle`, e.g. %PANGO_STYLE_ITALIC.
        """
        style_set: bool
        tabs: Pango.TabArray
        """
        Custom tabs for this text.
        """
        tabs_set: bool
        text_transform: Pango.TextTransform
        """
        How to transform the text for display.
        """
        text_transform_set: bool
        underline: Pango.Underline
        """
        Style of underline for this text.
        """
        underline_rgba: Gdk.RGBA
        """
        This property modifies the color of underlines.

        If not set, underlines will use the foreground color.

        If [property@Gtk.TextTag:underline] is set to %PANGO_UNDERLINE_ERROR,
        an alternate color may be applied instead of the foreground. Setting
        this property will always override those defaults.
        """
        underline_rgba_set: bool
        """
        If the `underline-rgba` property has been set.
        """
        underline_set: bool
        variant: Pango.Variant
        """
        Font variant as a `PangoVariant`, e.g. %PANGO_VARIANT_SMALL_CAPS.
        """
        variant_set: bool
        weight: int
        """
        Font weight as an integer.
        """
        weight_set: bool
        word: bool
        """
        Whether this tag represents a single word.

        This affects line breaks and cursor movement.
        """
        word_set: bool
        wrap_mode: WrapMode
        """
        Whether to wrap lines never, at word boundaries, or
        at character boundaries.
        """
        wrap_mode_set: bool
        background: str
        """
        Background color as a string.
        """
        foreground: str
        """
        Foreground color as a string.
        """
        paragraph_background: str
        """
        The paragraph background color as a string.
        """

    props: Props = ...
    parent_instance: GObject.Object = ...
    priv: TextTagPrivate = ...
    def __init__(
        self,
        accumulative_margin: bool = ...,
        allow_breaks: bool = ...,
        allow_breaks_set: bool = ...,
        background: str = ...,
        background_full_height: bool = ...,
        background_full_height_set: bool = ...,
        background_rgba: Gdk.RGBA = ...,
        background_set: bool = ...,
        direction: TextDirection = ...,
        editable: bool = ...,
        editable_set: bool = ...,
        fallback: bool = ...,
        fallback_set: bool = ...,
        family: str = ...,
        family_set: bool = ...,
        font: str = ...,
        font_desc: Pango.FontDescription = ...,
        font_features: str = ...,
        font_features_set: bool = ...,
        foreground: str = ...,
        foreground_rgba: Gdk.RGBA = ...,
        foreground_set: bool = ...,
        indent: int = ...,
        indent_set: bool = ...,
        insert_hyphens: bool = ...,
        insert_hyphens_set: bool = ...,
        invisible: bool = ...,
        invisible_set: bool = ...,
        justification: Justification = ...,
        justification_set: bool = ...,
        language: str = ...,
        language_set: bool = ...,
        left_margin: int = ...,
        left_margin_set: bool = ...,
        letter_spacing: int = ...,
        letter_spacing_set: bool = ...,
        line_height: float = ...,
        line_height_set: bool = ...,
        name: str = ...,
        overline: Pango.Overline = ...,
        overline_rgba: Gdk.RGBA = ...,
        overline_rgba_set: bool = ...,
        overline_set: bool = ...,
        paragraph_background: str = ...,
        paragraph_background_rgba: Gdk.RGBA = ...,
        paragraph_background_set: bool = ...,
        pixels_above_lines: int = ...,
        pixels_above_lines_set: bool = ...,
        pixels_below_lines: int = ...,
        pixels_below_lines_set: bool = ...,
        pixels_inside_wrap: int = ...,
        pixels_inside_wrap_set: bool = ...,
        right_margin: int = ...,
        right_margin_set: bool = ...,
        rise: int = ...,
        rise_set: bool = ...,
        scale: float = ...,
        scale_set: bool = ...,
        sentence: bool = ...,
        sentence_set: bool = ...,
        show_spaces: Pango.ShowFlags = ...,
        show_spaces_set: bool = ...,
        size: int = ...,
        size_points: float = ...,
        size_set: bool = ...,
        stretch: Pango.Stretch = ...,
        stretch_set: bool = ...,
        strikethrough: bool = ...,
        strikethrough_rgba: Gdk.RGBA = ...,
        strikethrough_rgba_set: bool = ...,
        strikethrough_set: bool = ...,
        style: Pango.Style = ...,
        style_set: bool = ...,
        tabs: Pango.TabArray = ...,
        tabs_set: bool = ...,
        text_transform: Pango.TextTransform = ...,
        text_transform_set: bool = ...,
        underline: Pango.Underline = ...,
        underline_rgba: Gdk.RGBA = ...,
        underline_rgba_set: bool = ...,
        underline_set: bool = ...,
        variant: Pango.Variant = ...,
        variant_set: bool = ...,
        weight: int = ...,
        weight_set: bool = ...,
        word: bool = ...,
        word_set: bool = ...,
        wrap_mode: WrapMode = ...,
        wrap_mode_set: bool = ...,
    ): ...
    def changed(self, size_changed: bool) -> None:
        """
        Emits the [signal@Gtk.TextTagTable::tag-changed] signal on the
        `GtkTextTagTable` where the tag is included.

        The signal is already emitted when setting a `GtkTextTag` property.
        This function is useful for a `GtkTextTag` subclass.

        Parameters:
            size_changed: whether the change affects the `GtkTextView` layout

        Returns:

        """
        ...

    def get_priority(self) -> int:
        """
        Get the tag priority.

        Parameters:


        Returns:
            int: The tag’s priority.

        """
        ...

    @classmethod
    def new(cls, name: Optional[str] = None) -> TextTag:
        """
        Creates a `GtkTextTag`.

        Parameters:
            name: tag name

        Returns:
            TextTag: a new `GtkTextTag`

        """
        ...

    def set_priority(self, priority: int) -> None:
        """
        Sets the priority of a `GtkTextTag`.

        Valid priorities start at 0 and go to one less than
        [method@Gtk.TextTagTable.get_size]. Each tag in a table
        has a unique priority; setting the priority of one tag shifts
        the priorities of all the other tags in the table to maintain
        a unique priority for each tag.

        Higher priority tags “win” if two tags both set the same text
        attribute. When adding a tag to a tag table, it will be assigned
        the highest priority in the table by default; so normally the
        precedence of a set of tags is the order in which they were added
        to the table, or created with [method@Gtk.TextBuffer.create_tag],
        which adds the tag to the buffer’s table automatically.

        Parameters:
            priority: the new priority

        Returns:

        """
        ...

class TextTagClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TextTagClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    padding: list[None] = ...

class TextTagPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class TextTagTable(GObject.Object, Buildable):
    """
    The collection of tags in a `GtkTextBuffer`

    You may wish to begin by reading the
    [text widget conceptual overview](section-text-widget.html),
    which gives an overview of all the objects and data types
    related to the text widget and how they work together.

    # GtkTextTagTables as GtkBuildable

    The `GtkTextTagTable` implementation of the `GtkBuildable` interface
    supports adding tags by specifying “tag” as the “type” attribute
    of a `<child>` element.

    An example of a UI definition fragment specifying tags:
    ```xml
    <object class=\"GtkTextTagTable\">
    <child type=\"tag\">
    <object class=\"GtkTextTag\"/>
    </child>
    </object>
    ```

    :Constructors:

    ::

        TextTagTable(**properties)
        new() -> Gtk.TextTagTable

    Object GtkTextTagTable

    Signals from GtkTextTagTable:
      tag-changed (GtkTextTag, gboolean)
      tag-added (GtkTextTag)
      tag-removed (GtkTextTag)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Buildable.Props): ...

    def add(self, tag: TextTag) -> bool:
        """
        Add a tag to the table.

        The tag is assigned the highest priority in the table.

        @tag must not be in a tag table already, and may not have
        the same name as an already-added tag.

        Parameters:
            tag: a `GtkTextTag`

        Returns:
            bool: %TRUE on success.

        """
        ...

    def foreach(self, func: Callable[..., None], *data: Any) -> None:
        """
        Calls @func on each tag in @table, with user data @data.

        Note that the table may not be modified while iterating
        over it (you can’t add/remove tags).

        Parameters:
            func: a function to call on each tag
            data: user data

        Returns:

        """
        ...

    def get_size(self) -> int:
        """
        Returns the size of the table (number of tags)

        Parameters:


        Returns:
            int: number of tags in @table

        """
        ...

    def lookup(self, name: str) -> Optional[TextTag]:
        """
        Look up a named tag.

        Parameters:
            name: name of a tag

        Returns:
            Optional[TextTag]: The tag

        """
        ...

    @classmethod
    def new(cls) -> TextTagTable:
        """
        Creates a new `GtkTextTagTable`.

        The table contains no tags by default.

        Parameters:


        Returns:
            TextTagTable: a new `GtkTextTagTable`

        """
        ...

    def remove(self, tag: TextTag) -> None:
        """
        Remove a tag from the table.

        If a `GtkTextBuffer` has @table as its tag table, the tag is
        removed from the buffer. The table’s reference to the tag is
        removed, so the tag will end up destroyed if you don’t have
        a reference to it.

        Parameters:
            tag: a `GtkTextTag`

        Returns:

        """
        ...

class TextView(Widget, Accessible, Buildable, ConstraintTarget, Scrollable):
    """
    A widget that displays the contents of a [class@Gtk.TextBuffer].

    ![An example GtkTextview](multiline-text.png)

    You may wish to begin by reading the [conceptual overview](section-text-widget.html),
    which gives an overview of all the objects and data types related to the
    text widget and how they work together.

    ## CSS nodes

    ```
    textview.view
    ├── border.top
    ├── border.left
    ├── text
    │ ╰── [selection]
    ├── border.right
    ├── border.bottom
    ╰── [window.popup]
    ```

    `GtkTextView` has a main css node with name textview and style class .view,
    and subnodes for each of the border windows, and the main text area,
    with names border and text, respectively. The border nodes each get
    one of the style classes .left, .right, .top or .bottom.

    A node representing the selection will appear below the text node.

    If a context menu is opened, the window node will appear as a subnode
    of the main node.

    ## Accessibility

    `GtkTextView` uses the %GTK_ACCESSIBLE_ROLE_TEXT_BOX role.

    :Constructors:

    ::

        TextView(**properties)
        new() -> Gtk.Widget
        new_with_buffer(buffer:Gtk.TextBuffer) -> Gtk.Widget

    Object GtkTextView

    Signals from GtkTextView:
      move-cursor (GtkMovementStep, gint, gboolean)
      select-all (gboolean)
      preedit-changed (gchararray)
      copy-clipboard ()
      insert-at-cursor (gchararray)
      delete-from-cursor (GtkDeleteType, gint)
      backspace ()
      cut-clipboard ()
      paste-clipboard ()
      toggle-overwrite ()
      insert-emoji ()
      move-viewport (GtkScrollStep, gint)
      set-anchor ()
      toggle-cursor-visible ()
      extend-selection (GtkTextExtendSelection, GtkTextIter, GtkTextIter, GtkTextIter) -> gboolean

    Properties from GtkTextView:
      pixels-above-lines -> gint: pixels-above-lines
      pixels-below-lines -> gint: pixels-below-lines
      pixels-inside-wrap -> gint: pixels-inside-wrap
      editable -> gboolean: editable
      wrap-mode -> GtkWrapMode: wrap-mode
      justification -> GtkJustification: justification
      left-margin -> gint: left-margin
      right-margin -> gint: right-margin
      top-margin -> gint: top-margin
      bottom-margin -> gint: bottom-margin
      indent -> gint: indent
      tabs -> PangoTabArray: tabs
      cursor-visible -> gboolean: cursor-visible
      buffer -> GtkTextBuffer: buffer
      overwrite -> gboolean: overwrite
      accepts-tab -> gboolean: accepts-tab
      im-module -> gchararray: im-module
      input-purpose -> GtkInputPurpose: input-purpose
      input-hints -> GtkInputHints: input-hints
      monospace -> gboolean: monospace
      extra-menu -> GMenuModel: extra-menu

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Scrollable.Props,
    ):
        accepts_tab: bool
        """
        Whether Tab will result in a tab character being entered.
        """
        bottom_margin: int
        """
        The bottom margin for text in the text view.

        Note that this property is confusingly named. In CSS terms,
        the value set here is padding, and it is applied in addition
        to the padding from the theme.

        Don't confuse this property with [property@Gtk.Widget:margin-bottom].
        """
        buffer: TextBuffer
        """
        The buffer which is displayed.
        """
        cursor_visible: bool
        """
        If the insertion cursor is shown.
        """
        editable: bool
        extra_menu: Gio.MenuModel
        """
        A menu model whose contents will be appended to the context menu.
        """
        im_module: str
        """
        Which IM (input method) module should be used for this text_view.

        See [class@Gtk.IMMulticontext].

        Setting this to a non-%NULL value overrides the system-wide IM module
        setting. See the GtkSettings [property@Gtk.Settings:gtk-im-module] property.
        """
        indent: int
        """
        Amount to indent the paragraph, in pixels.

        A negative value of indent will produce a hanging indentation.
        That is, the first line will have the full width, and subsequent
        lines will be indented by the absolute value of indent.
        """
        input_hints: InputHints
        """
        Additional hints (beyond [property@Gtk.TextView:input-purpose])
        that allow input methods to fine-tune their behaviour.
        """
        input_purpose: InputPurpose
        """
        The purpose of this text field.

        This property can be used by on-screen keyboards and other input
        methods to adjust their behaviour.
        """
        justification: Justification
        left_margin: int
        """
        The default left margin for text in the text view.

        Tags in the buffer may override the default.

        Note that this property is confusingly named. In CSS terms,
        the value set here is padding, and it is applied in addition
        to the padding from the theme.
        """
        monospace: bool
        """
        Whether text should be displayed in a monospace font.

        If %TRUE, set the .monospace style class on the
        text view to indicate that a monospace font is desired.
        """
        overwrite: bool
        """
        Whether entered text overwrites existing contents.
        """
        pixels_above_lines: int
        pixels_below_lines: int
        pixels_inside_wrap: int
        right_margin: int
        """
        The default right margin for text in the text view.

        Tags in the buffer may override the default.

        Note that this property is confusingly named. In CSS terms,
        the value set here is padding, and it is applied in addition
        to the padding from the theme.
        """
        tabs: Optional[Pango.TabArray]
        top_margin: int
        """
        The top margin for text in the text view.

        Note that this property is confusingly named. In CSS terms,
        the value set here is padding, and it is applied in addition
        to the padding from the theme.

        Don't confuse this property with [property@Gtk.Widget:margin-top].
        """
        wrap_mode: WrapMode

    props: Props = ...
    parent_instance: Widget = ...
    priv: TextViewPrivate = ...
    def __init__(
        self,
        accepts_tab: bool = ...,
        bottom_margin: int = ...,
        buffer: Optional[TextBuffer] = ...,
        cursor_visible: bool = ...,
        editable: bool = ...,
        extra_menu: Optional[Gio.MenuModel] = ...,
        im_module: str = ...,
        indent: int = ...,
        input_hints: InputHints = ...,
        input_purpose: InputPurpose = ...,
        justification: Justification = ...,
        left_margin: int = ...,
        monospace: bool = ...,
        overwrite: bool = ...,
        pixels_above_lines: int = ...,
        pixels_below_lines: int = ...,
        pixels_inside_wrap: int = ...,
        right_margin: int = ...,
        tabs: Pango.TabArray = ...,
        top_margin: int = ...,
        wrap_mode: WrapMode = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        hadjustment: Optional[Adjustment] = ...,
        hscroll_policy: ScrollablePolicy = ...,
        vadjustment: Optional[Adjustment] = ...,
        vscroll_policy: ScrollablePolicy = ...,
    ): ...
    def add_child_at_anchor(self, child: Widget, anchor: TextChildAnchor) -> None:
        """
        Adds a child widget in the text buffer, at the given @anchor.

        Parameters:
            child: a `GtkWidget`
            anchor: a `GtkTextChildAnchor` in the `GtkTextBuffer` for @text_view

        Returns:

        """
        ...

    def add_overlay(self, child: Widget, xpos: int, ypos: int) -> None:
        """
        Adds @child at a fixed coordinate in the `GtkTextView`'s text window.

        The @xpos and @ypos must be in buffer coordinates (see
        [method@Gtk.TextView.get_iter_location] to convert to
        buffer coordinates).

        @child will scroll with the text view.

        If instead you want a widget that will not move with the
        `GtkTextView` contents see `GtkOverlay`.

        Parameters:
            child: a `GtkWidget`
            xpos: X position of child in window coordinates
            ypos: Y position of child in window coordinates

        Returns:

        """
        ...

    def backward_display_line(self, iter: TextIter) -> bool:
        """
        Moves the given @iter backward by one display (wrapped) line.

        A display line is different from a paragraph. Paragraphs are
        separated by newlines or other paragraph separator characters.
        Display lines are created by line-wrapping a paragraph. If
        wrapping is turned off, display lines and paragraphs will be the
        same. Display lines are divided differently for each view, since
        they depend on the view’s width; paragraphs are the same in all
        views, since they depend on the contents of the `GtkTextBuffer`.

        Parameters:
            iter: a `GtkTextIter`

        Returns:
            bool: %TRUE if @iter was moved and is not on the end iterator

        """
        ...

    def backward_display_line_start(self, iter: TextIter) -> bool:
        """
        Moves the given @iter backward to the next display line start.

        A display line is different from a paragraph. Paragraphs are
        separated by newlines or other paragraph separator characters.
        Display lines are created by line-wrapping a paragraph. If
        wrapping is turned off, display lines and paragraphs will be the
        same. Display lines are divided differently for each view, since
        they depend on the view’s width; paragraphs are the same in all
        views, since they depend on the contents of the `GtkTextBuffer`.

        Parameters:
            iter: a `GtkTextIter`

        Returns:
            bool: %TRUE if @iter was moved and is not on the end iterator

        """
        ...

    def buffer_to_window_coords(
        self, win: TextWindowType, buffer_x: int, buffer_y: int
    ) -> Tuple[int, int]:
        """
        Converts buffer coordinates to window coordinates.

        Parameters:
            win: a `GtkTextWindowType`
            buffer_x: buffer x coordinate
            buffer_y: buffer y coordinate

        Returns:
            int: window x coordinate return location
            int: window y coordinate return location
        """
        ...

    def do_backspace(self) -> None: ...
    def do_copy_clipboard(self) -> None: ...
    def do_cut_clipboard(self) -> None: ...
    def do_delete_from_cursor(self, type: DeleteType, count: int) -> None: ...
    def do_extend_selection(
        self,
        granularity: TextExtendSelection,
        location: TextIter,
        start: TextIter,
        end: TextIter,
    ) -> bool: ...
    def do_insert_at_cursor(self, str: str) -> None: ...
    def do_insert_emoji(self) -> None: ...
    def do_move_cursor(
        self, step: MovementStep, count: int, extend_selection: bool
    ) -> None: ...
    def do_paste_clipboard(self) -> None: ...
    def do_set_anchor(self) -> None: ...
    def do_snapshot_layer(self, layer: TextViewLayer, snapshot: Snapshot) -> None: ...
    def do_toggle_overwrite(self) -> None: ...
    def forward_display_line(self, iter: TextIter) -> bool:
        """
        Moves the given @iter forward by one display (wrapped) line.

        A display line is different from a paragraph. Paragraphs are
        separated by newlines or other paragraph separator characters.
        Display lines are created by line-wrapping a paragraph. If
        wrapping is turned off, display lines and paragraphs will be the
        same. Display lines are divided differently for each view, since
        they depend on the view’s width; paragraphs are the same in all
        views, since they depend on the contents of the `GtkTextBuffer`.

        Parameters:
            iter: a `GtkTextIter`

        Returns:
            bool: %TRUE if @iter was moved and is not on the end iterator

        """
        ...

    def forward_display_line_end(self, iter: TextIter) -> bool:
        """
        Moves the given @iter forward to the next display line end.

        A display line is different from a paragraph. Paragraphs are
        separated by newlines or other paragraph separator characters.
        Display lines are created by line-wrapping a paragraph. If
        wrapping is turned off, display lines and paragraphs will be the
        same. Display lines are divided differently for each view, since
        they depend on the view’s width; paragraphs are the same in all
        views, since they depend on the contents of the `GtkTextBuffer`.

        Parameters:
            iter: a `GtkTextIter`

        Returns:
            bool: %TRUE if @iter was moved and is not on the end iterator

        """
        ...

    def get_accepts_tab(self) -> bool:
        """
        Returns whether pressing the <kbd>Tab</kbd> key inserts a tab characters.

        See [method@Gtk.TextView.set_accepts_tab].

        Parameters:


        Returns:
            bool: %TRUE if pressing the Tab key inserts a tab character,
        %FALSE if pressing the Tab key moves the keyboard focus.

        """
        ...

    def get_bottom_margin(self) -> int:
        """
        Gets the bottom margin for text in the @text_view.

        Parameters:


        Returns:
            int: bottom margin in pixels

        """
        ...

    def get_buffer(self) -> TextBuffer:
        """
        Returns the `GtkTextBuffer` being displayed by this text view.

        The reference count on the buffer is not incremented; the caller
        of this function won’t own a new reference.

        Parameters:


        Returns:
            TextBuffer: a `GtkTextBuffer`

        """
        ...

    def get_cursor_locations(
        self, iter: Optional[TextIter] = None
    ) -> Tuple[Gdk.Rectangle, Gdk.Rectangle]:
        """
        Determine the positions of the strong and weak cursors if the
        insertion point is at @iter.

        The position of each cursor is stored as a zero-width rectangle.
        The strong cursor location is the location where characters of
        the directionality equal to the base direction of the paragraph
        are inserted. The weak cursor location is the location where
        characters of the directionality opposite to the base direction
        of the paragraph are inserted.

        If @iter is %NULL, the actual cursor position is used.

        Note that if @iter happens to be the actual cursor position, and
        there is currently an IM preedit sequence being entered, the
        returned locations will be adjusted to account for the preedit
        cursor’s offset within the preedit sequence.

        The rectangle position is in buffer coordinates; use
        [method@Gtk.TextView.buffer_to_window_coords] to convert these
        coordinates to coordinates for one of the windows in the text view.

        Parameters:
            iter: a `GtkTextIter`

        Returns:
            Gdk.Rectangle: location to store the strong cursor position
            Gdk.Rectangle: location to store the weak cursor position
        """
        ...

    def get_cursor_visible(self) -> bool:
        """
        Find out whether the cursor should be displayed.

        Parameters:


        Returns:
            bool: whether the insertion mark is visible

        """
        ...

    def get_editable(self) -> bool:
        """
        Returns the default editability of the `GtkTextView`.

        Tags in the buffer may override this setting for some ranges of text.

        Parameters:


        Returns:
            bool: whether text is editable by default

        """
        ...

    def get_extra_menu(self) -> Gio.MenuModel:
        """
        Gets the menu model that gets added to the context menu
        or %NULL if none has been set.

        Parameters:


        Returns:
            Gio.MenuModel: the menu model

        """
        ...

    def get_gutter(self, win: TextWindowType) -> Optional[Widget]:
        """
        Gets a `GtkWidget` that has previously been set as gutter.

        See [method@Gtk.TextView.set_gutter].

        @win must be one of %GTK_TEXT_WINDOW_LEFT, %GTK_TEXT_WINDOW_RIGHT,
        %GTK_TEXT_WINDOW_TOP, or %GTK_TEXT_WINDOW_BOTTOM.

        Parameters:
            win: a `GtkTextWindowType`

        Returns:
            Optional[Widget]: a `GtkWidget`

        """
        ...

    def get_indent(self) -> int:
        """
        Gets the default indentation of paragraphs in @text_view.

        Tags in the view’s buffer may override the default.
        The indentation may be negative.

        Parameters:


        Returns:
            int: number of pixels of indentation

        """
        ...

    def get_input_hints(self) -> InputHints:
        """
        Gets the `input-hints` of the `GtkTextView`.

        Parameters:


        Returns:
            InputHints: Not documented

        """
        ...

    def get_input_purpose(self) -> InputPurpose:
        """
        Gets the `input-purpose` of the `GtkTextView`.

        Parameters:


        Returns:
            InputPurpose: Not documented

        """
        ...

    def get_iter_at_location(self, x: int, y: int) -> Tuple[bool, TextIter]:
        """
        Retrieves the iterator at buffer coordinates @x and @y.

        Buffer coordinates are coordinates for the entire buffer, not just
        the currently-displayed portion. If you have coordinates from an
        event, you have to convert those to buffer coordinates with
        [method@Gtk.TextView.window_to_buffer_coords].

        Parameters:
            x: x position, in buffer coordinates
            y: y position, in buffer coordinates

        Returns:
            bool: %TRUE if the position is over text
            TextIter: a `GtkTextIter`
        """
        ...

    def get_iter_at_position(self, x: int, y: int) -> Tuple[bool, TextIter, int]:
        """
        Retrieves the iterator pointing to the character at buffer
        coordinates @x and @y.

        Buffer coordinates are coordinates for the entire buffer, not just
        the currently-displayed portion. If you have coordinates from an event,
        you have to convert those to buffer coordinates with
        [method@Gtk.TextView.window_to_buffer_coords].

        Note that this is different from [method@Gtk.TextView.get_iter_at_location],
        which returns cursor locations, i.e. positions between characters.

        Parameters:
            x: x position, in buffer coordinates
            y: y position, in buffer coordinates

        Returns:
            bool: %TRUE if the position is over text
            TextIter: a `GtkTextIter`
            int: if non-%NULL, location to store
        an integer indicating where in the grapheme the user clicked.
        It will either be zero, or the number of characters in the grapheme.
        0 represents the trailing edge of the grapheme.
        """
        ...

    def get_iter_location(self, iter: TextIter) -> Gdk.Rectangle:
        """
        Gets a rectangle which roughly contains the character at @iter.

        The rectangle position is in buffer coordinates; use
        [method@Gtk.TextView.buffer_to_window_coords] to convert these
        coordinates to coordinates for one of the windows in the text view.

        Parameters:
            iter: a `GtkTextIter`

        Returns:
            Gdk.Rectangle: bounds of the character at @iter
        """
        ...

    def get_justification(self) -> Justification:
        """
        Gets the default justification of paragraphs in @text_view.

        Tags in the buffer may override the default.

        Parameters:


        Returns:
            Justification: default justification

        """
        ...

    def get_left_margin(self) -> int:
        """
        Gets the default left margin size of paragraphs in the @text_view.

        Tags in the buffer may override the default.

        Parameters:


        Returns:
            int: left margin in pixels

        """
        ...

    def get_line_at_y(self, y: int) -> Tuple[TextIter, int]:
        """
        Gets the `GtkTextIter` at the start of the line containing
        the coordinate @y.

        @y is in buffer coordinates, convert from window coordinates with
        [method@Gtk.TextView.window_to_buffer_coords]. If non-%NULL,
        @line_top will be filled with the coordinate of the top edge
        of the line.

        Parameters:
            y: a y coordinate

        Returns:
            TextIter: a `GtkTextIter`
            int: return location for top coordinate of the line
        """
        ...

    def get_line_yrange(self, iter: TextIter) -> Tuple[int, int]:
        """
        Gets the y coordinate of the top of the line containing @iter,
        and the height of the line.

        The coordinate is a buffer coordinate; convert to window
        coordinates with [method@Gtk.TextView.buffer_to_window_coords].

        Parameters:
            iter: a `GtkTextIter`

        Returns:
            int: return location for a y coordinate
            int: return location for a height
        """
        ...

    def get_ltr_context(self) -> Pango.Context:
        """
        Gets the `PangoContext` that is used for rendering LTR directed
        text layouts.

        The context may be replaced when CSS changes occur.

        Parameters:


        Returns:
            Pango.Context: a `PangoContext`

        """
        ...

    def get_monospace(self) -> bool:
        """
        Gets whether the `GtkTextView` uses monospace styling.

        Parameters:


        Returns:
            bool: %TRUE if monospace fonts are desired

        """
        ...

    def get_overwrite(self) -> bool:
        """
        Returns whether the `GtkTextView` is in overwrite mode or not.

        Parameters:


        Returns:
            bool: whether @text_view is in overwrite mode or not.

        """
        ...

    def get_pixels_above_lines(self) -> int:
        """
        Gets the default number of pixels to put above paragraphs.

        Adding this function with [method@Gtk.TextView.get_pixels_below_lines]
        is equal to the line space between each paragraph.

        Parameters:


        Returns:
            int: default number of pixels above paragraphs

        """
        ...

    def get_pixels_below_lines(self) -> int:
        """
        Gets the default number of pixels to put below paragraphs.

        The line space is the sum of the value returned by this function and
        the value returned by [method@Gtk.TextView.get_pixels_above_lines].

        Parameters:


        Returns:
            int: default number of blank pixels below paragraphs

        """
        ...

    def get_pixels_inside_wrap(self) -> int:
        """
        Gets the default number of pixels to put between wrapped lines
        inside a paragraph.

        Parameters:


        Returns:
            int: default number of pixels of blank space between wrapped lines

        """
        ...

    def get_right_margin(self) -> int:
        """
        Gets the default right margin for text in @text_view.

        Tags in the buffer may override the default.

        Parameters:


        Returns:
            int: right margin in pixels

        """
        ...

    def get_rtl_context(self) -> Pango.Context:
        """
        Gets the `PangoContext` that is used for rendering RTL directed
        text layouts.

        The context may be replaced when CSS changes occur.

        Parameters:


        Returns:
            Pango.Context: a `PangoContext`

        """
        ...

    def get_tabs(self) -> Optional[Pango.TabArray]:
        """
        Gets the default tabs for @text_view.

        Tags in the buffer may override the defaults. The returned array
        will be %NULL if “standard” (8-space) tabs are used. Free the
        return value with [method@Pango.TabArray.free].

        Parameters:


        Returns:
            Optional[Pango.TabArray]: copy of default tab array,
        or %NULL if standard tabs are used; must be freed with
        [method@Pango.TabArray.free].

        """
        ...

    def get_top_margin(self) -> int:
        """
        Gets the top margin for text in the @text_view.

        Parameters:


        Returns:
            int: top margin in pixels

        """
        ...

    def get_visible_rect(self) -> Gdk.Rectangle:
        """
        Fills @visible_rect with the currently-visible
        region of the buffer, in buffer coordinates.

        Convert to window coordinates with
        [method@Gtk.TextView.buffer_to_window_coords].

        Parameters:


        Returns:
            Gdk.Rectangle: rectangle to fill
        """
        ...

    def get_wrap_mode(self) -> WrapMode:
        """
        Gets the line wrapping for the view.

        Parameters:


        Returns:
            WrapMode: the line wrap setting

        """
        ...

    def im_context_filter_keypress(self, event: Gdk.Event) -> bool:
        """
        Allow the `GtkTextView` input method to internally handle key press
        and release events.

        If this function returns %TRUE, then no further processing should be
        done for this key event. See [method@Gtk.IMContext.filter_keypress].

        Note that you are expected to call this function from your handler
        when overriding key event handling. This is needed in the case when
        you need to insert your own key handling between the input method
        and the default key event handling of the `GtkTextView`.

        ```c
        static gboolean
        gtk_foo_bar_key_press_event (GtkWidget *widget,
        GdkEvent *event)
        {
        guint keyval;

        gdk_event_get_keyval ((GdkEvent*)event, &keyval);

        if (keyval == GDK_KEY_Return || keyval == GDK_KEY_KP_Enter)
        {
        if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (widget), event))
        return TRUE;
        }

        // Do some stuff

        return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
        }
        ```

        Parameters:
            event: the key event

        Returns:
            bool: %TRUE if the input method handled the key event.

        """
        ...

    def move_mark_onscreen(self, mark: TextMark) -> bool:
        """
        Moves a mark within the buffer so that it's
        located within the currently-visible text area.

        Parameters:
            mark: a `GtkTextMark`

        Returns:
            bool: %TRUE if the mark moved (wasn’t already onscreen)

        """
        ...

    def move_overlay(self, child: Widget, xpos: int, ypos: int) -> None:
        """
        Updates the position of a child.

        See [method@Gtk.TextView.add_overlay].

        Parameters:
            child: a widget already added with [method@Gtk.TextView.add_overlay]
            xpos: new X position in buffer coordinates
            ypos: new Y position in buffer coordinates

        Returns:

        """
        ...

    def move_visually(self, iter: TextIter, count: int) -> bool:
        """
        Move the iterator a given number of characters visually, treating
        it as the strong cursor position.

        If @count is positive, then the new strong cursor position will
        be @count positions to the right of the old cursor position.
        If @count is negative then the new strong cursor position will
        be @count positions to the left of the old cursor position.

        In the presence of bi-directional text, the correspondence
        between logical and visual order will depend on the direction
        of the current run, and there may be jumps when the cursor
        is moved off of the end of a run.

        Parameters:
            iter: a `GtkTextIter`
            count: number of characters to move (negative moves left,
        positive moves right)

        Returns:
            bool: %TRUE if @iter moved and is not on the end iterator

        """
        ...

    @classmethod
    def new(cls) -> TextView:
        """
        Creates a new `GtkTextView`.

        If you don’t call [method@Gtk.TextView.set_buffer] before using the
        text view, an empty default buffer will be created for you. Get the
        buffer with [method@Gtk.TextView.get_buffer]. If you want to specify
        your own buffer, consider [ctor@Gtk.TextView.new_with_buffer].

        Parameters:


        Returns:
            Widget: a new `GtkTextView`

        """
        ...

    @classmethod
    def new_with_buffer(cls, buffer: TextBuffer) -> TextView:
        """
        Creates a new `GtkTextView` widget displaying the buffer @buffer.

        One buffer can be shared among many widgets. @buffer may be %NULL
        to create a default buffer, in which case this function is equivalent
        to [ctor@Gtk.TextView.new]. The text view adds its own reference count
        to the buffer; it does not take over an existing reference.

        Parameters:
            buffer: a `GtkTextBuffer`

        Returns:
            Widget: a new `GtkTextView`.

        """
        ...

    def place_cursor_onscreen(self) -> bool:
        """
        Moves the cursor to the currently visible region of the
        buffer.

        Parameters:


        Returns:
            bool: %TRUE if the cursor had to be moved.

        """
        ...

    def remove(self, child: Widget) -> None:
        """
        Removes a child widget from @text_view.

        Parameters:
            child: the child to remove

        Returns:

        """
        ...

    def reset_cursor_blink(self) -> None:
        """
        Ensures that the cursor is shown.

        This also resets the time that it will stay blinking (or
        visible, in case blinking is disabled).

        This function should be called in response to user input
        (e.g. from derived classes that override the textview's
        event handlers).

        Parameters:


        Returns:

        """
        ...

    def reset_im_context(self) -> None:
        """
        Reset the input method context of the text view if needed.

        This can be necessary in the case where modifying the buffer
        would confuse on-going input method behavior.

        Parameters:


        Returns:

        """
        ...

    def scroll_mark_onscreen(self, mark: TextMark) -> None:
        """
        Scrolls @text_view the minimum distance such that @mark is contained
        within the visible area of the widget.

        Parameters:
            mark: a mark in the buffer for @text_view

        Returns:

        """
        ...

    def scroll_to_iter(
        self,
        iter: TextIter,
        within_margin: float,
        use_align: bool,
        xalign: float,
        yalign: float,
    ) -> bool:
        """
        Scrolls @text_view so that @iter is on the screen in the position
        indicated by @xalign and @yalign.

        An alignment of 0.0 indicates left or top, 1.0 indicates right or
        bottom, 0.5 means center. If @use_align is %FALSE, the text scrolls
        the minimal distance to get the mark onscreen, possibly not scrolling
        at all. The effective screen for purposes of this function is reduced
        by a margin of size @within_margin.

        Note that this function uses the currently-computed height of the
        lines in the text buffer. Line heights are computed in an idle
        handler; so this function may not have the desired effect if it’s
        called before the height computations. To avoid oddness, consider
        using [method@Gtk.TextView.scroll_to_mark] which saves a point to be
        scrolled to after line validation.

        Parameters:
            iter: a `GtkTextIter`
            within_margin: margin as a [0.0,0.5) fraction of screen size
            use_align: whether to use alignment arguments (if %FALSE,
        just get the mark onscreen)
            xalign: horizontal alignment of mark within visible area
            yalign: vertical alignment of mark within visible area

        Returns:
            bool: %TRUE if scrolling occurred

        """
        ...

    def scroll_to_mark(
        self,
        mark: TextMark,
        within_margin: float,
        use_align: bool,
        xalign: float,
        yalign: float,
    ) -> None:
        """
        Scrolls @text_view so that @mark is on the screen in the position
        indicated by @xalign and @yalign.

        An alignment of 0.0 indicates left or top, 1.0 indicates right or
        bottom, 0.5 means center. If @use_align is %FALSE, the text scrolls
        the minimal distance to get the mark onscreen, possibly not scrolling
        at all. The effective screen for purposes of this function is reduced
        by a margin of size @within_margin.

        Parameters:
            mark: a `GtkTextMark`
            within_margin: margin as a [0.0,0.5) fraction of screen size
            use_align: whether to use alignment arguments (if %FALSE, just
        get the mark onscreen)
            xalign: horizontal alignment of mark within visible area
            yalign: vertical alignment of mark within visible area

        Returns:

        """
        ...

    def set_accepts_tab(self, accepts_tab: bool) -> None:
        """
        Sets the behavior of the text widget when the <kbd>Tab</kbd> key is pressed.

        If @accepts_tab is %TRUE, a tab character is inserted. If @accepts_tab
        is %FALSE the keyboard focus is moved to the next widget in the focus
        chain.

        Focus can always be moved using <kbd>Ctrl</kbd>+<kbd>Tab</kbd>.

        Parameters:
            accepts_tab: %TRUE if pressing the Tab key should insert a tab
        character, %FALSE, if pressing the Tab key should move the
        keyboard focus.

        Returns:

        """
        ...

    def set_bottom_margin(self, bottom_margin: int) -> None:
        """
        Sets the bottom margin for text in @text_view.

        Note that this function is confusingly named.
        In CSS terms, the value set here is padding.

        Parameters:
            bottom_margin: bottom margin in pixels

        Returns:

        """
        ...

    def set_buffer(self, buffer: Optional[TextBuffer] = None) -> None:
        """
        Sets @buffer as the buffer being displayed by @text_view.

        The previous buffer displayed by the text view is unreferenced, and
        a reference is added to @buffer. If you owned a reference to @buffer
        before passing it to this function, you must remove that reference
        yourself; `GtkTextView` will not “adopt” it.

        Parameters:
            buffer: a `GtkTextBuffer`

        Returns:

        """
        ...

    def set_cursor_visible(self, setting: bool) -> None:
        """
        Toggles whether the insertion point should be displayed.

        A buffer with no editable text probably shouldn’t have a visible
        cursor, so you may want to turn the cursor off.

        Note that this property may be overridden by the
        [property@Gtk.Settings:gtk-keynav-use-caret] setting.

        Parameters:
            setting: whether to show the insertion cursor

        Returns:

        """
        ...

    def set_editable(self, setting: bool) -> None:
        """
        Sets the default editability of the `GtkTextView`.

        You can override this default setting with tags in the buffer,
        using the “editable” attribute of tags.

        Parameters:
            setting: whether it’s editable

        Returns:

        """
        ...

    def set_extra_menu(self, model: Optional[Gio.MenuModel] = None) -> None:
        """
        Sets a menu model to add when constructing the context
        menu for @text_view.

        You can pass %NULL to remove a previously set extra menu.

        Parameters:
            model: a `GMenuModel`

        Returns:

        """
        ...

    def set_gutter(self, win: TextWindowType, widget: Optional[Widget] = None) -> None:
        """
        Places @widget into the gutter specified by @win.

        @win must be one of %GTK_TEXT_WINDOW_LEFT, %GTK_TEXT_WINDOW_RIGHT,
        %GTK_TEXT_WINDOW_TOP, or %GTK_TEXT_WINDOW_BOTTOM.

        Parameters:
            win: a `GtkTextWindowType`
            widget: a `GtkWidget`

        Returns:

        """
        ...

    def set_indent(self, indent: int) -> None:
        """
        Sets the default indentation for paragraphs in @text_view.

        Tags in the buffer may override the default.

        Parameters:
            indent: indentation in pixels

        Returns:

        """
        ...

    def set_input_hints(self, hints: InputHints) -> None:
        """
        Sets the `input-hints` of the `GtkTextView`.

        The `input-hints` allow input methods to fine-tune
        their behaviour.

        Parameters:
            hints: the hints

        Returns:

        """
        ...

    def set_input_purpose(self, purpose: InputPurpose) -> None:
        """
        Sets the `input-purpose` of the `GtkTextView`.

        The `input-purpose` can be used by on-screen keyboards
        and other input methods to adjust their behaviour.

        Parameters:
            purpose: the purpose

        Returns:

        """
        ...

    def set_justification(self, justification: Justification) -> None:
        """
        Sets the default justification of text in @text_view.

        Tags in the view’s buffer may override the default.

        Parameters:
            justification: justification

        Returns:

        """
        ...

    def set_left_margin(self, left_margin: int) -> None:
        """
        Sets the default left margin for text in @text_view.

        Tags in the buffer may override the default.

        Note that this function is confusingly named.
        In CSS terms, the value set here is padding.

        Parameters:
            left_margin: left margin in pixels

        Returns:

        """
        ...

    def set_monospace(self, monospace: bool) -> None:
        """
        Sets whether the `GtkTextView` should display text in
        monospace styling.

        Parameters:
            monospace: %TRUE to request monospace styling

        Returns:

        """
        ...

    def set_overwrite(self, overwrite: bool) -> None:
        """
        Changes the `GtkTextView` overwrite mode.

        Parameters:
            overwrite: %TRUE to turn on overwrite mode, %FALSE to turn it off

        Returns:

        """
        ...

    def set_pixels_above_lines(self, pixels_above_lines: int) -> None:
        """
        Sets the default number of blank pixels above paragraphs in @text_view.

        Tags in the buffer for @text_view may override the defaults.

        Parameters:
            pixels_above_lines: pixels above paragraphs

        Returns:

        """
        ...

    def set_pixels_below_lines(self, pixels_below_lines: int) -> None:
        """
        Sets the default number of pixels of blank space
        to put below paragraphs in @text_view.

        May be overridden by tags applied to @text_view’s buffer.

        Parameters:
            pixels_below_lines: pixels below paragraphs

        Returns:

        """
        ...

    def set_pixels_inside_wrap(self, pixels_inside_wrap: int) -> None:
        """
        Sets the default number of pixels of blank space to leave between
        display/wrapped lines within a paragraph.

        May be overridden by tags in @text_view’s buffer.

        Parameters:
            pixels_inside_wrap: default number of pixels between wrapped lines

        Returns:

        """
        ...

    def set_right_margin(self, right_margin: int) -> None:
        """
        Sets the default right margin for text in the text view.

        Tags in the buffer may override the default.

        Note that this function is confusingly named.
        In CSS terms, the value set here is padding.

        Parameters:
            right_margin: right margin in pixels

        Returns:

        """
        ...

    def set_tabs(self, tabs: Pango.TabArray) -> None:
        """
        Sets the default tab stops for paragraphs in @text_view.

        Tags in the buffer may override the default.

        Parameters:
            tabs: tabs as a `PangoTabArray`

        Returns:

        """
        ...

    def set_top_margin(self, top_margin: int) -> None:
        """
        Sets the top margin for text in @text_view.

        Note that this function is confusingly named.
        In CSS terms, the value set here is padding.

        Parameters:
            top_margin: top margin in pixels

        Returns:

        """
        ...

    def set_wrap_mode(self, wrap_mode: WrapMode) -> None:
        """
        Sets the line wrapping for the view.

        Parameters:
            wrap_mode: a `GtkWrapMode`

        Returns:

        """
        ...

    def starts_display_line(self, iter: TextIter) -> bool:
        """
        Determines whether @iter is at the start of a display line.

        See [method@Gtk.TextView.forward_display_line] for an
        explanation of display lines vs. paragraphs.

        Parameters:
            iter: a `GtkTextIter`

        Returns:
            bool: %TRUE if @iter begins a wrapped line

        """
        ...

    def window_to_buffer_coords(
        self, win: TextWindowType, window_x: int, window_y: int
    ) -> Tuple[int, int]:
        """
        Converts coordinates on the window identified by @win to buffer
        coordinates.

        Parameters:
            win: a `GtkTextWindowType`
            window_x: window x coordinate
            window_y: window y coordinate

        Returns:
            int: buffer x coordinate return location
            int: buffer y coordinate return location
        """
        ...

class TextViewClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TextViewClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    move_cursor: Callable[[TextView, MovementStep, int, bool], None] = ...
    set_anchor: Callable[[TextView], None] = ...
    insert_at_cursor: Callable[[TextView, str], None] = ...
    delete_from_cursor: Callable[[TextView, DeleteType, int], None] = ...
    backspace: Callable[[TextView], None] = ...
    cut_clipboard: Callable[[TextView], None] = ...
    copy_clipboard: Callable[[TextView], None] = ...
    paste_clipboard: Callable[[TextView], None] = ...
    toggle_overwrite: Callable[[TextView], None] = ...
    create_buffer: None = ...
    snapshot_layer: Callable[[TextView, TextViewLayer, Snapshot], None] = ...
    extend_selection: Callable[
        [TextView, TextExtendSelection, TextIter, TextIter, TextIter], bool
    ] = ...
    insert_emoji: Callable[[TextView], None] = ...
    padding: list[None] = ...

class TextViewPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class ToggleButton(Button, Accessible, Actionable, Buildable, ConstraintTarget):
    """
    A `GtkToggleButton` is a button which remains “pressed-in” when
    clicked.

    Clicking again will cause the toggle button to return to its normal state.

    A toggle button is created by calling either [ctor@Gtk.ToggleButton.new] or
    [ctor@Gtk.ToggleButton.new_with_label]. If using the former, it is advisable
    to pack a widget, (such as a `GtkLabel` and/or a `GtkImage`), into the toggle
    button’s container. (See [class@Gtk.Button] for more information).

    The state of a `GtkToggleButton` can be set specifically using
    [method@Gtk.ToggleButton.set_active], and retrieved using
    [method@Gtk.ToggleButton.get_active].

    To simply switch the state of a toggle button, use
    [method@Gtk.ToggleButton.toggled].

    ## Grouping

    Toggle buttons can be grouped together, to form mutually exclusive
    groups - only one of the buttons can be toggled at a time, and toggling
    another one will switch the currently toggled one off.

    To add a `GtkToggleButton` to a group, use [method@Gtk.ToggleButton.set_group].

    ## CSS nodes

    `GtkToggleButton` has a single CSS node with name button. To differentiate
    it from a plain `GtkButton`, it gets the `.toggle` style class.

    ## Accessibility

    `GtkToggleButton` uses the %GTK_ACCESSIBLE_ROLE_TOGGLE_BUTTON role.

    ## Creating two `GtkToggleButton` widgets.

    ```c
    static void
    output_state (GtkToggleButton *source,
    gpointer user_data)
    {
    g_print (\"Toggle button \"%s\" is active: %s\",
    gtk_button_get_label (GTK_BUTTON (source)),
    gtk_toggle_button_get_active (source) ? \"Yes\" : \"No\");
    }

    static void
    make_toggles (void)
    {
    GtkWidget *window, *toggle1, *toggle2;
    GtkWidget *box;
    const char *text;

    window = gtk_window_new ();
    box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 12);

    text = \"Hi, I’m toggle button one\";
    toggle1 = gtk_toggle_button_new_with_label (text);

    g_signal_connect (toggle1, \"toggled\",
    G_CALLBACK (output_state),
    NULL);
    gtk_box_append (GTK_BOX (box), toggle1);

    text = \"Hi, I’m toggle button two\";
    toggle2 = gtk_toggle_button_new_with_label (text);
    g_signal_connect (toggle2, \"toggled\",
    G_CALLBACK (output_state),
    NULL);
    gtk_box_append (GTK_BOX (box), toggle2);

    gtk_window_set_child (GTK_WINDOW (window), box);
    gtk_window_present (GTK_WINDOW (window));
    }
    ```

    :Constructors:

    ::

        ToggleButton(**properties)
        new() -> Gtk.Widget
        new_with_label(label:str) -> Gtk.Widget
        new_with_mnemonic(label:str) -> Gtk.Widget

    Object GtkToggleButton

    Signals from GtkToggleButton:
      toggled ()

    Properties from GtkToggleButton:
      active -> gboolean: active
      group -> GtkToggleButton: group

    Signals from GtkButton:
      activate ()
      clicked ()

    Properties from GtkButton:
      label -> gchararray: label
      has-frame -> gboolean: has-frame
      use-underline -> gboolean: use-underline
      icon-name -> gchararray: icon-name
      child -> GtkWidget: child
      can-shrink -> gboolean: can-shrink

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Button.Props,
        Accessible.Props,
        Actionable.Props,
        Buildable.Props,
        ConstraintTarget.Props,
    ):
        active: bool
        """
        If the toggle button should be pressed in.
        """
        group: Optional[ToggleButton]
        """
        The toggle button whose group this widget belongs to.
        """

    props: Props = ...
    button: Button = ...
    def __init__(
        self,
        active: bool = ...,
        group: Optional[ToggleButton] = ...,
        can_shrink: bool = ...,
        child: Optional[Widget] = ...,
        has_frame: bool = ...,
        icon_name: str = ...,
        label: str = ...,
        use_underline: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        action_name: Optional[str] = ...,
        action_target: GLib.Variant = ...,
    ): ...
    def do_toggled(self) -> None:
        """
        Emits the ::toggled signal on the `GtkToggleButton`.

        Parameters:


        Returns:

        """
        ...

    def get_active(self) -> bool:
        """
        Queries a `GtkToggleButton` and returns its current state.

        Returns %TRUE if the toggle button is pressed in and %FALSE
        if it is raised.

        Parameters:


        Returns:
            bool: whether the button is pressed

        """
        ...

    @classmethod
    def new(cls) -> ToggleButton:
        """
        Creates a new toggle button.

        A widget should be packed into the button, as in [ctor@Gtk.Button.new].

        Parameters:


        Returns:
            Widget: a new toggle button.

        """
        ...

    @classmethod
    def new_with_label(cls, label: str) -> ToggleButton:
        """
        Creates a new toggle button with a text label.

        Parameters:
            label: a string containing the message to be placed in the toggle button.

        Returns:
            Widget: a new toggle button.

        """
        ...

    @classmethod
    def new_with_mnemonic(cls, label: str) -> ToggleButton:
        """
        Creates a new `GtkToggleButton` containing a label.

        The label will be created using [ctor@Gtk.Label.new_with_mnemonic],
        so underscores in @label indicate the mnemonic for the button.

        Parameters:
            label: the text of the button, with an underscore in front of the
        mnemonic character

        Returns:
            Widget: a new `GtkToggleButton`

        """
        ...

    def set_active(self, is_active: bool) -> None:
        """
        Sets the status of the toggle button.

        Set to %TRUE if you want the `GtkToggleButton` to be “pressed in”,
        and %FALSE to raise it.

        If the status of the button changes, this action causes the
        [signal@Gtk.ToggleButton::toggled] signal to be emitted.

        Parameters:
            is_active: %TRUE or %FALSE.

        Returns:

        """
        ...

    def set_group(self, group: Optional[ToggleButton] = None) -> None:
        """
        Adds @self to the group of @group.

        In a group of multiple toggle buttons, only one button can be active
        at a time.

        Setting up groups in a cycle leads to undefined behavior.

        Note that the same effect can be achieved via the [iface@Gtk.Actionable]
        API, by using the same action with parameter type and state type 's'
        for all buttons in the group, and giving each button its own target
        value.

        Parameters:
            group: another `GtkToggleButton` to
        form a group with

        Returns:

        """
        ...

    @deprecated(
        "There is no good reason for an application ever to call this function."
    )
    def toggled(self) -> None:
        """
        Emits the ::toggled signal on the `GtkToggleButton`.

        Parameters:


        Returns:

        """
        ...

class ToggleButtonClass(GObject.GPointer):
    """
    :Constructors:

    ::

        ToggleButtonClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: ButtonClass = ...
    toggled: Callable[[ToggleButton], None] = ...
    padding: list[None] = ...

class Tooltip(GObject.Object):
    """
    `GtkTooltip` is an object representing a widget tooltip.

    Basic tooltips can be realized simply by using
    [method@Gtk.Widget.set_tooltip_text] or
    [method@Gtk.Widget.set_tooltip_markup] without
    any explicit tooltip object.

    When you need a tooltip with a little more fancy contents,
    like adding an image, or you want the tooltip to have different
    contents per `GtkTreeView` row or cell, you will have to do a
    little more work:

    - Set the [property@Gtk.Widget:has-tooltip] property to %TRUE.
    This will make GTK monitor the widget for motion and related events
    which are needed to determine when and where to show a tooltip.

    - Connect to the [signal@Gtk.Widget::query-tooltip] signal.
    This signal will be emitted when a tooltip is supposed to be shown.
    One of the arguments passed to the signal handler is a `GtkTooltip`
    object. This is the object that we are about to display as a tooltip,
    and can be manipulated in your callback using functions like
    [method@Gtk.Tooltip.set_icon]. There are functions for setting
    the tooltip’s markup, setting an image from a named icon, or even
    putting in a custom widget.

    - Return %TRUE from your ::query-tooltip handler. This causes the tooltip
    to be show. If you return %FALSE, it will not be shown.

    :Constructors:

    ::

        Tooltip(**properties)

    Object GtkTooltip

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...

    def set_custom(self, custom_widget: Optional[Widget] = None) -> None:
        """
        Replaces the widget packed into the tooltip with
        @custom_widget. @custom_widget does not get destroyed when the tooltip goes
        away.
        By default a box with a `GtkImage` and `GtkLabel` is embedded in
        the tooltip, which can be configured using gtk_tooltip_set_markup()
        and gtk_tooltip_set_icon().

        Parameters:
            custom_widget: a `GtkWidget`, or %NULL to unset the old custom widget.

        Returns:

        """
        ...

    def set_icon(self, paintable: Optional[Gdk.Paintable] = None) -> None:
        """
        Sets the icon of the tooltip (which is in front of the text) to be
        @paintable. If @paintable is %NULL, the image will be hidden.

        Parameters:
            paintable: a `GdkPaintable`

        Returns:

        """
        ...

    def set_icon_from_gicon(self, gicon: Optional[Gio.Icon] = None) -> None:
        """
        Sets the icon of the tooltip (which is in front of the text)
        to be the icon indicated by @gicon with the size indicated
        by @size. If @gicon is %NULL, the image will be hidden.

        Parameters:
            gicon: a `GIcon` representing the icon

        Returns:

        """
        ...

    def set_icon_from_icon_name(self, icon_name: Optional[str] = None) -> None:
        """
        Sets the icon of the tooltip (which is in front of the text) to be
        the icon indicated by @icon_name with the size indicated
        by @size. If @icon_name is %NULL, the image will be hidden.

        Parameters:
            icon_name: an icon name

        Returns:

        """
        ...

    def set_markup(self, markup: Optional[str] = None) -> None:
        """
        Sets the text of the tooltip to be @markup.

        The string must be marked up with Pango markup.
        If @markup is %NULL, the label will be hidden.

        Parameters:
            markup: a string with Pango markup or %NLL

        Returns:

        """
        ...

    def set_text(self, text: Optional[str] = None) -> None:
        """
        Sets the text of the tooltip to be @text.

        If @text is %NULL, the label will be hidden.
        See also [method@Gtk.Tooltip.set_markup].

        Parameters:
            text: a text string

        Returns:

        """
        ...

    def set_tip_area(self, rect: Gdk.Rectangle) -> None:
        """
        Sets the area of the widget, where the contents of this tooltip apply,
        to be @rect (in widget coordinates). This is especially useful for
        properly setting tooltips on `GtkTreeView` rows and cells, `GtkIconViews`,
        etc.

        For setting tooltips on `GtkTreeView`, please refer to the convenience
        functions for this: gtk_tree_view_set_tooltip_row() and
        gtk_tree_view_set_tooltip_cell().

        Parameters:
            rect: a `GdkRectangle`

        Returns:

        """
        ...

@deprecated(
    "List views use widgets to display their contents. You can use [class@Gtk.DropTarget] to implement a drop destination"
)
class TreeDragDest(GObject.GInterface):
    """
    Interface for Drag-and-Drop destinations in `GtkTreeView`.



    Interface GtkTreeDragDest
    """

    class Props(GObject.GInterface.Props): ...

    @deprecated("Use list models instead")
    def drag_data_received(self, dest: TreePath, value: Any) -> bool:
        """
        Asks the `GtkTreeDragDest` to insert a row before the path @dest,
        deriving the contents of the row from @value. If @dest is
        outside the tree so that inserting before it is impossible, %FALSE
        will be returned. Also, %FALSE may be returned if the new row is
        not created for some model-specific reason. Should robustly handle
        a @dest no longer found in the model!

        Parameters:
            dest: row to drop in front of
            value: data to drop

        Returns:
            bool: whether a new row was created before position @dest

        """
        ...

    @deprecated("Use list models instead")
    def row_drop_possible(self, dest_path: TreePath, value: Any) -> bool:
        """
        Determines whether a drop is possible before the given @dest_path,
        at the same depth as @dest_path. i.e., can we drop the data in
        @value at that location. @dest_path does not have to
        exist; the return value will almost certainly be %FALSE if the
        parent of @dest_path doesn’t exist, though.

        Parameters:
            dest_path: destination row
            value: the data being dropped

        Returns:
            bool: %TRUE if a drop is possible before @dest_path

        """
        ...

class TreeDragDestIface(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeDragDestIface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    drag_data_received: Callable[[TreeDragDest, TreePath, Any], bool] = ...
    row_drop_possible: Callable[[TreeDragDest, TreePath, Any], bool] = ...

@deprecated(
    "List views use widgets to display their contents. You can use [class@Gtk.DragSource] to implement a drag source"
)
class TreeDragSource(GObject.GInterface):
    """
    Interface for Drag-and-Drop destinations in `GtkTreeView`.



    Interface GtkTreeDragSource
    """

    class Props(GObject.GInterface.Props): ...

    @deprecated("Use list models instead")
    def drag_data_delete(self, path: TreePath) -> bool:
        """
        Asks the `GtkTreeDragSource` to delete the row at @path, because
        it was moved somewhere else via drag-and-drop. Returns %FALSE
        if the deletion fails because @path no longer exists, or for
        some model-specific reason. Should robustly handle a @path no
        longer found in the model!

        Parameters:
            path: row that was being dragged

        Returns:
            bool: %TRUE if the row was successfully deleted

        """
        ...

    @deprecated("Use list models instead")
    def drag_data_get(self, path: TreePath) -> Optional[Gdk.ContentProvider]:
        """
        Asks the `GtkTreeDragSource` to return a `GdkContentProvider` representing
        the row at @path. Should robustly handle a @path no
        longer found in the model!

        Parameters:
            path: row that was dragged

        Returns:
            Optional[Gdk.ContentProvider]: a `GdkContentProvider` for the
        given @path

        """
        ...

    @deprecated("Use list models instead")
    def row_draggable(self, path: TreePath) -> bool:
        """
        Asks the `GtkTreeDragSource` whether a particular row can be used as
        the source of a DND operation. If the source doesn’t implement
        this interface, the row is assumed draggable.

        Parameters:
            path: row on which user is initiating a drag

        Returns:
            bool: %TRUE if the row can be dragged

        """
        ...

class TreeDragSourceIface(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeDragSourceIface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    row_draggable: Callable[[TreeDragSource, TreePath], bool] = ...
    drag_data_get: Callable[
        [TreeDragSource, TreePath], Optional[Gdk.ContentProvider]
    ] = ...
    drag_data_delete: Callable[[TreeDragSource, TreePath], bool] = ...

class TreeExpander(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkTreeExpander` is a widget that provides an expander for a list.

    It is typically placed as a bottommost child into a `GtkListView`
    to allow users to expand and collapse children in a list with a
    [class@Gtk.TreeListModel]. `GtkTreeExpander` provides the common UI
    elements, gestures and keybindings for this purpose.

    On top of this, the \"listitem.expand\", \"listitem.collapse\" and
    \"listitem.toggle-expand\" actions are provided to allow adding custom
    UI for managing expanded state.

    It is important to mention that you want to set the
    [property@Gtk.ListItem:focusable] property to FALSE when using this
    widget, as you want the keyboard focus to be in the treexpander, and not
    inside the list to make use of the keybindings.

    The `GtkTreeListModel` must be set to not be passthrough. Then it
    will provide [class@Gtk.TreeListRow] items which can be set via
    [method@Gtk.TreeExpander.set_list_row] on the expander.
    The expander will then watch that row item automatically.
    [method@Gtk.TreeExpander.set_child] sets the widget that displays
    the actual row contents.

    `GtkTreeExpander` can be modified with properties such as
    [property@Gtk.TreeExpander:indent-for-icon],
    [property@Gtk.TreeExpander:indent-for-depth], and
    [property@Gtk.TreeExpander:hide-expander] to achieve a different appearance.
    This can even be done to influence individual rows, for example by binding
    the [property@Gtk.TreeExpander:hide-expander] property to the item count of
    the model of the treelistrow, to hide the expander for rows without children,
    even if the row is expandable.

    ## CSS nodes

    ```
    treeexpander
    ├── [indent]*
    ├── [expander]
    ╰── <child>
    ```

    `GtkTreeExpander` has zero or one CSS nodes with the name \"expander\" that
    should display the expander icon. The node will be `:checked` when it
    is expanded. If the node is not expandable, an \"indent\" node will be
    displayed instead.

    For every level of depth, another \"indent\" node is prepended.

    ## Accessibility

    Until GTK 4.10, `GtkTreeExpander` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.

    Since GTK 4.12, `GtkTreeExpander` uses the `GTK_ACCESSIBLE_ROLE_BUTTON` role.
    Toggling it will change the `GTK_ACCESSIBLE_STATE_EXPANDED` state.

    :Constructors:

    ::

        TreeExpander(**properties)
        new() -> Gtk.Widget

    Object GtkTreeExpander

    Properties from GtkTreeExpander:
      child -> GtkWidget: child
      hide-expander -> gboolean: hide-expander
      indent-for-depth -> gboolean: indent-for-depth
      indent-for-icon -> gboolean: indent-for-icon
      item -> GObject: item
      list-row -> GtkTreeListRow: list-row

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        child: Optional[Widget]
        """
        The child widget with the actual contents.
        """
        hide_expander: bool
        """
        Whether the expander icon should be hidden in a GtkTreeListRow.
        Note that this property simply hides the icon. The actions and keybinding
        (i.e. collapse and expand) are not affected by this property.

        A common use for this property would be to bind to the number of children in a
        GtkTreeListRow's model in order to hide the expander when a row has no children.
        """
        indent_for_depth: bool
        """
        TreeExpander indents the child according to its depth.
        """
        indent_for_icon: bool
        """
        TreeExpander indents the child by the width of an expander-icon if it is not expandable.
        """
        item: Optional[GObject.Object]
        """
        The item held by this expander's row.
        """
        list_row: Optional[TreeListRow]
        """
        The list row to track for expander state.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        hide_expander: bool = ...,
        indent_for_depth: bool = ...,
        indent_for_icon: bool = ...,
        list_row: Optional[TreeListRow] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget displayed by @self.

        Parameters:


        Returns:
            Optional[Widget]: The child displayed by @self

        """
        ...

    def get_hide_expander(self) -> bool:
        """
        Gets whether the TreeExpander should be hidden in a GtkTreeListRow.

        Parameters:


        Returns:
            bool: TRUE if the expander icon should be hidden. Otherwise FALSE.

        """
        ...

    def get_indent_for_depth(self) -> bool:
        """
        TreeExpander indents each level of depth with an additional indent.

        Parameters:


        Returns:
            bool: TRUE if the child should be indented . Otherwise FALSE.

        """
        ...

    def get_indent_for_icon(self) -> bool:
        """
        TreeExpander indents the child by the width of an expander-icon if it is not expandable.

        Parameters:


        Returns:
            bool: TRUE if the child should be indented when not expandable. Otherwise FALSE.

        """
        ...

    def get_item(self) -> Optional[GObject.Object]:
        """
        Forwards the item set on the `GtkTreeListRow` that @self is managing.

        This call is essentially equivalent to calling:

        ```c
        gtk_tree_list_row_get_item (gtk_tree_expander_get_list_row (@self));
        ```

        Parameters:


        Returns:
            Optional[GObject.Object]: The item of the row

        """
        ...

    def get_list_row(self) -> Optional[TreeListRow]:
        """
        Gets the list row managed by @self.

        Parameters:


        Returns:
            Optional[TreeListRow]: The list row displayed by @self

        """
        ...

    @classmethod
    def new(cls) -> TreeExpander:
        """
        Creates a new `GtkTreeExpander`

        Parameters:


        Returns:
            Widget: a new `GtkTreeExpander`

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the content widget to display.

        Parameters:
            child: a `GtkWidget`

        Returns:

        """
        ...

    def set_hide_expander(self, hide_expander: bool) -> None:
        """
        Sets whether the expander icon should be visible in a GtkTreeListRow.

        Parameters:
            hide_expander: TRUE if the expander should be hidden. Otherwise FALSE.

        Returns:

        """
        ...

    def set_indent_for_depth(self, indent_for_depth: bool) -> None:
        """
        Sets if the TreeExpander should indent the child according to its depth.

        Parameters:
            indent_for_depth: TRUE if the child should be indented. Otherwise FALSE.

        Returns:

        """
        ...

    def set_indent_for_icon(self, indent_for_icon: bool) -> None:
        """
        Sets if the TreeExpander should indent the child by the width of an expander-icon when it is not expandable.

        Parameters:
            indent_for_icon: TRUE if the child should be indented without expander. Otherwise FALSE.

        Returns:

        """
        ...

    def set_list_row(self, list_row: Optional[TreeListRow] = None) -> None:
        """
        Sets the tree list row that this expander should manage.

        Parameters:
            list_row: a `GtkTreeListRow`

        Returns:

        """
        ...

class TreeExpanderClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeExpanderClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class TreeIter(GObject.GBoxed):
    """
    The `GtkTreeIter` is the primary structure
    for accessing a `GtkTreeModel`. Models are expected to put a unique
    integer in the @stamp member, and put
    model-specific data in the three @user_data
    members.

    :Constructors:

    ::

        TreeIter()
    """

    class Props(GObject.GBoxed.Props): ...
    stamp: int = ...
    user_data: None = ...
    user_data2: None = ...
    user_data3: None = ...
    @deprecated("This method is deprecated")
    def copy(self) -> TreeIter:
        """
        Creates a dynamically allocated tree iterator as a copy of @iter.

        This function is not intended for use in applications,
        because you can just copy the structs by value
        (`GtkTreeIter new_iter = iter;`).
        You must free this iter with gtk_tree_iter_free().

        Parameters:


        Returns:
            TreeIter: a newly-allocated copy of @iter

        """
        ...

    @deprecated("This method is deprecated")
    def free(self) -> None:
        """
        Frees an iterator that has been allocated by gtk_tree_iter_copy().

        This function is mainly used for language bindings.

        Parameters:


        Returns:

        """
        ...

class TreeListModel(GObject.Object, Gio.ListModel):
    """
    `GtkTreeListModel` is a list model that can create child models on demand.

    :Constructors:

    ::

        TreeListModel(**properties)
        new(root:Gio.ListModel, passthrough:bool, autoexpand:bool, create_func:Gtk.TreeListModelCreateModelFunc, user_data=None) -> Gtk.TreeListModel

    Object GtkTreeListModel

    Properties from GtkTreeListModel:
      autoexpand -> gboolean: autoexpand
      item-type -> GType: item-type
      model -> GListModel: model
      n-items -> guint: n-items
      passthrough -> gboolean: passthrough

    Signals from GListModel:
      items-changed (guint, guint, guint)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gio.ListModel.Props):
        autoexpand: bool
        """
        If all rows should be expanded by default.
        """
        item_type: Type
        """
        The type of items. See [method@Gio.ListModel.get_item_type].
        """
        model: Gio.ListModel
        """
        The root model displayed.
        """
        n_items: int
        """
        The number of items. See [method@Gio.ListModel.get_n_items].
        """
        passthrough: bool
        """
        Gets whether the model is in passthrough mode.

        If %FALSE, the `GListModel` functions for this object return custom
        [class@Gtk.TreeListRow] objects. If %TRUE, the values of the child
        models are pass through unmodified.
        """

    props: Props = ...
    def __init__(self, autoexpand: bool = ..., passthrough: bool = ...): ...
    def get_autoexpand(self) -> bool:
        """
        Gets whether the model is set to automatically expand new rows
        that get added.

        This can be either rows added by changes to the underlying
        models or via [method@Gtk.TreeListRow.set_expanded].

        Parameters:


        Returns:
            bool: %TRUE if the model is set to autoexpand

        """
        ...

    def get_child_row(self, position: int) -> Optional[TreeListRow]:
        """
        Gets the row item corresponding to the child at index @position for
        @self's root model.

        If @position is greater than the number of children in the root model,
        %NULL is returned.

        Do not confuse this function with [method@Gtk.TreeListModel.get_row].

        Parameters:
            position: position of the child to get

        Returns:
            Optional[TreeListRow]: the child in @position

        """
        ...

    def get_model(self) -> Gio.ListModel:
        """
        Gets the root model that @self was created with.

        Parameters:


        Returns:
            Gio.ListModel: the root model

        """
        ...

    def get_passthrough(self) -> bool:
        """
        Gets whether the model is passing through original row items.

        If this function returns %FALSE, the `GListModel` functions for @self
        return custom `GtkTreeListRow` objects. You need to call
        [method@Gtk.TreeListRow.get_item] on these objects to get the original
        item.

        If %TRUE, the values of the child models are passed through in their
        original state. You then need to call [method@Gtk.TreeListModel.get_row]
        to get the custom `GtkTreeListRow`s.

        Parameters:


        Returns:
            bool: %TRUE if the model is passing through original row items

        """
        ...

    def get_row(self, position: int) -> Optional[TreeListRow]:
        """
        Gets the row object for the given row.

        If @position is greater than the number of items in @self,
        %NULL is returned.

        The row object can be used to expand and collapse rows as
        well as to inspect its position in the tree. See its
        documentation for details.

        This row object is persistent and will refer to the current
        item as long as the row is present in @self, independent of
        other rows being added or removed.

        If @self is set to not be passthrough, this function is
        equivalent to calling g_list_model_get_item().

        Do not confuse this function with [method@Gtk.TreeListModel.get_child_row].

        Parameters:
            position: the position of the row to fetch

        Returns:
            Optional[TreeListRow]: The row item

        """
        ...

    @classmethod
    def new(
        cls,
        root: Gio.ListModel,
        passthrough: bool,
        autoexpand: bool,
        create_func: Callable[..., Optional[Gio.ListModel]],
        *user_data: Any,
    ) -> TreeListModel:
        """
        Creates a new empty `GtkTreeListModel` displaying @root
        with all rows collapsed.

        Parameters:
            root: The `GListModel` to use as root
            passthrough: %TRUE to pass through items from the models
            autoexpand: %TRUE to set the autoexpand property and expand the @root model
            create_func: Function to call to create the `GListModel` for the children
        of an item
            user_data: Data to pass to @create_func

        Returns:
            TreeListModel: a newly created `GtkTreeListModel`.

        """
        ...

    def set_autoexpand(self, autoexpand: bool) -> None:
        """
        Sets whether the model should autoexpand.

        If set to %TRUE, the model will recursively expand all rows that
        get added to the model. This can be either rows added by changes
        to the underlying models or via [method@Gtk.TreeListRow.set_expanded].

        Parameters:
            autoexpand: %TRUE to make the model autoexpand its rows

        Returns:

        """
        ...

class TreeListModelClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeListModelClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class TreeListRow(GObject.Object):
    """
    `GtkTreeListRow` is used by `GtkTreeListModel` to represent items.

    It allows navigating the model as a tree and modify the state of rows.

    `GtkTreeListRow` instances are created by a `GtkTreeListModel` only
    when the [property@Gtk.TreeListModel:passthrough] property is not set.

    There are various support objects that can make use of `GtkTreeListRow`
    objects, such as the [class@Gtk.TreeExpander] widget that allows displaying
    an icon to expand or collapse a row or [class@Gtk.TreeListRowSorter] that
    makes it possible to sort trees properly.

    :Constructors:

    ::

        TreeListRow(**properties)

    Object GtkTreeListRow

    Properties from GtkTreeListRow:
      children -> GListModel: children
      depth -> guint: depth
      expandable -> gboolean: expandable
      expanded -> gboolean: expanded
      item -> GObject: item

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        children: Optional[Gio.ListModel]
        """
        The model holding the row's children.
        """
        depth: int
        """
        The depth in the tree of this row.
        """
        expandable: bool
        """
        If this row can ever be expanded.
        """
        expanded: bool
        """
        If this row is currently expanded.
        """
        item: Optional[GObject.Object]
        """
        The item held in this row.
        """

    props: Props = ...
    def __init__(self, expanded: bool = ...): ...
    def get_child_row(self, position: int) -> Optional[TreeListRow]:
        """
        If @self is not expanded or @position is greater than the
        number of children, %NULL is returned.

        Parameters:
            position: position of the child to get

        Returns:
            Optional[TreeListRow]: the child in @position

        """
        ...

    def get_children(self) -> Optional[Gio.ListModel]:
        """
        If the row is expanded, gets the model holding the children of @self.

        This model is the model created by the
        [callback@Gtk.TreeListModelCreateModelFunc]
        and contains the original items, no matter what value
        [property@Gtk.TreeListModel:passthrough] is set to.

        Parameters:


        Returns:
            Optional[Gio.ListModel]: The model containing the children

        """
        ...

    def get_depth(self) -> int:
        """
        Gets the depth of this row.

        Rows that correspond to items in the root model have a depth
        of zero, rows corresponding to items of models of direct children
        of the root model have a depth of 1 and so on.

        The depth of a row never changes until the row is removed from its model
        at which point it will forever return 0.

        Parameters:


        Returns:
            int: The depth of this row

        """
        ...

    def get_expanded(self) -> bool:
        """
        Gets if a row is currently expanded.

        Parameters:


        Returns:
            bool: %TRUE if the row is expanded

        """
        ...

    def get_item(self) -> Optional[GObject.Object]:
        """
        Gets the item corresponding to this row,

        Parameters:


        Returns:
            Optional[GObject.Object]: The item
        of this row. This function is only marked as nullable for backwards
        compatibility reasons.

        """
        ...

    def get_parent(self) -> Optional[TreeListRow]:
        """
        Gets the row representing the parent for @self.

        That is the row that would need to be collapsed
        to make this row disappear.

        If @self is a row corresponding to the root model,
        %NULL is returned.

        The value returned by this function never changes
        until the row is removed from its model at which point
        it will forever return %NULL.

        Parameters:


        Returns:
            Optional[TreeListRow]: The parent of @self

        """
        ...

    def get_position(self) -> int:
        """
        Returns the position in the `GtkTreeListModel` that @self occupies
        at the moment.

        Parameters:


        Returns:
            int: The position in the model

        """
        ...

    def is_expandable(self) -> bool:
        """
        Checks if a row can be expanded.

        This does not mean that the row is actually expanded,
        this can be checked with [method@Gtk.TreeListRow.get_expanded].

        If a row is expandable never changes until the row is removed
        from its model at which point it will forever return %FALSE.

        Parameters:


        Returns:
            bool: %TRUE if the row is expandable

        """
        ...

    def set_expanded(self, expanded: bool) -> None:
        """
        Expands or collapses a row.

        If a row is expanded, the model of calling the
        [callback@Gtk.TreeListModelCreateModelFunc] for the row's
        item will be inserted after this row. If a row is collapsed,
        those items will be removed from the model.

        If the row is not expandable, this function does nothing.

        Parameters:
            expanded: %TRUE if the row should be expanded

        Returns:

        """
        ...

class TreeListRowClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeListRowClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class TreeListRowSorter(Sorter):
    """
    `GtkTreeListRowSorter` is a special-purpose sorter that will apply a given
    sorter to the levels in a tree.

    Here is an example for setting up a column view with a tree model and
    a `GtkTreeListSorter`:

    ```c
    column_sorter = gtk_column_view_get_sorter (view);
    sorter = gtk_tree_list_row_sorter_new (g_object_ref (column_sorter));
    sort_model = gtk_sort_list_model_new (tree_model, sorter);
    selection = gtk_single_selection_new (sort_model);
    gtk_column_view_set_model (view, G_LIST_MODEL (selection));
    ```

    :Constructors:

    ::

        TreeListRowSorter(**properties)
        new(sorter:Gtk.Sorter=None) -> Gtk.TreeListRowSorter

    Object GtkTreeListRowSorter

    Properties from GtkTreeListRowSorter:
      sorter -> GtkSorter: sorter

    Signals from GtkSorter:
      changed (GtkSorterChange)

    Signals from GObject:
      notify (GParam)
    """

    class Props(Sorter.Props):
        sorter: Optional[Sorter]
        """
        The underlying sorter
        """

    props: Props = ...
    def __init__(self, sorter: Optional[Sorter] = ...): ...
    def get_sorter(self) -> Optional[Sorter]:
        """
        Returns the sorter used by @self.

        Parameters:


        Returns:
            Optional[Sorter]: the sorter used

        """
        ...

    @classmethod
    def new(cls, sorter: Optional[Sorter] = None) -> TreeListRowSorter:
        """
        Create a special-purpose sorter that applies the sorting
        of @sorter to the levels of a `GtkTreeListModel`.

        Note that this sorter relies on [property@Gtk.TreeListModel:passthrough]
        being %FALSE as it can only sort [class@Gtk.TreeListRow]s.

        Parameters:
            sorter: a `GtkSorter`

        Returns:
            TreeListRowSorter: a new `GtkTreeListRowSorter`

        """
        ...

    def set_sorter(self, sorter: Optional[Sorter] = None) -> None:
        """
        Sets the sorter to use for items with the same parent.

        This sorter will be passed the [property@Gtk.TreeListRow:item] of
        the tree list rows passed to @self.

        Parameters:
            sorter: The sorter to use

        Returns:

        """
        ...

class TreeListRowSorterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeListRowSorterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: SorterClass = ...

@deprecated("Use [iface@Gio.ListModel] instead")
class TreeModel(GObject.GInterface):
    """
    The tree interface used by GtkTreeView

    The `GtkTreeModel` interface defines a generic tree interface for
    use by the `GtkTreeView` widget. It is an abstract interface, and
    is designed to be usable with any appropriate data structure. The
    programmer just has to implement this interface on their own data
    type for it to be viewable by a `GtkTreeView` widget.

    The model is represented as a hierarchical tree of strongly-typed,
    columned data. In other words, the model can be seen as a tree where
    every node has different values depending on which column is being
    queried. The type of data found in a column is determined by using
    the GType system (ie. %G_TYPE_INT, %GTK_TYPE_BUTTON, %G_TYPE_POINTER,
    etc). The types are homogeneous per column across all nodes. It is
    important to note that this interface only provides a way of examining
    a model and observing changes. The implementation of each individual
    model decides how and if changes are made.

    In order to make life simpler for programmers who do not need to
    write their own specialized model, two generic models are provided
    — the `GtkTreeStore` and the `GtkListStore`. To use these, the
    developer simply pushes data into these models as necessary. These
    models provide the data structure as well as all appropriate tree
    interfaces. As a result, implementing drag and drop, sorting, and
    storing data is trivial. For the vast majority of trees and lists,
    these two models are sufficient.

    Models are accessed on a node/column level of granularity. One can
    query for the value of a model at a certain node and a certain
    column on that node. There are two structures used to reference a
    particular node in a model. They are the [struct@Gtk.TreePath] and
    the [struct@Gtk.TreeIter] (“iter” is short for iterator). Most of the
    interface consists of operations on a [struct@Gtk.TreeIter].

    A path is essentially a potential node. It is a location on a model
    that may or may not actually correspond to a node on a specific
    model. A [struct@Gtk.TreePath] can be converted into either an
    array of unsigned integers or a string. The string form is a list
    of numbers separated by a colon. Each number refers to the offset
    at that level. Thus, the path `0` refers to the root
    node and the path `2:4` refers to the fifth child of
    the third node.

    By contrast, a [struct@Gtk.TreeIter] is a reference to a specific node on
    a specific model. It is a generic struct with an integer and three
    generic pointers. These are filled in by the model in a model-specific
    way. One can convert a path to an iterator by calling
    gtk_tree_model_get_iter(). These iterators are the primary way
    of accessing a model and are similar to the iterators used by
    `GtkTextBuffer`. They are generally statically allocated on the
    stack and only used for a short time. The model interface defines
    a set of operations using them for navigating the model.

    It is expected that models fill in the iterator with private data.
    For example, the `GtkListStore` model, which is internally a simple
    linked list, stores a list node in one of the pointers. The
    `GtkTreeModel`Sort stores an array and an offset in two of the
    pointers. Additionally, there is an integer field. This field is
    generally filled with a unique stamp per model. This stamp is for
    catching errors resulting from using invalid iterators with a model.

    The lifecycle of an iterator can be a little confusing at first.
    Iterators are expected to always be valid for as long as the model
    is unchanged (and doesn’t emit a signal). The model is considered
    to own all outstanding iterators and nothing needs to be done to
    free them from the user’s point of view. Additionally, some models
    guarantee that an iterator is valid for as long as the node it refers
    to is valid (most notably the `GtkTreeStore` and `GtkListStore`).
    Although generally uninteresting, as one always has to allow for
    the case where iterators do not persist beyond a signal, some very
    important performance enhancements were made in the sort model.
    As a result, the %GTK_TREE_MODEL_ITERS_PERSIST flag was added to
    indicate this behavior.

    To help show some common operation of a model, some examples are
    provided. The first example shows three ways of getting the iter at
    the location `3:2:5`. While the first method shown is
    easier, the second is much more common, as you often get paths from
    callbacks.

    ## Acquiring a `GtkTreeIter`

    ```c
    // Three ways of getting the iter pointing to the location
    GtkTreePath *path;
    GtkTreeIter iter;
    GtkTreeIter parent_iter;

    // get the iterator from a string
    gtk_tree_model_get_iter_from_string (model,
    &iter,
    \"3:2:5\");

    // get the iterator from a path
    path = gtk_tree_path_new_from_string (\"3:2:5\");
    gtk_tree_model_get_iter (model, &iter, path);
    gtk_tree_path_free (path);

    // walk the tree to find the iterator
    gtk_tree_model_iter_nth_child (model, &iter,
    NULL, 3);
    parent_iter = iter;
    gtk_tree_model_iter_nth_child (model, &iter,
    &parent_iter, 2);
    parent_iter = iter;
    gtk_tree_model_iter_nth_child (model, &iter,
    &parent_iter, 5);
    ```

    This second example shows a quick way of iterating through a list
    and getting a string and an integer from each row. The
    populate_model() function used below is not
    shown, as it is specific to the `GtkListStore`. For information on
    how to write such a function, see the `GtkListStore` documentation.

    ## Reading data from a `GtkTreeModel`

    ```c
    enum
    {
    STRING_COLUMN,
    INT_COLUMN,
    N_COLUMNS
    };

    ...

    GtkTreeModel *list_store;
    GtkTreeIter iter;
    gboolean valid;
    int row_count = 0;

    // make a new list_store
    list_store = gtk_list_store_new (N_COLUMNS,
    G_TYPE_STRING,
    G_TYPE_INT);

    // Fill the list store with data
    populate_model (list_store);

    // Get the first iter in the list, check it is valid and walk
    // through the list, reading each row.

    valid = gtk_tree_model_get_iter_first (list_store,
    &iter);
    while (valid)
    {
    char *str_data;
    int int_data;

    // Make sure you terminate calls to gtk_tree_model_get() with a “-1” value
    gtk_tree_model_get (list_store, &iter,
    STRING_COLUMN, &str_data,
    INT_COLUMN, &int_data,
    -1);

    // Do something with the data
    g_print (\"Row %d: (%s,%d)\n\",
    row_count, str_data, int_data);
    g_free (str_data);

    valid = gtk_tree_model_iter_next (list_store,
    &iter);
    row_count++;
    }
    ```

    The `GtkTreeModel` interface contains two methods for reference
    counting: gtk_tree_model_ref_node() and gtk_tree_model_unref_node().
    These two methods are optional to implement. The reference counting
    is meant as a way for views to let models know when nodes are being
    displayed. `GtkTreeView` will take a reference on a node when it is
    visible, which means the node is either in the toplevel or expanded.
    Being displayed does not mean that the node is currently directly
    visible to the user in the viewport. Based on this reference counting
    scheme a caching model, for example, can decide whether or not to cache
    a node based on the reference count. A file-system based model would
    not want to keep the entire file hierarchy in memory, but just the
    folders that are currently expanded in every current view.

    When working with reference counting, the following rules must be taken
    into account:

    - Never take a reference on a node without owning a reference on its parent.
    This means that all parent nodes of a referenced node must be referenced
    as well.

    - Outstanding references on a deleted node are not released. This is not
    possible because the node has already been deleted by the time the
    row-deleted signal is received.

    - Models are not obligated to emit a signal on rows of which none of its
    siblings are referenced. To phrase this differently, signals are only
    required for levels in which nodes are referenced. For the root level
    however, signals must be emitted at all times (however the root level
    is always referenced when any view is attached).



    Interface GtkTreeModel

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    @deprecated("This method is deprecated")
    def filter_new(self, root: Optional[TreePath] = None) -> TreeModel:
        """
        Creates a new `GtkTreeModel`, with @child_model as the child_model
        and @root as the virtual root.

        Parameters:
            root: A `GtkTreePath`

        Returns:
            TreeModel: A new `GtkTreeModel`.

        """
        ...

    @deprecated("This method is deprecated")
    def foreach(self, func: Callable[..., bool], *user_data: Any) -> None:
        """
        Calls @func on each node in model in a depth-first fashion.

        If @func returns %TRUE, then the tree ceases to be walked,
        and gtk_tree_model_foreach() returns.

        Parameters:
            func: a function to be called on each row
            user_data: user data to passed to @func

        Returns:

        """
        ...

    def get(self, treeiter, *columns): ...  # FIXME Function
    @deprecated("This method is deprecated")
    def get_column_type(self, index_: int) -> Type:
        """
        Returns the type of the column.

        Parameters:
            index_: the column index

        Returns:
            Type: the type of the column

        """
        ...

    @deprecated("This method is deprecated")
    def get_flags(self) -> TreeModelFlags:
        """
        Returns a set of flags supported by this interface.

        The flags are a bitwise combination of `GtkTreeModel`Flags.
        The flags supported should not change during the lifetime
        of the @tree_model.

        Parameters:


        Returns:
            TreeModelFlags: the flags supported by this interface

        """
        ...

    def get_iter(self, path): ...  # FIXME Function
    def get_iter_first(self) -> Optional[TreeIter]:  # CHECK Wrapped function
        """
        Initializes @iter with the first iterator in the tree
        (the one at the path \"0\").

        Returns %FALSE if the tree is empty, %TRUE otherwise.

        Parameters:


        Returns:
            TreeIter: the uninitialized `GtkTreeIter`
        """
        ...

    def get_iter_from_string(
        self, path_string: str
    ) -> Optional[TreeIter]:  # CHECK Wrapped function
        """
        Sets @iter to a valid iterator pointing to @path_string, if it
        exists.

        Otherwise, @iter is left invalid and %FALSE is returned.

        Parameters:
            path_string: a string representation of a `GtkTreePath`

        Returns:
            TreeIter: an uninitialized `GtkTreeIter`
        """
        ...

    @deprecated("This method is deprecated")
    def get_n_columns(self) -> int:
        """
        Returns the number of columns supported by @tree_model.

        Parameters:


        Returns:
            int: the number of columns

        """
        ...

    @deprecated("This method is deprecated")
    def get_path(self, iter: TreeIter) -> TreePath:
        """
        Returns a newly-created `GtkTreePath` referenced by @iter.

        This path should be freed with gtk_tree_path_free().

        Parameters:
            iter: the `GtkTreeIter`

        Returns:
            TreePath: a newly-created `GtkTreePath`

        """
        ...

    @deprecated("This method is deprecated")
    def get_string_from_iter(self, iter: TreeIter) -> Optional[str]:
        """
        Generates a string representation of the iter.

        This string is a “:” separated list of numbers.
        For example, “4:10:0:3” would be an acceptable
        return value for this string.

        Parameters:
            iter: a `GtkTreeIter`

        Returns:
            Optional[str]: a newly-allocated string

        """
        ...

    @deprecated("This method is deprecated")
    def get_value(self, iter: TreeIter, column: int) -> Any:
        """
        Initializes and sets @value to that at @column.

        When done with @value, g_value_unset() needs to be called
        to free any allocated memory.

        Parameters:
            iter: the `GtkTreeIter`
            column: the column to lookup the value at

        Returns:
            Any: an empty `GValue` to set
        """
        ...

    def iter_children(
        self, parent: Optional[TreeIter] = None
    ) -> Optional[TreeIter]:  # CHECK Wrapped function
        """
        Sets @iter to point to the first child of @parent.

        If @parent has no children, %FALSE is returned and @iter is
        set to be invalid. @parent will remain a valid node after this
        function has been called.

        If @parent is %NULL returns the first node, equivalent to
        `gtk_tree_model_get_iter_first (tree_model, iter);`

        Parameters:
            parent: the `GtkTreeIter`

        Returns:
            TreeIter: the new `GtkTreeIter` to be set to the child
        """
        ...

    @deprecated("This method is deprecated")
    def iter_has_child(self, iter: TreeIter) -> bool:
        """
        Returns %TRUE if @iter has children, %FALSE otherwise.

        Parameters:
            iter: the `GtkTreeIter` to test for children

        Returns:
            bool: %TRUE if @iter has children

        """
        ...

    @deprecated("This method is deprecated")
    def iter_n_children(self, iter: Optional[TreeIter] = None) -> int:
        """
        Returns the number of children that @iter has.

        As a special case, if @iter is %NULL, then the number
        of toplevel nodes is returned.

        Parameters:
            iter: the `GtkTreeIter`

        Returns:
            int: the number of children of @iter

        """
        ...

    def iter_next(self, aiter): ...  # FIXME Function
    def iter_nth_child(
        self, parent: Optional[TreeIter], n: int
    ) -> Optional[TreeIter]:  # CHECK Wrapped function
        """
        Sets @iter to be the child of @parent, using the given index.

        The first index is 0. If @n is too big, or @parent has no children,
        @iter is set to an invalid iterator and %FALSE is returned. @parent
        will remain a valid node after this function has been called. As a
        special case, if @parent is %NULL, then the @n-th root node
        is set.

        Parameters:
            parent: the `GtkTreeIter` to get the child from
            n: the index of the desired child

        Returns:
            TreeIter: the `GtkTreeIter` to set to the nth child
        """
        ...

    def iter_parent(
        self, child: TreeIter
    ) -> Optional[TreeIter]:  # CHECK Wrapped function
        """
        Sets @iter to be the parent of @child.

        If @child is at the toplevel, and doesn’t have a parent, then
        @iter is set to an invalid iterator and %FALSE is returned.
        @child will remain a valid node after this function has been
        called.

        @iter will be initialized before the lookup is performed, so @child
        and @iter cannot point to the same memory location.

        Parameters:
            child: the `GtkTreeIter`

        Returns:
            TreeIter: the new `GtkTreeIter` to set to the parent
        """
        ...

    def iter_previous(self, aiter): ...  # FIXME Function
    @deprecated("This method is deprecated")
    def ref_node(self, iter: TreeIter) -> None:
        """
        Lets the tree ref the node.

        This is an optional method for models to implement.
        To be more specific, models may ignore this call as it exists
        primarily for performance reasons.

        This function is primarily meant as a way for views to let
        caching models know when nodes are being displayed (and hence,
        whether or not to cache that node). Being displayed means a node
        is in an expanded branch, regardless of whether the node is currently
        visible in the viewport. For example, a file-system based model
        would not want to keep the entire file-hierarchy in memory,
        just the sections that are currently being displayed by
        every current view.

        A model should be expected to be able to get an iter independent
        of its reffed state.

        Parameters:
            iter: the `GtkTreeIter`

        Returns:

        """
        ...

    def row_changed(self, path, iter): ...  # FIXME Function
    def row_deleted(self, path): ...  # FIXME Function
    def row_has_child_toggled(self, path, iter): ...  # FIXME Function
    def row_inserted(self, path, iter): ...  # FIXME Function
    def rows_reordered(self, path, iter, new_order): ...  # FIXME Function
    def set_row(self, treeiter, row): ...  # FIXME Function
    def sort_new_with_model(self): ...  # FIXME Function
    @deprecated("This method is deprecated")
    def unref_node(self, iter: TreeIter) -> None:
        """
        Lets the tree unref the node.

        This is an optional method for models to implement.
        To be more specific, models may ignore this call as it exists
        primarily for performance reasons. For more information on what
        this means, see gtk_tree_model_ref_node().

        Please note that nodes that are deleted are not unreffed.

        Parameters:
            iter: the `GtkTreeIter`

        Returns:

        """
        ...

@deprecated("Use [class@Gtk.FilterListModel] instead.")
class TreeModelFilter(GObject.Object, TreeDragSource, TreeModel):
    """
    A `GtkTreeModel` which hides parts of an underlying tree model

    A `GtkTreeModelFilter` is a tree model which wraps another tree model,
    and can do the following things:

    - Filter specific rows, based on data from a “visible column”, a column
    storing booleans indicating whether the row should be filtered or not,
    or based on the return value of a “visible function”, which gets a
    model, iter and user_data and returns a boolean indicating whether the
    row should be filtered or not.

    - Modify the “appearance” of the model, using a modify function.
    This is extremely powerful and allows for just changing some
    values and also for creating a completely different model based
    on the given child model.

    - Set a different root node, also known as a “virtual root”. You can pass
    in a `GtkTreePath` indicating the root node for the filter at construction
    time.

    The basic API is similar to `GtkTreeModelSort`. For an example on its usage,
    see the section on `GtkTreeModelSort`.

    When using `GtkTreeModelFilter`, it is important to realize that
    `GtkTreeModelFilter` maintains an internal cache of all nodes which are
    visible in its clients. The cache is likely to be a subtree of the tree
    exposed by the child model. `GtkTreeModelFilter` will not cache the entire
    child model when unnecessary to not compromise the caching mechanism
    that is exposed by the reference counting scheme. If the child model
    implements reference counting, unnecessary signals may not be emitted
    because of reference counting rule 3, see the `GtkTreeModel`
    documentation. (Note that e.g. `GtkTreeStore` does not implement
    reference counting and will always emit all signals, even when
    the receiving node is not visible).

    Because of this, limitations for possible visible functions do apply.
    In general, visible functions should only use data or properties from
    the node for which the visibility state must be determined, its siblings
    or its parents. Usually, having a dependency on the state of any child
    node is not possible, unless references are taken on these explicitly.
    When no such reference exists, no signals may be received for these child
    nodes (see reference counting rule number 3 in the `GtkTreeModel` section).

    Determining the visibility state of a given node based on the state
    of its child nodes is a frequently occurring use case. Therefore,
    `GtkTreeModelFilter` explicitly supports this. For example, when a node
    does not have any children, you might not want the node to be visible.
    As soon as the first row is added to the node’s child level (or the
    last row removed), the node’s visibility should be updated.

    This introduces a dependency from the node on its child nodes. In order
    to accommodate this, `GtkTreeModelFilter` must make sure the necessary
    signals are received from the child model. This is achieved by building,
    for all nodes which are exposed as visible nodes to `GtkTreeModelFilter`'s
    clients, the child level (if any) and take a reference on the first node
    in this level. Furthermore, for every row-inserted, row-changed or
    row-deleted signal (also these which were not handled because the node
    was not cached), `GtkTreeModelFilter` will check if the visibility state
    of any parent node has changed.

    Beware, however, that this explicit support is limited to these two
    cases. For example, if you want a node to be visible only if two nodes
    in a child’s child level (2 levels deeper) are visible, you are on your
    own. In this case, either rely on `GtkTreeStore` to emit all signals
    because it does not implement reference counting, or for models that
    do implement reference counting, obtain references on these child levels
    yourself.

    :Constructors:

    ::

        TreeModelFilter(**properties)

    Object GtkTreeModelFilter

    Properties from GtkTreeModelFilter:
      child-model -> GtkTreeModel: child-model
      virtual-root -> GtkTreePath: virtual-root

    Signals from GtkTreeModel:
      row-changed (GtkTreePath, GtkTreeIter)
      row-inserted (GtkTreePath, GtkTreeIter)
      row-has-child-toggled (GtkTreePath, GtkTreeIter)
      row-deleted (GtkTreePath)
      rows-reordered (GtkTreePath, GtkTreeIter, gpointer)

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, TreeDragSource.Props, TreeModel.Props):
        child_model: TreeModel
        virtual_root: TreePath

    props: Props = ...
    parent: GObject.Object = ...
    priv: TreeModelFilterPrivate = ...
    def __init__(self, child_model: TreeModel = ..., virtual_root: TreePath = ...): ...
    @deprecated("This method is deprecated")
    def clear_cache(self) -> None:
        """
        This function should almost never be called. It clears the @filter
        of any cached iterators that haven’t been reffed with
        gtk_tree_model_ref_node(). This might be useful if the child model
        being filtered is static (and doesn’t change often) and there has been
        a lot of unreffed access to nodes. As a side effect of this function,
        all unreffed iters will be invalid.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def convert_child_iter_to_iter(self, child_iter: TreeIter) -> Tuple[bool, TreeIter]:
        """
        Sets @filter_iter to point to the row in @filter that corresponds to the
        row pointed at by @child_iter. If @filter_iter was not set, %FALSE is
        returned.

        Parameters:
            child_iter: A valid `GtkTreeIter` pointing to a row on the child model.

        Returns:
            bool: %TRUE, if @filter_iter was set, i.e. if @child_iter is a
        valid iterator pointing to a visible row in child model.
            TreeIter: An uninitialized `GtkTreeIter`
        """
        ...

    @deprecated("This method is deprecated")
    def convert_child_path_to_path(self, child_path: TreePath) -> Optional[TreePath]:
        """
        Converts @child_path to a path relative to @filter. That is, @child_path
        points to a path in the child model. The rerturned path will point to the
        same row in the filtered model. If @child_path isn’t a valid path on the
        child model or points to a row which is not visible in @filter, then %NULL
        is returned.

        Parameters:
            child_path: A `GtkTreePath` to convert.

        Returns:
            Optional[TreePath]: A newly allocated `GtkTreePath`

        """
        ...

    @deprecated("This method is deprecated")
    def convert_iter_to_child_iter(self, filter_iter: TreeIter) -> TreeIter:
        """
        Sets @child_iter to point to the row pointed to by @filter_iter.

        Parameters:
            filter_iter: A valid `GtkTreeIter` pointing to a row on @filter.

        Returns:
            TreeIter: An uninitialized `GtkTreeIter`
        """
        ...

    @deprecated("This method is deprecated")
    def convert_path_to_child_path(self, filter_path: TreePath) -> Optional[TreePath]:
        """
        Converts @filter_path to a path on the child model of @filter. That is,
        @filter_path points to a location in @filter. The returned path will
        point to the same location in the model not being filtered. If @filter_path
        does not point to a location in the child model, %NULL is returned.

        Parameters:
            filter_path: A `GtkTreePath` to convert.

        Returns:
            Optional[TreePath]: A newly allocated `GtkTreePath`

        """
        ...

    def do_modify(
        self, child_model: TreeModel, iter: TreeIter, value: Any, column: int
    ) -> None: ...
    def do_visible(self, child_model: TreeModel, iter: TreeIter) -> bool: ...
    @deprecated("This method is deprecated")
    def get_model(self) -> TreeModel:
        """
        Returns a pointer to the child model of @filter.

        Parameters:


        Returns:
            TreeModel: A pointer to a `GtkTreeModel`

        """
        ...

    @deprecated("This method is deprecated")
    def refilter(self) -> None:
        """
        Emits ::row_changed for each row in the child model, which causes
        the filter to re-evaluate whether a row is visible or not.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def set_modify_func(
        self, types: Sequence[Type], func: Callable[..., Any], *data: Any
    ) -> None:
        """
        With the @n_columns and @types parameters, you give an array of column
        types for this model (which will be exposed to the parent model/view).
        The @func, @data and @destroy parameters are for specifying the modify
        function. The modify function will get called for each
        data access, the goal of the modify function is to return the data which
        should be displayed at the location specified using the parameters of the
        modify function.

        Note that gtk_tree_model_filter_set_modify_func()
        can only be called once for a given filter model.

        Parameters:
            types: The `GType`s of the columns.
            func: A `GtkTreeModelFilterModifyFunc`
            data: User data to pass to the modify function

        Returns:

        """
        ...

    def set_value(self, iter, column, value): ...  # FIXME Function
    @deprecated("This method is deprecated")
    def set_visible_column(self, column: int) -> None:
        """
        Sets @column of the child_model to be the column where @filter should
        look for visibility information. @columns should be a column of type
        %G_TYPE_BOOLEAN, where %TRUE means that a row is visible, and %FALSE
        if not.

        Note that gtk_tree_model_filter_set_visible_func() or
        gtk_tree_model_filter_set_visible_column() can only be called
        once for a given filter model.

        Parameters:
            column: A `int` which is the column containing the visible information

        Returns:

        """
        ...

    def set_visible_func(self, func, data=None): ...  # FIXME Function

class TreeModelFilterClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeModelFilterClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    visible: Callable[[TreeModelFilter, TreeModel, TreeIter], bool] = ...
    modify: Callable[[TreeModelFilter, TreeModel, TreeIter, Any, int], None] = ...
    padding: list[None] = ...

class TreeModelFilterPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class TreeModelIface(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeModelIface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    row_changed: Callable[[TreeModel, TreePath, TreeIter], None] = ...
    row_inserted: Callable[[TreeModel, TreePath, TreeIter], None] = ...
    row_has_child_toggled: Callable[[TreeModel, TreePath, TreeIter], None] = ...
    row_deleted: Callable[[TreeModel, TreePath], None] = ...
    rows_reordered: Callable[[TreeModel, TreePath, TreeIter, int], None] = ...
    get_flags: Callable[[TreeModel], TreeModelFlags] = ...
    get_n_columns: Callable[[TreeModel], int] = ...
    get_column_type: Callable[[TreeModel, int], Type] = ...
    get_iter: Callable[[TreeModel, TreePath], Tuple[bool, TreeIter]] = ...
    get_path: Callable[[TreeModel, TreeIter], TreePath] = ...
    get_value: Callable[[TreeModel, TreeIter, int], Any] = ...
    iter_next: Callable[[TreeModel, TreeIter], bool] = ...
    iter_previous: Callable[[TreeModel, TreeIter], bool] = ...
    iter_children: Callable[[TreeModel, Optional[TreeIter]], Tuple[bool, TreeIter]] = (
        ...
    )
    iter_has_child: Callable[[TreeModel, TreeIter], bool] = ...
    iter_n_children: Callable[[TreeModel, Optional[TreeIter]], int] = ...
    iter_nth_child: Callable[
        [TreeModel, Optional[TreeIter], int], Tuple[bool, TreeIter]
    ] = ...
    iter_parent: Callable[[TreeModel, TreeIter], Tuple[bool, TreeIter]] = ...
    ref_node: Callable[[TreeModel, TreeIter], None] = ...
    unref_node: Callable[[TreeModel, TreeIter], None] = ...

class TreeModelRow:
    class Props: ...
    next = ...  # FIXME Constant
    parent = ...  # FIXME Constant
    path = ...  # FIXME Constant
    previous = ...  # FIXME Constant

    def get_next(self): ...  # FIXME Function
    def get_parent(self): ...  # FIXME Function
    def get_previous(self): ...  # FIXME Function
    def iterchildren(self): ...  # FIXME Function

class TreeModelRowIter:
    class Props: ...

@deprecated("Use [class@Gtk.SortListModel] instead")
class TreeModelSort(GObject.Object, TreeDragSource, TreeModel, TreeSortable):
    """
    A GtkTreeModel which makes an underlying tree model sortable

    The `GtkTreeModelSort` is a model which implements the `GtkTreeSortable`
    interface. It does not hold any data itself, but rather is created with
    a child model and proxies its data. It has identical column types to
    this child model, and the changes in the child are propagated. The
    primary purpose of this model is to provide a way to sort a different
    model without modifying it. Note that the sort function used by
    `GtkTreeModelSort` is not guaranteed to be stable.

    The use of this is best demonstrated through an example. In the
    following sample code we create two `GtkTreeView` widgets each with a
    view of the same data. As the model is wrapped here by a
    `GtkTreeModelSort`, the two `GtkTreeView`s can each sort their
    view of the data without affecting the other. By contrast, if we
    simply put the same model in each widget, then sorting the first would
    sort the second.

    ## Using a `GtkTreeModelSort`

    |[<!-- language=\"C\" -->
    {
    GtkTreeView *tree_view1;
    GtkTreeView *tree_view2;
    GtkTreeModel *sort_model1;
    GtkTreeModel *sort_model2;
    GtkTreeModel *child_model;

    // get the child model
    child_model = get_my_model ();

    // Create the first tree
    sort_model1 = gtk_tree_model_sort_new_with_model (child_model);
    tree_view1 = gtk_tree_view_new_with_model (sort_model1);

    // Create the second tree
    sort_model2 = gtk_tree_model_sort_new_with_model (child_model);
    tree_view2 = gtk_tree_view_new_with_model (sort_model2);

    // Now we can sort the two models independently
    gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model1),
    COLUMN_1, GTK_SORT_ASCENDING);
    gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (sort_model2),
    COLUMN_1, GTK_SORT_DESCENDING);
    }
    ]|

    To demonstrate how to access the underlying child model from the sort
    model, the next example will be a callback for the `GtkTreeSelection`
    `GtkTreeSelection::changed` signal. In this callback, we get a string
    from COLUMN_1 of the model. We then modify the string, find the same
    selected row on the child model, and change the row there.

    ## Accessing the child model of in a selection changed callback

    |[<!-- language=\"C\" -->
    void
    selection_changed (GtkTreeSelection *selection, gpointer data)
    {
    GtkTreeModel *sort_model = NULL;
    GtkTreeModel *child_model;
    GtkTreeIter sort_iter;
    GtkTreeIter child_iter;
    char *some_data = NULL;
    char *modified_data;

    // Get the current selected row and the model.
    if (! gtk_tree_selection_get_selected (selection,
    &sort_model,
    &sort_iter))
    return;

    // Look up the current value on the selected row and get
    // a new value to change it to.
    gtk_tree_model_get (GTK_TREE_MODEL (sort_model), &sort_iter,
    COLUMN_1, &some_data,
    -1);

    modified_data = change_the_data (some_data);
    g_free (some_data);

    // Get an iterator on the child model, instead of the sort model.
    gtk_tree_model_sort_convert_iter_to_child_iter (GTK_TREE_MODEL_SORT (sort_model),
    &child_iter,
    &sort_iter);

    // Get the child model and change the value of the row. In this
    // example, the child model is a GtkListStore. It could be any other
    // type of model, though.
    child_model = gtk_tree_model_sort_get_model (GTK_TREE_MODEL_SORT (sort_model));
    gtk_list_store_set (GTK_LIST_STORE (child_model), &child_iter,
    COLUMN_1, &modified_data,
    -1);
    g_free (modified_data);
    }
    ]|

    :Constructors:

    ::

        TreeModelSort(**properties)
        new_with_model(child_model:Gtk.TreeModel) -> Gtk.TreeModelSort

    Object GtkTreeModelSort

    Properties from GtkTreeModelSort:
      model -> GtkTreeModel: model

    Signals from GtkTreeModel:
      row-changed (GtkTreePath, GtkTreeIter)
      row-inserted (GtkTreePath, GtkTreeIter)
      row-has-child-toggled (GtkTreePath, GtkTreeIter)
      row-deleted (GtkTreePath)
      rows-reordered (GtkTreePath, GtkTreeIter, gpointer)

    Signals from GtkTreeSortable:
      sort-column-changed ()

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        GObject.Object.Props, TreeDragSource.Props, TreeModel.Props, TreeSortable.Props
    ):
        model: TreeModel

    props: Props = ...
    parent: GObject.Object = ...
    priv: TreeModelSortPrivate = ...
    def __init__(self, model: TreeModel = ...): ...
    @deprecated("This method is deprecated")
    def clear_cache(self) -> None:
        """
        This function should almost never be called. It clears the @tree_model_sort
        of any cached iterators that haven’t been reffed with
        gtk_tree_model_ref_node(). This might be useful if the child model being
        sorted is static (and doesn’t change often) and there has been a lot of
        unreffed access to nodes. As a side effect of this function, all unreffed
        iters will be invalid.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def convert_child_iter_to_iter(self, child_iter: TreeIter) -> Tuple[bool, TreeIter]:
        """
        Sets @sort_iter to point to the row in @tree_model_sort that corresponds to
        the row pointed at by @child_iter. If @sort_iter was not set, %FALSE
        is returned. Note: a boolean is only returned since 2.14.

        Parameters:
            child_iter: A valid `GtkTreeIter` pointing to a row on the child model

        Returns:
            bool: %TRUE, if @sort_iter was set, i.e. if @sort_iter is a
        valid iterator pointer to a visible row in the child model.
            TreeIter: An uninitialized `GtkTreeIter`
        """
        ...

    @deprecated("This method is deprecated")
    def convert_child_path_to_path(self, child_path: TreePath) -> Optional[TreePath]:
        """
        Converts @child_path to a path relative to @tree_model_sort. That is,
        @child_path points to a path in the child model. The returned path will
        point to the same row in the sorted model. If @child_path isn’t a valid
        path on the child model, then %NULL is returned.

        Parameters:
            child_path: A `GtkTreePath` to convert

        Returns:
            Optional[TreePath]: A newly allocated `GtkTreePath`

        """
        ...

    @deprecated("This method is deprecated")
    def convert_iter_to_child_iter(self, sorted_iter: TreeIter) -> TreeIter:
        """
        Sets @child_iter to point to the row pointed to by @sorted_iter.

        Parameters:
            sorted_iter: A valid `GtkTreeIter` pointing to a row on @tree_model_sort.

        Returns:
            TreeIter: An uninitialized `GtkTreeIter`
        """
        ...

    @deprecated("This method is deprecated")
    def convert_path_to_child_path(self, sorted_path: TreePath) -> Optional[TreePath]:
        """
        Converts @sorted_path to a path on the child model of @tree_model_sort.
        That is, @sorted_path points to a location in @tree_model_sort. The
        returned path will point to the same location in the model not being
        sorted. If @sorted_path does not point to a location in the child model,
        %NULL is returned.

        Parameters:
            sorted_path: A `GtkTreePath` to convert

        Returns:
            Optional[TreePath]: A newly allocated `GtkTreePath`

        """
        ...

    def get_model(self) -> TreeModel:
        """
        Returns the model the `GtkTreeModelSort` is sorting.

        Parameters:


        Returns:
            TreeModel: the \"child model\" being sorted

        """
        ...

    @deprecated("This method is deprecated")
    def iter_is_valid(self, iter: TreeIter) -> bool:
        """
        > This function is slow. Only use it for debugging and/or testing
        > purposes.

        Checks if the given iter is a valid iter for this `GtkTreeModelSort`.

        Parameters:
            iter: A `GtkTreeIter`

        Returns:
            bool: %TRUE if the iter is valid, %FALSE if the iter is invalid.

        """
        ...

    @classmethod
    def new_with_model(cls, child_model: TreeModel) -> TreeModelSort:
        """
        Creates a new `GtkTreeModelSort`, with @child_model as the child model.

        Parameters:
            child_model: A `GtkTreeModel`

        Returns:
            TreeModelSort: A new `GtkTreeModelSort`.

        """
        ...

    @deprecated("This method is deprecated")
    def reset_default_sort_func(self) -> None:
        """
        This resets the default sort function to be in the “unsorted” state. That
        is, it is in the same order as the child model. It will re-sort the model
        to be in the same order as the child model only if the `GtkTreeModelSort`
        is in “unsorted” state.

        Parameters:


        Returns:

        """
        ...

class TreeModelSortClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeModelSortClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    padding: list[None] = ...

class TreeModelSortPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class TreePath(GObject.GBoxed):
    """
    An opaque structure representing a path to a row in a model.

    :Constructors:

    ::

        new() -> Gtk.TreePath
        new_first() -> Gtk.TreePath
        new_from_indices(indices:list) -> Gtk.TreePath
        new_from_string(path:str) -> Gtk.TreePath or None
    """

    class Props(GObject.GBoxed.Props): ...

    @deprecated("This method is deprecated")
    def append_index(self, index_: int) -> None:
        """
        Appends a new index to a path.

        As a result, the depth of the path is increased.

        Parameters:
            index_: the index

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def compare(self, b: TreePath) -> int:
        """
        Compares two paths.

        If @a appears before @b in a tree, then -1 is returned.
        If @b appears before @a, then 1 is returned.
        If the two nodes are equal, then 0 is returned.

        Parameters:
            b: a `GtkTreePath` to compare with

        Returns:
            int: the relative positions of @a and @b

        """
        ...

    @deprecated("This method is deprecated")
    def copy(self) -> TreePath:
        """
        Creates a new `GtkTreePath` as a copy of @path.

        Parameters:


        Returns:
            TreePath: a new `GtkTreePath`

        """
        ...

    @deprecated("This method is deprecated")
    def down(self) -> None:
        """
        Moves @path to point to the first child of the current path.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def free(self) -> None:
        """
        Frees @path. If @path is %NULL, it simply returns.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def get_depth(self) -> int:
        """
        Returns the current depth of @path.

        Parameters:


        Returns:
            int: The depth of @path

        """
        ...

    @deprecated("This method is deprecated")
    def get_indices(self) -> Optional[list[int]]:
        """
        Returns the current indices of @path.

        This is an array of integers, each representing a node in a tree.
        This value should not be freed.

        The length of the array can be obtained with gtk_tree_path_get_depth().

        Parameters:


        Returns:
            Optional[list[int]]: The current indices

        """
        ...

    @deprecated("This method is deprecated")
    def is_ancestor(self, descendant: TreePath) -> bool:
        """
        Returns %TRUE if @descendant is a descendant of @path.

        Parameters:
            descendant: another `GtkTreePath`

        Returns:
            bool: %TRUE if @descendant is contained inside @path

        """
        ...

    @deprecated("This method is deprecated")
    def is_descendant(self, ancestor: TreePath) -> bool:
        """
        Returns %TRUE if @path is a descendant of @ancestor.

        Parameters:
            ancestor: another `GtkTreePath`

        Returns:
            bool: %TRUE if @ancestor contains @path somewhere below it

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new(cls) -> TreePath:
        """
        Creates a new `GtkTreePath`
        This refers to a row.

        Parameters:


        Returns:
            TreePath: A newly created `GtkTreePath`.

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new_first(cls) -> TreePath:
        """
        Creates a new `GtkTreePath`.

        The string representation of this path is “0”.

        Parameters:


        Returns:
            TreePath: A new `GtkTreePath`

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new_from_indices(cls, indices: Sequence[int]) -> TreePath:
        """
        Creates a new path with @first_index and @varargs as indices.

        Parameters:
            indices:

        Returns:
            TreePath: A newly created `GtkTreePath`

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new_from_string(cls, path: str) -> Optional[TreePath]:
        """
        Creates a new `GtkTreePath` initialized to @path.

        @path is expected to be a colon separated list of numbers.
        For example, the string “10:4:0” would create a path of depth
        3 pointing to the 11th child of the root node, the 5th
        child of that 11th child, and the 1st child of that 5th child.
        If an invalid path string is passed in, %NULL is returned.

        Parameters:
            path: The string representation of a path

        Returns:
            Optional[TreePath]: A newly-created `GtkTreePath`

        """
        ...

    @deprecated("This method is deprecated")
    def next(self) -> None:
        """
        Moves the @path to point to the next node at the current depth.

        Parameters:


        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def prepend_index(self, index_: int) -> None:
        """
        Prepends a new index to a path.

        As a result, the depth of the path is increased.

        Parameters:
            index_: the index

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def prev(self) -> bool:
        """
        Moves the @path to point to the previous node at the
        current depth, if it exists.

        Parameters:


        Returns:
            bool: %TRUE if @path has a previous node, and
        the move was made

        """
        ...

    @deprecated("This method is deprecated")
    def to_string(self) -> Optional[str]:
        """
        Generates a string representation of the path.

        This string is a “:” separated list of numbers.
        For example, “4:10:0:3” would be an acceptable
        return value for this string. If the path has
        depth 0, %NULL is returned.

        Parameters:


        Returns:
            Optional[str]: A newly-allocated string

        """
        ...

    @deprecated("This method is deprecated")
    def up(self) -> bool:
        """
        Moves the @path to point to its parent node, if it has a parent.

        Parameters:


        Returns:
            bool: %TRUE if @path has a parent, and the move was made

        """
        ...

class TreeRowData(GObject.GBoxed):
    class Props(GObject.GBoxed.Props): ...

class TreeRowReference(GObject.GBoxed):
    """
    A GtkTreeRowReference tracks model changes so that it always refers to the
    same row (a `GtkTreePath` refers to a position, not a fixed row). Create a
    new GtkTreeRowReference with gtk_tree_row_reference_new().

    :Constructors:

    ::

        new(model:Gtk.TreeModel, path:Gtk.TreePath) -> Gtk.TreeRowReference or None
        new_proxy(proxy:GObject.Object, model:Gtk.TreeModel, path:Gtk.TreePath) -> Gtk.TreeRowReference or None
    """

    class Props(GObject.GBoxed.Props): ...

    @deprecated("This method is deprecated")
    def copy(self) -> TreeRowReference:
        """
        Copies a `GtkTreeRowReference`.

        Parameters:


        Returns:
            TreeRowReference: a copy of @reference

        """
        ...

    @deprecated("This method is deprecated")
    @staticmethod
    def deleted(proxy: GObject.Object, path: TreePath) -> None:
        """
        Lets a set of row reference created by
        gtk_tree_row_reference_new_proxy() know that the
        model emitted the ::row-deleted signal.

        Parameters:
            proxy: a `GObject`
            path: the path position that was deleted

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def free(self) -> None:
        """
        Free’s @reference. @reference may be %NULL

        Parameters:


        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    def get_model(self) -> TreeModel:
        """
        Returns the model that the row reference is monitoring.

        Parameters:


        Returns:
            TreeModel: the model

        """
        ...

    @deprecated("This method is deprecated")
    def get_path(self) -> Optional[TreePath]:
        """
        Returns a path that the row reference currently points to,
        or %NULL if the path pointed to is no longer valid.

        Parameters:


        Returns:
            Optional[TreePath]: a current path

        """
        ...

    @deprecated("This method is deprecated")
    @staticmethod
    def inserted(proxy: GObject.Object, path: TreePath) -> None:
        """
        Lets a set of row reference created by
        gtk_tree_row_reference_new_proxy() know that the
        model emitted the ::row-inserted signal.

        Parameters:
            proxy: a `GObject`
            path: the row position that was inserted

        Returns:

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new(cls, model: TreeModel, path: TreePath) -> Optional[TreeRowReference]:
        """
        Creates a row reference based on @path.

        This reference will keep pointing to the node pointed to
        by @path, so long as it exists. Any changes that occur on @model are
        propagated, and the path is updated appropriately. If
        @path isn’t a valid path in @model, then %NULL is returned.

        Parameters:
            model: a `GtkTreeModel`
            path: a valid `GtkTreePath` to monitor

        Returns:
            Optional[TreeRowReference]: a newly allocated `GtkTreeRowReference`

        """
        ...

    @deprecated("This method is deprecated")
    @classmethod
    def new_proxy(
        cls, proxy: GObject.Object, model: TreeModel, path: TreePath
    ) -> Optional[TreeRowReference]:
        """
        You do not need to use this function.

        Creates a row reference based on @path.

        This reference will keep pointing to the node pointed to
        by @path, so long as it exists. If @path isn’t a valid
        path in @model, then %NULL is returned. However, unlike
        references created with gtk_tree_row_reference_new(), it
        does not listen to the model for changes. The creator of
        the row reference must do this explicitly using
        gtk_tree_row_reference_inserted(), gtk_tree_row_reference_deleted(),
        gtk_tree_row_reference_reordered().

        These functions must be called exactly once per proxy when the
        corresponding signal on the model is emitted. This single call
        updates all row references for that proxy. Since built-in GTK
        objects like `GtkTreeView` already use this mechanism internally,
        using them as the proxy object will produce unpredictable results.
        Further more, passing the same object as @model and @proxy
        doesn’t work for reasons of internal implementation.

        This type of row reference is primarily meant by structures that
        need to carefully monitor exactly when a row reference updates
        itself, and is not generally needed by most applications.

        Parameters:
            proxy: a proxy `GObject`
            model: a `GtkTreeModel`
            path: a valid `GtkTreePath` to monitor

        Returns:
            Optional[TreeRowReference]: a newly allocated `GtkTreeRowReference`

        """
        ...

    @deprecated("This method is deprecated")
    def valid(self) -> bool:
        """
        Returns %TRUE if the @reference is non-%NULL and refers to
        a current valid path.

        Parameters:


        Returns:
            bool: %TRUE if @reference points to a valid path

        """
        ...

@deprecated("Use [iface@Gtk.SelectionModel] instead")
class TreeSelection(GObject.Object):
    """
    The selection object for GtkTreeView

    The `GtkTreeSelection` object is a helper object to manage the selection
    for a `GtkTreeView` widget. The `GtkTreeSelection` object is
    automatically created when a new `GtkTreeView` widget is created, and
    cannot exist independently of this widget. The primary reason the
    `GtkTreeSelection` objects exists is for cleanliness of code and API.
    That is, there is no conceptual reason all these functions could not be
    methods on the `GtkTreeView` widget instead of a separate function.

    The `GtkTreeSelection` object is gotten from a `GtkTreeView` by calling
    gtk_tree_view_get_selection(). It can be manipulated to check the
    selection status of the tree, as well as select and deselect individual
    rows. Selection is done completely view side. As a result, multiple
    views of the same model can have completely different selections.
    Additionally, you cannot change the selection of a row on the model that
    is not currently displayed by the view without expanding its parents
    first.

    One of the important things to remember when monitoring the selection of
    a view is that the `GtkTreeSelection`::changed signal is mostly a hint.
    That is, it may only emit one signal when a range of rows is selected.
    Additionally, it may on occasion emit a `GtkTreeSelection`::changed signal
    when nothing has happened (mostly as a result of programmers calling
    select_row on an already selected row).

    :Constructors:

    ::

        TreeSelection(**properties)

    Object GtkTreeSelection

    Signals from GtkTreeSelection:
      changed ()

    Properties from GtkTreeSelection:
      mode -> GtkSelectionMode: mode

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        mode: SelectionMode
        """
        Selection mode.
        See gtk_tree_selection_set_mode() for more information on this property.
        """

    props: Props = ...
    def __init__(self, mode: SelectionMode = ...): ...
    @deprecated("Use GtkListView or GtkColumnView")
    def count_selected_rows(self) -> int:
        """
        Returns the number of rows that have been selected in @tree.

        Parameters:


        Returns:
            int: The number of rows selected.

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def get_mode(self) -> SelectionMode:
        """
        Gets the selection mode for @selection. See
        gtk_tree_selection_set_mode().

        Parameters:


        Returns:
            SelectionMode: the current selection mode

        """
        ...

    def get_selected(self): ...  # FIXME Function
    def get_selected_rows(self): ...  # FIXME Function
    @deprecated("Use GtkListView or GtkColumnView")
    def get_tree_view(self) -> TreeView:
        """
        Returns the tree view associated with @selection.

        Parameters:


        Returns:
            TreeView: A `GtkTreeView`

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def iter_is_selected(self, iter: TreeIter) -> bool:
        """
        Returns %TRUE if the row at @iter is currently selected.

        Parameters:
            iter: A valid `GtkTreeIter`

        Returns:
            bool: %TRUE, if @iter is selected

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def path_is_selected(self, path: TreePath) -> bool:
        """
        Returns %TRUE if the row pointed to by @path is currently selected. If @path
        does not point to a valid location, %FALSE is returned

        Parameters:
            path: A `GtkTreePath` to check selection on.

        Returns:
            bool: %TRUE if @path is selected.

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def select_all(self) -> None:
        """
        Selects all the nodes. @selection must be set to %GTK_SELECTION_MULTIPLE
        mode.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def select_iter(self, iter: TreeIter) -> None:
        """
        Selects the specified iterator.

        Parameters:
            iter: The `GtkTreeIter` to be selected.

        Returns:

        """
        ...

    def select_path(self, path): ...  # FIXME Function
    @deprecated("Use GtkListView or GtkColumnView")
    def select_range(self, start_path: TreePath, end_path: TreePath) -> None:
        """
        Selects a range of nodes, determined by @start_path and @end_path inclusive.
        @selection must be set to %GTK_SELECTION_MULTIPLE mode.

        Parameters:
            start_path: The initial node of the range.
            end_path: The final node of the range.

        Returns:

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def selected_foreach(self, func: Callable[..., None], *data: Any) -> None:
        """
        Calls a function for each selected node. Note that you cannot modify
        the tree or selection from within this function. As a result,
        gtk_tree_selection_get_selected_rows() might be more useful.

        Parameters:
            func: The function to call for each selected node.
            data: user data to pass to the function.

        Returns:

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def set_mode(self, type: SelectionMode) -> None:
        """
        Sets the selection mode of the @selection. If the previous type was
        %GTK_SELECTION_MULTIPLE, then the anchor is kept selected, if it was
        previously selected.

        Parameters:
            type: The selection mode

        Returns:

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def set_select_function(
        self, func: Optional[Callable[..., bool]] = None, *data: Any
    ) -> None:
        """
        Sets the selection function.

        If set, this function is called before any node is selected or unselected,
        giving some control over which nodes are selected. The select function
        should return %TRUE if the state of the node may be toggled, and %FALSE
        if the state of the node should be left unchanged.

        Parameters:
            func: The selection function. May be %NULL
            data: The selection function’s data. May be %NULL

        Returns:

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def unselect_all(self) -> None:
        """
        Unselects all the nodes.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def unselect_iter(self, iter: TreeIter) -> None:
        """
        Unselects the specified iterator.

        Parameters:
            iter: The `GtkTreeIter` to be unselected.

        Returns:

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def unselect_path(self, path: TreePath) -> None:
        """
        Unselects the row at @path.

        Parameters:
            path: The `GtkTreePath` to be unselected.

        Returns:

        """
        ...

    @deprecated("Use GtkListView or GtkColumnView")
    def unselect_range(self, start_path: TreePath, end_path: TreePath) -> None:
        """
        Unselects a range of nodes, determined by @start_path and @end_path
        inclusive.

        Parameters:
            start_path: The initial node of the range.
            end_path: The initial node of the range.

        Returns:

        """
        ...

@deprecated(
    "There is no replacement for this interface. You should use [class@Gtk.SortListModel] to wrap your list model instead"
)
class TreeSortable(GObject.GInterface):
    """
    The interface for sortable models used by GtkTreeView

    `GtkTreeSortable` is an interface to be implemented by tree models which
    support sorting. The `GtkTreeView` uses the methods provided by this interface
    to sort the model.



    Interface GtkTreeSortable

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.GInterface.Props): ...

    def get_sort_column_id(
        self,
    ) -> Tuple[int, SortType] | Tuple[None, None]:  # CHECK Wrapped function
        """
        Fills in @sort_column_id and @order with the current sort column and the
        order. It returns %TRUE unless the @sort_column_id is
        %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or
        %GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.

        Parameters:


        Returns:
            int: The sort column id to be filled in
            SortType: The `GtkSortType` to be filled in
        """
        ...

    @deprecated("This method is deprecated")
    def has_default_sort_func(self) -> bool:
        """
        Returns %TRUE if the model has a default sort function. This is used
        primarily by GtkTreeViewColumns in order to determine if a model can
        go back to the default state, or not.

        Parameters:


        Returns:
            bool: %TRUE, if the model has a default sort function

        """
        ...

    def set_default_sort_func(self, sort_func, user_data=None): ...  # FIXME Function
    @deprecated("This method is deprecated")
    def set_sort_column_id(self, sort_column_id: int, order: SortType) -> None:
        """
        Sets the current sort column to be @sort_column_id. The @sortable will
        resort itself to reflect this change, after emitting a
        `GtkTreeSortable::sort-column-changed` signal. @sort_column_id may either be
        a regular column id, or one of the following special values:

        - %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: the default sort function
        will be used, if it is set

        - %GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: no sorting will occur

        Parameters:
            sort_column_id: the sort column id to set
            order: The sort order of the column

        Returns:

        """
        ...

    def set_sort_func(
        self, sort_column_id, sort_func, user_data=None
    ): ...  # FIXME Function
    @deprecated("This method is deprecated")
    def sort_column_changed(self) -> None:
        """
        Emits a `GtkTreeSortable::sort-column-changed` signal on @sortable.

        Parameters:


        Returns:

        """
        ...

class TreeSortableIface(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeSortableIface()
    """

    class Props(GObject.GPointer.Props): ...
    g_iface: GObject.TypeInterface = ...
    sort_column_changed: Callable[[TreeSortable], None] = ...
    get_sort_column_id: Callable[[TreeSortable], Tuple[bool, int, SortType]] = ...
    set_sort_column_id: Callable[[TreeSortable, int, SortType], None] = ...
    set_sort_func: Callable[..., None] = ...
    set_default_sort_func: Callable[..., None] = ...
    has_default_sort_func: Callable[[TreeSortable], bool] = ...

@deprecated("Use [class@Gtk.TreeListModel] instead")
class TreeStore(
    GObject.Object, Buildable, TreeDragDest, TreeDragSource, TreeModel, TreeSortable
):
    """
    A tree-like data structure that can be used with the [class@Gtk.TreeView].

    The `GtkTreeStore` object is a list model for use with a `GtkTreeView`
    widget. It implements the [iface@Gtk.TreeModel] interface, and consequently,
    can use all of the methods available there. It also implements the
    [iface@Gtk.TreeSortable] interface so it can be sorted by the view.
    Finally, it also implements the tree [drag][iface@Gtk.TreeDragSource]
    and [drop][iface@Gtk.TreeDragDest] interfaces.

    `GtkTreeStore` is deprecated since GTK 4.10, and should not be used in newly
    written code. You should use [class@Gtk.TreeListModel] for a tree-like model
    object.

    ## GtkTreeStore as GtkBuildable

    The GtkTreeStore implementation of the `GtkBuildable` interface allows
    to specify the model columns with a `<columns>` element that may contain
    multiple `<column>` elements, each specifying one model column. The “type”
    attribute specifies the data type for the column.

    An example of a UI Definition fragment for a tree store:

    ```xml
    <object class=\"GtkTreeStore\">
    <columns>
    <column type=\"gchararray\"/>
    <column type=\"gchararray\"/>
    <column type=\"gint\"/>
    </columns>
    </object>
    ```

    :Constructors:

    ::

        TreeStore(**properties)
        new(types:list) -> Gtk.TreeStore

    Object GtkTreeStore

    Signals from GtkTreeModel:
      row-changed (GtkTreePath, GtkTreeIter)
      row-inserted (GtkTreePath, GtkTreeIter)
      row-has-child-toggled (GtkTreePath, GtkTreeIter)
      row-deleted (GtkTreePath)
      rows-reordered (GtkTreePath, GtkTreeIter, gpointer)

    Signals from GtkTreeSortable:
      sort-column-changed ()

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        GObject.Object.Props,
        Buildable.Props,
        TreeDragDest.Props,
        TreeDragSource.Props,
        TreeModel.Props,
        TreeSortable.Props,
    ): ...
    parent: GObject.Object = ...
    priv: TreeStorePrivate = ...
    def append(self, parent, row=None): ...  # FIXME Function
    @deprecated("Use [class@Gtk.TreeListModel] instead")
    def clear(self) -> None:
        """
        Removes all rows from @tree_store

        Parameters:


        Returns:

        """
        ...

    def insert(self, parent, position, row=None): ...  # FIXME Function
    def insert_after(self, parent, sibling, row=None): ...  # FIXME Function
    def insert_before(self, parent, sibling, row=None): ...  # FIXME Function
    @deprecated("Use [class@Gtk.TreeListModel] instead")
    def insert_with_values(
        self,
        parent: Optional[TreeIter],
        position: int,
        columns: Sequence[int],
        values: Sequence[Any],
    ) -> TreeIter:
        """
        Creates a new row at the given @position.

        The @iter parameter will be changed to point to this new row.

        If @position is -1, or larger than the number of rows on the list, then
        the new row will be appended to the list. The row will be filled with
        the values given to this function.

        Calling

        gtk_tree_store_insert_with_values (tree_store, iter, position, ...)

        has the same effect as calling

        ```c
        gtk_tree_store_insert (tree_store, iter, position);
        gtk_tree_store_set (tree_store, iter, ...);
        ```

        with the different that the former will only emit a row_inserted signal,
        while the latter will emit row_inserted, row_changed and if the tree store
        is sorted, rows_reordered.

        Since emitting the rows_reordered signal repeatedly can affect the
        performance of the program, gtk_tree_store_insert_with_values() should
        generally be preferred when inserting rows in a sorted tree store.

        Parameters:
            parent: A valid `GtkTreeIter`
            position: position to insert the new row, or -1 to append after existing rows
            columns:
            values:

        Returns:
            TreeIter: An unset `GtkTreeIter` to set the new row
        """
        ...

    @deprecated("Use [class@Gtk.TreeListModel] instead")
    def is_ancestor(self, iter: TreeIter, descendant: TreeIter) -> bool:
        """
        Checks if @iter is an ancestor of @descendant.

        Parameters:
            iter: A valid `GtkTreeIter`
            descendant: A valid `GtkTreeIter`

        Returns:
            bool: true if @iter is an ancestor of @descendant, and false otherwise

        """
        ...

    @deprecated("Use [class@Gtk.TreeListModel] instead")
    def iter_depth(self, iter: TreeIter) -> int:
        """
        Returns the depth of the position pointed by the iterator

        The depth will be 0 for anything on the root level, 1 for anything down
        a level, etc.

        Parameters:
            iter: A valid `GtkTreeIter`

        Returns:
            int: The depth of the position pointed by the iterator

        """
        ...

    @deprecated("Use [class@Gtk.TreeListModel] instead")
    def iter_is_valid(self, iter: TreeIter) -> bool:
        """
        Checks if the given iter is a valid iter for this `GtkTreeStore`.

        This function is slow. Only use it for debugging and/or testing
        purposes.

        Parameters:
            iter: the iterator to check

        Returns:
            bool: true if the iter is valid, and false otherwise

        """
        ...

    @deprecated("Use [class@Gtk.TreeListModel] instead")
    def move_after(self, iter: TreeIter, position: Optional[TreeIter] = None) -> None:
        """
        Moves @iter in @tree_store to the position after @position.

        @iter and @position should be in the same level.

        Note that this function only works with unsorted stores.

        If @position is %NULL, @iter will be moved to the start of the level.

        Parameters:
            iter: A `GtkTreeIter`.
            position: A `GtkTreeIter`.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.TreeListModel] instead")
    def move_before(self, iter: TreeIter, position: Optional[TreeIter] = None) -> None:
        """
        Moves @iter in @tree_store to the position before @position.

        @iter and @position should be in the same level.

        Note that this function only works with unsorted stores.

        If @position is %NULL, @iter will be moved to the end of the level.

        Parameters:
            iter: A `GtkTreeIter`
            position: A `GtkTreeIter`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.TreeListModel] instead")
    @classmethod
    def new(cls, types: Sequence[Type]) -> TreeStore:
        """
        Creates a new tree store.

        The tree store will have @n_columns, with each column using the
        corresponding type passed to this function.

        Note that only types derived from standard GObject fundamental types
        are supported.

        As an example:

        ```c
        gtk_tree_store_new (3, G_TYPE_INT, G_TYPE_STRING, GDK_TYPE_TEXTURE);
        ```

        will create a new `GtkTreeStore` with three columns of type
        `int`, `gchararray`, and `GdkTexture` respectively.

        Parameters:
            types:

        Returns:
            TreeStore: a new `GtkTreeStore`

        """
        ...

    def prepend(self, parent, row=None): ...  # FIXME Function
    @deprecated("Use [class@Gtk.TreeListModel] instead")
    def remove(self, iter: TreeIter) -> bool:
        """
        Removes @iter from @tree_store.

        After being removed, @iter is set to the next valid row at that level, or
        invalidated if it previously pointed to the last one.

        Parameters:
            iter: A valid `GtkTreeIter`

        Returns:
            bool: true if @iter is still valid, and false otherwise

        """
        ...

    def set(self, treeiter, *args): ...  # FIXME Function
    @deprecated("Use [class@Gtk.TreeListModel] instead")
    def set_column_types(self, types: Sequence[Type]) -> None:
        """
        Sets the type of the columns in a tree store.

        This function is meant primarily for types that inherit from
        `GtkTreeStore`, and should only be used when constructing a new
        `GtkTreeStore`.

        This functions cannot be called after a row has been added,
        or a method on the `GtkTreeModel` interface is called on the
        tree store.

        Parameters:
            types: An array of `GType` types, one for each column

        Returns:

        """
        ...

    def set_value(self, treeiter, column, value): ...  # FIXME Function
    @deprecated("Use [class@Gtk.TreeListModel] instead")
    def swap(self, a: TreeIter, b: TreeIter) -> None:
        """
        Swaps @a and @b in the same level of @tree_store.

        Note that this function only works with unsorted stores.

        Parameters:
            a: A `GtkTreeIter`.
            b: Another `GtkTreeIter`.

        Returns:

        """
        ...

class TreeStoreClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeStoreClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    padding: list[None] = ...

class TreeStorePrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

@deprecated(
    "Use [class@Gtk.ListView] for lists, and [class@Gtk.ColumnView] for tabular lists"
)
class TreeView(Widget, Accessible, Buildable, ConstraintTarget, Scrollable):
    """
    A widget for displaying both trees and lists

    Widget that displays any object that implements the [iface@Gtk.TreeModel] interface.

    Please refer to the [tree widget conceptual overview](section-tree-widget.html)
    for an overview of all the objects and data types related to the tree
    widget and how they work together.

    ## Coordinate systems in GtkTreeView API

    Several different coordinate systems are exposed in the `GtkTreeView` API.
    These are:

    ![](tree-view-coordinates.png)

    - Widget coordinates: Coordinates relative to the widget (usually `widget->window`).

    - Bin window coordinates: Coordinates relative to the window that GtkTreeView renders to.

    - Tree coordinates: Coordinates relative to the entire scrollable area of GtkTreeView. These
    coordinates start at (0, 0) for row 0 of the tree.

    Several functions are available for converting between the different
    coordinate systems. The most common translations are between widget and bin
    window coordinates and between bin window and tree coordinates. For the
    former you can use [method@Gtk.TreeView.convert_widget_to_bin_window_coords]
    (and vice versa), for the latter [method@Gtk.TreeView.convert_bin_window_to_tree_coords]
    (and vice versa).

    ## `GtkTreeView` as `GtkBuildable`

    The `GtkTreeView` implementation of the `GtkBuildable` interface accepts
    [class@Gtk.TreeViewColumn] objects as `<child>` elements and exposes the
    internal [class@Gtk.TreeSelection] in UI definitions.

    An example of a UI definition fragment with `GtkTreeView`:

    ```xml
    <object class=\"GtkTreeView\" id=\"treeview\">
    <property name=\"model\">liststore1</property>
    <child>
    <object class=\"GtkTreeViewColumn\" id=\"test-column\">
    <property name=\"title\">Test</property>
    <child>
    <object class=\"GtkCellRendererText\" id=\"test-renderer\"/>
    <attributes>
    <attribute name=\"text\">1</attribute>
    </attributes>
    </child>
    </object>
    </child>
    <child internal-child=\"selection\">
    <object class=\"GtkTreeSelection\" id=\"selection\">
    <signal name=\"changed\" handler=\"on_treeview_selection_changed\"/>
    </object>
    </child>
    </object>
    ```

    ## CSS nodes

    ```
    treeview.view
    ├── header
    │ ├── button
    │ │ ╰── [sort-indicator]
    ┊ ┊
    │ ╰── button
    │ ╰── [sort-indicator]
    │
    ├── [rubberband]
    ╰── [dndtarget]
    ```

    `GtkTreeView` has a main CSS node with name `treeview` and style class `.view`.
    It has a subnode with name `header`, which is the parent for all the column
    header widgets' CSS nodes.

    Each column header consists of a `button`, which among other content, has a
    child with name `sort-indicator`, which carries the `.ascending` or `.descending`
    style classes when the column header should show a sort indicator. The CSS
    is expected to provide a suitable image using the `-gtk-icon-source` property.

    For rubberband selection, a subnode with name `rubberband` is used.

    For the drop target location during DND, a subnode with name `dndtarget` is used.

    :Constructors:

    ::

        TreeView(**properties)
        new() -> Gtk.Widget
        new_with_model(model:Gtk.TreeModel) -> Gtk.Widget

    Object GtkTreeView

    Signals from GtkTreeView:
      move-cursor (GtkMovementStep, gint, gboolean, gboolean) -> gboolean
      select-all () -> gboolean
      unselect-all () -> gboolean
      row-activated (GtkTreePath, GtkTreeViewColumn)
      toggle-cursor-row () -> gboolean
      test-expand-row (GtkTreeIter, GtkTreePath) -> gboolean
      test-collapse-row (GtkTreeIter, GtkTreePath) -> gboolean
      row-expanded (GtkTreeIter, GtkTreePath)
      row-collapsed (GtkTreeIter, GtkTreePath)
      columns-changed ()
      cursor-changed ()
      select-cursor-row (gboolean) -> gboolean
      expand-collapse-cursor-row (gboolean, gboolean, gboolean) -> gboolean
      select-cursor-parent () -> gboolean
      start-interactive-search () -> gboolean

    Properties from GtkTreeView:
      model -> GtkTreeModel: model
      headers-visible -> gboolean: headers-visible
      headers-clickable -> gboolean: headers-clickable
      expander-column -> GtkTreeViewColumn: expander-column
      reorderable -> gboolean: reorderable
      enable-search -> gboolean: enable-search
      search-column -> gint: search-column
      fixed-height-mode -> gboolean: fixed-height-mode
      hover-selection -> gboolean: hover-selection
      hover-expand -> gboolean: hover-expand
      show-expanders -> gboolean: show-expanders
      level-indentation -> gint: level-indentation
      rubber-banding -> gboolean: rubber-banding
      enable-grid-lines -> GtkTreeViewGridLines: enable-grid-lines
      enable-tree-lines -> gboolean: enable-tree-lines
      tooltip-column -> gint: tooltip-column
      activate-on-single-click -> gboolean: activate-on-single-click

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Scrollable.Props,
    ):
        activate_on_single_click: bool
        """
        The activate-on-single-click property specifies whether the \"row-activated\" signal
        will be emitted after a single click.
        """
        enable_grid_lines: TreeViewGridLines
        enable_search: bool
        enable_tree_lines: bool
        expander_column: Optional[TreeViewColumn]
        fixed_height_mode: bool
        """
        Setting the ::fixed-height-mode property to %TRUE speeds up
        `GtkTreeView` by assuming that all rows have the same height.
        Only enable this option if all rows are the same height.
        Please see gtk_tree_view_set_fixed_height_mode() for more
        information on this option.
        """
        headers_clickable: bool
        headers_visible: bool
        hover_expand: bool
        """
        Enables or disables the hover expansion mode of @tree_view.
        Hover expansion makes rows expand or collapse if the pointer moves
        over them.

        This mode is primarily intended for treeviews in popups, e.g.
        in `GtkComboBox` or `GtkEntryCompletion`.
        """
        hover_selection: bool
        """
        Enables or disables the hover selection mode of @tree_view.
        Hover selection makes the selected row follow the pointer.
        Currently, this works only for the selection modes
        %GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.

        This mode is primarily intended for treeviews in popups, e.g.
        in `GtkComboBox` or `GtkEntryCompletion`.
        """
        level_indentation: int
        """
        Extra indentation for each level.
        """
        model: Optional[TreeModel]
        reorderable: bool
        rubber_banding: bool
        search_column: int
        show_expanders: bool
        """
        %TRUE if the view has expanders.
        """
        tooltip_column: int

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        activate_on_single_click: bool = ...,
        enable_grid_lines: TreeViewGridLines = ...,
        enable_search: bool = ...,
        enable_tree_lines: bool = ...,
        expander_column: Optional[TreeViewColumn] = ...,
        fixed_height_mode: bool = ...,
        headers_clickable: bool = ...,
        headers_visible: bool = ...,
        hover_expand: bool = ...,
        hover_selection: bool = ...,
        level_indentation: int = ...,
        model: Optional[TreeModel] = ...,
        reorderable: bool = ...,
        rubber_banding: bool = ...,
        search_column: int = ...,
        show_expanders: bool = ...,
        tooltip_column: int = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        hadjustment: Optional[Adjustment] = ...,
        hscroll_policy: ScrollablePolicy = ...,
        vadjustment: Optional[Adjustment] = ...,
        vscroll_policy: ScrollablePolicy = ...,
    ): ...
    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def append_column(self, column: TreeViewColumn) -> int:
        """
        Appends @column to the list of columns. If @tree_view has “fixed_height”
        mode enabled, then @column must have its “sizing” property set to be
        GTK_TREE_VIEW_COLUMN_FIXED.

        Parameters:
            column: The `GtkTreeViewColumn` to add.

        Returns:
            int: The number of columns in @tree_view after appending.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def collapse_all(self) -> None:
        """
        Recursively collapses all visible, expanded nodes in @tree_view.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def collapse_row(self, path: TreePath) -> bool:
        """
        Collapses a row (hides its child rows, if they exist).

        Parameters:
            path: path to a row in the @tree_view

        Returns:
            bool: %TRUE if the row was collapsed.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def columns_autosize(self) -> None:
        """
        Resizes all columns to their optimal width. Only works after the
        treeview has been realized.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def convert_bin_window_to_tree_coords(self, bx: int, by: int) -> Tuple[int, int]:
        """
        Converts bin_window coordinates to coordinates for the
        tree (the full scrollable area of the tree).

        Parameters:
            bx: X coordinate relative to bin_window
            by: Y coordinate relative to bin_window

        Returns:
            int: return location for tree X coordinate
            int: return location for tree Y coordinate
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def convert_bin_window_to_widget_coords(self, bx: int, by: int) -> Tuple[int, int]:
        """
        Converts bin_window coordinates to widget relative coordinates.

        Parameters:
            bx: bin_window X coordinate
            by: bin_window Y coordinate

        Returns:
            int: return location for widget X coordinate
            int: return location for widget Y coordinate
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def convert_tree_to_bin_window_coords(self, tx: int, ty: int) -> Tuple[int, int]:
        """
        Converts tree coordinates (coordinates in full scrollable area of the tree)
        to bin_window coordinates.

        Parameters:
            tx: tree X coordinate
            ty: tree Y coordinate

        Returns:
            int: return location for X coordinate relative to bin_window
            int: return location for Y coordinate relative to bin_window
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def convert_tree_to_widget_coords(self, tx: int, ty: int) -> Tuple[int, int]:
        """
        Converts tree coordinates (coordinates in full scrollable area of the tree)
        to widget coordinates.

        Parameters:
            tx: X coordinate relative to the tree
            ty: Y coordinate relative to the tree

        Returns:
            int: return location for widget X coordinate
            int: return location for widget Y coordinate
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def convert_widget_to_bin_window_coords(self, wx: int, wy: int) -> Tuple[int, int]:
        """
        Converts widget coordinates to coordinates for the bin_window.

        Parameters:
            wx: X coordinate relative to the widget
            wy: Y coordinate relative to the widget

        Returns:
            int: return location for bin_window X coordinate
            int: return location for bin_window Y coordinate
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def convert_widget_to_tree_coords(self, wx: int, wy: int) -> Tuple[int, int]:
        """
        Converts widget coordinates to coordinates for the
        tree (the full scrollable area of the tree).

        Parameters:
            wx: X coordinate relative to the widget
            wy: Y coordinate relative to the widget

        Returns:
            int: return location for tree X coordinate
            int: return location for tree Y coordinate
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def create_row_drag_icon(self, path: TreePath) -> Optional[Gdk.Paintable]:
        """
        Creates a `cairo_surface_t` representation of the row at @path.
        This image is used for a drag icon.

        Parameters:
            path: a `GtkTreePath` in @tree_view

        Returns:
            Optional[Gdk.Paintable]: a newly-allocated surface of the drag icon.

        """
        ...

    def do_columns_changed(self) -> None: ...
    def do_cursor_changed(self) -> None: ...
    def do_expand_collapse_cursor_row(
        self, logical: bool, expand: bool, open_all: bool
    ) -> bool: ...
    def do_move_cursor(
        self, step: MovementStep, count: int, extend: bool, modify: bool
    ) -> bool: ...
    def do_row_activated(
        self, path: TreePath, column: Optional[TreeViewColumn] = None
    ) -> None:
        """
        Activates the cell determined by @path and @column.

        Parameters:
            path: The `GtkTreePath` to be activated.
            column: The `GtkTreeViewColumn` to be activated.

        Returns:

        """
        ...

    def do_row_collapsed(self, iter: TreeIter, path: TreePath) -> None: ...
    def do_row_expanded(self, iter: TreeIter, path: TreePath) -> None: ...
    def do_select_all(self) -> bool: ...
    def do_select_cursor_parent(self) -> bool: ...
    def do_select_cursor_row(self, start_editing: bool) -> bool: ...
    def do_start_interactive_search(self) -> bool: ...
    def do_test_collapse_row(self, iter: TreeIter, path: TreePath) -> bool: ...
    def do_test_expand_row(self, iter: TreeIter, path: TreePath) -> bool: ...
    def do_toggle_cursor_row(self) -> bool: ...
    def do_unselect_all(self) -> bool: ...
    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def enable_model_drag_dest(
        self, formats: Gdk.ContentFormats, actions: Gdk.DragAction
    ) -> None:
        """
        Turns @tree_view into a drop destination for automatic DND. Calling
        this method sets `GtkTreeView`:reorderable to %FALSE.

        Parameters:
            formats: the target formats that the drag will support
            actions: the bitmask of possible actions for a drag from this
        widget

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def enable_model_drag_source(
        self,
        start_button_mask: Gdk.ModifierType,
        formats: Gdk.ContentFormats,
        actions: Gdk.DragAction,
    ) -> None:
        """
        Turns @tree_view into a drag source for automatic DND. Calling this
        method sets `GtkTreeView`:reorderable to %FALSE.

        Parameters:
            start_button_mask: Mask of allowed buttons to start drag
            formats: the target formats that the drag will support
            actions: the bitmask of possible actions for a drag from this
        widget

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def expand_all(self) -> None:
        """
        Recursively expands all nodes in the @tree_view.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def expand_row(self, path: TreePath, open_all: bool) -> bool:
        """
        Opens the row so its children are visible.

        Parameters:
            path: path to a row
            open_all: whether to recursively expand, or just expand immediate children

        Returns:
            bool: %TRUE if the row existed and had children

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def expand_to_path(self, path: TreePath) -> None:
        """
        Expands the row at @path. This will also expand all parent rows of
        @path as necessary.

        Parameters:
            path: path to a row.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_activate_on_single_click(self) -> bool:
        """
        Gets the setting set by gtk_tree_view_set_activate_on_single_click().

        Parameters:


        Returns:
            bool: %TRUE if row-activated will be emitted on a single click

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_background_area(
        self, path: Optional[TreePath] = None, column: Optional[TreeViewColumn] = None
    ) -> Gdk.Rectangle:
        """
        Fills the bounding rectangle in bin_window coordinates for the cell at the
        row specified by @path and the column specified by @column. If @path is
        %NULL, or points to a node not found in the tree, the @y and @height fields of
        the rectangle will be filled with 0. If @column is %NULL, the @x and @width
        fields will be filled with 0. The returned rectangle is equivalent to the
        @background_area passed to gtk_cell_renderer_render(). These background
        areas tile to cover the entire bin window. Contrast with the @cell_area,
        returned by gtk_tree_view_get_cell_area(), which returns only the cell
        itself, excluding surrounding borders and the tree expander area.

        Parameters:
            path: a `GtkTreePath` for the row, or %NULL to get only horizontal coordinates
            column: a `GtkTreeViewColumn` for the column, or %NULL to get only vertical coordinates

        Returns:
            Gdk.Rectangle: rectangle to fill with cell background rect
        """
        ...

    def get_cell_area(self, path, column=None): ...  # FIXME Function
    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_column(self, n: int) -> Optional[TreeViewColumn]:
        """
        Gets the `GtkTreeViewColumn` at the given position in the #tree_view.

        Parameters:
            n: The position of the column, counting from 0.

        Returns:
            Optional[TreeViewColumn]: The `GtkTreeViewColumn`, or %NULL if the
        position is outside the range of columns.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_columns(self) -> list[TreeViewColumn]:
        """
        Returns a `GList` of all the `GtkTreeViewColumn`s currently in @tree_view.
        The returned list must be freed with g_list_free ().

        Parameters:


        Returns:
            list[TreeViewColumn]: A list of `GtkTreeViewColumn`s

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_cursor(self) -> Tuple[TreePath, TreeViewColumn]:
        """
        Fills in @path and @focus_column with the current path and focus column. If
        the cursor isn’t currently set, then *@path will be %NULL. If no column
        currently has focus, then *@focus_column will be %NULL.

        The returned `GtkTreePath` must be freed with gtk_tree_path_free() when
        you are done with it.

        Parameters:


        Returns:
            TreePath: A pointer to be
        filled with the current cursor path
            TreeViewColumn: A
        pointer to be filled with the current focus column
        """
        ...

    def get_dest_row_at_pos(
        self, drag_x: int, drag_y: int
    ) -> Optional[Tuple[TreePath, TreeViewDropPosition]]:  # CHECK Wrapped function
        """
        Determines the destination row for a given position. @drag_x and
        @drag_y are expected to be in widget coordinates. This function is only
        meaningful if @tree_view is realized. Therefore this function will always
        return %FALSE if @tree_view is not realized or does not have a model.

        Parameters:
            drag_x: the position to determine the destination row for
            drag_y: the position to determine the destination row for

        Returns:
            TreePath: Return location for the path of
        the highlighted row
            TreeViewDropPosition: Return location for the drop position, or
        %NULL
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_drag_dest_row(self) -> Tuple[TreePath, TreeViewDropPosition]:
        """
        Gets information about the row that is highlighted for feedback.

        Parameters:


        Returns:
            TreePath: Return location for the path of the highlighted row
            TreeViewDropPosition: Return location for the drop position
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_enable_search(self) -> bool:
        """
        Returns whether or not the tree allows to start interactive searching
        by typing in text.

        Parameters:


        Returns:
            bool: whether or not to let the user search interactively

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_enable_tree_lines(self) -> bool:
        """
        Returns whether or not tree lines are drawn in @tree_view.

        Parameters:


        Returns:
            bool: %TRUE if tree lines are drawn in @tree_view, %FALSE
        otherwise.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_expander_column(self) -> Optional[TreeViewColumn]:
        """
        Returns the column that is the current expander column,
        or %NULL if none has been set.
        This column has the expander arrow drawn next to it.

        Parameters:


        Returns:
            Optional[TreeViewColumn]: The expander column.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_fixed_height_mode(self) -> bool:
        """
        Returns whether fixed height mode is turned on for @tree_view.

        Parameters:


        Returns:
            bool: %TRUE if @tree_view is in fixed height mode

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_grid_lines(self) -> TreeViewGridLines:
        """
        Returns which grid lines are enabled in @tree_view.

        Parameters:


        Returns:
            TreeViewGridLines: a `GtkTreeView`GridLines value indicating which grid lines
        are enabled.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_headers_clickable(self) -> bool:
        """
        Returns whether all header columns are clickable.

        Parameters:


        Returns:
            bool: %TRUE if all header columns are clickable, otherwise %FALSE

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_headers_visible(self) -> bool:
        """
        Returns %TRUE if the headers on the @tree_view are visible.

        Parameters:


        Returns:
            bool: Whether the headers are visible or not.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_hover_expand(self) -> bool:
        """
        Returns whether hover expansion mode is turned on for @tree_view.

        Parameters:


        Returns:
            bool: %TRUE if @tree_view is in hover expansion mode

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_hover_selection(self) -> bool:
        """
        Returns whether hover selection mode is turned on for @tree_view.

        Parameters:


        Returns:
            bool: %TRUE if @tree_view is in hover selection mode

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_level_indentation(self) -> int:
        """
        Returns the amount, in pixels, of extra indentation for child levels
        in @tree_view.

        Parameters:


        Returns:
            int: the amount of extra indentation for child levels in
        @tree_view. A return value of 0 means that this feature is disabled.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_model(self) -> Optional[TreeModel]:
        """
        Returns the model the `GtkTreeView` is based on. Returns %NULL if the
        model is unset.

        Parameters:


        Returns:
            Optional[TreeModel]: A `GtkTreeModel`

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_n_columns(self) -> int:
        """
        Queries the number of columns in the given @tree_view.

        Parameters:


        Returns:
            int: The number of columns in the @tree_view

        """
        ...

    def get_path_at_pos(
        self, x: int, y: int
    ) -> Optional[Tuple[TreePath, TreeViewColumn, int, int]]:  # CHECK Wrapped function
        """
        Finds the path at the point (@x, @y), relative to bin_window coordinates.
        That is, @x and @y are relative to an events coordinates. Widget-relative
        coordinates must be converted using
        gtk_tree_view_convert_widget_to_bin_window_coords(). It is primarily for
        things like popup menus. If @path is non-%NULL, then it will be filled
        with the `GtkTreePath` at that point. This path should be freed with
        gtk_tree_path_free(). If @column is non-%NULL, then it will be filled
        with the column at that point. @cell_x and @cell_y return the coordinates
        relative to the cell background (i.e. the @background_area passed to
        gtk_cell_renderer_render()). This function is only meaningful if
        @tree_view is realized. Therefore this function will always return %FALSE
        if @tree_view is not realized or does not have a model.

        For converting widget coordinates (eg. the ones you get from
        GtkWidget::query-tooltip), please see
        gtk_tree_view_convert_widget_to_bin_window_coords().

        Parameters:
            x: The x position to be identified (relative to bin_window).
            y: The y position to be identified (relative to bin_window).

        Returns:
            TreePath: A pointer to a `GtkTreePath`
        pointer to be filled in
            TreeViewColumn: A pointer to
        a `GtkTreeViewColumn` pointer to be filled in
            int: A pointer where the X coordinate
        relative to the cell can be placed
            int: A pointer where the Y coordinate
        relative to the cell can be placed
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_reorderable(self) -> bool:
        """
        Retrieves whether the user can reorder the tree via drag-and-drop. See
        gtk_tree_view_set_reorderable().

        Parameters:


        Returns:
            bool: %TRUE if the tree can be reordered.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_rubber_banding(self) -> bool:
        """
        Returns whether rubber banding is turned on for @tree_view. If the
        selection mode is %GTK_SELECTION_MULTIPLE, rubber banding will allow the
        user to select multiple rows by dragging the mouse.

        Parameters:


        Returns:
            bool: %TRUE if rubber banding in @tree_view is enabled.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_search_column(self) -> int:
        """
        Gets the column searched on by the interactive search code.

        Parameters:


        Returns:
            int: the column the interactive search code searches in.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_search_entry(self) -> Optional[Editable]:
        """
        Returns the `GtkEntry` which is currently in use as interactive search
        entry for @tree_view. In case the built-in entry is being used, %NULL
        will be returned.

        Parameters:


        Returns:
            Optional[Editable]: the entry currently in use as search entry.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_selection(self) -> TreeSelection:
        """
        Gets the `GtkTreeSelection` associated with @tree_view.

        Parameters:


        Returns:
            TreeSelection: A `GtkTreeSelection` object.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_show_expanders(self) -> bool:
        """
        Returns whether or not expanders are drawn in @tree_view.

        Parameters:


        Returns:
            bool: %TRUE if expanders are drawn in @tree_view, %FALSE
        otherwise.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_tooltip_column(self) -> int:
        """
        Returns the column of @tree_view’s model which is being used for
        displaying tooltips on @tree_view’s rows.

        Parameters:


        Returns:
            int: the index of the tooltip column that is currently being
        used, or -1 if this is disabled.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_tooltip_context(
        self, x: int, y: int, keyboard_tip: bool
    ) -> Tuple[bool, TreeModel, TreePath, TreeIter]:
        """
        This function is supposed to be used in a ::query-tooltip
        signal handler for `GtkTreeView`. The @x, @y and @keyboard_tip values
        which are received in the signal handler, should be passed to this
        function without modification.

        The return value indicates whether there is a tree view row at the given
        coordinates (%TRUE) or not (%FALSE) for mouse tooltips. For keyboard
        tooltips the row returned will be the cursor row. When %TRUE, then any of
        @model, @path and @iter which have been provided will be set to point to
        that row and the corresponding model. @x and @y will always be converted
        to be relative to @tree_view’s bin_window if @keyboard_tooltip is %FALSE.

        Parameters:
            x: the x coordinate (relative to widget coordinates)
            y: the y coordinate (relative to widget coordinates)
            keyboard_tip: whether this is a keyboard tooltip or not

        Returns:
            bool: whether or not the given tooltip context points to a row
            TreeModel: a pointer to
        receive a `GtkTreeModel`
            TreePath: a pointer to receive a `GtkTreePath`
            TreeIter: a pointer to receive a `GtkTreeIter`
        """
        ...

    def get_visible_range(
        self,
    ) -> Optional[Tuple[TreePath, TreePath]]:  # CHECK Wrapped function
        """
        Sets @start_path and @end_path to be the first and last visible path.
        Note that there may be invisible paths in between.

        The paths should be freed with gtk_tree_path_free() after use.

        Parameters:


        Returns:
            TreePath: Return location for start of region
            TreePath: Return location for end of region
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def get_visible_rect(self) -> Gdk.Rectangle:
        """
        Fills @visible_rect with the currently-visible region of the
        buffer, in tree coordinates. Convert to bin_window coordinates with
        gtk_tree_view_convert_tree_to_bin_window_coords().
        Tree coordinates start at 0,0 for row 0 of the tree, and cover the entire
        scrollable area of the tree.

        Parameters:


        Returns:
            Gdk.Rectangle: rectangle to fill
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def insert_column(self, column: TreeViewColumn, position: int) -> int:
        """
        This inserts the @column into the @tree_view at @position. If @position is
        -1, then the column is inserted at the end. If @tree_view has
        “fixed_height” mode enabled, then @column must have its “sizing” property
        set to be GTK_TREE_VIEW_COLUMN_FIXED.

        Parameters:
            column: The `GtkTreeViewColumn` to be inserted.
            position: The position to insert @column in.

        Returns:
            int: The number of columns in @tree_view after insertion.

        """
        ...

    def insert_column_with_attributes(
        self, position, title, cell, **kwargs
    ): ...  # FIXME Function
    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def insert_column_with_data_func(
        self,
        position: int,
        title: str,
        cell: CellRenderer,
        func: Callable[..., None],
        *data: Any,
    ) -> int:
        """
        Convenience function that inserts a new column into the `GtkTreeView`
        with the given cell renderer and a `GtkTreeCellDataFunc` to set cell renderer
        attributes (normally using data from the model). See also
        gtk_tree_view_column_set_cell_data_func(), gtk_tree_view_column_pack_start().
        If @tree_view has “fixed_height” mode enabled, then the new column will have its
        “sizing” property set to be GTK_TREE_VIEW_COLUMN_FIXED.

        Parameters:
            position: Position to insert, -1 for append
            title: column title
            cell: cell renderer for column
            func: function to set attributes of cell renderer
            data: data for @func

        Returns:
            int: number of columns in the tree view post-insert

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def is_blank_at_pos(
        self, x: int, y: int
    ) -> Tuple[bool, TreePath, TreeViewColumn, int, int]:
        """
        Determine whether the point (@x, @y) in @tree_view is blank, that is no
        cell content nor an expander arrow is drawn at the location. If so, the
        location can be considered as the background. You might wish to take
        special action on clicks on the background, such as clearing a current
        selection, having a custom context menu or starting rubber banding.

        The @x and @y coordinate that are provided must be relative to bin_window
        coordinates. Widget-relative coordinates must be converted using
        gtk_tree_view_convert_widget_to_bin_window_coords().

        For converting widget coordinates (eg. the ones you get from
        GtkWidget::query-tooltip), please see
        gtk_tree_view_convert_widget_to_bin_window_coords().

        The @path, @column, @cell_x and @cell_y arguments will be filled in
        likewise as for gtk_tree_view_get_path_at_pos(). Please see
        gtk_tree_view_get_path_at_pos() for more information.

        Parameters:
            x: The x position to be identified (relative to bin_window)
            y: The y position to be identified (relative to bin_window)

        Returns:
            bool: %TRUE if the area at the given coordinates is blank,
        %FALSE otherwise.
            TreePath: A pointer to a `GtkTreePath` pointer to
        be filled in
            TreeViewColumn: A pointer to a
        `GtkTreeViewColumn` pointer to be filled in
            int: A pointer where the X coordinate relative to the
        cell can be placed
            int: A pointer where the Y coordinate relative to the
        cell can be placed
        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def is_rubber_banding_active(self) -> bool:
        """
        Returns whether a rubber banding operation is currently being done
        in @tree_view.

        Parameters:


        Returns:
            bool: %TRUE if a rubber banding operation is currently being
        done in @tree_view.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def map_expanded_rows(self, func: Callable[..., None], *data: Any) -> None:
        """
        Calls @func on all expanded rows.

        Parameters:
            func: A function to be called
            data: User data to be passed to the function.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def move_column_after(
        self, column: TreeViewColumn, base_column: Optional[TreeViewColumn] = None
    ) -> None:
        """
        Moves @column to be after to @base_column. If @base_column is %NULL, then
        @column is placed in the first position.

        Parameters:
            column: The `GtkTreeViewColumn` to be moved.
            base_column: The `GtkTreeViewColumn` to be moved relative to

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    @classmethod
    def new(cls) -> TreeView:
        """
        Creates a new `GtkTreeView` widget.

        Parameters:


        Returns:
            Widget: A newly created `GtkTreeView` widget.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    @classmethod
    def new_with_model(cls, model: TreeModel) -> TreeView:
        """
        Creates a new `GtkTreeView` widget with the model initialized to @model.

        Parameters:
            model: the model.

        Returns:
            Widget: A newly created `GtkTreeView` widget.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def remove_column(self, column: TreeViewColumn) -> int:
        """
        Removes @column from @tree_view.

        Parameters:
            column: The `GtkTreeViewColumn` to remove.

        Returns:
            int: The number of columns in @tree_view after removing.

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def row_activated(
        self, path: TreePath, column: Optional[TreeViewColumn] = None
    ) -> None:
        """
        Activates the cell determined by @path and @column.

        Parameters:
            path: The `GtkTreePath` to be activated.
            column: The `GtkTreeViewColumn` to be activated.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def row_expanded(self, path: TreePath) -> bool:
        """
        Returns %TRUE if the node pointed to by @path is expanded in @tree_view.

        Parameters:
            path: A `GtkTreePath` to test expansion state.

        Returns:
            bool: %TRUE if #path is expanded.

        """
        ...

    def scroll_to_cell(
        self, path, column=None, use_align=False, row_align=0.0, col_align=0.0
    ): ...  # FIXME Function
    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def scroll_to_point(self, tree_x: int, tree_y: int) -> None:
        """
        Scrolls the tree view such that the top-left corner of the visible
        area is @tree_x, @tree_y, where @tree_x and @tree_y are specified
        in tree coordinates. The @tree_view must be realized before
        this function is called. If it isn't, you probably want to be
        using gtk_tree_view_scroll_to_cell().

        If either @tree_x or @tree_y are -1, then that direction isn’t scrolled.

        Parameters:
            tree_x: X coordinate of new top-left pixel of visible area, or -1
            tree_y: Y coordinate of new top-left pixel of visible area, or -1

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_activate_on_single_click(self, single: bool) -> None:
        """
        Cause the `GtkTreeView`::row-activated signal to be emitted
        on a single click instead of a double click.

        Parameters:
            single: %TRUE to emit row-activated on a single click

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_column_drag_function(
        self, func: Optional[Callable[..., bool]] = None, *user_data: Any
    ) -> None:
        """
        Sets a user function for determining where a column may be dropped when
        dragged. This function is called on every column pair in turn at the
        beginning of a column drag to determine where a drop can take place. The
        arguments passed to @func are: the @tree_view, the `GtkTreeViewColumn` being
        dragged, the two `GtkTreeViewColumn`s determining the drop spot, and
        @user_data. If either of the `GtkTreeViewColumn` arguments for the drop spot
        are %NULL, then they indicate an edge. If @func is set to be %NULL, then
        @tree_view reverts to the default behavior of allowing all columns to be
        dropped everywhere.

        Parameters:
            func: A function to determine which columns are reorderable
            user_data: User data to be passed to @func

        Returns:

        """
        ...

    def set_cursor(self, path, column=None, start_editing=False): ...  # FIXME Function
    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_cursor_on_cell(
        self,
        path: TreePath,
        focus_column: Optional[TreeViewColumn],
        focus_cell: Optional[CellRenderer],
        start_editing: bool,
    ) -> None:
        """
        Sets the current keyboard focus to be at @path, and selects it. This is
        useful when you want to focus the user’s attention on a particular row. If
        @focus_column is not %NULL, then focus is given to the column specified by
        it. If @focus_column and @focus_cell are not %NULL, and @focus_column
        contains 2 or more editable or activatable cells, then focus is given to
        the cell specified by @focus_cell. Additionally, if @focus_column is
        specified, and @start_editing is %TRUE, then editing should be started in
        the specified cell. This function is often followed by
        @gtk_widget_grab_focus (@tree_view) in order to give keyboard focus to the
        widget. Please note that editing can only happen when the widget is
        realized.

        If @path is invalid for @model, the current cursor (if any) will be unset
        and the function will return without failing.

        Parameters:
            path: A `GtkTreePath`
            focus_column: A `GtkTreeViewColumn`
            focus_cell: A `GtkCellRenderer`
            start_editing: %TRUE if the specified cell should start being edited.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_drag_dest_row(
        self, path: Optional[TreePath], pos: TreeViewDropPosition
    ) -> None:
        """
        Sets the row that is highlighted for feedback.
        If @path is %NULL, an existing highlight is removed.

        Parameters:
            path: The path of the row to highlight
            pos: Specifies whether to drop before, after or into the row

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_enable_search(self, enable_search: bool) -> None:
        """
        If @enable_search is set, then the user can type in text to search through
        the tree interactively (this is sometimes called \"typeahead find\").

        Note that even if this is %FALSE, the user can still initiate a search
        using the “start-interactive-search” key binding.

        Parameters:
            enable_search: %TRUE, if the user can search interactively

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_enable_tree_lines(self, enabled: bool) -> None:
        """
        Sets whether to draw lines interconnecting the expanders in @tree_view.
        This does not have any visible effects for lists.

        Parameters:
            enabled: %TRUE to enable tree line drawing, %FALSE otherwise.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_expander_column(self, column: Optional[TreeViewColumn] = None) -> None:
        """
        Sets the column to draw the expander arrow at. It must be in @tree_view.
        If @column is %NULL, then the expander arrow is always at the first
        visible column.

        If you do not want expander arrow to appear in your tree, set the
        expander column to a hidden column.

        Parameters:
            column: %NULL, or the column to draw the expander arrow at.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_fixed_height_mode(self, enable: bool) -> None:
        """
        Enables or disables the fixed height mode of @tree_view.
        Fixed height mode speeds up `GtkTreeView` by assuming that all
        rows have the same height.
        Only enable this option if all rows are the same height and all
        columns are of type %GTK_TREE_VIEW_COLUMN_FIXED.

        Parameters:
            enable: %TRUE to enable fixed height mode

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_grid_lines(self, grid_lines: TreeViewGridLines) -> None:
        """
        Sets which grid lines to draw in @tree_view.

        Parameters:
            grid_lines: a `GtkTreeView`GridLines value indicating which grid lines to
        enable.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_headers_clickable(self, setting: bool) -> None:
        """
        Allow the column title buttons to be clicked.

        Parameters:
            setting: %TRUE if the columns are clickable.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_headers_visible(self, headers_visible: bool) -> None:
        """
        Sets the visibility state of the headers.

        Parameters:
            headers_visible: %TRUE if the headers are visible

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_hover_expand(self, expand: bool) -> None:
        """
        Enables or disables the hover expansion mode of @tree_view.
        Hover expansion makes rows expand or collapse if the pointer
        moves over them.

        Parameters:
            expand: %TRUE to enable hover selection mode

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_hover_selection(self, hover: bool) -> None:
        """
        Enables or disables the hover selection mode of @tree_view.
        Hover selection makes the selected row follow the pointer.
        Currently, this works only for the selection modes
        %GTK_SELECTION_SINGLE and %GTK_SELECTION_BROWSE.

        Parameters:
            hover: %TRUE to enable hover selection mode

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_level_indentation(self, indentation: int) -> None:
        """
        Sets the amount of extra indentation for child levels to use in @tree_view
        in addition to the default indentation. The value should be specified in
        pixels, a value of 0 disables this feature and in this case only the default
        indentation will be used.
        This does not have any visible effects for lists.

        Parameters:
            indentation: the amount, in pixels, of extra indentation in @tree_view.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_model(self, model: Optional[TreeModel] = None) -> None:
        """
        Sets the model for a `GtkTreeView`. If the @tree_view already has a model
        set, it will remove it before setting the new model. If @model is %NULL,
        then it will unset the old model.

        Parameters:
            model: The model.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_reorderable(self, reorderable: bool) -> None:
        """
        This function is a convenience function to allow you to reorder
        models that support the `GtkTreeDragSourceIface` and the
        `GtkTreeDragDestIface`. Both `GtkTreeStore` and `GtkListStore` support
        these. If @reorderable is %TRUE, then the user can reorder the
        model by dragging and dropping rows. The developer can listen to
        these changes by connecting to the model’s `GtkTreeModel::row-inserted`
        and `GtkTreeModel::row-deleted` signals. The reordering is implemented
        by setting up the tree view as a drag source and destination.
        Therefore, drag and drop can not be used in a reorderable view for any
        other purpose.

        This function does not give you any degree of control over the order -- any
        reordering is allowed. If more control is needed, you should probably
        handle drag and drop manually.

        Parameters:
            reorderable: %TRUE, if the tree can be reordered.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_row_separator_func(
        self, func: Optional[Callable[..., bool]] = None, *data: Any
    ) -> None:
        """
        Sets the row separator function, which is used to determine
        whether a row should be drawn as a separator. If the row separator
        function is %NULL, no separators are drawn. This is the default value.

        Parameters:
            func: a `GtkTreeView`RowSeparatorFunc
            data: user data to pass to @func

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_rubber_banding(self, enable: bool) -> None:
        """
        Enables or disables rubber banding in @tree_view. If the selection mode
        is %GTK_SELECTION_MULTIPLE, rubber banding will allow the user to select
        multiple rows by dragging the mouse.

        Parameters:
            enable: %TRUE to enable rubber banding

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_search_column(self, column: int) -> None:
        """
        Sets @column as the column where the interactive search code should
        search in for the current model.

        If the search column is set, users can use the “start-interactive-search”
        key binding to bring up search popup. The enable-search property controls
        whether simply typing text will also start an interactive search.

        Note that @column refers to a column of the current model. The search
        column is reset to -1 when the model is changed.

        Parameters:
            column: the column of the model to search in, or -1 to disable searching

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_search_entry(self, entry: Optional[Editable] = None) -> None:
        """
        Sets the entry which the interactive search code will use for this
        @tree_view. This is useful when you want to provide a search entry
        in our interface at all time at a fixed position. Passing %NULL for
        @entry will make the interactive search code use the built-in popup
        entry again.

        Parameters:
            entry: the entry the interactive search code of @tree_view should use

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_search_equal_func(
        self, search_equal_func: Callable[..., bool], *search_user_data: Any
    ) -> None:
        """
        Sets the compare function for the interactive search capabilities; note
        that somewhat like strcmp() returning 0 for equality
        `GtkTreeView`SearchEqualFunc returns %FALSE on matches.

        Parameters:
            search_equal_func: the compare function to use during the search
            search_user_data: user data to pass to @search_equal_func

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_show_expanders(self, enabled: bool) -> None:
        """
        Sets whether to draw and enable expanders and indent child rows in
        @tree_view. When disabled there will be no expanders visible in trees
        and there will be no way to expand and collapse rows by default. Also
        note that hiding the expanders will disable the default indentation. You
        can set a custom indentation in this case using
        gtk_tree_view_set_level_indentation().
        This does not have any visible effects for lists.

        Parameters:
            enabled: %TRUE to enable expander drawing, %FALSE otherwise.

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_tooltip_cell(
        self,
        tooltip: Tooltip,
        path: Optional[TreePath] = None,
        column: Optional[TreeViewColumn] = None,
        cell: Optional[CellRenderer] = None,
    ) -> None:
        """
        Sets the tip area of @tooltip to the area @path, @column and @cell have
        in common. For example if @path is %NULL and @column is set, the tip
        area will be set to the full area covered by @column. See also
        gtk_tooltip_set_tip_area().

        Note that if @path is not specified and @cell is set and part of a column
        containing the expander, the tooltip might not show and hide at the correct
        position. In such cases @path must be set to the current node under the
        mouse cursor for this function to operate correctly.

        See also gtk_tree_view_set_tooltip_column() for a simpler alternative.

        Parameters:
            tooltip: a `GtkTooltip`
            path: a `GtkTreePath`
            column: a `GtkTreeViewColumn`
            cell: a `GtkCellRenderer`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_tooltip_column(self, column: int) -> None:
        """
        If you only plan to have simple (text-only) tooltips on full rows, you
        can use this function to have `GtkTreeView` handle these automatically
        for you. @column should be set to the column in @tree_view’s model
        containing the tooltip texts, or -1 to disable this feature.

        When enabled, `GtkWidget:has-tooltip` will be set to %TRUE and
        @tree_view will connect a `GtkWidget::query-tooltip` signal handler.

        Note that the signal handler sets the text with gtk_tooltip_set_markup(),
        so &, <, etc have to be escaped in the text.

        Parameters:
            column: an integer, which is a valid column number for @tree_view’s model

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def set_tooltip_row(self, tooltip: Tooltip, path: TreePath) -> None:
        """
        Sets the tip area of @tooltip to be the area covered by the row at @path.
        See also gtk_tree_view_set_tooltip_column() for a simpler alternative.
        See also gtk_tooltip_set_tip_area().

        Parameters:
            tooltip: a `GtkTooltip`
            path: a `GtkTreePath`

        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def unset_rows_drag_dest(self) -> None:
        """
        Undoes the effect of
        gtk_tree_view_enable_model_drag_dest(). Calling this method sets
        `GtkTreeView`:reorderable to %FALSE.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use [class@Gtk.ListView] or [class@Gtk.ColumnView] instead")
    def unset_rows_drag_source(self) -> None:
        """
        Undoes the effect of
        gtk_tree_view_enable_model_drag_source(). Calling this method sets
        `GtkTreeView`:reorderable to %FALSE.

        Parameters:


        Returns:

        """
        ...

class TreeViewClass(GObject.GPointer):
    """
    :Constructors:

    ::

        TreeViewClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    row_activated: Callable[[TreeView, TreePath, Optional[TreeViewColumn]], None] = ...
    test_expand_row: Callable[[TreeView, TreeIter, TreePath], bool] = ...
    test_collapse_row: Callable[[TreeView, TreeIter, TreePath], bool] = ...
    row_expanded: Callable[[TreeView, TreeIter, TreePath], None] = ...
    row_collapsed: Callable[[TreeView, TreeIter, TreePath], None] = ...
    columns_changed: Callable[[TreeView], None] = ...
    cursor_changed: Callable[[TreeView], None] = ...
    move_cursor: Callable[[TreeView, MovementStep, int, bool, bool], bool] = ...
    select_all: Callable[[TreeView], bool] = ...
    unselect_all: Callable[[TreeView], bool] = ...
    select_cursor_row: Callable[[TreeView, bool], bool] = ...
    toggle_cursor_row: Callable[[TreeView], bool] = ...
    expand_collapse_cursor_row: Callable[[TreeView, bool, bool, bool], bool] = ...
    select_cursor_parent: Callable[[TreeView], bool] = ...
    start_interactive_search: Callable[[TreeView], bool] = ...
    _reserved: list[None] = ...

@deprecated(
    "Use [class@Gtk.ColumnView] and [class@Gtk.ColumnViewColumn] instead of [class@Gtk.TreeView] to show a tabular list"
)
class TreeViewColumn(GObject.InitiallyUnowned, Buildable, CellLayout):
    """
    A visible column in a [class@Gtk.TreeView] widget

    The `GtkTreeViewColumn` object represents a visible column in a `GtkTreeView` widget.
    It allows to set properties of the column header, and functions as a holding pen
    for the cell renderers which determine how the data in the column is displayed.

    Please refer to the [tree widget conceptual overview](section-tree-widget.html)
    for an overview of all the objects and data types related to the tree widget and
    how they work together, and to the [class@Gtk.TreeView] documentation for specifics
    about the CSS node structure for treeviews and their headers.

    :Constructors:

    ::

        TreeViewColumn(**properties)
        new() -> Gtk.TreeViewColumn
        new_with_area(area:Gtk.CellArea) -> Gtk.TreeViewColumn

    Object GtkTreeViewColumn

    Signals from GtkTreeViewColumn:
      clicked ()

    Properties from GtkTreeViewColumn:
      visible -> gboolean: visible
      resizable -> gboolean: resizable
      x-offset -> gint: x-offset
      width -> gint: width
      spacing -> gint: spacing
      sizing -> GtkTreeViewColumnSizing: sizing
      fixed-width -> gint: fixed-width
      min-width -> gint: min-width
      max-width -> gint: max-width
      title -> gchararray: title
      expand -> gboolean: expand
      clickable -> gboolean: clickable
      widget -> GtkWidget: widget
      alignment -> gfloat: alignment
      reorderable -> gboolean: reorderable
      sort-indicator -> gboolean: sort-indicator
      sort-order -> GtkSortType: sort-order
      sort-column-id -> gint: sort-column-id
      cell-area -> GtkCellArea: cell-area

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.InitiallyUnowned.Props, Buildable.Props, CellLayout.Props):
        alignment: float
        cell_area: CellArea
        """
        The `GtkCellArea` used to layout cell renderers for this column.

        If no area is specified when creating the tree view column with gtk_tree_view_column_new_with_area()
        a horizontally oriented `GtkCellAreaBox` will be used.
        """
        clickable: bool
        expand: bool
        fixed_width: int
        max_width: int
        min_width: int
        reorderable: bool
        resizable: bool
        sizing: TreeViewColumnSizing
        sort_column_id: int
        """
        Logical sort column ID this column sorts on when selected for sorting. Setting the sort column ID makes the column header
        clickable. Set to -1 to make the column unsortable.
        """
        sort_indicator: bool
        sort_order: SortType
        spacing: int
        title: str
        visible: bool
        widget: Optional[Widget]
        width: int
        x_offset: int

    props: Props = ...
    def __init__(
        self,
        alignment: float = ...,
        cell_area: CellArea = ...,
        clickable: bool = ...,
        expand: bool = ...,
        fixed_width: int = ...,
        max_width: int = ...,
        min_width: int = ...,
        reorderable: bool = ...,
        resizable: bool = ...,
        sizing: TreeViewColumnSizing = ...,
        sort_column_id: int = ...,
        sort_indicator: bool = ...,
        sort_order: SortType = ...,
        spacing: int = ...,
        title: str = ...,
        visible: bool = ...,
        widget: Optional[Widget] = ...,
    ): ...
    @deprecated("Use GtkColumnView instead")
    def add_attribute(
        self, cell_renderer: CellRenderer, attribute: str, column: int
    ) -> None:
        """
        Adds an attribute mapping to the list in @tree_column.

        The @column is the
        column of the model to get a value from, and the @attribute is the
        parameter on @cell_renderer to be set from the value. So for example
        if column 2 of the model contains strings, you could have the
        “text” attribute of a `GtkCellRendererText` get its values from
        column 2.

        Parameters:
            cell_renderer: the `GtkCellRenderer` to set attributes on
            attribute: An attribute on the renderer
            column: The column position on the model to get the attribute from.

        Returns:

        """
        ...

    def cell_get_position(
        self, cell_renderer: CellRenderer
    ) -> Optional[Tuple[int, int]]:  # CHECK Wrapped function
        """
        Obtains the horizontal position and size of a cell in a column.

        If the cell is not found in the column, @start_pos and @width
        are not changed and %FALSE is returned.

        Parameters:
            cell_renderer: a `GtkCellRenderer`

        Returns:
            int: return location for the horizontal
        position of @cell within @tree_column
            int: return location for the width of @cell
        """
        ...

    @deprecated("Use GtkColumnView instead")
    def cell_get_size(self) -> Tuple[int, int, int, int]:
        """
        Obtains the width and height needed to render the column. This is used
        primarily by the `GtkTreeView`.

        Parameters:


        Returns:
            int: location to return x offset of a cell relative to @cell_area
            int: location to return y offset of a cell relative to @cell_area
            int: location to return width needed to render a cell
            int: location to return height needed to render a cell
        """
        ...

    @deprecated("Use GtkColumnView instead")
    def cell_is_visible(self) -> bool:
        """
        Returns %TRUE if any of the cells packed into the @tree_column are visible.
        For this to be meaningful, you must first initialize the cells with
        gtk_tree_view_column_cell_set_cell_data()

        Parameters:


        Returns:
            bool: %TRUE, if any of the cells packed into the @tree_column are currently visible

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def cell_set_cell_data(
        self,
        tree_model: TreeModel,
        iter: TreeIter,
        is_expander: bool,
        is_expanded: bool,
    ) -> None:
        """
        Sets the cell renderer based on the @tree_model and @iter. That is, for
        every attribute mapping in @tree_column, it will get a value from the set
        column on the @iter, and use that value to set the attribute on the cell
        renderer. This is used primarily by the `GtkTreeView`.

        Parameters:
            tree_model: The `GtkTreeModel` to get the cell renderers attributes from.
            iter: The `GtkTreeIter` to get the cell renderer’s attributes from.
            is_expander: %TRUE, if the row has children
            is_expanded: %TRUE, if the row has visible children

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def clear(self) -> None:
        """
        Unsets all the mappings on all renderers on the @tree_column.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def clear_attributes(self, cell_renderer: CellRenderer) -> None:
        """
        Clears all existing attributes previously set with
        gtk_tree_view_column_set_attributes().

        Parameters:
            cell_renderer: a `GtkCellRenderer` to clear the attribute mapping on.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def clicked(self) -> None:
        """
        Emits the “clicked” signal on the column. This function will only work if
        @tree_column is clickable.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def focus_cell(self, cell: CellRenderer) -> None:
        """
        Sets the current keyboard focus to be at @cell, if the column contains
        2 or more editable and activatable cells.

        Parameters:
            cell: A `GtkCellRenderer`

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_alignment(self) -> float:
        """
        Returns the current x alignment of @tree_column. This value can range
        between 0.0 and 1.0.

        Parameters:


        Returns:
            float: The current alignent of @tree_column.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_button(self) -> Widget:
        """
        Returns the button used in the treeview column header

        Parameters:


        Returns:
            Widget: The button for the column header.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_clickable(self) -> bool:
        """
        Returns %TRUE if the user can click on the header for the column.

        Parameters:


        Returns:
            bool: %TRUE if user can click the column header.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_expand(self) -> bool:
        """
        Returns %TRUE if the column expands to fill available space.

        Parameters:


        Returns:
            bool: %TRUE if the column expands to fill available space.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_fixed_width(self) -> int:
        """
        Gets the fixed width of the column. This may not be the actual displayed
        width of the column; for that, use gtk_tree_view_column_get_width().

        Parameters:


        Returns:
            int: The fixed width of the column.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_max_width(self) -> int:
        """
        Returns the maximum width in pixels of the @tree_column, or -1 if no maximum
        width is set.

        Parameters:


        Returns:
            int: The maximum width of the @tree_column.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_min_width(self) -> int:
        """
        Returns the minimum width in pixels of the @tree_column, or -1 if no minimum
        width is set.

        Parameters:


        Returns:
            int: The minimum width of the @tree_column.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_reorderable(self) -> bool:
        """
        Returns %TRUE if the @tree_column can be reordered by the user.

        Parameters:


        Returns:
            bool: %TRUE if the @tree_column can be reordered by the user.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_resizable(self) -> bool:
        """
        Returns %TRUE if the @tree_column can be resized by the end user.

        Parameters:


        Returns:
            bool: %TRUE, if the @tree_column can be resized.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_sizing(self) -> TreeViewColumnSizing:
        """
        Returns the current type of @tree_column.

        Parameters:


        Returns:
            TreeViewColumnSizing: The type of @tree_column.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_sort_column_id(self) -> int:
        """
        Gets the logical @sort_column_id that the model sorts on
        when this column is selected for sorting.

        See [method@Gtk.TreeViewColumn.set_sort_column_id].

        Parameters:


        Returns:
            int: the current @sort_column_id for this column, or -1 if
        this column can’t be used for sorting

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_sort_indicator(self) -> bool:
        """
        Gets the value set by gtk_tree_view_column_set_sort_indicator().

        Parameters:


        Returns:
            bool: whether the sort indicator arrow is displayed

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_sort_order(self) -> SortType:
        """
        Gets the value set by gtk_tree_view_column_set_sort_order().

        Parameters:


        Returns:
            SortType: the sort order the sort indicator is indicating

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_spacing(self) -> int:
        """
        Returns the spacing of @tree_column.

        Parameters:


        Returns:
            int: the spacing of @tree_column.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_title(self) -> str:
        """
        Returns the title of the widget.

        Parameters:


        Returns:
            str: the title of the column. This string should not be
        modified or freed.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_tree_view(self) -> Optional[Widget]:
        """
        Returns the `GtkTreeView` wherein @tree_column has been inserted.
        If @column is currently not inserted in any tree view, %NULL is
        returned.

        Parameters:


        Returns:
            Optional[Widget]: The tree view wherein @column
        has been inserted

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_visible(self) -> bool:
        """
        Returns %TRUE if @tree_column is visible.

        Parameters:


        Returns:
            bool: whether the column is visible or not. If it is visible, then
        the tree will show the column.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_widget(self) -> Optional[Widget]:
        """
        Returns the `GtkWidget` in the button on the column header.

        If a custom widget has not been set then %NULL is returned.

        Parameters:


        Returns:
            Optional[Widget]: The `GtkWidget` in the column header

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_width(self) -> int:
        """
        Returns the current size of @tree_column in pixels.

        Parameters:


        Returns:
            int: The current width of @tree_column.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def get_x_offset(self) -> int:
        """
        Returns the current X offset of @tree_column in pixels.

        Parameters:


        Returns:
            int: The current X offset of @tree_column.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    @classmethod
    def new(cls) -> TreeViewColumn:
        """
        Creates a new `GtkTreeViewColumn`.

        Parameters:


        Returns:
            TreeViewColumn: A newly created `GtkTreeViewColumn`.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    @classmethod
    def new_with_area(cls, area: CellArea) -> TreeViewColumn:
        """
        Creates a new `GtkTreeViewColumn` using @area to render its cells.

        Parameters:
            area: the `GtkCellArea` that the newly created column should use to layout cells.

        Returns:
            TreeViewColumn: A newly created `GtkTreeViewColumn`.

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def pack_end(self, cell: CellRenderer, expand: bool) -> None:
        """
        Adds the @cell to end of the column. If @expand is %FALSE, then the @cell
        is allocated no more space than it needs. Any unused space is divided
        evenly between cells for which @expand is %TRUE.

        Parameters:
            cell: The `GtkCellRenderer`
            expand: %TRUE if @cell is to be given extra space allocated to @tree_column.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def pack_start(self, cell: CellRenderer, expand: bool) -> None:
        """
        Packs the @cell into the beginning of the column. If @expand is %FALSE, then
        the @cell is allocated no more space than it needs. Any unused space is divided
        evenly between cells for which @expand is %TRUE.

        Parameters:
            cell: The `GtkCellRenderer`
            expand: %TRUE if @cell is to be given extra space allocated to @tree_column.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def queue_resize(self) -> None:
        """
        Flags the column, and the cell renderers added to this column, to have
        their sizes renegotiated.

        Parameters:


        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_alignment(self, xalign: float) -> None:
        """
        Sets the alignment of the title or custom widget inside the column header.
        The alignment determines its location inside the button -- 0.0 for left, 0.5
        for center, 1.0 for right.

        Parameters:
            xalign: The alignment, which is between [0.0 and 1.0] inclusive.

        Returns:

        """
        ...

    def set_attributes(self, cell_renderer, **attributes): ...  # FIXME Function
    def set_cell_data_func(
        self, cell_renderer, func, func_data=None
    ): ...  # FIXME Function
    @deprecated("Use GtkColumnView instead")
    def set_clickable(self, clickable: bool) -> None:
        """
        Sets the header to be active if @clickable is %TRUE. When the header is
        active, then it can take keyboard focus, and can be clicked.

        Parameters:
            clickable: %TRUE if the header is active.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_expand(self, expand: bool) -> None:
        """
        Sets the column to take available extra space. This space is shared equally
        amongst all columns that have the expand set to %TRUE. If no column has this
        option set, then the last column gets all extra space. By default, every
        column is created with this %FALSE.

        Along with “fixed-width”, the “expand” property changes when the column is
        resized by the user.

        Parameters:
            expand: %TRUE if the column should expand to fill available space.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_fixed_width(self, fixed_width: int) -> None:
        """
        If @fixed_width is not -1, sets the fixed width of @tree_column; otherwise
        unsets it. The effective value of @fixed_width is clamped between the
        minimum and maximum width of the column; however, the value stored in the
        “fixed-width” property is not clamped. If the column sizing is
        %GTK_TREE_VIEW_COLUMN_GROW_ONLY or %GTK_TREE_VIEW_COLUMN_AUTOSIZE, setting
        a fixed width overrides the automatically calculated width. Note that
        @fixed_width is only a hint to GTK; the width actually allocated to the
        column may be greater or less than requested.

        Along with “expand”, the “fixed-width” property changes when the column is
        resized by the user.

        Parameters:
            fixed_width: The new fixed width, in pixels, or -1.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_max_width(self, max_width: int) -> None:
        """
        Sets the maximum width of the @tree_column. If @max_width is -1, then the
        maximum width is unset. Note, the column can actually be wider than max
        width if it’s the last column in a view. In this case, the column expands to
        fill any extra space.

        Parameters:
            max_width: The maximum width of the column in pixels, or -1.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_min_width(self, min_width: int) -> None:
        """
        Sets the minimum width of the @tree_column. If @min_width is -1, then the
        minimum width is unset.

        Parameters:
            min_width: The minimum width of the column in pixels, or -1.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_reorderable(self, reorderable: bool) -> None:
        """
        If @reorderable is %TRUE, then the column can be reordered by the end user
        dragging the header.

        Parameters:
            reorderable: %TRUE, if the column can be reordered.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_resizable(self, resizable: bool) -> None:
        """
        If @resizable is %TRUE, then the user can explicitly resize the column by
        grabbing the outer edge of the column button.

        If resizable is %TRUE and
        sizing mode of the column is %GTK_TREE_VIEW_COLUMN_AUTOSIZE, then the sizing
        mode is changed to %GTK_TREE_VIEW_COLUMN_GROW_ONLY.

        Parameters:
            resizable: %TRUE, if the column can be resized

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_sizing(self, type: TreeViewColumnSizing) -> None:
        """
        Sets the growth behavior of @tree_column to @type.

        Parameters:
            type: The `GtkTreeViewColumn`Sizing.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_sort_column_id(self, sort_column_id: int) -> None:
        """
        Sets the logical @sort_column_id that this column sorts on when this column
        is selected for sorting. Doing so makes the column header clickable.

        Parameters:
            sort_column_id: The @sort_column_id of the model to sort on.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_sort_indicator(self, setting: bool) -> None:
        """
        Call this function with a @setting of %TRUE to display an arrow in
        the header button indicating the column is sorted. Call
        gtk_tree_view_column_set_sort_order() to change the direction of
        the arrow.

        Parameters:
            setting: %TRUE to display an indicator that the column is sorted

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_sort_order(self, order: SortType) -> None:
        """
        Changes the appearance of the sort indicator.

        This does not actually sort the model. Use
        gtk_tree_view_column_set_sort_column_id() if you want automatic sorting
        support. This function is primarily for custom sorting behavior, and should
        be used in conjunction with gtk_tree_sortable_set_sort_column_id() to do
        that. For custom models, the mechanism will vary.

        The sort indicator changes direction to indicate normal sort or reverse sort.
        Note that you must have the sort indicator enabled to see anything when
        calling this function; see gtk_tree_view_column_set_sort_indicator().

        Parameters:
            order: sort order that the sort indicator should indicate

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_spacing(self, spacing: int) -> None:
        """
        Sets the spacing field of @tree_column, which is the number of pixels to
        place between cell renderers packed into it.

        Parameters:
            spacing: distance between cell renderers in pixels.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_title(self, title: str) -> None:
        """
        Sets the title of the @tree_column. If a custom widget has been set, then
        this value is ignored.

        Parameters:
            title: The title of the @tree_column.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_visible(self, visible: bool) -> None:
        """
        Sets the visibility of @tree_column.

        Parameters:
            visible: %TRUE if the @tree_column is visible.

        Returns:

        """
        ...

    @deprecated("Use GtkColumnView instead")
    def set_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Sets the widget in the header to be @widget. If widget is %NULL, then the
        header button is set with a `GtkLabel` set to the title of @tree_column.

        Parameters:
            widget: A child `GtkWidget`

        Returns:

        """
        ...

class UriLauncher(GObject.Object):
    """
    A `GtkUriLauncher` object collects the arguments that are needed to open a uri
    with an application.

    Depending on system configuration, user preferences and available APIs, this
    may or may not show an app chooser dialog or launch the default application
    right away.

    The operation is started with the [method@Gtk.UriLauncher.launch] function.
    This API follows the GIO async pattern, and the result can be obtained by
    calling [method@Gtk.UriLauncher.launch_finish].

    To launch a file, use [class@Gtk.FileLauncher].

    :Constructors:

    ::

        UriLauncher(**properties)
        new(uri:str=None) -> Gtk.UriLauncher

    Object GtkUriLauncher

    Properties from GtkUriLauncher:
      uri -> gchararray: uri

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props):
        uri: Optional[str]
        """
        The uri to launch.
        """

    props: Props = ...
    def __init__(self, uri: Optional[str] = ...): ...
    def get_uri(self) -> Optional[str]:
        """
        Gets the uri that will be opened.

        Parameters:


        Returns:
            Optional[str]: the uri

        """
        ...

    def launch(
        self,
        parent: Optional[Window] = None,
        cancellable: Optional[Gio.Cancellable] = None,
        callback: Optional[Callable[..., None]] = None,
        *user_data: Any,
    ) -> None:
        """
        Launch an application to open the uri.

        This may present an app chooser dialog to the user.

        The @callback will be called when the operation is completed.
        It should call [method@Gtk.UriLauncher.launch_finish] to obtain
        the result.

        Parameters:
            parent: the parent `GtkWindow`
            cancellable: a `GCancellable` to cancel the operation
            callback: a callback to call when the operation is complete
            user_data: data to pass to @callback

        Returns:

        """
        ...

    def launch_finish(self, result: Gio.AsyncResult) -> bool:
        """
        Finishes the [method@Gtk.UriLauncher.launch] call and
        returns the result.

        Parameters:
            result: a `GAsyncResult`

        Returns:
            bool: `TRUE` if an application was launched,
        or `FALSE` and @error is set

        """
        ...

    @classmethod
    def new(cls, uri: Optional[str] = None) -> UriLauncher:
        """
        Creates a new `GtkUriLauncher` object.

        Parameters:
            uri: the uri to open

        Returns:
            UriLauncher: the new `GtkUriLauncher`

        """
        ...

    def set_uri(self, uri: Optional[str] = None) -> None:
        """
        Sets the uri that will be opened.

        Parameters:
            uri: the uri

        Returns:

        """
        ...

class UriLauncherClass(GObject.GPointer):
    """
    :Constructors:

    ::

        UriLauncherClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class Video(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkVideo` is a widget to show a `GtkMediaStream` with media controls.

    ![An example GtkVideo](video.png)

    The controls are available separately as [class@Gtk.MediaControls].
    If you just want to display a video without controls, you can treat it
    like any other paintable and for example put it into a [class@Gtk.Picture].

    `GtkVideo` aims to cover use cases such as previews, embedded animations,
    etc. It supports autoplay, looping, and simple media controls. It does
    not have support for video overlays, multichannel audio, device
    selection, or input. If you are writing a full-fledged video player,
    you may want to use the [iface@Gdk.Paintable] API and a media framework
    such as Gstreamer directly.

    :Constructors:

    ::

        Video(**properties)
        new() -> Gtk.Widget
        new_for_file(file:Gio.File=None) -> Gtk.Widget
        new_for_filename(filename:str=None) -> Gtk.Widget
        new_for_media_stream(stream:Gtk.MediaStream=None) -> Gtk.Widget
        new_for_resource(resource_path:str=None) -> Gtk.Widget

    Object GtkVideo

    Properties from GtkVideo:
      autoplay -> gboolean: autoplay
      file -> GFile: file
      loop -> gboolean: loop
      media-stream -> GtkMediaStream: media-stream

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        autoplay: bool
        """
        If the video should automatically begin playing.
        """
        file: Optional[Gio.File]
        """
        The file played by this video if the video is playing a file.
        """
        loop: bool
        """
        If new media files should be set to loop.
        """
        media_stream: Optional[MediaStream]
        """
        The media-stream played
        """

    props: Props = ...
    def __init__(
        self,
        autoplay: bool = ...,
        file: Optional[Gio.File] = ...,
        loop: bool = ...,
        media_stream: Optional[MediaStream] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_autoplay(self) -> bool:
        """
        Returns %TRUE if videos have been set to loop.

        Parameters:


        Returns:
            bool: %TRUE if streams should autoplay

        """
        ...

    def get_file(self) -> Optional[Gio.File]:
        """
        Gets the file played by @self or %NULL if not playing back
        a file.

        Parameters:


        Returns:
            Optional[Gio.File]: The file played by @self

        """
        ...

    def get_loop(self) -> bool:
        """
        Returns %TRUE if videos have been set to loop.

        Parameters:


        Returns:
            bool: %TRUE if streams should loop

        """
        ...

    def get_media_stream(self) -> Optional[MediaStream]:
        """
        Gets the media stream managed by @self or %NULL if none.

        Parameters:


        Returns:
            Optional[MediaStream]: The media stream managed by @self

        """
        ...

    @classmethod
    def new(cls) -> Video:
        """
        Creates a new empty `GtkVideo`.

        Parameters:


        Returns:
            Widget: a new `GtkVideo`

        """
        ...

    @classmethod
    def new_for_file(cls, file: Optional[Gio.File] = None) -> Video:
        """
        Creates a `GtkVideo` to play back the given @file.

        Parameters:
            file: a `GFile`

        Returns:
            Widget: a new `GtkVideo`

        """
        ...

    @classmethod
    def new_for_filename(cls, filename: Optional[str] = None) -> Video:
        """
        Creates a `GtkVideo` to play back the given @filename.

        This is a utility function that calls [ctor@Gtk.Video.new_for_file],
        See that function for details.

        Parameters:
            filename: filename to play back

        Returns:
            Widget: a new `GtkVideo`

        """
        ...

    @classmethod
    def new_for_media_stream(cls, stream: Optional[MediaStream] = None) -> Video:
        """
        Creates a `GtkVideo` to play back the given @stream.

        Parameters:
            stream: a `GtkMediaStream`

        Returns:
            Widget: a new `GtkVideo`

        """
        ...

    @classmethod
    def new_for_resource(cls, resource_path: Optional[str] = None) -> Video:
        """
        Creates a `GtkVideo` to play back the resource at the
        given @resource_path.

        This is a utility function that calls [ctor@Gtk.Video.new_for_file].

        Parameters:
            resource_path: resource path to play back

        Returns:
            Widget: a new `GtkVideo`

        """
        ...

    def set_autoplay(self, autoplay: bool) -> None:
        """
        Sets whether @self automatically starts playback when it
        becomes visible or when a new file gets loaded.

        Parameters:
            autoplay: whether media streams should autoplay

        Returns:

        """
        ...

    def set_file(self, file: Optional[Gio.File] = None) -> None:
        """
        Makes @self play the given @file.

        Parameters:
            file: the file to play

        Returns:

        """
        ...

    def set_filename(self, filename: Optional[str] = None) -> None:
        """
        Makes @self play the given @filename.

        This is a utility function that calls gtk_video_set_file(),

        Parameters:
            filename: the filename to play

        Returns:

        """
        ...

    def set_loop(self, loop: bool) -> None:
        """
        Sets whether new files loaded by @self should be set to loop.

        Parameters:
            loop: whether media streams should loop

        Returns:

        """
        ...

    def set_media_stream(self, stream: Optional[MediaStream] = None) -> None:
        """
        Sets the media stream to be played back.

        @self will take full control of managing the media stream. If you
        want to manage a media stream yourself, consider using a
        [class@Gtk.Picture] for display.

        If you want to display a file, consider using [method@Gtk.Video.set_file]
        instead.

        Parameters:
            stream: The media stream to play or %NULL to unset

        Returns:

        """
        ...

    def set_resource(self, resource_path: Optional[str] = None) -> None:
        """
        Makes @self play the resource at the given @resource_path.

        This is a utility function that calls [method@Gtk.Video.set_file].

        Parameters:
            resource_path: the resource to set

        Returns:

        """
        ...

class VideoClass(GObject.GPointer):
    """
    :Constructors:

    ::

        VideoClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class Viewport(Widget, Accessible, Buildable, ConstraintTarget, Scrollable):
    """
    `GtkViewport` implements scrollability for widgets that lack their
    own scrolling capabilities.

    Use `GtkViewport` to scroll child widgets such as `GtkGrid`,
    `GtkBox`, and so on.

    The `GtkViewport` will start scrolling content only if allocated
    less than the child widget’s minimum size in a given orientation.

    # CSS nodes

    `GtkViewport` has a single CSS node with name `viewport`.

    # Accessibility

    Until GTK 4.10, `GtkViewport` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.

    Starting from GTK 4.12, `GtkViewport` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.

    :Constructors:

    ::

        Viewport(**properties)
        new(hadjustment:Gtk.Adjustment=None, vadjustment:Gtk.Adjustment=None) -> Gtk.Widget

    Object GtkViewport

    Properties from GtkViewport:
      scroll-to-focus -> gboolean: scroll-to-focus
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Scrollable.Props,
    ):
        child: Optional[Widget]
        """
        The child widget.
        """
        scroll_to_focus: bool
        """
        Whether to scroll when the focus changes.

        Before 4.6.2, this property was mistakenly defaulting to FALSE, so if your
        code needs to work with older versions, consider setting it explicitly to
        TRUE.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        scroll_to_focus: bool = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        hadjustment: Optional[Adjustment] = ...,
        hscroll_policy: ScrollablePolicy = ...,
        vadjustment: Optional[Adjustment] = ...,
        vscroll_policy: ScrollablePolicy = ...,
    ): ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @viewport.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @viewport

        """
        ...

    def get_scroll_to_focus(self) -> bool:
        """
        Gets whether the viewport is scrolling to keep the focused
        child in view.

        Parameters:


        Returns:
            bool: %TRUE if the viewport keeps the focus child scrolled to view

        """
        ...

    @classmethod
    def new(
        cls,
        hadjustment: Optional[Adjustment] = None,
        vadjustment: Optional[Adjustment] = None,
    ) -> Viewport:
        """
        Creates a new `GtkViewport`.

        The new viewport uses the given adjustments, or default
        adjustments if none are given.

        Parameters:
            hadjustment: horizontal adjustment
            vadjustment: vertical adjustment

        Returns:
            Widget: a new `GtkViewport`

        """
        ...

    def scroll_to(
        self, descendant: Widget, scroll: Optional[ScrollInfo] = None
    ) -> None:
        """
        Scrolls a descendant of the viewport into view.

        The viewport and the descendant must be visible and mapped for
        this function to work, otherwise no scrolling will be performed.

        Parameters:
            descendant: a descendant widget of the viewport
            scroll: details of how to perform
        the scroll operation or NULL to scroll into view

        Returns:

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @viewport.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_scroll_to_focus(self, scroll_to_focus: bool) -> None:
        """
        Sets whether the viewport should automatically scroll
        to keep the focused child in view.

        Parameters:
            scroll_to_focus: whether to keep the focus widget scrolled to view

        Returns:

        """
        ...

@deprecated("This widget will be removed in GTK 5")
class VolumeButton(
    ScaleButton, Accessible, AccessibleRange, Buildable, ConstraintTarget, Orientable
):
    """
    `GtkVolumeButton` is a `GtkScaleButton` subclass tailored for
    volume control.

    ![An example GtkVolumeButton](volumebutton.png)

    :Constructors:

    ::

        VolumeButton(**properties)
        new() -> Gtk.Widget

    Object GtkVolumeButton

    Properties from GtkVolumeButton:
      use-symbolic -> gboolean: use-symbolic

    Signals from GtkScaleButton:
      value-changed (gdouble)
      popup ()
      popdown ()

    Properties from GtkScaleButton:
      value -> gdouble: value
      adjustment -> GtkAdjustment: adjustment
      icons -> GStrv: icons
      active -> gboolean: active

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        ScaleButton.Props,
        Accessible.Props,
        AccessibleRange.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Orientable.Props,
    ):
        use_symbolic: bool
        """
        Whether to use symbolic icons as the icons.

        Note that if the symbolic icons are not available in your installed
        theme, then the normal (potentially colorful) icons will be used.
        """

    props: Props = ...
    parent: ScaleButton = ...
    def __init__(
        self,
        use_symbolic: bool = ...,
        adjustment: Adjustment = ...,
        icons: Sequence[str] = ...,
        value: float = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
        orientation: Orientation = ...,
    ): ...
    @deprecated("This widget will be removed in GTK 5")
    @classmethod
    def new(cls) -> VolumeButton:
        """
        Creates a `GtkVolumeButton`.

        The button has a range between 0.0 and 1.0, with a stepping of 0.02.
        Volume values can be obtained and modified using the functions from
        [class@Gtk.ScaleButton].

        Parameters:


        Returns:
            Widget: a new `GtkVolumeButton`

        """
        ...

class Widget(GObject.InitiallyUnowned, Accessible, Buildable, ConstraintTarget):
    """
    The base class for all widgets.

    `GtkWidget` is the base class all widgets in GTK derive from. It manages the
    widget lifecycle, layout, states and style.

    ### Height-for-width Geometry Management

    GTK uses a height-for-width (and width-for-height) geometry management
    system. Height-for-width means that a widget can change how much
    vertical space it needs, depending on the amount of horizontal space
    that it is given (and similar for width-for-height). The most common
    example is a label that reflows to fill up the available width, wraps
    to fewer lines, and therefore needs less height.

    Height-for-width geometry management is implemented in GTK by way
    of two virtual methods:

    - [vfunc@Gtk.Widget.get_request_mode]
    - [vfunc@Gtk.Widget.measure]

    There are some important things to keep in mind when implementing
    height-for-width and when using it in widget implementations.

    If you implement a direct `GtkWidget` subclass that supports
    height-for-width or width-for-height geometry management for itself
    or its child widgets, the [vfunc@Gtk.Widget.get_request_mode] virtual
    function must be implemented as well and return the widget's preferred
    request mode. The default implementation of this virtual function
    returns %GTK_SIZE_REQUEST_CONSTANT_SIZE, which means that the widget will
    only ever get -1 passed as the for_size value to its
    [vfunc@Gtk.Widget.measure] implementation.

    The geometry management system will query a widget hierarchy in
    only one orientation at a time. When widgets are initially queried
    for their minimum sizes it is generally done in two initial passes
    in the [enum@Gtk.SizeRequestMode] chosen by the toplevel.

    For example, when queried in the normal %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH mode:

    First, the default minimum and natural width for each widget
    in the interface will be computed using [id@gtk_widget_measure] with an
    orientation of %GTK_ORIENTATION_HORIZONTAL and a for_size of -1.
    Because the preferred widths for each widget depend on the preferred
    widths of their children, this information propagates up the hierarchy,
    and finally a minimum and natural width is determined for the entire
    toplevel. Next, the toplevel will use the minimum width to query for the
    minimum height contextual to that width using [id@gtk_widget_measure] with an
    orientation of %GTK_ORIENTATION_VERTICAL and a for_size of the just computed
    width. This will also be a highly recursive operation. The minimum height
    for the minimum width is normally used to set the minimum size constraint
    on the toplevel.

    After the toplevel window has initially requested its size in both
    dimensions it can go on to allocate itself a reasonable size (or a size
    previously specified with [method@Gtk.Window.set_default_size]). During the
    recursive allocation process it’s important to note that request cycles
    will be recursively executed while widgets allocate their children.
    Each widget, once allocated a size, will go on to first share the
    space in one orientation among its children and then request each child's
    height for its target allocated width or its width for allocated height,
    depending. In this way a `GtkWidget` will typically be requested its size
    a number of times before actually being allocated a size. The size a
    widget is finally allocated can of course differ from the size it has
    requested. For this reason, `GtkWidget` caches a small number of results
    to avoid re-querying for the same sizes in one allocation cycle.

    If a widget does move content around to intelligently use up the
    allocated size then it must support the request in both
    `GtkSizeRequestMode`s even if the widget in question only
    trades sizes in a single orientation.

    For instance, a [class@Gtk.Label] that does height-for-width word wrapping
    will not expect to have [vfunc@Gtk.Widget.measure] with an orientation of
    %GTK_ORIENTATION_VERTICAL called because that call is specific to a
    width-for-height request. In this case the label must return the height
    required for its own minimum possible width. By following this rule any
    widget that handles height-for-width or width-for-height requests will
    always be allocated at least enough space to fit its own content.

    Here are some examples of how a %GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH widget
    generally deals with width-for-height requests:

    ```c
    static void
    foo_widget_measure (GtkWidget *widget,
    GtkOrientation orientation,
    int for_size,
    int *minimum_size,
    int *natural_size,
    int *minimum_baseline,
    int *natural_baseline)
    {
    if (orientation == GTK_ORIENTATION_HORIZONTAL)
    {
    // Calculate minimum and natural width
    }
    else // VERTICAL
    {
    if (i_am_in_height_for_width_mode)
    {
    int min_width, dummy;

    // First, get the minimum width of our widget
    GTK_WIDGET_GET_CLASS (widget)->measure (widget, GTK_ORIENTATION_HORIZONTAL, -1,
    &min_width, &dummy, &dummy, &dummy);

    // Now use the minimum width to retrieve the minimum and natural height to display
    // that width.
    GTK_WIDGET_GET_CLASS (widget)->measure (widget, GTK_ORIENTATION_VERTICAL, min_width,
    minimum_size, natural_size, &dummy, &dummy);
    }
    else
    {
    // ... some widgets do both.
    }
    }
    }
    ```

    Often a widget needs to get its own request during size request or
    allocation. For example, when computing height it may need to also
    compute width. Or when deciding how to use an allocation, the widget
    may need to know its natural size. In these cases, the widget should
    be careful to call its virtual methods directly, like in the code
    example above.

    It will not work to use the wrapper function [method@Gtk.Widget.measure]
    inside your own [vfunc@Gtk.Widget.size_allocate] implementation.
    These return a request adjusted by [class@Gtk.SizeGroup], the widget's
    align and expand flags, as well as its CSS style.

    If a widget used the wrappers inside its virtual method implementations,
    then the adjustments (such as widget margins) would be applied
    twice. GTK therefore does not allow this and will warn if you try
    to do it.

    Of course if you are getting the size request for another widget, such
    as a child widget, you must use [id@gtk_widget_measure]; otherwise, you
    would not properly consider widget margins, [class@Gtk.SizeGroup], and
    so forth.

    GTK also supports baseline vertical alignment of widgets. This
    means that widgets are positioned such that the typographical baseline of
    widgets in the same row are aligned. This happens if a widget supports
    baselines, has a vertical alignment using baselines, and is inside
    a widget that supports baselines and has a natural “row” that it aligns to
    the baseline, or a baseline assigned to it by the grandparent.

    Baseline alignment support for a widget is also done by the
    [vfunc@Gtk.Widget.measure] virtual function. It allows you to report
    both a minimum and natural size.

    If a widget ends up baseline aligned it will be allocated all the space in
    the parent as if it was %GTK_ALIGN_FILL, but the selected baseline can be
    found via [id@gtk_widget_get_baseline]. If the baseline has a
    value other than -1 you need to align the widget such that the baseline
    appears at the position.

    ### GtkWidget as GtkBuildable

    The `GtkWidget` implementation of the `GtkBuildable` interface
    supports various custom elements to specify additional aspects of widgets
    that are not directly expressed as properties.

    If the widget uses a [class@Gtk.LayoutManager], `GtkWidget` supports
    a custom `<layout>` element, used to define layout properties:

    ```xml
    <object class=\"GtkGrid\" id=\"my_grid\">
    <child>
    <object class=\"GtkLabel\" id=\"label1\">
    <property name=\"label\">Description</property>
    <layout>
    <property name=\"column\">0</property>
    <property name=\"row\">0</property>
    <property name=\"row-span\">1</property>
    <property name=\"column-span\">1</property>
    </layout>
    </object>
    </child>
    <child>
    <object class=\"GtkEntry\" id=\"description_entry\">
    <layout>
    <property name=\"column\">1</property>
    <property name=\"row\">0</property>
    <property name=\"row-span\">1</property>
    <property name=\"column-span\">1</property>
    </layout>
    </object>
    </child>
    </object>
    ```

    `GtkWidget` allows style information such as style classes to
    be associated with widgets, using the custom `<style>` element:

    ```xml
    <object class=\"GtkButton\" id=\"button1\">
    <style>
    <class name=\"my-special-button-class\"/>
    <class name=\"dark-button\"/>
    </style>
    </object>
    ```

    `GtkWidget` allows defining accessibility information, such as properties,
    relations, and states, using the custom `<accessibility>` element:

    ```xml
    <object class=\"GtkButton\" id=\"button1\">
    <accessibility>
    <property name=\"label\">Download</property>
    <relation name=\"labelled-by\">label1</relation>
    </accessibility>
    </object>
    ```

    ### Building composite widgets from template XML

    `GtkWidget `exposes some facilities to automate the procedure
    of creating composite widgets using \"templates\".

    To create composite widgets with `GtkBuilder` XML, one must associate
    the interface description with the widget class at class initialization
    time using [method@Gtk.WidgetClass.set_template].

    The interface description semantics expected in composite template descriptions
    is slightly different from regular [class@Gtk.Builder] XML.

    Unlike regular interface descriptions, [method@Gtk.WidgetClass.set_template]
    will expect a `<template>` tag as a direct child of the toplevel
    `<interface>` tag. The `<template>` tag must specify the “class” attribute
    which must be the type name of the widget. Optionally, the “parent”
    attribute may be specified to specify the direct parent type of the widget
    type; this is ignored by `GtkBuilder` but can be used by UI design tools to
    introspect what kind of properties and internal children exist for a given
    type when the actual type does not exist.

    The XML which is contained inside the `<template>` tag behaves as if it were
    added to the `<object>` tag defining the widget itself. You may set properties
    on a widget by inserting `<property>` tags into the `<template>` tag, and also
    add `<child>` tags to add children and extend a widget in the normal way you
    would with `<object>` tags.

    Additionally, `<object>` tags can also be added before and after the initial
    `<template>` tag in the normal way, allowing one to define auxiliary objects
    which might be referenced by other widgets declared as children of the
    `<template>` tag.

    An example of a template definition:

    ```xml
    <interface>
    <template class=\"FooWidget\" parent=\"GtkBox\">
    <property name=\"orientation\">horizontal</property>
    <property name=\"spacing\">4</property>
    <child>
    <object class=\"GtkButton\" id=\"hello_button\">
    <property name=\"label\">Hello World</property>
    <signal name=\"clicked\" handler=\"hello_button_clicked\" object=\"FooWidget\" swapped=\"yes\"/>
    </object>
    </child>
    <child>
    <object class=\"GtkButton\" id=\"goodbye_button\">
    <property name=\"label\">Goodbye World</property>
    </object>
    </child>
    </template>
    </interface>
    ```

    Typically, you'll place the template fragment into a file that is
    bundled with your project, using `GResource`. In order to load the
    template, you need to call [method@Gtk.WidgetClass.set_template_from_resource]
    from the class initialization of your `GtkWidget` type:

    ```c
    static void
    foo_widget_class_init (FooWidgetClass *klass)
    {
    // ...

    gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
    \"/com/example/ui/foowidget.ui\");
    }
    ```

    You will also need to call [method@Gtk.Widget.init_template] from the
    instance initialization function:

    ```c
    static void
    foo_widget_init (FooWidget *self)
    {
    gtk_widget_init_template (GTK_WIDGET (self));

    // Initialize the rest of the widget...
    }
    ```

    as well as calling [method@Gtk.Widget.dispose_template] from the dispose
    function:

    ```c
    static void
    foo_widget_dispose (GObject *gobject)
    {
    FooWidget *self = FOO_WIDGET (gobject);

    // Dispose objects for which you have a reference...

    // Clear the template children for this widget type
    gtk_widget_dispose_template (GTK_WIDGET (self), FOO_TYPE_WIDGET);

    G_OBJECT_CLASS (foo_widget_parent_class)->dispose (gobject);
    }
    ```

    You can access widgets defined in the template using the
    [id@gtk_widget_get_template_child] function, but you will typically declare
    a pointer in the instance private data structure of your type using the same
    name as the widget in the template definition, and call
    [method@Gtk.WidgetClass.bind_template_child_full] (or one of its wrapper macros
    [func@Gtk.widget_class_bind_template_child] and [func@Gtk.widget_class_bind_template_child_private])
    with that name, e.g.

    ```c
    typedef struct {
    GtkWidget *hello_button;
    GtkWidget *goodbye_button;
    } FooWidgetPrivate;

    G_DEFINE_TYPE_WITH_PRIVATE (FooWidget, foo_widget, GTK_TYPE_BOX)

    static void
    foo_widget_dispose (GObject *gobject)
    {
    gtk_widget_dispose_template (GTK_WIDGET (gobject), FOO_TYPE_WIDGET);

    G_OBJECT_CLASS (foo_widget_parent_class)->dispose (gobject);
    }

    static void
    foo_widget_class_init (FooWidgetClass *klass)
    {
    // ...
    G_OBJECT_CLASS (klass)->dispose = foo_widget_dispose;

    gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
    \"/com/example/ui/foowidget.ui\");
    gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),
    FooWidget, hello_button);
    gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),
    FooWidget, goodbye_button);
    }

    static void
    foo_widget_init (FooWidget *widget)
    {
    gtk_widget_init_template (GTK_WIDGET (widget));
    }
    ```

    You can also use [method@Gtk.WidgetClass.bind_template_callback_full] (or
    is wrapper macro [func@Gtk.widget_class_bind_template_callback]) to connect
    a signal callback defined in the template with a function visible in the
    scope of the class, e.g.

    ```c
    // the signal handler has the instance and user data swapped
    // because of the swapped=\"yes\" attribute in the template XML
    static void
    hello_button_clicked (FooWidget *self,
    GtkButton *button)
    {
    g_print (\"Hello, world!\n\");
    }

    static void
    foo_widget_class_init (FooWidgetClass *klass)
    {
    // ...
    gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),
    \"/com/example/ui/foowidget.ui\");
    gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), hello_button_clicked);
    }
    ```

    :Constructors:

    ::

        Widget(**properties)

    Object GtkWidget

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        GObject.InitiallyUnowned.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
    ):
        can_focus: bool
        """
        Whether the widget or any of its descendents can accept
        the input focus.

        This property is meant to be set by widget implementations,
        typically in their instance init function.
        """
        can_target: bool
        """
        Whether the widget can receive pointer events.
        """
        css_classes: list[str]
        """
        A list of css classes applied to this widget.
        """
        css_name: str
        """
        The name of this widget in the CSS tree.

        This property is meant to be set by widget implementations,
        typically in their instance init function.
        """
        cursor: Optional[Gdk.Cursor]
        """
        The cursor used by @widget.
        """
        focus_on_click: bool
        """
        Whether the widget should grab focus when it is clicked with the mouse.

        This property is only relevant for widgets that can take focus.
        """
        focusable: bool
        """
        Whether this widget itself will accept the input focus.
        """
        halign: Align
        """
        How to distribute horizontal space if widget gets extra space.
        """
        has_default: bool
        """
        Whether the widget is the default widget.
        """
        has_focus: bool
        """
        Whether the widget has the input focus.
        """
        has_tooltip: bool
        """
        Enables or disables the emission of the ::query-tooltip signal on @widget.

        A value of %TRUE indicates that @widget can have a tooltip, in this case
        the widget will be queried using [signal@Gtk.Widget::query-tooltip] to
        determine whether it will provide a tooltip or not.
        """
        height_request: int
        """
        Override for height request of the widget.

        If this is -1, the natural request will be used.
        """
        hexpand: bool
        """
        Whether to expand horizontally.
        """
        hexpand_set: bool
        """
        Whether to use the `hexpand` property.
        """
        layout_manager: Optional[LayoutManager]
        """
        The `GtkLayoutManager` instance to use to compute the preferred size
        of the widget, and allocate its children.

        This property is meant to be set by widget implementations,
        typically in their instance init function.
        """
        margin_bottom: int
        """
        Margin on bottom side of widget.

        This property adds margin outside of the widget's normal size
        request, the margin will be added in addition to the size from
        [method@Gtk.Widget.set_size_request] for example.
        """
        margin_end: int
        """
        Margin on end of widget, horizontally.

        This property supports left-to-right and right-to-left text
        directions.

        This property adds margin outside of the widget's normal size
        request, the margin will be added in addition to the size from
        [method@Gtk.Widget.set_size_request] for example.
        """
        margin_start: int
        """
        Margin on start of widget, horizontally.

        This property supports left-to-right and right-to-left text
        directions.

        This property adds margin outside of the widget's normal size
        request, the margin will be added in addition to the size from
        [method@Gtk.Widget.set_size_request] for example.
        """
        margin_top: int
        """
        Margin on top side of widget.

        This property adds margin outside of the widget's normal size
        request, the margin will be added in addition to the size from
        [method@Gtk.Widget.set_size_request] for example.
        """
        name: str
        """
        The name of the widget.
        """
        opacity: float
        """
        The requested opacity of the widget.
        """
        overflow: Overflow
        """
        How content outside the widget's content area is treated.

        This property is meant to be set by widget implementations,
        typically in their instance init function.
        """
        parent: Optional[Widget]
        """
        The parent widget of this widget.
        """
        receives_default: bool
        """
        Whether the widget will receive the default action when it is focused.
        """
        root: Optional[Root]
        """
        The `GtkRoot` widget of the widget tree containing this widget.

        This will be %NULL if the widget is not contained in a root widget.
        """
        scale_factor: int
        """
        The scale factor of the widget.
        """
        sensitive: bool
        """
        Whether the widget responds to input.
        """
        tooltip_markup: Optional[str]
        """
        Sets the text of tooltip to be the given string, which is marked up
        with Pango markup.

        Also see [method@Gtk.Tooltip.set_markup].

        This is a convenience property which will take care of getting the
        tooltip shown if the given string is not %NULL:
        [property@Gtk.Widget:has-tooltip] will automatically be set to %TRUE
        and there will be taken care of [signal@Gtk.Widget::query-tooltip] in
        the default signal handler.

        Note that if both [property@Gtk.Widget:tooltip-text] and
        [property@Gtk.Widget:tooltip-markup] are set, the last one wins.
        """
        tooltip_text: Optional[str]
        """
        Sets the text of tooltip to be the given string.

        Also see [method@Gtk.Tooltip.set_text].

        This is a convenience property which will take care of getting the
        tooltip shown if the given string is not %NULL:
        [property@Gtk.Widget:has-tooltip] will automatically be set to %TRUE
        and there will be taken care of [signal@Gtk.Widget::query-tooltip] in
        the default signal handler.

        Note that if both [property@Gtk.Widget:tooltip-text] and
        [property@Gtk.Widget:tooltip-markup] are set, the last one wins.
        """
        valign: Align
        """
        How to distribute vertical space if widget gets extra space.
        """
        vexpand: bool
        """
        Whether to expand vertically.
        """
        vexpand_set: bool
        """
        Whether to use the `vexpand` property.
        """
        visible: bool
        """
        Whether the widget is visible.
        """
        width_request: int
        """
        Override for width request of the widget.

        If this is -1, the natural request will be used.
        """

    props: Props = ...
    parent_instance: GObject.InitiallyUnowned = ...
    priv: WidgetPrivate = ...
    def __init__(
        self,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def action_set_enabled(self, action_name: str, enabled: bool) -> None:
        """
        Enable or disable an action installed with
        gtk_widget_class_install_action().

        Parameters:
            action_name: action name, such as \"clipboard.paste\"
            enabled: whether the action is now enabled

        Returns:

        """
        ...

    def activate(self) -> bool:
        """
        For widgets that can be “activated” (buttons, menu items, etc.),
        this function activates them.

        The activation will emit the signal set using
        [method@Gtk.WidgetClass.set_activate_signal] during class initialization.

        Activation is what happens when you press <kbd>Enter</kbd>
        on a widget during key navigation.

        If you wish to handle the activation keybinding yourself, it is
        recommended to use [method@Gtk.WidgetClass.add_shortcut] with an action
        created with [ctor@Gtk.SignalAction.new].

        If @widget isn't activatable, the function returns %FALSE.

        Parameters:


        Returns:
            bool: %TRUE if the widget was activatable

        """
        ...

    def activate_action(self, name: str, args: Optional[GLib.Variant] = None) -> bool:
        """
        Looks up the action in the action groups associated
        with @widget and its ancestors, and activates it.

        This is a wrapper around [method@Gtk.Widget.activate_action_variant]
        that constructs the @args variant according to @format_string.

        Parameters:
            name: the name of the action to activate
            args:

        Returns:
            bool: %TRUE if the action was activated, %FALSE if the action
        does not exist

        """
        ...

    def activate_default(self) -> None:
        """
        Activates the `default.activate` action from @widget.

        Parameters:


        Returns:

        """
        ...

    def add_controller(self, controller: EventController) -> None:
        """
        Adds @controller to @widget so that it will receive events.

        You will usually want to call this function right after
        creating any kind of [class@Gtk.EventController].

        Parameters:
            controller: a `GtkEventController` that hasn't been
        added to a widget yet

        Returns:

        """
        ...

    def add_css_class(self, css_class: str) -> None:
        """
        Adds a style class to @widget.

        After calling this function, the widget’s style will match
        for @css_class, according to CSS matching rules.

        Use [method@Gtk.Widget.remove_css_class] to remove the
        style again.

        Parameters:
            css_class: The style class to add to @widget, without
        the leading '.' used for notation of style classes

        Returns:

        """
        ...

    def add_mnemonic_label(self, label: Widget) -> None:
        """
        Adds a widget to the list of mnemonic labels for this widget.

        See [method@Gtk.Widget.list_mnemonic_labels]. Note the
        list of mnemonic labels for the widget is cleared when the
        widget is destroyed, so the caller must make sure to update
        its internal state at this point as well.

        Parameters:
            label: a `GtkWidget` that acts as a mnemonic label for @widget

        Returns:

        """
        ...

    def add_shortcut(self, shortcut: Shortcut) -> None: ...
    def add_tick_callback(self, callback: Callable[..., bool], *user_data: Any) -> int:
        """
        Queues an animation frame update and adds a callback to be called
        before each frame.

        Until the tick callback is removed, it will be called frequently
        (usually at the frame rate of the output device or as quickly as
        the application can be repainted, whichever is slower). For this
        reason, is most suitable for handling graphics that change every
        frame or every few frames. The tick callback does not automatically
        imply a relayout or repaint. If you want a repaint or relayout, and
        aren’t changing widget properties that would trigger that (for example,
        changing the text of a `GtkLabel`), then you will have to call
        [method@Gtk.Widget.queue_resize] or [method@Gtk.Widget.queue_draw]
        yourself.

        [method@Gdk.FrameClock.get_frame_time] should generally be used
        for timing continuous animations and
        [method@Gdk.FrameTimings.get_predicted_presentation_time] if you are
        trying to display isolated frames at particular times.

        This is a more convenient alternative to connecting directly to the
        [signal@Gdk.FrameClock::update] signal of `GdkFrameClock`, since you
        don't have to worry about when a `GdkFrameClock` is assigned to a widget.

        Parameters:
            callback: function to call for updating animations
            user_data: data to pass to @callback

        Returns:
            int: an id for the connection of this callback. Remove the callback
        by passing the id returned from this function to
        [method@Gtk.Widget.remove_tick_callback]

        """
        ...

    def allocate(
        self,
        width: int,
        height: int,
        baseline: int,
        transform: Optional[Gsk.Transform] = None,
    ) -> None:
        """
        This function is only used by `GtkWidget` subclasses, to
        assign a size, position and (optionally) baseline to their
        child widgets.

        In this function, the allocation and baseline may be adjusted.
        The given allocation will be forced to be bigger than the
        widget's minimum size, as well as at least 0×0 in size.

        For a version that does not take a transform, see
        [method@Gtk.Widget.size_allocate].

        Parameters:
            width: New width of @widget
            height: New height of @widget
            baseline: New baseline of @widget, or -1
            transform: Transformation to be applied to @widget

        Returns:

        """
        ...

    def bind_template_callback_full(
        self, callback_name: str, callback_symbol: Callable[[], None]
    ) -> None: ...
    def bind_template_child_full(
        self, name: str, internal_child: bool, struct_offset: int
    ) -> None: ...
    def child_focus(self, direction: DirectionType) -> bool:
        """
        Called by widgets as the user moves around the window using
        keyboard shortcuts.

        The @direction argument indicates what kind of motion is taking place (up,
        down, left, right, tab forward, tab backward).

        This function calls the [vfunc@Gtk.Widget.focus] virtual function; widgets
        can override the virtual function in order to implement appropriate focus
        behavior.

        The default `focus()` virtual function for a widget should return `TRUE` if
        moving in @direction left the focus on a focusable location inside that
        widget, and `FALSE` if moving in @direction moved the focus outside the
        widget. When returning `TRUE`, widgets normally call [method@Gtk.Widget.grab_focus]
        to place the focus accordingly; when returning `FALSE`, they don’t modify
        the current focus location.

        This function is used by custom widget implementations; if you're
        writing an app, you’d use [method@Gtk.Widget.grab_focus] to move
        the focus to a particular widget.

        Parameters:
            direction: direction of focus movement

        Returns:
            bool: %TRUE if focus ended up inside @widget

        """
        ...

    def compute_bounds(self, target: Widget) -> Tuple[bool, Graphene.Rect]:
        """
        Computes the bounds for @widget in the coordinate space of @target.

        The bounds of widget are (the bounding box of) the region that it is
        expected to draw in. See the [coordinate system](coordinates.html)
        overview to learn more.

        If the operation is successful, %TRUE is returned. If @widget has no
        bounds or the bounds cannot be expressed in @target's coordinate space
        (for example if both widgets are in different windows), %FALSE is
        returned and @bounds is set to the zero rectangle.

        It is valid for @widget and @target to be the same widget.

        Parameters:
            target: the `GtkWidget`

        Returns:
            bool: %TRUE if the bounds could be computed
            Graphene.Rect: the rectangle taking the bounds
        """
        ...

    def compute_expand(self, orientation: Orientation) -> bool:
        """
        Computes whether a container should give this widget
        extra space when possible.

        Containers should check this, rather than looking at
        [method@Gtk.Widget.get_hexpand] or [method@Gtk.Widget.get_vexpand].

        This function already checks whether the widget is visible, so
        visibility does not need to be checked separately. Non-visible
        widgets are not expanded.

        The computed expand value uses either the expand setting explicitly
        set on the widget itself, or, if none has been explicitly set,
        the widget may expand if some of its children do.

        Parameters:
            orientation: expand direction

        Returns:
            bool: whether widget tree rooted here should be expanded

        """
        ...

    def compute_point(
        self, target: Widget, point: Graphene.Point
    ) -> Tuple[bool, Graphene.Point]:
        """
        Translates the given @point in @widget's coordinates to coordinates
        relative to @target’s coordinate system.

        In order to perform this operation, both widgets must share a
        common ancestor.

        Parameters:
            target: the `GtkWidget` to transform into
            point: a point in @widget's coordinate system

        Returns:
            bool: %TRUE if the point could be determined, %FALSE on failure.
        In this case, 0 is stored in @out_point.
            Graphene.Point: Set to the corresponding coordinates in
        @target's coordinate system
        """
        ...

    def compute_transform(self, target: Widget) -> Tuple[bool, Graphene.Matrix]:
        """
        Computes a matrix suitable to describe a transformation from
        @widget's coordinate system into @target's coordinate system.

        The transform can not be computed in certain cases, for example
        when @widget and @target do not share a common ancestor. In that
        case @out_transform gets set to the identity matrix.

        To learn more about widget coordinate systems, see the coordinate
        system [overview](coordinates.html).

        Parameters:
            target: the target widget that the matrix will transform to

        Returns:
            bool: %TRUE if the transform could be computed, %FALSE otherwise
            Graphene.Matrix: location to
        store the final transformation
        """
        ...

    def contains(self, x: float, y: float) -> bool:
        """
        Tests if the point at (@x, @y) is contained in @widget.

        The coordinates for (@x, @y) must be in widget coordinates, so
        (0, 0) is assumed to be the top left of @widget's content area.

        Parameters:
            x: X coordinate to test, relative to @widget's origin
            y: Y coordinate to test, relative to @widget's origin

        Returns:
            bool: %TRUE if @widget contains (@x, @y).

        """
        ...

    def create_pango_context(self) -> Pango.Context:
        """
        Creates a new `PangoContext` with the appropriate font map,
        font options, font description, and base direction for drawing
        text for this widget.

        See also [method@Gtk.Widget.get_pango_context].

        Parameters:


        Returns:
            Pango.Context: the new `PangoContext`

        """
        ...

    def create_pango_layout(self, text: Optional[str] = None) -> Pango.Layout:
        """
        Creates a new `PangoLayout` with the appropriate font map,
        font description, and base direction for drawing text for
        this widget.

        If you keep a `PangoLayout` created in this way around,
        you need to re-create it when the widget `PangoContext`
        is replaced. This can be tracked by listening to changes
        of the [property@Gtk.Widget:root] property on the widget.

        Parameters:
            text: text to set on the layout

        Returns:
            Pango.Layout: the new `PangoLayout`

        """
        ...

    def dispose_template(self, widget_type: Type) -> None:
        """
        Clears the template children for the given widget.

        This function is the opposite of [method@Gtk.Widget.init_template], and
        it is used to clear all the template children from a widget instance.
        If you bound a template child to a field in the instance structure, or
        in the instance private data structure, the field will be set to `NULL`
        after this function returns.

        You should call this function inside the `GObjectClass.dispose()`
        implementation of any widget that called `gtk_widget_init_template()`.
        Typically, you will want to call this function last, right before
        chaining up to the parent type's dispose implementation, e.g.

        ```c
        static void
        some_widget_dispose (GObject *gobject)
        {
        SomeWidget *self = SOME_WIDGET (gobject);

        // Clear the template data for SomeWidget
        gtk_widget_dispose_template (GTK_WIDGET (self), SOME_TYPE_WIDGET);

        G_OBJECT_CLASS (some_widget_parent_class)->dispose (gobject);
        }
        ```

        Parameters:
            widget_type: the type of the widget to finalize the template for

        Returns:

        """
        ...

    def do_compute_expand(self, hexpand_p: bool, vexpand_p: bool) -> None: ...
    def do_contains(self, x: float, y: float) -> bool:
        """
        Tests if the point at (@x, @y) is contained in @widget.

        The coordinates for (@x, @y) must be in widget coordinates, so
        (0, 0) is assumed to be the top left of @widget's content area.

        Parameters:
            x: X coordinate to test, relative to @widget's origin
            y: Y coordinate to test, relative to @widget's origin

        Returns:
            bool: %TRUE if @widget contains (@x, @y).

        """
        ...

    def do_css_changed(self, change: CssStyleChange) -> None: ...
    def do_direction_changed(self, previous_direction: TextDirection) -> None: ...
    def do_focus(self, direction: DirectionType) -> bool: ...
    def do_get_request_mode(self) -> SizeRequestMode:
        """
        Gets whether the widget prefers a height-for-width layout
        or a width-for-height layout.

        Single-child widgets generally propagate the preference of
        their child, more complex widgets need to request something
        either in context of their children or in context of their
        allocation capabilities.

        Parameters:


        Returns:
            SizeRequestMode: The `GtkSizeRequestMode` preferred by @widget.

        """
        ...

    def do_grab_focus(self) -> bool:
        """
        Causes @widget to have the keyboard focus for the `GtkWindow` it's inside.

        If @widget is not focusable, or its [vfunc@Gtk.Widget.grab_focus]
        implementation cannot transfer the focus to a descendant of @widget
        that is focusable, it will not take focus and %FALSE will be returned.

        Calling [method@Gtk.Widget.grab_focus] on an already focused widget
        is allowed, should not have an effect, and return %TRUE.

        Parameters:


        Returns:
            bool: %TRUE if focus is now inside @widget.

        """
        ...

    def do_hide(self) -> None:
        """
        Reverses the effects of gtk_widget_show().

        This is causing the widget to be hidden (invisible to the user).

        Parameters:


        Returns:

        """
        ...

    def do_keynav_failed(self, direction: DirectionType) -> bool:
        """
        Emits the `::keynav-failed` signal on the widget.

        This function should be called whenever keyboard navigation
        within a single widget hits a boundary.

        The return value of this function should be interpreted
        in a way similar to the return value of
        [method@Gtk.Widget.child_focus]. When %TRUE is returned,
        stay in the widget, the failed keyboard navigation is OK
        and/or there is nowhere we can/should move the focus to.
        When %FALSE is returned, the caller should continue with
        keyboard navigation outside the widget, e.g. by calling
        [method@Gtk.Widget.child_focus] on the widget’s toplevel.

        The default [signal@Gtk.Widget::keynav-failed] handler returns
        %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
        For the other values of `GtkDirectionType` it returns %TRUE.

        Whenever the default handler returns %TRUE, it also calls
        [method@Gtk.Widget.error_bell] to notify the user of the
        failed keyboard navigation.

        A use case for providing an own implementation of ::keynav-failed
        (either by connecting to it or by overriding it) would be a row of
        [class@Gtk.Entry] widgets where the user should be able to navigate
        the entire row with the cursor keys, as e.g. known from user
        interfaces that require entering license keys.

        Parameters:
            direction: direction of focus movement

        Returns:
            bool: %TRUE if stopping keyboard navigation is fine, %FALSE
        if the emitting widget should try to handle the keyboard
        navigation attempt in its parent container(s).

        """
        ...

    def do_map(self) -> None:
        """
        Causes a widget to be mapped if it isn’t already.

        This function is only for use in widget implementations.

        Parameters:


        Returns:

        """
        ...

    def do_measure(
        self, orientation: Orientation, for_size: int
    ) -> Tuple[int, int, int, int]:
        """
        Measures @widget in the orientation @orientation and for the given @for_size.

        As an example, if @orientation is %GTK_ORIENTATION_HORIZONTAL and @for_size
        is 300, this functions will compute the minimum and natural width of @widget
        if it is allocated at a height of 300 pixels.

        See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
        a more details on implementing `GtkWidgetClass.measure()`.

        Parameters:
            orientation: the orientation to measure
            for_size: Size for the opposite of @orientation, i.e.
        if @orientation is %GTK_ORIENTATION_HORIZONTAL, this is
        the height the widget should be measured with. The %GTK_ORIENTATION_VERTICAL
        case is analogous. This way, both height-for-width and width-for-height
        requests can be implemented. If no size is known, -1 can be passed.

        Returns:
            int: location to store the minimum size
            int: location to store the natural size
            int: location to store the baseline
        position for the minimum size, or -1 to report no baseline
            int: location to store the baseline
        position for the natural size, or -1 to report no baseline
        """
        ...

    def do_mnemonic_activate(self, group_cycling: bool) -> bool:
        """
        Emits the ::mnemonic-activate signal.

        See [signal@Gtk.Widget::mnemonic-activate].

        Parameters:
            group_cycling: %TRUE if there are other widgets with the same mnemonic

        Returns:
            bool: %TRUE if the signal has been handled

        """
        ...

    def do_move_focus(self, direction: DirectionType) -> None: ...
    def do_query_tooltip(
        self, x: int, y: int, keyboard_tooltip: bool, tooltip: Tooltip
    ) -> bool: ...
    def do_realize(self) -> None:
        """
        Creates the GDK resources associated with a widget.

        Normally realization happens implicitly; if you show a widget
        and all its parent containers, then the widget will be realized
        and mapped automatically.

        Realizing a widget requires all the widget’s parent widgets to be
        realized; calling this function realizes the widget’s parents
        in addition to @widget itself. If a widget is not yet inside a
        toplevel window when you realize it, bad things will happen.

        This function is primarily used in widget implementations, and
        isn’t very useful otherwise. Many times when you think you might
        need it, a better approach is to connect to a signal that will be
        called after the widget is realized automatically, such as
        [signal@Gtk.Widget::realize].

        Parameters:


        Returns:

        """
        ...

    def do_root(self) -> None: ...
    def do_set_focus_child(self, child: Optional[Widget] = None) -> None:
        """
        Set @child as the current focus child of @widget.

        This function is only suitable for widget implementations.
        If you want a certain widget to get the input focus, call
        [method@Gtk.Widget.grab_focus] on it.

        Parameters:
            child: a direct child widget of @widget or %NULL
        to unset the focus child of @widget

        Returns:

        """
        ...

    def do_show(self) -> None:
        """
        Flags a widget to be displayed.

        Any widget that isn’t shown will not appear on the screen.

        Remember that you have to show the containers containing a widget,
        in addition to the widget itself, before it will appear onscreen.

        When a toplevel container is shown, it is immediately realized and
        mapped; other shown widgets are realized and mapped when their
        toplevel container is realized and mapped.

        Parameters:


        Returns:

        """
        ...

    def do_size_allocate(self, width: int, height: int, baseline: int) -> None: ...
    def do_snapshot(self, snapshot: Snapshot) -> None: ...
    def do_state_flags_changed(self, previous_state_flags: StateFlags) -> None: ...
    def do_system_setting_changed(self, settings: SystemSetting) -> None: ...
    def do_unmap(self) -> None:
        """
        Causes a widget to be unmapped if it’s currently mapped.

        This function is only for use in widget implementations.

        Parameters:


        Returns:

        """
        ...

    def do_unrealize(self) -> None:
        """
        Causes a widget to be unrealized (frees all GDK resources
        associated with the widget).

        This function is only useful in widget implementations.

        Parameters:


        Returns:

        """
        ...

    def do_unroot(self) -> None: ...
    def drag_check_threshold(
        self, start_x: int, start_y: int, current_x: int, current_y: int
    ) -> bool:
        """
        Checks to see if a drag movement has passed the GTK drag threshold.

        Parameters:
            start_x: X coordinate of start of drag
            start_y: Y coordinate of start of drag
            current_x: current X coordinate
            current_y: current Y coordinate

        Returns:
            bool: %TRUE if the drag threshold has been passed.

        """
        ...

    def error_bell(self) -> None:
        """
        Notifies the user about an input-related error on this widget.

        If the [property@Gtk.Settings:gtk-error-bell] setting is %TRUE,
        it calls [method@Gdk.Surface.beep], otherwise it does nothing.

        Note that the effect of [method@Gdk.Surface.beep] can be configured
        in many ways, depending on the windowing backend and the desktop
        environment or window manager that is used.

        Parameters:


        Returns:

        """
        ...

    def get_activate_signal(self) -> int: ...
    @deprecated("Use [method@Gtk.Widget.get_baseline] instead")
    def get_allocated_baseline(self) -> int:
        """
        Returns the baseline that has currently been allocated to @widget.

        This function is intended to be used when implementing handlers
        for the `GtkWidget`Class.snapshot() function, and when allocating
        child widgets in `GtkWidget`Class.size_allocate().

        Parameters:


        Returns:
            int: the baseline of the @widget, or -1 if none

        """
        ...

    @deprecated("Use [method@Gtk.Widget.get_height] instead")
    def get_allocated_height(self) -> int:
        """
        Returns the height that has currently been allocated to @widget.

        To learn more about widget sizes, see the coordinate
        system [overview](coordinates.html).

        Parameters:


        Returns:
            int: the height of the @widget

        """
        ...

    @deprecated("Use [method@Gtk.Widget.get_width] instead")
    def get_allocated_width(self) -> int:
        """
        Returns the width that has currently been allocated to @widget.

        To learn more about widget sizes, see the coordinate
        system [overview](coordinates.html).

        Parameters:


        Returns:
            int: the width of the @widget

        """
        ...

    @deprecated(
        "Use [method@Gtk.Widget.compute_bounds], [method@Gtk.Widget.get_width] or [method@Gtk.Widget.get_height] instead."
    )
    def get_allocation(self) -> Gdk.Rectangle:
        """
        Retrieves the widget’s allocation.

        Note, when implementing a layout container: a widget’s allocation
        will be its “adjusted” allocation, that is, the widget’s parent
        typically calls [method@Gtk.Widget.size_allocate] with an allocation,
        and that allocation is then adjusted (to handle margin
        and alignment for example) before assignment to the widget.
        [method@Gtk.Widget.get_allocation] returns the adjusted allocation that
        was actually assigned to the widget. The adjusted allocation is
        guaranteed to be completely contained within the
        [method@Gtk.Widget.size_allocate] allocation, however.

        So a layout container is guaranteed that its children stay inside
        the assigned bounds, but not that they have exactly the bounds the
        container assigned.

        Parameters:


        Returns:
            Gdk.Rectangle: a pointer to a `GtkAllocation` to copy to
        """
        ...

    def get_ancestor(self, widget_type: Type) -> Optional[Widget]:
        """
        Gets the first ancestor of @widget with type @widget_type.

        For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
        gets the first `GtkBox` that’s an ancestor of @widget. No
        reference will be added to the returned widget; it should
        not be unreferenced.

        Note that unlike [method@Gtk.Widget.is_ancestor], this function
        considers @widget to be an ancestor of itself.

        Parameters:
            widget_type: ancestor type

        Returns:
            Optional[Widget]: the ancestor widget

        """
        ...

    def get_baseline(self) -> int:
        """
        Returns the baseline that has currently been allocated to @widget.

        This function is intended to be used when implementing handlers
        for the `GtkWidget`Class.snapshot() function, and when allocating
        child widgets in `GtkWidget`Class.size_allocate().

        Parameters:


        Returns:
            int: the baseline of the @widget, or -1 if none

        """
        ...

    def get_can_focus(self) -> bool:
        """
        Determines whether the input focus can enter @widget or any
        of its children.

        See [method@Gtk.Widget.set_focusable].

        Parameters:


        Returns:
            bool: %TRUE if the input focus can enter @widget, %FALSE otherwise

        """
        ...

    def get_can_target(self) -> bool:
        """
        Queries whether @widget can be the target of pointer events.

        Parameters:


        Returns:
            bool: %TRUE if @widget can receive pointer events

        """
        ...

    def get_child_visible(self) -> bool:
        """
        Gets the value set with gtk_widget_set_child_visible().

        If you feel a need to use this function, your code probably
        needs reorganization.

        This function is only useful for container implementations
        and should never be called by an application.

        Parameters:


        Returns:
            bool: %TRUE if the widget is mapped with the parent.

        """
        ...

    def get_clipboard(self) -> Gdk.Clipboard:
        """
        Gets the clipboard object for @widget.

        This is a utility function to get the clipboard object for the
        `GdkDisplay` that @widget is using.

        Note that this function always works, even when @widget is not
        realized yet.

        Parameters:


        Returns:
            Gdk.Clipboard: the appropriate clipboard object

        """
        ...

    def get_color(self) -> Gdk.RGBA:
        """
        Gets the current foreground color for the widget’s
        CSS style.

        This function should only be used in snapshot
        implementations that need to do custom
        drawing with the foreground color.

        Parameters:


        Returns:
            Gdk.RGBA: return location for the color
        """
        ...

    def get_css_classes(self) -> list[str]:
        """
        Returns the list of style classes applied to @widget.

        Parameters:


        Returns:
            list[str]: a %NULL-terminated list of
        css classes currently applied to @widget. The returned
        list must freed using g_strfreev().

        """
        ...

    def get_css_name(self) -> str:
        """
        Returns the CSS name that is used for @self.

        Parameters:


        Returns:
            str: the CSS name

        """
        ...

    def get_cursor(self) -> Optional[Gdk.Cursor]:
        """
        Queries the cursor set on @widget.

        See [method@Gtk.Widget.set_cursor] for details.

        Parameters:


        Returns:
            Optional[Gdk.Cursor]: the cursor
        currently in use or %NULL if the cursor is inherited

        """
        ...

    @staticmethod
    def get_default_direction() -> TextDirection:
        """
        Obtains the current default reading direction.

        See [func@Gtk.Widget.set_default_direction].

        Parameters:


        Returns:
            TextDirection: the current default direction.

        """
        ...

    def get_direction(self) -> TextDirection:
        """
        Gets the reading direction for a particular widget.

        See [method@Gtk.Widget.set_direction].

        Parameters:


        Returns:
            TextDirection: the reading direction for the widget.

        """
        ...

    def get_display(self) -> Gdk.Display:
        """
        Get the `GdkDisplay` for the toplevel window associated with
        this widget.

        This function can only be called after the widget has been
        added to a widget hierarchy with a `GtkWindow` at the top.

        In general, you should only create display specific
        resources when a widget has been realized, and you should
        free those resources when the widget is unrealized.

        Parameters:


        Returns:
            Gdk.Display: the `GdkDisplay` for the toplevel
        for this widget.

        """
        ...

    def get_first_child(self) -> Optional[Widget]:
        """
        Returns the widget’s first child.

        This API is primarily meant for widget implementations.

        Parameters:


        Returns:
            Optional[Widget]: The widget's first child

        """
        ...

    def get_focus_child(self) -> Optional[Widget]:
        """
        Returns the current focus child of @widget.

        Parameters:


        Returns:
            Optional[Widget]: The current focus
        child of @widget

        """
        ...

    def get_focus_on_click(self) -> bool:
        """
        Returns whether the widget should grab focus when it is clicked
        with the mouse.

        See [method@Gtk.Widget.set_focus_on_click].

        Parameters:


        Returns:
            bool: %TRUE if the widget should grab focus when it is
        clicked with the mouse

        """
        ...

    def get_focusable(self) -> bool:
        """
        Determines whether @widget can own the input focus.

        See [method@Gtk.Widget.set_focusable].

        Parameters:


        Returns:
            bool: %TRUE if @widget can own the input focus, %FALSE otherwise

        """
        ...

    def get_font_map(self) -> Optional[Pango.FontMap]:
        """
        Gets the font map of @widget.

        See [method@Gtk.Widget.set_font_map].

        Parameters:


        Returns:
            Optional[Pango.FontMap]: A `PangoFontMap`

        """
        ...

    def get_font_options(self) -> Optional[cairo.FontOptions]:
        """
        Returns the `cairo_font_options_t` of widget.

        Seee [method@Gtk.Widget.set_font_options].

        Parameters:


        Returns:
            Optional[cairo.FontOptions]: the `cairo_font_options_t`
        of widget

        """
        ...

    def get_frame_clock(self) -> Optional[Gdk.FrameClock]:
        """
        Obtains the frame clock for a widget.

        The frame clock is a global “ticker” that can be used to drive
        animations and repaints. The most common reason to get the frame
        clock is to call [method@Gdk.FrameClock.get_frame_time], in order
        to get a time to use for animating. For example you might record
        the start of the animation with an initial value from
        [method@Gdk.FrameClock.get_frame_time], and then update the animation
        by calling [method@Gdk.FrameClock.get_frame_time] again during each repaint.

        [method@Gdk.FrameClock.request_phase] will result in a new frame on the
        clock, but won’t necessarily repaint any widgets. To repaint a
        widget, you have to use [method@Gtk.Widget.queue_draw] which invalidates
        the widget (thus scheduling it to receive a draw on the next
        frame). gtk_widget_queue_draw() will also end up requesting a frame
        on the appropriate frame clock.

        A widget’s frame clock will not change while the widget is
        mapped. Reparenting a widget (which implies a temporary unmap) can
        change the widget’s frame clock.

        Unrealized widgets do not have a frame clock.

        Parameters:


        Returns:
            Optional[Gdk.FrameClock]: a `GdkFrameClock`

        """
        ...

    def get_halign(self) -> Align:
        """
        Gets the horizontal alignment of @widget.

        For backwards compatibility reasons this method will never return
        one of the baseline alignments, but instead it will convert it to
        `GTK_ALIGN_FILL` or `GTK_ALIGN_CENTER`.

        Baselines are not supported for horizontal alignment.

        Parameters:


        Returns:
            Align: the horizontal alignment of @widget

        """
        ...

    def get_has_tooltip(self) -> bool:
        """
        Returns the current value of the `has-tooltip` property.

        Parameters:


        Returns:
            bool: current value of `has-tooltip` on @widget.

        """
        ...

    def get_height(self) -> int:
        """
        Returns the content height of the widget.

        This function returns the height passed to its
        size-allocate implementation, which is the height you
        should be using in [vfunc@Gtk.Widget.snapshot].

        For pointer events, see [method@Gtk.Widget.contains].

        To learn more about widget sizes, see the coordinate
        system [overview](coordinates.html).

        Parameters:


        Returns:
            int: The height of @widget

        """
        ...

    def get_hexpand(self) -> bool:
        """
        Gets whether the widget would like any available extra horizontal
        space.

        When a user resizes a `GtkWindow`, widgets with expand=TRUE
        generally receive the extra space. For example, a list or
        scrollable area or document in your window would often be set to
        expand.

        Containers should use [method@Gtk.Widget.compute_expand] rather
        than this function, to see whether a widget, or any of its children,
        has the expand flag set. If any child of a widget wants to
        expand, the parent may ask to expand also.

        This function only looks at the widget’s own hexpand flag, rather
        than computing whether the entire widget tree rooted at this widget
        wants to expand.

        Parameters:


        Returns:
            bool: whether hexpand flag is set

        """
        ...

    def get_hexpand_set(self) -> bool:
        """
        Gets whether gtk_widget_set_hexpand() has been used
        to explicitly set the expand flag on this widget.

        If [property@Gtk.Widget:hexpand] property is set, then it
        overrides any computed expand value based on child widgets.
        If `hexpand` is not set, then the expand value depends on
        whether any children of the widget would like to expand.

        There are few reasons to use this function, but it’s here
        for completeness and consistency.

        Parameters:


        Returns:
            bool: whether hexpand has been explicitly set

        """
        ...

    def get_last_child(self) -> Optional[Widget]:
        """
        Returns the widget’s last child.

        This API is primarily meant for widget implementations.

        Parameters:


        Returns:
            Optional[Widget]: The widget's last child

        """
        ...

    def get_layout_manager(self) -> Optional[LayoutManager]:
        """
        Retrieves the layout manager used by @widget.

        See [method@Gtk.Widget.set_layout_manager].

        Parameters:


        Returns:
            Optional[LayoutManager]: a `GtkLayoutManager`

        """
        ...

    def get_layout_manager_type(self) -> Type: ...
    def get_mapped(self) -> bool:
        """
        Whether the widget is mapped.

        Parameters:


        Returns:
            bool: %TRUE if the widget is mapped, %FALSE otherwise.

        """
        ...

    def get_margin_bottom(self) -> int:
        """
        Gets the bottom margin of @widget.

        Parameters:


        Returns:
            int: The bottom margin of @widget

        """
        ...

    def get_margin_end(self) -> int:
        """
        Gets the end margin of @widget.

        Parameters:


        Returns:
            int: The end margin of @widget

        """
        ...

    def get_margin_start(self) -> int:
        """
        Gets the start margin of @widget.

        Parameters:


        Returns:
            int: The start margin of @widget

        """
        ...

    def get_margin_top(self) -> int:
        """
        Gets the top margin of @widget.

        Parameters:


        Returns:
            int: The top margin of @widget

        """
        ...

    def get_name(self) -> str:
        """
        Retrieves the name of a widget.

        See [method@Gtk.Widget.set_name] for the significance of widget names.

        Parameters:


        Returns:
            str: name of the widget. This string is owned by GTK and
        should not be modified or freed

        """
        ...

    def get_native(self) -> Optional[Native]:
        """
        Returns the nearest `GtkNative` ancestor of @widget.

        This function will return %NULL if the widget is not
        contained inside a widget tree with a native ancestor.

        `GtkNative` widgets will return themselves here.

        Parameters:


        Returns:
            Optional[Native]: the `GtkNative` ancestor of @widget

        """
        ...

    def get_next_sibling(self) -> Optional[Widget]:
        """
        Returns the widget’s next sibling.

        This API is primarily meant for widget implementations.

        Parameters:


        Returns:
            Optional[Widget]: The widget's next sibling

        """
        ...

    def get_opacity(self) -> float:
        """
        #Fetches the requested opacity for this widget.

        See [method@Gtk.Widget.set_opacity].

        Parameters:


        Returns:
            float: the requested opacity for this widget.

        """
        ...

    def get_overflow(self) -> Overflow:
        """
        Returns the widget’s overflow value.

        Parameters:


        Returns:
            Overflow: The widget's overflow.

        """
        ...

    def get_pango_context(self) -> Pango.Context:
        """
        Gets a `PangoContext` with the appropriate font map, font description,
        and base direction for this widget.

        Unlike the context returned by [method@Gtk.Widget.create_pango_context],
        this context is owned by the widget (it can be used until the screen
        for the widget changes or the widget is removed from its toplevel),
        and will be updated to match any changes to the widget’s attributes.
        This can be tracked by listening to changes of the
        [property@Gtk.Widget:root] property on the widget.

        Parameters:


        Returns:
            Pango.Context: the `PangoContext` for the widget.

        """
        ...

    def get_parent(self) -> Optional[Widget]:
        """
        Returns the parent widget of @widget.

        Parameters:


        Returns:
            Optional[Widget]: the parent widget of @widget

        """
        ...

    def get_preferred_size(self) -> Tuple[Requisition, Requisition]:
        """
        Retrieves the minimum and natural size of a widget, taking
        into account the widget’s preference for height-for-width management.

        This is used to retrieve a suitable size by container widgets which do
        not impose any restrictions on the child placement. It can be used
        to deduce toplevel window and menu sizes as well as child widgets in
        free-form containers such as `GtkFixed`.

        Handle with care. Note that the natural height of a height-for-width
        widget will generally be a smaller size than the minimum height, since
        the required height for the natural width is generally smaller than the
        required height for the minimum width.

        Use [id@gtk_widget_measure] if you want to support baseline alignment.

        Parameters:


        Returns:
            Requisition: location for storing the minimum size
            Requisition: location for storing the natural size
        """
        ...

    def get_prev_sibling(self) -> Optional[Widget]:
        """
        Returns the widget’s previous sibling.

        This API is primarily meant for widget implementations.

        Parameters:


        Returns:
            Optional[Widget]: The widget's previous sibling

        """
        ...

    def get_primary_clipboard(self) -> Gdk.Clipboard:
        """
        Gets the primary clipboard of @widget.

        This is a utility function to get the primary clipboard object
        for the `GdkDisplay` that @widget is using.

        Note that this function always works, even when @widget is not
        realized yet.

        Parameters:


        Returns:
            Gdk.Clipboard: the appropriate clipboard object

        """
        ...

    def get_realized(self) -> bool:
        """
        Determines whether @widget is realized.

        Parameters:


        Returns:
            bool: %TRUE if @widget is realized, %FALSE otherwise

        """
        ...

    def get_receives_default(self) -> bool:
        """
        Determines whether @widget is always treated as the default widget
        within its toplevel when it has the focus, even if another widget
        is the default.

        See [method@Gtk.Widget.set_receives_default].

        Parameters:


        Returns:
            bool: %TRUE if @widget acts as the default widget when focused,
        %FALSE otherwise

        """
        ...

    def get_request_mode(self) -> SizeRequestMode:
        """
        Gets whether the widget prefers a height-for-width layout
        or a width-for-height layout.

        Single-child widgets generally propagate the preference of
        their child, more complex widgets need to request something
        either in context of their children or in context of their
        allocation capabilities.

        Parameters:


        Returns:
            SizeRequestMode: The `GtkSizeRequestMode` preferred by @widget.

        """
        ...

    def get_root(self) -> Optional[Root]:
        """
        Returns the `GtkRoot` widget of @widget.

        This function will return %NULL if the widget is not contained
        inside a widget tree with a root widget.

        `GtkRoot` widgets will return themselves here.

        Parameters:


        Returns:
            Optional[Root]: the root widget of @widget

        """
        ...

    def get_scale_factor(self) -> int:
        """
        Retrieves the internal scale factor that maps from window
        coordinates to the actual device pixels.

        On traditional systems this is 1, on high density outputs,
        it can be a higher value (typically 2).

        See [method@Gdk.Surface.get_scale_factor].

        Parameters:


        Returns:
            int: the scale factor for @widget

        """
        ...

    def get_sensitive(self) -> bool:
        """
        Returns the widget’s sensitivity.

        This function returns the value that has been set using
        [method@Gtk.Widget.set_sensitive]).

        The effective sensitivity of a widget is however determined
        by both its own and its parent widget’s sensitivity.
        See [method@Gtk.Widget.is_sensitive].

        Parameters:


        Returns:
            bool: %TRUE if the widget is sensitive

        """
        ...

    def get_settings(self) -> Settings:
        """
        Gets the settings object holding the settings used for this widget.

        Note that this function can only be called when the `GtkWidget`
        is attached to a toplevel, since the settings object is specific
        to a particular `GdkDisplay`. If you want to monitor the widget for
        changes in its settings, connect to the `notify::display` signal.

        Parameters:


        Returns:
            Settings: the relevant `GtkSettings` object

        """
        ...

    def get_size(self, orientation: Orientation) -> int:
        """
        Returns the content width or height of the widget.

        Which dimension is returned depends on @orientation.

        This is equivalent to calling [method@Gtk.Widget.get_width]
        for %GTK_ORIENTATION_HORIZONTAL or [method@Gtk.Widget.get_height]
        for %GTK_ORIENTATION_VERTICAL, but can be used when
        writing orientation-independent code, such as when
        implementing [iface@Gtk.Orientable] widgets.

        To learn more about widget sizes, see the coordinate
        system [overview](coordinates.html).

        Parameters:
            orientation: the orientation to query

        Returns:
            int: The size of @widget in @orientation.

        """
        ...

    def get_size_request(self) -> Tuple[int, int]:
        """
        Gets the size request that was explicitly set for the widget using
        gtk_widget_set_size_request().

        A value of -1 stored in @width or @height indicates that that
        dimension has not been set explicitly and the natural requisition
        of the widget will be used instead. See
        [method@Gtk.Widget.set_size_request]. To get the size a widget will
        actually request, call [method@Gtk.Widget.measure] instead of
        this function.

        Parameters:


        Returns:
            int: return location for width
            int: return location for height
        """
        ...

    def get_state_flags(self) -> StateFlags:
        """
        Returns the widget state as a flag set.

        It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
        state will be returned, that is, also based on parent insensitivity,
        even if @widget itself is sensitive.

        Also note that if you are looking for a way to obtain the
        [flags@Gtk.StateFlags] to pass to a [class@Gtk.StyleContext]
        method, you should look at [method@Gtk.StyleContext.get_state].

        Parameters:


        Returns:
            StateFlags: The state flags for widget

        """
        ...

    @deprecated("Style contexts will be removed in GTK 5")
    def get_style_context(self) -> StyleContext:
        """
        Returns the style context associated to @widget.

        The returned object is guaranteed to be the same
        for the lifetime of @widget.

        Parameters:


        Returns:
            StyleContext: the widget’s `GtkStyleContext`

        """
        ...

    def get_template_child(self, widget_type: Type, name: str) -> GObject.Object:
        """
        Fetch an object build from the template XML for @widget_type in
        this @widget instance.

        This will only report children which were previously declared
        with [method@Gtk.WidgetClass.bind_template_child_full] or one of its
        variants.

        This function is only meant to be called for code which is private
        to the @widget_type which declared the child and is meant for language
        bindings which cannot easily make use of the GObject structure offsets.

        Parameters:
            widget_type: The `GType` to get a template child for
            name: The “id” of the child defined in the template XML

        Returns:
            GObject.Object: The object built in the template XML with
        the id @name

        """
        ...

    def get_tooltip_markup(self) -> Optional[str]:
        """
        Gets the contents of the tooltip for @widget.

        If the tooltip has not been set using
        [method@Gtk.Widget.set_tooltip_markup], this
        function returns %NULL.

        Parameters:


        Returns:
            Optional[str]: the tooltip text

        """
        ...

    def get_tooltip_text(self) -> Optional[str]:
        """
        Gets the contents of the tooltip for @widget.

        If the @widget's tooltip was set using
        [method@Gtk.Widget.set_tooltip_markup],
        this function will return the escaped text.

        Parameters:


        Returns:
            Optional[str]: the tooltip text

        """
        ...

    def get_valign(self) -> Align:
        """
        Gets the vertical alignment of @widget.

        Parameters:


        Returns:
            Align: the vertical alignment of @widget

        """
        ...

    def get_vexpand(self) -> bool:
        """
        Gets whether the widget would like any available extra vertical
        space.

        See [method@Gtk.Widget.get_hexpand] for more detail.

        Parameters:


        Returns:
            bool: whether vexpand flag is set

        """
        ...

    def get_vexpand_set(self) -> bool:
        """
        Gets whether gtk_widget_set_vexpand() has been used to
        explicitly set the expand flag on this widget.

        See [method@Gtk.Widget.get_hexpand_set] for more detail.

        Parameters:


        Returns:
            bool: whether vexpand has been explicitly set

        """
        ...

    def get_visible(self) -> bool:
        """
        Determines whether the widget is visible.

        If you want to take into account whether the widget’s
        parent is also marked as visible, use
        [method@Gtk.Widget.is_visible] instead.

        This function does not check if the widget is
        obscured in any way.

        See [method@Gtk.Widget.set_visible].

        Parameters:


        Returns:
            bool: %TRUE if the widget is visible

        """
        ...

    def get_width(self) -> int:
        """
        Returns the content width of the widget.

        This function returns the width passed to its
        size-allocate implementation, which is the width you
        should be using in [vfunc@Gtk.Widget.snapshot].

        For pointer events, see [method@Gtk.Widget.contains].

        To learn more about widget sizes, see the coordinate
        system [overview](coordinates.html).

        Parameters:


        Returns:
            int: The width of @widget

        """
        ...

    def grab_focus(self) -> bool:
        """
        Causes @widget to have the keyboard focus for the `GtkWindow` it's inside.

        If @widget is not focusable, or its [vfunc@Gtk.Widget.grab_focus]
        implementation cannot transfer the focus to a descendant of @widget
        that is focusable, it will not take focus and %FALSE will be returned.

        Calling [method@Gtk.Widget.grab_focus] on an already focused widget
        is allowed, should not have an effect, and return %TRUE.

        Parameters:


        Returns:
            bool: %TRUE if focus is now inside @widget.

        """
        ...

    def has_css_class(self, css_class: str) -> bool:
        """
        Returns whether @css_class is currently applied to @widget.

        Parameters:
            css_class: A style class, without the leading '.'
        used for notation of style classes

        Returns:
            bool: %TRUE if @css_class is currently applied to @widget,
        %FALSE otherwise.

        """
        ...

    def has_default(self) -> bool:
        """
        Determines whether @widget is the current default widget
        within its toplevel.

        Parameters:


        Returns:
            bool: %TRUE if @widget is the current default widget
        within its toplevel, %FALSE otherwise

        """
        ...

    def has_focus(self) -> bool:
        """
        Determines if the widget has the global input focus.

        See [method@Gtk.Widget.is_focus] for the difference between
        having the global input focus, and only having the focus
        within a toplevel.

        Parameters:


        Returns:
            bool: %TRUE if the widget has the global input focus.

        """
        ...

    def has_visible_focus(self) -> bool:
        """
        Determines if the widget should show a visible indication that
        it has the global input focus.

        This is a convenience function that takes into account whether
        focus indication should currently be shown in the toplevel window
        of @widget. See [method@Gtk.Window.get_focus_visible] for more
        information about focus indication.

        To find out if the widget has the global input focus, use
        [method@Gtk.Widget.has_focus].

        Parameters:


        Returns:
            bool: %TRUE if the widget should display a “focus rectangle”

        """
        ...

    @deprecated("Use [method@Gtk.Widget.set_visible] instead")
    def hide(self) -> None:
        """
        Reverses the effects of gtk_widget_show().

        This is causing the widget to be hidden (invisible to the user).

        Parameters:


        Returns:

        """
        ...

    def in_destruction(self) -> bool:
        """
        Returns whether the widget is currently being destroyed.

        This information can sometimes be used to avoid doing
        unnecessary work.

        Parameters:


        Returns:
            bool: %TRUE if @widget is being destroyed

        """
        ...

    def init_template(self) -> None:
        """
        Creates and initializes child widgets defined in templates.

        This function must be called in the instance initializer
        for any class which assigned itself a template using
        [method@Gtk.WidgetClass.set_template].

        It is important to call this function in the instance initializer
        of a `GtkWidget` subclass and not in `GObject.constructed()` or
        `GObject.constructor()` for two reasons:

        - derived widgets will assume that the composite widgets
        defined by its parent classes have been created in their
        relative instance initializers
        - when calling `g_object_new()` on a widget with composite templates,
        it’s important to build the composite widgets before the construct
        properties are set. Properties passed to `g_object_new()` should
        take precedence over properties set in the private template XML

        A good rule of thumb is to call this function as the first thing in
        an instance initialization function.

        Parameters:


        Returns:

        """
        ...

    def insert_action_group(
        self, name: str, group: Optional[Gio.ActionGroup] = None
    ) -> None:
        """
        Inserts @group into @widget.

        Children of @widget that implement [iface@Gtk.Actionable] can
        then be associated with actions in @group by setting their
        “action-name” to @prefix.`action-name`.

        Note that inheritance is defined for individual actions. I.e.
        even if you insert a group with prefix @prefix, actions with
        the same prefix will still be inherited from the parent, unless
        the group contains an action with the same name.

        If @group is %NULL, a previously inserted group for @name is
        removed from @widget.

        Parameters:
            name: the prefix for actions in @group
            group: a `GActionGroup`, or %NULL to remove
        the previously inserted group for @name

        Returns:

        """
        ...

    def insert_after(
        self, parent: Widget, previous_sibling: Optional[Widget] = None
    ) -> None:
        """
        Inserts @widget into the child widget list of @parent.

        It will be placed after @previous_sibling, or at the beginning if
        @previous_sibling is %NULL.

        After calling this function, `gtk_widget_get_prev_sibling(widget)`
        will return @previous_sibling.

        If @parent is already set as the parent widget of @widget, this
        function can also be used to reorder @widget in the child widget
        list of @parent.

        This API is primarily meant for widget implementations; if you are
        just using a widget, you *must* use its own API for adding children.

        Parameters:
            parent: the parent `GtkWidget` to insert @widget into
            previous_sibling: the new previous sibling of @widget

        Returns:

        """
        ...

    def insert_before(
        self, parent: Widget, next_sibling: Optional[Widget] = None
    ) -> None:
        """
        Inserts @widget into the child widget list of @parent.

        It will be placed before @next_sibling, or at the end if
        @next_sibling is %NULL.

        After calling this function, `gtk_widget_get_next_sibling(widget)`
        will return @next_sibling.

        If @parent is already set as the parent widget of @widget, this function
        can also be used to reorder @widget in the child widget list of @parent.

        This API is primarily meant for widget implementations; if you are
        just using a widget, you *must* use its own API for adding children.

        Parameters:
            parent: the parent `GtkWidget` to insert @widget into
            next_sibling: the new next sibling of @widget

        Returns:

        """
        ...

    def install_action(
        self,
        action_name: str,
        parameter_type: Optional[str],
        activate: Callable[[Widget, str, Optional[GLib.Variant]], None],
    ) -> None: ...
    def install_property_action(self, action_name: str, property_name: str) -> None: ...
    def is_ancestor(self, ancestor: Widget) -> bool:
        """
        Determines whether @widget is somewhere inside @ancestor,
        possibly with intermediate containers.

        Parameters:
            ancestor: another `GtkWidget`

        Returns:
            bool: %TRUE if @ancestor contains @widget as a child,
        grandchild, great grandchild, etc.

        """
        ...

    def is_drawable(self) -> bool:
        """
        Determines whether @widget can be drawn to.

        A widget can be drawn if it is mapped and visible.

        Parameters:


        Returns:
            bool: %TRUE if @widget is drawable, %FALSE otherwise

        """
        ...

    def is_focus(self) -> bool:
        """
        Determines if the widget is the focus widget within its
        toplevel.

        This does not mean that the [property@Gtk.Widget:has-focus]
        property is necessarily set; [property@Gtk.Widget:has-focus]
        will only be set if the toplevel widget additionally has the
        global input focus.

        Parameters:


        Returns:
            bool: %TRUE if the widget is the focus widget.

        """
        ...

    def is_sensitive(self) -> bool:
        """
        Returns the widget’s effective sensitivity.

        This means it is sensitive itself and also its
        parent widget is sensitive.

        Parameters:


        Returns:
            bool: %TRUE if the widget is effectively sensitive

        """
        ...

    def is_visible(self) -> bool:
        """
        Determines whether the widget and all its parents are marked as
        visible.

        This function does not check if the widget is obscured in any way.

        See also [method@Gtk.Widget.get_visible] and
        [method@Gtk.Widget.set_visible].

        Parameters:


        Returns:
            bool: %TRUE if the widget and all its parents are visible

        """
        ...

    def keynav_failed(self, direction: DirectionType) -> bool:
        """
        Emits the `::keynav-failed` signal on the widget.

        This function should be called whenever keyboard navigation
        within a single widget hits a boundary.

        The return value of this function should be interpreted
        in a way similar to the return value of
        [method@Gtk.Widget.child_focus]. When %TRUE is returned,
        stay in the widget, the failed keyboard navigation is OK
        and/or there is nowhere we can/should move the focus to.
        When %FALSE is returned, the caller should continue with
        keyboard navigation outside the widget, e.g. by calling
        [method@Gtk.Widget.child_focus] on the widget’s toplevel.

        The default [signal@Gtk.Widget::keynav-failed] handler returns
        %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
        For the other values of `GtkDirectionType` it returns %TRUE.

        Whenever the default handler returns %TRUE, it also calls
        [method@Gtk.Widget.error_bell] to notify the user of the
        failed keyboard navigation.

        A use case for providing an own implementation of ::keynav-failed
        (either by connecting to it or by overriding it) would be a row of
        [class@Gtk.Entry] widgets where the user should be able to navigate
        the entire row with the cursor keys, as e.g. known from user
        interfaces that require entering license keys.

        Parameters:
            direction: direction of focus movement

        Returns:
            bool: %TRUE if stopping keyboard navigation is fine, %FALSE
        if the emitting widget should try to handle the keyboard
        navigation attempt in its parent container(s).

        """
        ...

    def list_mnemonic_labels(self) -> list[Widget]:
        """
        Returns the widgets for which this widget is the target of a
        mnemonic.

        Typically, these widgets will be labels. See, for example,
        [method@Gtk.Label.set_mnemonic_widget].

        The widgets in the list are not individually referenced.
        If you want to iterate through the list and perform actions
        involving callbacks that might destroy the widgets, you
        must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
        first, and then unref all the widgets afterwards.

        Parameters:


        Returns:
            list[Widget]: the list
        of mnemonic labels; free this list with g_list_free() when you
        are done with it.

        """
        ...

    def map(self) -> None:
        """
        Causes a widget to be mapped if it isn’t already.

        This function is only for use in widget implementations.

        Parameters:


        Returns:

        """
        ...

    def measure(
        self, orientation: Orientation, for_size: int
    ) -> Tuple[int, int, int, int]:
        """
        Measures @widget in the orientation @orientation and for the given @for_size.

        As an example, if @orientation is %GTK_ORIENTATION_HORIZONTAL and @for_size
        is 300, this functions will compute the minimum and natural width of @widget
        if it is allocated at a height of 300 pixels.

        See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
        a more details on implementing `GtkWidgetClass.measure()`.

        Parameters:
            orientation: the orientation to measure
            for_size: Size for the opposite of @orientation, i.e.
        if @orientation is %GTK_ORIENTATION_HORIZONTAL, this is
        the height the widget should be measured with. The %GTK_ORIENTATION_VERTICAL
        case is analogous. This way, both height-for-width and width-for-height
        requests can be implemented. If no size is known, -1 can be passed.

        Returns:
            int: location to store the minimum size
            int: location to store the natural size
            int: location to store the baseline
        position for the minimum size, or -1 to report no baseline
            int: location to store the baseline
        position for the natural size, or -1 to report no baseline
        """
        ...

    def mnemonic_activate(self, group_cycling: bool) -> bool:
        """
        Emits the ::mnemonic-activate signal.

        See [signal@Gtk.Widget::mnemonic-activate].

        Parameters:
            group_cycling: %TRUE if there are other widgets with the same mnemonic

        Returns:
            bool: %TRUE if the signal has been handled

        """
        ...

    def observe_children(self) -> Gio.ListModel:
        """
        Returns a `GListModel` to track the children of @widget.

        Calling this function will enable extra internal bookkeeping
        to track children and emit signals on the returned listmodel.
        It may slow down operations a lot.

        Applications should try hard to avoid calling this function
        because of the slowdowns.

        Parameters:


        Returns:
            Gio.ListModel:
        a `GListModel` tracking @widget's children

        """
        ...

    def observe_controllers(self) -> Gio.ListModel:
        """
        Returns a `GListModel` to track the [class@Gtk.EventController]s
        of @widget.

        Calling this function will enable extra internal bookkeeping
        to track controllers and emit signals on the returned listmodel.
        It may slow down operations a lot.

        Applications should try hard to avoid calling this function
        because of the slowdowns.

        Parameters:


        Returns:
            Gio.ListModel:
        a `GListModel` tracking @widget's controllers

        """
        ...

    def pick(self, x: float, y: float, flags: PickFlags) -> Optional[Widget]:
        """
        Finds the descendant of @widget closest to the point (@x, @y).

        The point must be given in widget coordinates, so (0, 0) is assumed
        to be the top left of @widget's content area.

        Usually widgets will return %NULL if the given coordinate is not
        contained in @widget checked via [method@Gtk.Widget.contains].
        Otherwise they will recursively try to find a child that does
        not return %NULL. Widgets are however free to customize their
        picking algorithm.

        This function is used on the toplevel to determine the widget
        below the mouse cursor for purposes of hover highlighting and
        delivering events.

        Parameters:
            x: X coordinate to test, relative to @widget's origin
            y: Y coordinate to test, relative to @widget's origin
            flags: Flags to influence what is picked

        Returns:
            Optional[Widget]: The widget descendant at
        the given point

        """
        ...

    def query_action(
        self, index_: int
    ) -> Tuple[bool, Type, str, GLib.VariantType, str]: ...
    def queue_allocate(self) -> None:
        """
        Flags the widget for a rerun of the [vfunc@Gtk.Widget.size_allocate]
        function.

        Use this function instead of [method@Gtk.Widget.queue_resize]
        when the @widget's size request didn't change but it wants to
        reposition its contents.

        An example user of this function is [method@Gtk.Widget.set_halign].

        This function is only for use in widget implementations.

        Parameters:


        Returns:

        """
        ...

    def queue_draw(self) -> None:
        """
        Schedules this widget to be redrawn in the paint phase
        of the current or the next frame.

        This means @widget's [vfunc@Gtk.Widget.snapshot]
        implementation will be called.

        Parameters:


        Returns:

        """
        ...

    def queue_resize(self) -> None:
        """
        Flags a widget to have its size renegotiated.

        This should be called when a widget for some reason has a new
        size request. For example, when you change the text in a
        [class@Gtk.Label], the label queues a resize to ensure there’s
        enough space for the new text.

        Note that you cannot call gtk_widget_queue_resize() on a widget
        from inside its implementation of the [vfunc@Gtk.Widget.size_allocate]
        virtual method. Calls to gtk_widget_queue_resize() from inside
        [vfunc@Gtk.Widget.size_allocate] will be silently ignored.

        This function is only for use in widget implementations.

        Parameters:


        Returns:

        """
        ...

    def realize(self) -> None:
        """
        Creates the GDK resources associated with a widget.

        Normally realization happens implicitly; if you show a widget
        and all its parent containers, then the widget will be realized
        and mapped automatically.

        Realizing a widget requires all the widget’s parent widgets to be
        realized; calling this function realizes the widget’s parents
        in addition to @widget itself. If a widget is not yet inside a
        toplevel window when you realize it, bad things will happen.

        This function is primarily used in widget implementations, and
        isn’t very useful otherwise. Many times when you think you might
        need it, a better approach is to connect to a signal that will be
        called after the widget is realized automatically, such as
        [signal@Gtk.Widget::realize].

        Parameters:


        Returns:

        """
        ...

    def remove_controller(self, controller: EventController) -> None:
        """
        Removes @controller from @widget, so that it doesn't process
        events anymore.

        It should not be used again.

        Widgets will remove all event controllers automatically when they
        are destroyed, there is normally no need to call this function.

        Parameters:
            controller: a `GtkEventController`

        Returns:

        """
        ...

    def remove_css_class(self, css_class: str) -> None:
        """
        Removes a style from @widget.

        After this, the style of @widget will stop matching for @css_class.

        Parameters:
            css_class: The style class to remove from @widget, without
        the leading '.' used for notation of style classes

        Returns:

        """
        ...

    def remove_mnemonic_label(self, label: Widget) -> None:
        """
        Removes a widget from the list of mnemonic labels for this widget.

        See [method@Gtk.Widget.list_mnemonic_labels]. The widget must
        have previously been added to the list with
        [method@Gtk.Widget.add_mnemonic_label].

        Parameters:
            label: a `GtkWidget` that was previously set as a mnemonic
        label for @widget with [method@Gtk.Widget.add_mnemonic_label]

        Returns:

        """
        ...

    def remove_tick_callback(self, id: int) -> None:
        """
        Removes a tick callback previously registered with
        gtk_widget_add_tick_callback().

        Parameters:
            id: an id returned by [method@Gtk.Widget.add_tick_callback]

        Returns:

        """
        ...

    def set_accessible_role(self, accessible_role: AccessibleRole) -> None: ...
    def set_activate_signal(self, signal_id: int) -> None: ...
    def set_activate_signal_from_name(self, signal_name: str) -> None: ...
    def set_can_focus(self, can_focus: bool) -> None:
        """
        Specifies whether the input focus can enter the widget
        or any of its children.

        Applications should set @can_focus to %FALSE to mark a
        widget as for pointer/touch use only.

        Note that having @can_focus be %TRUE is only one of the
        necessary conditions for being focusable. A widget must
        also be sensitive and focusable and not have an ancestor
        that is marked as not can-focus in order to receive input
        focus.

        See [method@Gtk.Widget.grab_focus] for actually setting
        the input focus on a widget.

        Parameters:
            can_focus: whether or not the input focus can enter
        the widget or any of its children

        Returns:

        """
        ...

    def set_can_target(self, can_target: bool) -> None:
        """
        Sets whether @widget can be the target of pointer events.

        Parameters:
            can_target: whether this widget should be able to
        receive pointer events

        Returns:

        """
        ...

    def set_child_visible(self, child_visible: bool) -> None:
        """
        Sets whether @widget should be mapped along with its parent.

        The child visibility can be set for widget before it is added
        to a container with [method@Gtk.Widget.set_parent], to avoid
        mapping children unnecessary before immediately unmapping them.
        However it will be reset to its default state of %TRUE when the
        widget is removed from a container.

        Note that changing the child visibility of a widget does not
        queue a resize on the widget. Most of the time, the size of
        a widget is computed from all visible children, whether or
        not they are mapped. If this is not the case, the container
        can queue a resize itself.

        This function is only useful for container implementations
        and should never be called by an application.

        Parameters:
            child_visible: if %TRUE, @widget should be mapped along
        with its parent.

        Returns:

        """
        ...

    def set_css_classes(self, classes: Sequence[str]) -> None:
        """
        Clear all style classes applied to @widget
        and replace them with @classes.

        Parameters:
            classes:
        %NULL-terminated list of style classes to apply to @widget.

        Returns:

        """
        ...

    def set_css_name(self, name: str) -> None: ...
    def set_cursor(self, cursor: Optional[Gdk.Cursor] = None) -> None:
        """
        Sets the cursor to be shown when pointer devices point
        towards @widget.

        If the @cursor is NULL, @widget will use the cursor
        inherited from the parent widget.

        Parameters:
            cursor: the new cursor

        Returns:

        """
        ...

    def set_cursor_from_name(self, name: Optional[str] = None) -> None:
        """
        Sets a named cursor to be shown when pointer devices point
        towards @widget.

        This is a utility function that creates a cursor via
        [ctor@Gdk.Cursor.new_from_name] and then sets it on @widget
        with [method@Gtk.Widget.set_cursor]. See those functions for
        details.

        On top of that, this function allows @name to be %NULL, which
        will do the same as calling [method@Gtk.Widget.set_cursor]
        with a %NULL cursor.

        Parameters:
            name: The name of the cursor

        Returns:

        """
        ...

    @staticmethod
    def set_default_direction(dir: TextDirection) -> None:
        """
        Sets the default reading direction for widgets.

        See [method@Gtk.Widget.set_direction].

        Parameters:
            dir: the new default direction. This cannot be %GTK_TEXT_DIR_NONE.

        Returns:

        """
        ...

    def set_direction(self, dir: TextDirection) -> None:
        """
        Sets the reading direction on a particular widget.

        This direction controls the primary direction for widgets
        containing text, and also the direction in which the children
        of a container are packed. The ability to set the direction is
        present in order so that correct localization into languages with
        right-to-left reading directions can be done. Generally, applications
        will let the default reading direction present, except for containers
        where the containers are arranged in an order that is explicitly
        visual rather than logical (such as buttons for text justification).

        If the direction is set to %GTK_TEXT_DIR_NONE, then the value
        set by [func@Gtk.Widget.set_default_direction] will be used.

        Parameters:
            dir: the new direction

        Returns:

        """
        ...

    def set_focus_child(self, child: Optional[Widget] = None) -> None:
        """
        Set @child as the current focus child of @widget.

        This function is only suitable for widget implementations.
        If you want a certain widget to get the input focus, call
        [method@Gtk.Widget.grab_focus] on it.

        Parameters:
            child: a direct child widget of @widget or %NULL
        to unset the focus child of @widget

        Returns:

        """
        ...

    def set_focus_on_click(self, focus_on_click: bool) -> None:
        """
        Sets whether the widget should grab focus when it is clicked
        with the mouse.

        Making mouse clicks not grab focus is useful in places like
        toolbars where you don’t want the keyboard focus removed from
        the main area of the application.

        Parameters:
            focus_on_click: whether the widget should grab focus when clicked
        with the mouse

        Returns:

        """
        ...

    def set_focusable(self, focusable: bool) -> None:
        """
        Specifies whether @widget can own the input focus.

        Widget implementations should set @focusable to %TRUE in
        their init() function if they want to receive keyboard input.

        Note that having @focusable be %TRUE is only one of the
        necessary conditions for being focusable. A widget must
        also be sensitive and can-focus and not have an ancestor
        that is marked as not can-focus in order to receive input
        focus.

        See [method@Gtk.Widget.grab_focus] for actually setting
        the input focus on a widget.

        Parameters:
            focusable: whether or not @widget can own the input focus

        Returns:

        """
        ...

    def set_font_map(self, font_map: Optional[Pango.FontMap] = None) -> None:
        """
        Sets the font map to use for Pango rendering.

        The font map is the object that is used to look up fonts.
        Setting a custom font map can be useful in special situations,
        e.g. when you need to add application-specific fonts to the set
        of available fonts.

        When not set, the widget will inherit the font map from its parent.

        Parameters:
            font_map: a `PangoFontMap`, or %NULL to unset any
        previously set font map

        Returns:

        """
        ...

    def set_font_options(self, options: Optional[cairo.FontOptions] = None) -> None:
        """
        Sets the `cairo_font_options_t` used for Pango rendering
        in this widget.

        When not set, the default font options for the `GdkDisplay`
        will be used.

        Parameters:
            options: a `cairo_font_options_t`
        to unset any previously set default font options

        Returns:

        """
        ...

    def set_halign(self, align: Align) -> None:
        """
        Sets the horizontal alignment of @widget.

        Parameters:
            align: the horizontal alignment

        Returns:

        """
        ...

    def set_has_tooltip(self, has_tooltip: bool) -> None:
        """
        Sets the `has-tooltip` property on @widget to @has_tooltip.

        Parameters:
            has_tooltip: whether or not @widget has a tooltip.

        Returns:

        """
        ...

    def set_hexpand(self, expand: bool) -> None:
        """
        Sets whether the widget would like any available extra horizontal
        space.

        When a user resizes a `GtkWindow`, widgets with expand=TRUE
        generally receive the extra space. For example, a list or
        scrollable area or document in your window would often be set to
        expand.

        Call this function to set the expand flag if you would like your
        widget to become larger horizontally when the window has extra
        room.

        By default, widgets automatically expand if any of their children
        want to expand. (To see if a widget will automatically expand given
        its current children and state, call [method@Gtk.Widget.compute_expand].
        A container can decide how the expandability of children affects the
        expansion of the container by overriding the compute_expand virtual
        method on `GtkWidget`.).

        Setting hexpand explicitly with this function will override the
        automatic expand behavior.

        This function forces the widget to expand or not to expand,
        regardless of children. The override occurs because
        [method@Gtk.Widget.set_hexpand] sets the hexpand-set property (see
        [method@Gtk.Widget.set_hexpand_set]) which causes the widget’s hexpand
        value to be used, rather than looking at children and widget state.

        Parameters:
            expand: whether to expand

        Returns:

        """
        ...

    def set_hexpand_set(self, set: bool) -> None:
        """
        Sets whether the hexpand flag will be used.

        The [property@Gtk.Widget:hexpand-set] property will be set
        automatically when you call [method@Gtk.Widget.set_hexpand]
        to set hexpand, so the most likely reason to use this function
        would be to unset an explicit expand flag.

        If hexpand is set, then it overrides any computed
        expand value based on child widgets. If hexpand is not
        set, then the expand value depends on whether any
        children of the widget would like to expand.

        There are few reasons to use this function, but it’s here
        for completeness and consistency.

        Parameters:
            set: value for hexpand-set property

        Returns:

        """
        ...

    def set_layout_manager(
        self, layout_manager: Optional[LayoutManager] = None
    ) -> None:
        """
        Sets the layout manager delegate instance that provides an
        implementation for measuring and allocating the children of @widget.

        Parameters:
            layout_manager: a `GtkLayoutManager`

        Returns:

        """
        ...

    def set_layout_manager_type(self, type: Type) -> None: ...
    def set_margin_bottom(self, margin: int) -> None:
        """
        Sets the bottom margin of @widget.

        Parameters:
            margin: the bottom margin

        Returns:

        """
        ...

    def set_margin_end(self, margin: int) -> None:
        """
        Sets the end margin of @widget.

        Parameters:
            margin: the end margin

        Returns:

        """
        ...

    def set_margin_start(self, margin: int) -> None:
        """
        Sets the start margin of @widget.

        Parameters:
            margin: the start margin

        Returns:

        """
        ...

    def set_margin_top(self, margin: int) -> None:
        """
        Sets the top margin of @widget.

        Parameters:
            margin: the top margin

        Returns:

        """
        ...

    def set_name(self, name: str) -> None:
        """
        Sets a widgets name.

        Setting a name allows you to refer to the widget from a
        CSS file. You can apply a style to widgets with a particular name
        in the CSS file. See the documentation for the CSS syntax (on the
        same page as the docs for [class@Gtk.StyleContext].

        Note that the CSS syntax has certain special characters to delimit
        and represent elements in a selector (period, #, >, *...), so using
        these will make your widget impossible to match by name. Any combination
        of alphanumeric symbols, dashes and underscores will suffice.

        Parameters:
            name: name for the widget

        Returns:

        """
        ...

    def set_opacity(self, opacity: float) -> None:
        """
        Request the @widget to be rendered partially transparent.

        An opacity of 0 is fully transparent and an opacity of 1
        is fully opaque.

        Opacity works on both toplevel widgets and child widgets, although
        there are some limitations: For toplevel widgets, applying opacity
        depends on the capabilities of the windowing system. On X11, this
        has any effect only on X displays with a compositing manager,
        see gdk_display_is_composited(). On Windows and Wayland it should
        always work, although setting a window’s opacity after the window
        has been shown may cause some flicker.

        Note that the opacity is inherited through inclusion — if you set
        a toplevel to be partially translucent, all of its content will
        appear translucent, since it is ultimatively rendered on that
        toplevel. The opacity value itself is not inherited by child
        widgets (since that would make widgets deeper in the hierarchy
        progressively more translucent). As a consequence, [class@Gtk.Popover]s
        and other [iface@Gtk.Native] widgets with their own surface will use their
        own opacity value, and thus by default appear non-translucent,
        even if they are attached to a toplevel that is translucent.

        Parameters:
            opacity: desired opacity, between 0 and 1

        Returns:

        """
        ...

    def set_overflow(self, overflow: Overflow) -> None:
        """
        Sets how @widget treats content that is drawn outside the
        widget's content area.

        See the definition of [enum@Gtk.Overflow] for details.

        This setting is provided for widget implementations and
        should not be used by application code.

        The default value is %GTK_OVERFLOW_VISIBLE.

        Parameters:
            overflow: desired overflow

        Returns:

        """
        ...

    def set_parent(self, parent: Widget) -> None:
        """
        Sets @parent as the parent widget of @widget.

        This takes care of details such as updating the state and style
        of the child to reflect its new location and resizing the parent.
        The opposite function is [method@Gtk.Widget.unparent].

        This function is useful only when implementing subclasses of
        `GtkWidget`.

        Parameters:
            parent: parent widget

        Returns:

        """
        ...

    def set_receives_default(self, receives_default: bool) -> None:
        """
        Specifies whether @widget will be treated as the default
        widget within its toplevel when it has the focus, even if
        another widget is the default.

        Parameters:
            receives_default: whether or not @widget can be a default widget.

        Returns:

        """
        ...

    def set_sensitive(self, sensitive: bool) -> None:
        """
        Sets the sensitivity of a widget.

        A widget is sensitive if the user can interact with it.
        Insensitive widgets are “grayed out” and the user can’t
        interact with them. Insensitive widgets are known as
        “inactive”, “disabled”, or “ghosted” in some other toolkits.

        Parameters:
            sensitive: %TRUE to make the widget sensitive

        Returns:

        """
        ...

    def set_size_request(self, width: int, height: int) -> None:
        """
        Sets the minimum size of a widget.

        That is, the widget’s size request will be at least @width
        by @height. You can use this function to force a widget to
        be larger than it normally would be.

        In most cases, [method@Gtk.Window.set_default_size] is a better
        choice for toplevel windows than this function; setting the default
        size will still allow users to shrink the window. Setting the size
        request will force them to leave the window at least as large as
        the size request.

        Note the inherent danger of setting any fixed size - themes,
        translations into other languages, different fonts, and user action
        can all change the appropriate size for a given widget. So, it's
        basically impossible to hardcode a size that will always be
        correct.

        The size request of a widget is the smallest size a widget can
        accept while still functioning well and drawing itself correctly.
        However in some strange cases a widget may be allocated less than
        its requested size, and in many cases a widget may be allocated more
        space than it requested.

        If the size request in a given direction is -1 (unset), then
        the “natural” size request of the widget will be used instead.

        The size request set here does not include any margin from the
        properties
        [property@Gtk.Widget:margin-start],
        [property@Gtk.Widget:margin-end],
        [property@Gtk.Widget:margin-top], and
        [property@Gtk.Widget:margin-bottom], but it does include pretty
        much all other padding or border properties set by any subclass
        of `GtkWidget`.

        Parameters:
            width: width @widget should request, or -1 to unset
            height: height @widget should request, or -1 to unset

        Returns:

        """
        ...

    def set_state_flags(self, flags: StateFlags, clear: bool) -> None:
        """
        Turns on flag values in the current widget state.

        Typical widget states are insensitive, prelighted, etc.

        This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
        %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
        the widget's direction, use [method@Gtk.Widget.set_direction].

        This function is for use in widget implementations.

        Parameters:
            flags: State flags to turn on
            clear: Whether to clear state before turning on @flags

        Returns:

        """
        ...

    def set_template(self, template_bytes: GLib.Bytes) -> None: ...
    def set_template_from_resource(self, resource_name: str) -> None: ...
    def set_template_scope(self, scope: BuilderScope) -> None: ...
    def set_tooltip_markup(self, markup: Optional[str] = None) -> None:
        """
        Sets @markup as the contents of the tooltip, which is marked
        up with Pango markup.

        This function will take care of setting the
        [property@Gtk.Widget:has-tooltip] as a side effect, and of the
        default handler for the [signal@Gtk.Widget::query-tooltip] signal.

        See also [method@Gtk.Tooltip.set_markup].

        Parameters:
            markup: the contents of the tooltip for @widget

        Returns:

        """
        ...

    def set_tooltip_text(self, text: Optional[str] = None) -> None:
        """
        Sets @text as the contents of the tooltip.

        If @text contains any markup, it will be escaped.

        This function will take care of setting
        [property@Gtk.Widget:has-tooltip] as a side effect,
        and of the default handler for the
        [signal@Gtk.Widget::query-tooltip] signal.

        See also [method@Gtk.Tooltip.set_text].

        Parameters:
            text: the contents of the tooltip for @widget

        Returns:

        """
        ...

    def set_valign(self, align: Align) -> None:
        """
        Sets the vertical alignment of @widget.

        Parameters:
            align: the vertical alignment

        Returns:

        """
        ...

    def set_vexpand(self, expand: bool) -> None:
        """
        Sets whether the widget would like any available extra vertical
        space.

        See [method@Gtk.Widget.set_hexpand] for more detail.

        Parameters:
            expand: whether to expand

        Returns:

        """
        ...

    def set_vexpand_set(self, set: bool) -> None:
        """
        Sets whether the vexpand flag will be used.

        See [method@Gtk.Widget.set_hexpand_set] for more detail.

        Parameters:
            set: value for vexpand-set property

        Returns:

        """
        ...

    def set_visible(self, visible: bool) -> None:
        """
        Sets the visibility state of @widget.

        Note that setting this to %TRUE doesn’t mean the widget is
        actually viewable, see [method@Gtk.Widget.get_visible].

        Parameters:
            visible: whether the widget should be shown or not

        Returns:

        """
        ...

    def should_layout(self) -> bool:
        """
        Returns whether @widget should contribute to
        the measuring and allocation of its parent.

        This is %FALSE for invisible children, but also
        for children that have their own surface.

        Parameters:


        Returns:
            bool: %TRUE if child should be included in
        measuring and allocating

        """
        ...

    @deprecated("Use [method@Gtk.Widget.set_visible] instead")
    def show(self) -> None:
        """
        Flags a widget to be displayed.

        Any widget that isn’t shown will not appear on the screen.

        Remember that you have to show the containers containing a widget,
        in addition to the widget itself, before it will appear onscreen.

        When a toplevel container is shown, it is immediately realized and
        mapped; other shown widgets are realized and mapped when their
        toplevel container is realized and mapped.

        Parameters:


        Returns:

        """
        ...

    def size_allocate(self, allocation: Gdk.Rectangle, baseline: int) -> None:
        """
        Allocates widget with a transformation that translates
        the origin to the position in @allocation.

        This is a simple form of [method@Gtk.Widget.allocate].

        Parameters:
            allocation: position and size to be allocated to @widget
            baseline: The baseline of the child, or -1

        Returns:

        """
        ...

    def snapshot_child(self, child: Widget, snapshot: Snapshot) -> None:
        """
        Snapshot the a child of @widget.

        When a widget receives a call to the snapshot function,
        it must send synthetic [vfunc@Gtk.Widget.snapshot] calls
        to all children. This function provides a convenient way
        of doing this. A widget, when it receives a call to its
        [vfunc@Gtk.Widget.snapshot] function, calls
        gtk_widget_snapshot_child() once for each child, passing in
        the @snapshot the widget received.

        gtk_widget_snapshot_child() takes care of translating the origin of
        @snapshot, and deciding whether the child needs to be snapshot.

        This function does nothing for children that implement `GtkNative`.

        Parameters:
            child: a child of @widget
            snapshot: `GtkSnapshot` as passed to the widget. In particular, no
        calls to gtk_snapshot_translate() or other transform calls should
        have been made.

        Returns:

        """
        ...

    def translate_coordinates(
        self, dest_widget: Widget, src_x: float, src_y: float
    ) -> Optional[Tuple[float, float]]:  # CHECK Wrapped function
        """
        Translate coordinates relative to @src_widget’s allocation
        to coordinates relative to @dest_widget’s allocations.

        In order to perform this operation, both widget must share
        a common ancestor.

        Parameters:
            dest_widget: a `GtkWidget`
            src_x: X position relative to @src_widget
            src_y: Y position relative to @src_widget

        Returns:
            float: location to store X position relative to @dest_widget
            float: location to store Y position relative to @dest_widget
        """
        ...

    def trigger_tooltip_query(self) -> None:
        """
        Triggers a tooltip query on the display where the toplevel
        of @widget is located.

        Parameters:


        Returns:

        """
        ...

    def unmap(self) -> None:
        """
        Causes a widget to be unmapped if it’s currently mapped.

        This function is only for use in widget implementations.

        Parameters:


        Returns:

        """
        ...

    def unparent(self) -> None:
        """
        Dissociate @widget from its parent.

        This function is only for use in widget implementations,
        typically in dispose.

        Parameters:


        Returns:

        """
        ...

    def unrealize(self) -> None:
        """
        Causes a widget to be unrealized (frees all GDK resources
        associated with the widget).

        This function is only useful in widget implementations.

        Parameters:


        Returns:

        """
        ...

    def unset_state_flags(self, flags: StateFlags) -> None:
        """
        Turns off flag values for the current widget state.

        See [method@Gtk.Widget.set_state_flags].

        This function is for use in widget implementations.

        Parameters:
            flags: State flags to turn off

        Returns:

        """
        ...

class WidgetClass(GObject.GPointer):
    """
    :Constructors:

    ::

        WidgetClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.InitiallyUnownedClass = ...
    show: Callable[[Widget], None] = ...
    hide: Callable[[Widget], None] = ...
    map: Callable[[Widget], None] = ...
    unmap: Callable[[Widget], None] = ...
    realize: Callable[[Widget], None] = ...
    unrealize: Callable[[Widget], None] = ...
    root: Callable[[Widget], None] = ...
    unroot: Callable[[Widget], None] = ...
    size_allocate: Callable[[Widget, int, int, int], None] = ...
    state_flags_changed: Callable[[Widget, StateFlags], None] = ...
    direction_changed: Callable[[Widget, TextDirection], None] = ...
    get_request_mode: Callable[[Widget], SizeRequestMode] = ...
    measure: Callable[[Widget, Orientation, int], Tuple[int, int, int, int]] = ...
    mnemonic_activate: Callable[[Widget, bool], bool] = ...
    grab_focus: Callable[[Widget], bool] = ...
    focus: Callable[[Widget, DirectionType], bool] = ...
    set_focus_child: Callable[[Widget, Optional[Widget]], None] = ...
    move_focus: Callable[[Widget, DirectionType], None] = ...
    keynav_failed: Callable[[Widget, DirectionType], bool] = ...
    query_tooltip: Callable[[Widget, int, int, bool, Tooltip], bool] = ...
    compute_expand: Callable[[Widget, bool, bool], None] = ...
    css_changed: Callable[[Widget, CssStyleChange], None] = ...
    system_setting_changed: Callable[[Widget, SystemSetting], None] = ...
    snapshot: Callable[[Widget, Snapshot], None] = ...
    contains: Callable[[Widget, float, float], bool] = ...
    priv: WidgetClassPrivate = ...
    padding: list[None] = ...
    def add_shortcut(self, shortcut: Shortcut) -> None:
        """
        Installs a shortcut in @widget_class.

        Every instance created for @widget_class or its subclasses will
        inherit this shortcut and trigger it.

        Shortcuts added this way will be triggered in the %GTK_PHASE_BUBBLE
        phase, which means they may also trigger if child widgets have focus.

        This function must only be used in class initialization functions
        otherwise it is not guaranteed that the shortcut will be installed.

        Parameters:
            shortcut: the `GtkShortcut` to add

        Returns:

        """
        ...

    def bind_template_callback_full(
        self, callback_name: str, callback_symbol: Callable[[], None]
    ) -> None:
        """
        Declares a @callback_symbol to handle @callback_name from
        the template XML defined for @widget_type.

        This function is not supported after [method@Gtk.WidgetClass.set_template_scope]
        has been used on @widget_class. See [method@Gtk.BuilderCScope.add_callback_symbol].

        Note that this must be called from a composite widget classes
        class initializer after calling [method@Gtk.WidgetClass.set_template].

        Parameters:
            callback_name: The name of the callback as expected in the template XML
            callback_symbol: The callback symbol

        Returns:

        """
        ...

    def bind_template_child_full(
        self, name: str, internal_child: bool, struct_offset: int
    ) -> None:
        """
        Automatically assign an object declared in the class template XML to
        be set to a location on a freshly built instance’s private data, or
        alternatively accessible via [method@Gtk.Widget.get_template_child].

        The struct can point either into the public instance, then you should
        use `G_STRUCT_OFFSET(WidgetType, member)` for @struct_offset, or in the
        private struct, then you should use `G_PRIVATE_OFFSET(WidgetType, member)`.

        An explicit strong reference will be held automatically for the duration
        of your instance’s life cycle, it will be released automatically when
        `GObjectClass.dispose()` runs on your instance and if a @struct_offset
        that is `!= 0` is specified, then the automatic location in your instance
        public or private data will be set to %NULL. You can however access an
        automated child pointer the first time your classes `GObjectClass.dispose()`
        runs, or alternatively in [signal@Gtk.Widget::destroy].

        If @internal_child is specified, [vfunc@Gtk.Buildable.get_internal_child]
        will be automatically implemented by the `GtkWidget` class so there is no
        need to implement it manually.

        The wrapper macros [func@Gtk.widget_class_bind_template_child],
        [func@Gtk.widget_class_bind_template_child_internal],
        [func@Gtk.widget_class_bind_template_child_private] and
        [func@Gtk.widget_class_bind_template_child_internal_private]
        might be more convenient to use.

        Note that this must be called from a composite widget classes class
        initializer after calling [method@Gtk.WidgetClass.set_template].

        Parameters:
            name: The “id” of the child defined in the template XML
            internal_child: Whether the child should be accessible as an “internal-child”
        when this class is used in GtkBuilder XML
            struct_offset: The structure offset into the composite widget’s instance
        public or private structure where the automated child pointer should be set,
        or 0 to not assign the pointer.

        Returns:

        """
        ...

    def get_accessible_role(self) -> AccessibleRole:
        """
        Retrieves the accessible role used by the given `GtkWidget` class.

        Different accessible roles have different states, and are rendered
        differently by assistive technologies.

        See also: [method@Gtk.Accessible.get_accessible_role].

        Parameters:


        Returns:
            AccessibleRole: the accessible role for the widget class

        """
        ...

    def get_activate_signal(self) -> int:
        """
        Retrieves the signal id for the activation signal.

        the activation signal is set using
        [method@Gtk.WidgetClass.set_activate_signal].

        Parameters:


        Returns:
            int: a signal id, or 0 if the widget class does not
        specify an activation signal

        """
        ...

    def get_css_name(self) -> str:
        """
        Gets the name used by this class for matching in CSS code.

        See [method@Gtk.WidgetClass.set_css_name] for details.

        Parameters:


        Returns:
            str: the CSS name of the given class

        """
        ...

    def get_layout_manager_type(self) -> Type:
        """
        Retrieves the type of the [class@Gtk.LayoutManager]
        used by widgets of class @widget_class.

        See also: [method@Gtk.WidgetClass.set_layout_manager_type].

        Parameters:


        Returns:
            Type: type of a `GtkLayoutManager` subclass, or %G_TYPE_INVALID

        """
        ...

    def install_action(
        self,
        action_name: str,
        parameter_type: Optional[str],
        activate: Callable[[Widget, str, Optional[GLib.Variant]], None],
    ) -> None:
        """
        This should be called at class initialization time to specify
        actions to be added for all instances of this class.

        Actions installed by this function are stateless. The only state
        they have is whether they are enabled or not (which can be changed with
        [method@Gtk.Widget.action_set_enabled]).

        Parameters:
            action_name: a prefixed action name, such as \"clipboard.paste\"
            parameter_type: the parameter type
            activate: callback to use when the action is activated

        Returns:

        """
        ...

    def install_property_action(self, action_name: str, property_name: str) -> None:
        """
        Installs an action called @action_name on @widget_class and
        binds its state to the value of the @property_name property.

        This function will perform a few sanity checks on the property selected
        via @property_name. Namely, the property must exist, must be readable,
        writable and must not be construct-only. There are also restrictions
        on the type of the given property, it must be boolean, int, unsigned int,
        double or string. If any of these conditions are not met, a critical
        warning will be printed and no action will be added.

        The state type of the action matches the property type.

        If the property is boolean, the action will have no parameter and
        toggle the property value. Otherwise, the action will have a parameter
        of the same type as the property.

        Parameters:
            action_name: name of the action
            property_name: name of the property in instances of @widget_class
        or any parent class.

        Returns:

        """
        ...

    def query_action(
        self, index_: int
    ) -> Tuple[bool, Type, str, GLib.VariantType, str]:
        """
        Returns details about the @index_-th action that has been
        installed for @widget_class during class initialization.

        See [method@Gtk.WidgetClass.install_action] for details on
        how to install actions.

        Note that this function will also return actions defined
        by parent classes. You can identify those by looking
        at @owner.

        Parameters:
            index_: position of the action to query

        Returns:
            bool: %TRUE if the action was found, %FALSE if @index_
        is out of range
            Type: return location for the type where the action was defined
            str: return location for the action name
            GLib.VariantType: return location for the parameter type
            str: return location for the property name
        """
        ...

    def set_accessible_role(self, accessible_role: AccessibleRole) -> None:
        """
        Sets the accessible role used by the given `GtkWidget` class.

        Different accessible roles have different states, and are
        rendered differently by assistive technologies.

        Parameters:
            accessible_role: the `GtkAccessibleRole` used by the @widget_class

        Returns:

        """
        ...

    def set_activate_signal(self, signal_id: int) -> None:
        """
        Sets the `GtkWidgetClass.activate_signal` field with the
        given @signal_id.

        The signal will be emitted when calling [method@Gtk.Widget.activate].

        The @signal_id must have been registered with `g_signal_new()`
        or g_signal_newv() before calling this function.

        Parameters:
            signal_id: the id for the activate signal

        Returns:

        """
        ...

    def set_activate_signal_from_name(self, signal_name: str) -> None:
        """
        Sets the `GtkWidgetClass.activate_signal` field with the signal id for
        the given @signal_name.

        The signal will be emitted when calling [method@Gtk.Widget.activate].

        The @signal_name of @widget_type must have been registered with
        g_signal_new() or g_signal_newv() before calling this function.

        Parameters:
            signal_name: the name of the activate signal of @widget_type

        Returns:

        """
        ...

    def set_css_name(self, name: str) -> None:
        """
        Sets the name to be used for CSS matching of widgets.

        If this function is not called for a given class, the name
        set on the parent class is used. By default, `GtkWidget`
        uses the name \"widget\".

        Parameters:
            name: name to use

        Returns:

        """
        ...

    def set_layout_manager_type(self, type: Type) -> None:
        """
        Sets the type to be used for creating layout managers for
        widgets of @widget_class.

        The given @type must be a subtype of [class@Gtk.LayoutManager].

        This function should only be called from class init functions
        of widgets.

        Parameters:
            type: The object type that implements the `GtkLayoutManager`
        for @widget_class

        Returns:

        """
        ...

    def set_template(self, template_bytes: GLib.Bytes) -> None:
        """
        This should be called at class initialization time to specify
        the `GtkBuilder` XML to be used to extend a widget.

        For convenience, [method@Gtk.WidgetClass.set_template_from_resource]
        is also provided.

        Note that any class that installs templates must call
        [method@Gtk.Widget.init_template] in the widget’s instance initializer.

        Parameters:
            template_bytes: A `GBytes` holding the `GtkBuilder` XML

        Returns:

        """
        ...

    def set_template_from_resource(self, resource_name: str) -> None:
        """
        A convenience function that calls [method@Gtk.WidgetClass.set_template]
        with the contents of a `GResource`.

        Note that any class that installs templates must call
        [method@Gtk.Widget.init_template] in the widget’s instance
        initializer.

        Parameters:
            resource_name: The name of the resource to load the template from

        Returns:

        """
        ...

    def set_template_scope(self, scope: BuilderScope) -> None:
        """
        For use in language bindings, this will override the default
        `GtkBuilderScope` to be used when parsing GtkBuilder XML from
        this class’s template data.

        Note that this must be called from a composite widget classes class
        initializer after calling [method@Gtk.WidgetClass.set_template].

        Parameters:
            scope: The `GtkBuilderScope` to use when loading
        the class template

        Returns:

        """
        ...

class WidgetClassPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class WidgetPaintable(GObject.Object, Gdk.Paintable):
    """
    `GtkWidgetPaintable` is a `GdkPaintable` that displays the contents
    of a widget.

    `GtkWidgetPaintable` will also take care of the widget not being in a
    state where it can be drawn (like when it isn't shown) and just draw
    nothing or where it does not have a size (like when it is hidden) and
    report no size in that case.

    Of course, `GtkWidgetPaintable` allows you to monitor widgets for size
    changes by emitting the [signal@Gdk.Paintable::invalidate-size] signal
    whenever the size of the widget changes as well as for visual changes by
    emitting the [signal@Gdk.Paintable::invalidate-contents] signal whenever
    the widget changes.

    You can use a `GtkWidgetPaintable` everywhere a `GdkPaintable` is allowed,
    including using it on a `GtkPicture` (or one of its parents) that it was
    set on itself via gtk_picture_set_paintable(). The paintable will take care
    of recursion when this happens. If you do this however, ensure that the
    [property@Gtk.Picture:can-shrink] property is set to %TRUE or you might
    end up with an infinitely growing widget.

    :Constructors:

    ::

        WidgetPaintable(**properties)
        new(widget:Gtk.Widget=None) -> Gtk.WidgetPaintable

    Object GtkWidgetPaintable

    Properties from GtkWidgetPaintable:
      widget -> GtkWidget: widget

    Signals from GdkPaintable:
      invalidate-contents ()
      invalidate-size ()

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props, Gdk.Paintable.Props):
        widget: Optional[Widget]
        """
        The observed widget or %NULL if none.
        """

    props: Props = ...
    def __init__(self, widget: Optional[Widget] = ...): ...
    def get_widget(self) -> Optional[Widget]:
        """
        Returns the widget that is observed or %NULL if none.

        Parameters:


        Returns:
            Optional[Widget]: the observed widget.

        """
        ...

    @classmethod
    def new(cls, widget: Optional[Widget] = None) -> WidgetPaintable:
        """
        Creates a new widget paintable observing the given widget.

        Parameters:
            widget: a `GtkWidget`

        Returns:
            WidgetPaintable: a new `GtkWidgetPaintable`

        """
        ...

    def set_widget(self, widget: Optional[Widget] = None) -> None:
        """
        Sets the widget that should be observed.

        Parameters:
            widget: the widget to observe

        Returns:

        """
        ...

class WidgetPaintableClass(GObject.GPointer):
    """
    :Constructors:

    ::

        WidgetPaintableClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...

class WidgetPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class Window(
    Widget, Accessible, Buildable, ConstraintTarget, Native, Root, ShortcutManager
):
    """
    A `GtkWindow` is a toplevel window which can contain other widgets.

    ![An example GtkWindow](window.png)

    Windows normally have decorations that are under the control
    of the windowing system and allow the user to manipulate the window
    (resize it, move it, close it,...).

    # GtkWindow as GtkBuildable

    The `GtkWindow` implementation of the [iface@Gtk.Buildable] interface supports
    setting a child as the titlebar by specifying “titlebar” as the “type”
    attribute of a `<child>` element.

    # CSS nodes

    ```
    window.background [.csd / .solid-csd / .ssd] [.maximized / .fullscreen / .tiled]
    ├── <child>
    ╰── <titlebar child>.titlebar [.default-decoration]
    ```

    `GtkWindow` has a main CSS node with name window and style class .background.

    Style classes that are typically used with the main CSS node are .csd (when
    client-side decorations are in use), .solid-csd (for client-side decorations
    without invisible borders), .ssd (used by mutter when rendering server-side
    decorations). GtkWindow also represents window states with the following
    style classes on the main node: .maximized, .fullscreen, .tiled (when supported,
    also .tiled-top, .tiled-left, .tiled-right, .tiled-bottom).

    `GtkWindow` subclasses often add their own discriminating style classes,
    such as .dialog, .popup or .tooltip.

    Generally, some CSS properties don't make sense on the toplevel window node,
    such as margins or padding. When client-side decorations without invisible
    borders are in use (i.e. the .solid-csd style class is added to the
    main window node), the CSS border of the toplevel window is used for
    resize drags. In the .csd case, the shadow area outside of the window
    can be used to resize it.

    `GtkWindow` adds the .titlebar and .default-decoration style classes to the
    widget that is added as a titlebar child.

    # Accessibility

    Until GTK 4.10, `GtkWindow` used the `GTK_ACCESSIBLE_ROLE_WINDOW` role.

    Since GTK 4.12, `GtkWindow` uses the `GTK_ACCESSIBLE_ROLE_APPLICATION` role.

    # Actions

    `GtkWindow` defines a set of built-in actions:
    - `default.activate`: Activate the default widget.
    - `window.minimize`: Minimize the window.
    - `window.toggle-maximized`: Maximize or restore the window.
    - `window.close`: Close the window.

    :Constructors:

    ::

        Window(**properties)
        new() -> Gtk.Widget

    Object GtkWindow

    Signals from GtkWindow:
      keys-changed ()
      activate-focus ()
      activate-default ()
      enable-debugging (gboolean) -> gboolean
      close-request () -> gboolean

    Properties from GtkWindow:
      title -> gchararray: title
      resizable -> gboolean: resizable
      modal -> gboolean: modal
      default-width -> gint: default-width
      default-height -> gint: default-height
      destroy-with-parent -> gboolean: destroy-with-parent
      hide-on-close -> gboolean: hide-on-close
      icon-name -> gchararray: icon-name
      display -> GdkDisplay: display
      decorated -> gboolean: decorated
      deletable -> gboolean: deletable
      transient-for -> GtkWindow: transient-for
      application -> GtkApplication: application
      default-widget -> GtkWidget: default-widget
      focus-widget -> GtkWidget: focus-widget
      child -> GtkWidget: child
      titlebar -> GtkWidget: titlebar
      handle-menubar-accel -> gboolean: handle-menubar-accel
      is-active -> gboolean: is-active
      suspended -> gboolean: suspended
      startup-id -> gchararray: startup-id
      mnemonics-visible -> gboolean: mnemonics-visible
      focus-visible -> gboolean: focus-visible
      maximized -> gboolean: maximized
      fullscreened -> gboolean: fullscreened

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props,
        Accessible.Props,
        Buildable.Props,
        ConstraintTarget.Props,
        Native.Props,
        Root.Props,
        ShortcutManager.Props,
    ):
        application: Optional[Application]
        """
        The `GtkApplication` associated with the window.

        The application will be kept alive for at least as long as it
        has any windows associated with it (see g_application_hold()
        for a way to keep it alive without windows).

        Normally, the connection between the application and the window
        will remain until the window is destroyed, but you can explicitly
        remove it by setting the :application property to %NULL.
        """
        child: Optional[Widget]
        """
        The child widget.
        """
        decorated: bool
        """
        Whether the window should have a frame (also known as *decorations*).
        """
        default_height: int
        """
        The default height of the window.
        """
        default_widget: Optional[Widget]
        """
        The default widget.
        """
        default_width: int
        """
        The default width of the window.
        """
        deletable: bool
        """
        Whether the window frame should have a close button.
        """
        destroy_with_parent: bool
        """
        If this window should be destroyed when the parent is destroyed.
        """
        display: Gdk.Display
        """
        The display that will display this window.
        """
        focus_visible: bool
        """
        Whether 'focus rectangles' are currently visible in this window.

        This property is maintained by GTK based on user input
        and should not be set by applications.
        """
        focus_widget: Widget
        """
        The focus widget.
        """
        fullscreened: bool
        """
        Whether the window is fullscreen.

        Setting this property is the equivalent of calling
        [method@Gtk.Window.fullscreen] or [method@Gtk.Window.unfullscreen];
        either operation is asynchronous, which means you will need to
        connect to the ::notify signal in order to know whether the
        operation was successful.
        """
        handle_menubar_accel: bool
        """
        Whether the window frame should handle F10 for activating
        menubars.
        """
        hide_on_close: bool
        """
        If this window should be hidden when the users clicks the close button.
        """
        icon_name: Optional[str]
        """
        Specifies the name of the themed icon to use as the window icon.

        See [class@Gtk.IconTheme] for more details.
        """
        is_active: bool
        """
        Whether the toplevel is the currently active window.
        """
        maximized: bool
        """
        Whether the window is maximized.

        Setting this property is the equivalent of calling
        [method@Gtk.Window.maximize] or [method@Gtk.Window.unmaximize];
        either operation is asynchronous, which means you will need to
        connect to the ::notify signal in order to know whether the
        operation was successful.
        """
        mnemonics_visible: bool
        """
        Whether mnemonics are currently visible in this window.

        This property is maintained by GTK based on user input,
        and should not be set by applications.
        """
        modal: bool
        """
        If %TRUE, the window is modal.
        """
        resizable: bool
        """
        If %TRUE, users can resize the window.
        """
        suspended: bool
        """
        Whether the window is suspended.

        See [method@Gtk.Window.is_suspended] for details about what suspended means.
        """
        title: Optional[str]
        """
        The title of the window.
        """
        titlebar: Optional[Widget]
        """
        The titlebar widget.
        """
        transient_for: Optional[Window]
        """
        The transient parent of the window.
        """
        startup_id: str
        """
        A write-only property for setting window's startup notification identifier.
        """

    props: Props = ...
    parent_instance: Widget = ...
    def __init__(
        self,
        application: Optional[Application] = ...,
        child: Optional[Widget] = ...,
        decorated: bool = ...,
        default_height: int = ...,
        default_widget: Optional[Widget] = ...,
        default_width: int = ...,
        deletable: bool = ...,
        destroy_with_parent: bool = ...,
        display: Gdk.Display = ...,
        focus_visible: bool = ...,
        focus_widget: Widget = ...,
        fullscreened: bool = ...,
        handle_menubar_accel: bool = ...,
        hide_on_close: bool = ...,
        icon_name: Optional[str] = ...,
        maximized: bool = ...,
        mnemonics_visible: bool = ...,
        modal: bool = ...,
        resizable: bool = ...,
        startup_id: str = ...,
        title: Optional[str] = ...,
        titlebar: Optional[Widget] = ...,
        transient_for: Optional[Window] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def close(self) -> None:
        """
        Requests that the window is closed.

        This is similar to what happens when a window manager
        close button is clicked.

        This function can be used with close buttons in custom
        titlebars.

        Parameters:


        Returns:

        """
        ...

    def destroy(self) -> None:
        """
        Drop the internal reference GTK holds on toplevel windows.

        Parameters:


        Returns:

        """
        ...

    def do_activate_default(self) -> None: ...
    def do_activate_focus(self) -> None: ...
    def do_close_request(self) -> bool: ...
    def do_enable_debugging(self, toggle: bool) -> bool: ...
    def do_keys_changed(self) -> None: ...
    def fullscreen(self) -> None:
        """
        Asks to place @window in the fullscreen state.

        Note that you shouldn’t assume the window is definitely fullscreen
        afterward, because other entities (e.g. the user or window manager)
        unfullscreen it again, and not all window managers honor requests
        to fullscreen windows.

        You can track the result of this operation via the
        [property@Gdk.Toplevel:state] property, or by listening to
        notifications of the [property@Gtk.Window:fullscreened] property.

        Parameters:


        Returns:

        """
        ...

    def fullscreen_on_monitor(self, monitor: Gdk.Monitor) -> None:
        """
        Asks to place @window in the fullscreen state on the given @monitor.

        Note that you shouldn't assume the window is definitely fullscreen
        afterward, or that the windowing system allows fullscreen windows on
        any given monitor.

        You can track the result of this operation via the
        [property@Gdk.Toplevel:state] property, or by listening to
        notifications of the [property@Gtk.Window:fullscreened] property.

        Parameters:
            monitor: which monitor to go fullscreen on

        Returns:

        """
        ...

    def get_application(self) -> Optional[Application]:
        """
        Gets the `GtkApplication` associated with the window.

        Parameters:


        Returns:
            Optional[Application]: a `GtkApplication`

        """
        ...

    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @window.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @window

        """
        ...

    def get_decorated(self) -> bool:
        """
        Returns whether the window has been set to have decorations.

        Parameters:


        Returns:
            bool: %TRUE if the window has been set to have decorations

        """
        ...

    @staticmethod
    def get_default_icon_name() -> Optional[str]:
        """
        Returns the fallback icon name for windows.

        The returned string is owned by GTK and should not
        be modified. It is only valid until the next call to
        [func@Gtk.Window.set_default_icon_name].

        Parameters:


        Returns:
            Optional[str]: the fallback icon name for windows

        """
        ...

    def get_default_size(self) -> Tuple[int, int]:
        """
        Gets the default size of the window.

        A value of 0 for the width or height indicates that a default
        size has not been explicitly set for that dimension, so the
        “natural” size of the window will be used.

        This function is the recommended way for [saving window state
        across restarts of applications](https://developer.gnome.org/documentation/tutorials/save-state.html).

        Parameters:


        Returns:
            int: location to store the default width
            int: location to store the default height
        """
        ...

    def get_default_widget(self) -> Optional[Widget]:
        """
        Returns the default widget for @window.

        Parameters:


        Returns:
            Optional[Widget]: the default widget

        """
        ...

    def get_deletable(self) -> bool:
        """
        Returns whether the window has been set to have a close button.

        Parameters:


        Returns:
            bool: %TRUE if the window has been set to have a close button

        """
        ...

    def get_destroy_with_parent(self) -> bool:
        """
        Returns whether the window will be destroyed with its transient parent.

        Parameters:


        Returns:
            bool: %TRUE if the window will be destroyed with its transient parent.

        """
        ...

    def get_focus(self) -> Optional[Widget]:
        """
        Retrieves the current focused widget within the window.

        Note that this is the widget that would have the focus
        if the toplevel window focused; if the toplevel window
        is not focused then `gtk_widget_has_focus (widget)` will
        not be %TRUE for the widget.

        Parameters:


        Returns:
            Optional[Widget]: the currently focused widget

        """
        ...

    def get_focus_visible(self) -> bool:
        """
        Gets whether “focus rectangles” are supposed to be visible.

        Parameters:


        Returns:
            bool: %TRUE if “focus rectangles” are supposed to be visible
        in this window.

        """
        ...

    def get_group(self) -> WindowGroup:
        """
        Returns the group for @window.

        If the window has no group, then the default group is returned.

        Parameters:


        Returns:
            WindowGroup: the `GtkWindowGroup` for a window
        or the default group

        """
        ...

    def get_handle_menubar_accel(self) -> bool:
        """
        Returns whether this window reacts to F10 key presses by
        activating a menubar it contains.

        Parameters:


        Returns:
            bool: %TRUE if the window handles F10

        """
        ...

    def get_hide_on_close(self) -> bool:
        """
        Returns whether the window will be hidden when the close button is clicked.

        Parameters:


        Returns:
            bool: %TRUE if the window will be hidden

        """
        ...

    def get_icon_name(self) -> Optional[str]:
        """
        Returns the name of the themed icon for the window.

        Parameters:


        Returns:
            Optional[str]: the icon name

        """
        ...

    def get_mnemonics_visible(self) -> bool:
        """
        Gets whether mnemonics are supposed to be visible.

        Parameters:


        Returns:
            bool: %TRUE if mnemonics are supposed to be visible
        in this window.

        """
        ...

    def get_modal(self) -> bool:
        """
        Returns whether the window is modal.

        Parameters:


        Returns:
            bool: %TRUE if the window is set to be modal and
        establishes a grab when shown

        """
        ...

    def get_resizable(self) -> bool:
        """
        Gets the value set by gtk_window_set_resizable().

        Parameters:


        Returns:
            bool: %TRUE if the user can resize the window

        """
        ...

    def get_title(self) -> Optional[str]:
        """
        Retrieves the title of the window.

        Parameters:


        Returns:
            Optional[str]: the title of the window

        """
        ...

    def get_titlebar(self) -> Optional[Widget]:
        """
        Returns the custom titlebar that has been set with
        gtk_window_set_titlebar().

        Parameters:


        Returns:
            Optional[Widget]: the custom titlebar

        """
        ...

    @staticmethod
    def get_toplevels() -> Gio.ListModel:
        """
        Returns a list of all existing toplevel windows.

        If you want to iterate through the list and perform actions involving
        callbacks that might destroy the widgets or add new ones, be aware that
        the list of toplevels will change and emit the \"items-changed\" signal.

        Parameters:


        Returns:
            Gio.ListModel: the list
        of toplevel widgets

        """
        ...

    def get_transient_for(self) -> Optional[Window]:
        """
        Fetches the transient parent for this window.

        Parameters:


        Returns:
            Optional[Window]: the transient parent for this window

        """
        ...

    def has_group(self) -> bool:
        """
        Returns whether @window has an explicit window group.

        Parameters:


        Returns:
            bool: %TRUE if @window has an explicit window group.

        """
        ...

    def is_active(self) -> bool:
        """
        Returns whether the window is part of the current active toplevel.

        The active toplevel is the window receiving keystrokes.

        The return value is %TRUE if the window is active toplevel itself.
        You might use this function if you wanted to draw a widget
        differently in an active window from a widget in an inactive window.

        Parameters:


        Returns:
            bool: %TRUE if the window part of the current active window.

        """
        ...

    def is_fullscreen(self) -> bool:
        """
        Retrieves the current fullscreen state of @window.

        Note that since fullscreening is ultimately handled by the window
        manager and happens asynchronously to an application request, you
        shouldn’t assume the return value of this function changing
        immediately (or at all), as an effect of calling
        [method@Gtk.Window.fullscreen] or [method@Gtk.Window.unfullscreen].

        If the window isn't yet mapped, the value returned will whether the
        initial requested state is fullscreen.

        Parameters:


        Returns:
            bool: whether the window has a fullscreen state.

        """
        ...

    def is_maximized(self) -> bool:
        """
        Retrieves the current maximized state of @window.

        Note that since maximization is ultimately handled by the window
        manager and happens asynchronously to an application request, you
        shouldn’t assume the return value of this function changing
        immediately (or at all), as an effect of calling
        [method@Gtk.Window.maximize] or [method@Gtk.Window.unmaximize].

        If the window isn't yet mapped, the value returned will whether the
        initial requested state is maximized.

        Parameters:


        Returns:
            bool: whether the window has a maximized state.

        """
        ...

    def is_suspended(self) -> bool:
        """
        Retrieves the current suspended state of @window.

        A window being suspended means it's currently not visible to the user, for
        example by being on a inactive workspace, minimized, obstructed.

        Parameters:


        Returns:
            bool: whether the window is suspended.

        """
        ...

    @staticmethod
    def list_toplevels() -> list[Widget]:
        """
        Returns a list of all existing toplevel windows.

        The widgets in the list are not individually referenced.
        If you want to iterate through the list and perform actions
        involving callbacks that might destroy the widgets, you must
        call `g_list_foreach (result, (GFunc)g_object_ref, NULL)` first,
        and then unref all the widgets afterwards.

        Parameters:


        Returns:
            list[Widget]: list of
        toplevel widgets

        """
        ...

    def maximize(self) -> None:
        """
        Asks to maximize @window, so that it fills the screen.

        Note that you shouldn’t assume the window is definitely maximized
        afterward, because other entities (e.g. the user or window manager)
        could unmaximize it again, and not all window managers support
        maximization.

        It’s permitted to call this function before showing a window,
        in which case the window will be maximized when it appears onscreen
        initially.

        You can track the result of this operation via the
        [property@Gdk.Toplevel:state] property, or by listening to
        notifications on the [property@Gtk.Window:maximized]
        property.

        Parameters:


        Returns:

        """
        ...

    def minimize(self) -> None:
        """
        Asks to minimize the specified @window.

        Note that you shouldn’t assume the window is definitely minimized
        afterward, because the windowing system might not support this
        functionality; other entities (e.g. the user or the window manager)
        could unminimize it again, or there may not be a window manager in
        which case minimization isn’t possible, etc.

        It’s permitted to call this function before showing a window,
        in which case the window will be minimized before it ever appears
        onscreen.

        You can track result of this operation via the
        [property@Gdk.Toplevel:state] property.

        Parameters:


        Returns:

        """
        ...

    @classmethod
    def new(cls) -> Window:
        """
        Creates a new `GtkWindow`.

        To get an undecorated window (no window borders), use
        [method@Gtk.Window.set_decorated].

        All top-level windows created by gtk_window_new() are stored
        in an internal top-level window list. This list can be obtained
        from [func@Gtk.Window.list_toplevels]. Due to GTK keeping a
        reference to the window internally, gtk_window_new() does not
        return a reference to the caller.

        To delete a `GtkWindow`, call [method@Gtk.Window.destroy].

        Parameters:


        Returns:
            Widget: a new `GtkWindow`.

        """
        ...

    def present(self) -> None:
        """
        Presents a window to the user.

        This may mean raising the window in the stacking order,
        unminimizing it, moving it to the current desktop and/or
        giving it the keyboard focus (possibly dependent on the user’s
        platform, window manager and preferences).

        If @window is hidden, this function also makes it visible.

        Parameters:


        Returns:

        """
        ...

    def present_with_time(self, timestamp: int) -> None:
        """
        Presents a window to the user in response to an user interaction.

        See [method@Gtk.Window.present] for more details.

        The timestamp should be gathered when the window was requested
        to be shown (when clicking a link for example), rather than once
        the window is ready to be shown.

        Parameters:
            timestamp: the timestamp of the user interaction (typically a
        button or key press event) which triggered this call

        Returns:

        """
        ...

    def set_application(self, application: Optional[Application] = None) -> None:
        """
        Sets or unsets the `GtkApplication` associated with the window.

        The application will be kept alive for at least as long as it has
        any windows associated with it (see g_application_hold() for a way
        to keep it alive without windows).

        Normally, the connection between the application and the window will
        remain until the window is destroyed, but you can explicitly remove
        it by setting the @application to %NULL.

        This is equivalent to calling [method@Gtk.Application.remove_window]
        and/or [method@Gtk.Application.add_window] on the old/new applications
        as relevant.

        Parameters:
            application: a `GtkApplication`, or %NULL to unset

        Returns:

        """
        ...

    @staticmethod
    def set_auto_startup_notification(setting: bool) -> None:
        """
        Sets whether the window should request startup notification.

        By default, after showing the first `GtkWindow`, GTK calls
        [method@Gdk.Toplevel.set_startup_id]. Call this function
        to disable the automatic startup notification. You might do this
        if your first window is a splash screen, and you want to delay
        notification until after your real main window has been shown,
        for example.

        In that example, you would disable startup notification
        temporarily, show your splash screen, then re-enable it so that
        showing the main window would automatically result in notification.

        Parameters:
            setting: %TRUE to automatically do startup notification

        Returns:

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @window.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

    def set_decorated(self, setting: bool) -> None:
        """
        Sets whether the window should be decorated.

        By default, windows are decorated with a title bar, resize
        controls, etc. Some window managers allow GTK to disable these
        decorations, creating a borderless window. If you set the decorated
        property to %FALSE using this function, GTK will do its best to
        convince the window manager not to decorate the window. Depending on
        the system, this function may not have any effect when called on a
        window that is already visible, so you should call it before calling
        [method@Gtk.Widget.show].

        On Windows, this function always works, since there’s no window manager
        policy involved.

        Parameters:
            setting: %TRUE to decorate the window

        Returns:

        """
        ...

    @staticmethod
    def set_default_icon_name(name: str) -> None:
        """
        Sets an icon to be used as fallback.

        The fallback icon is used for windows that
        haven't had [method@Gtk.Window.set_icon_name]
        called on them.

        Parameters:
            name: the name of the themed icon

        Returns:

        """
        ...

    def set_default_size(self, width: int, height: int) -> None:
        """
        Sets the default size of a window.

        The default size of a window is the size that will be used if no other constraints apply.

        The default size will be updated whenever the window is resized
        to reflect the new size, unless the window is forced to a size,
        like when it is maximized or fullscreened.

        If the window’s minimum size request is larger than
        the default, the default will be ignored.

        Setting the default size to a value <= 0 will cause it to be
        ignored and the natural size request will be used instead. It
        is possible to do this while the window is showing to \"reset\"
        it to its initial size.

        Unlike [method@Gtk.Widget.set_size_request], which sets a size
        request for a widget and thus would keep users from shrinking
        the window, this function only sets the initial size, just as
        if the user had resized the window themselves. Users can still
        shrink the window again as they normally would. Setting a default
        size of -1 means to use the “natural” default size (the size request
        of the window).

        If you use this function to reestablish a previously saved window size,
        note that the appropriate size to save is the one returned by
        [method@Gtk.Window.get_default_size]. Using the window allocation
        directly will not work in all circumstances and can lead to growing
        or shrinking windows.

        Parameters:
            width: width in pixels, or -1 to unset the default width
            height: height in pixels, or -1 to unset the default height

        Returns:

        """
        ...

    def set_default_widget(self, default_widget: Optional[Widget] = None) -> None:
        """
        Sets the default widget.

        The default widget is the widget that is activated when the user
        presses Enter in a dialog (for example).

        Parameters:
            default_widget: widget to be the default
        to unset the default widget for the toplevel

        Returns:

        """
        ...

    def set_deletable(self, setting: bool) -> None:
        """
        Sets whether the window should be deletable.

        By default, windows have a close button in the window frame.
        Some window managers allow GTK to disable this button. If you
        set the deletable property to %FALSE using this function, GTK
        will do its best to convince the window manager not to show a
        close button. Depending on the system, this function may not
        have any effect when called on a window that is already visible,
        so you should call it before calling [method@Gtk.Widget.show].

        On Windows, this function always works, since there’s no window
        manager policy involved.

        Parameters:
            setting: %TRUE to decorate the window as deletable

        Returns:

        """
        ...

    def set_destroy_with_parent(self, setting: bool) -> None:
        """
        If @setting is %TRUE, then destroying the transient parent of @window
        will also destroy @window itself.

        This is useful for dialogs that shouldn’t persist beyond the lifetime
        of the main window they are associated with, for example.

        Parameters:
            setting: whether to destroy @window with its transient parent

        Returns:

        """
        ...

    def set_display(self, display: Gdk.Display) -> None:
        """
        Sets the `GdkDisplay` where the @window is displayed.

        If the window is already mapped, it will be unmapped,
        and then remapped on the new display.

        Parameters:
            display: a `GdkDisplay`

        Returns:

        """
        ...

    def set_focus(self, focus: Optional[Widget] = None) -> None:
        """
        Sets the focus widget.

        If @focus is not the current focus widget, and is focusable,
        sets it as the focus widget for the window. If @focus is %NULL,
        unsets the focus widget for this window. To set the focus to a
        particular widget in the toplevel, it is usually more convenient
        to use [method@Gtk.Widget.grab_focus] instead of this function.

        Parameters:
            focus: widget to be the new focus widget, or %NULL to unset
        any focus widget for the toplevel window.

        Returns:

        """
        ...

    def set_focus_visible(self, setting: bool) -> None:
        """
        Sets whether “focus rectangles” are supposed to be visible.

        This property is maintained by GTK based on user input,
        and should not be set by applications.

        Parameters:
            setting: the new value

        Returns:

        """
        ...

    def set_handle_menubar_accel(self, handle_menubar_accel: bool) -> None:
        """
        Sets whether this window should react to F10 key presses
        by activating a menubar it contains.

        Parameters:
            handle_menubar_accel: %TRUE to make @window handle F10

        Returns:

        """
        ...

    def set_hide_on_close(self, setting: bool) -> None:
        """
        If @setting is %TRUE, then clicking the close button on the window
        will not destroy it, but only hide it.

        Parameters:
            setting: whether to hide the window when it is closed

        Returns:

        """
        ...

    def set_icon_name(self, name: Optional[str] = None) -> None:
        """
        Sets the icon for the window from a named themed icon.

        See the docs for [class@Gtk.IconTheme] for more details.
        On some platforms, the window icon is not used at all.

        Note that this has nothing to do with the WM_ICON_NAME
        property which is mentioned in the ICCCM.

        Parameters:
            name: the name of the themed icon

        Returns:

        """
        ...

    @staticmethod
    def set_interactive_debugging(enable: bool) -> None:
        """
        Opens or closes the [interactive debugger](running.html#interactive-debugging).

        The debugger offers access to the widget hierarchy of the application
        and to useful debugging tools.

        Parameters:
            enable: %TRUE to enable interactive debugging

        Returns:

        """
        ...

    def set_mnemonics_visible(self, setting: bool) -> None:
        """
        Sets whether mnemonics are supposed to be visible.

        This property is maintained by GTK based on user input,
        and should not be set by applications.

        Parameters:
            setting: the new value

        Returns:

        """
        ...

    def set_modal(self, modal: bool) -> None:
        """
        Sets a window modal or non-modal.

        Modal windows prevent interaction with other windows in the same
        application. To keep modal dialogs on top of main application windows,
        use [method@Gtk.Window.set_transient_for] to make the dialog transient
        for the parent; most window managers will then disallow lowering the
        dialog below the parent.

        Parameters:
            modal: whether the window is modal

        Returns:

        """
        ...

    def set_resizable(self, resizable: bool) -> None:
        """
        Sets whether the user can resize a window.

        Windows are user resizable by default.

        Parameters:
            resizable: %TRUE if the user can resize this window

        Returns:

        """
        ...

    def set_startup_id(self, startup_id: str) -> None:
        """
        Sets the startup notification ID.

        Startup notification identifiers are used by desktop environment
        to track application startup, to provide user feedback and other
        features. This function changes the corresponding property on the
        underlying `GdkSurface`.

        Normally, startup identifier is managed automatically and you should
        only use this function in special cases like transferring focus from
        other processes. You should use this function before calling
        [method@Gtk.Window.present] or any equivalent function generating
        a window map event.

        This function is only useful on X11, not with other GTK targets.

        Parameters:
            startup_id: a string with startup-notification identifier

        Returns:

        """
        ...

    def set_title(self, title: Optional[str] = None) -> None:
        """
        Sets the title of the `GtkWindow`.

        The title of a window will be displayed in its title bar; on the
        X Window System, the title bar is rendered by the window manager
        so exactly how the title appears to users may vary according to a
        user’s exact configuration. The title should help a user distinguish
        this window from other windows they may have open. A good title might
        include the application name and current document filename, for example.

        Passing %NULL does the same as setting the title to an empty string.

        Parameters:
            title: title of the window

        Returns:

        """
        ...

    def set_titlebar(self, titlebar: Optional[Widget] = None) -> None:
        """
        Sets a custom titlebar for @window.

        A typical widget used here is [class@Gtk.HeaderBar], as it
        provides various features expected of a titlebar while allowing
        the addition of child widgets to it.

        If you set a custom titlebar, GTK will do its best to convince
        the window manager not to put its own titlebar on the window.
        Depending on the system, this function may not work for a window
        that is already visible, so you set the titlebar before calling
        [method@Gtk.Widget.show].

        Parameters:
            titlebar: the widget to use as titlebar

        Returns:

        """
        ...

    def set_transient_for(self, parent: Optional[Window] = None) -> None:
        """
        Dialog windows should be set transient for the main application
        window they were spawned from. This allows window managers to e.g.
        keep the dialog on top of the main window, or center the dialog
        over the main window. [ctor@Gtk.Dialog.new_with_buttons] and other
        convenience functions in GTK will sometimes call
        gtk_window_set_transient_for() on your behalf.

        Passing %NULL for @parent unsets the current transient window.

        On Windows, this function puts the child window on top of the parent,
        much as the window manager would have done on X.

        Parameters:
            parent: parent window

        Returns:

        """
        ...

    def unfullscreen(self) -> None:
        """
        Asks to remove the fullscreen state for @window, and return to
        its previous state.

        Note that you shouldn’t assume the window is definitely not
        fullscreen afterward, because other entities (e.g. the user or
        window manager) could fullscreen it again, and not all window
        managers honor requests to unfullscreen windows; normally the
        window will end up restored to its normal state. Just don’t
        write code that crashes if not.

        You can track the result of this operation via the
        [property@Gdk.Toplevel:state] property, or by listening to
        notifications of the [property@Gtk.Window:fullscreened] property.

        Parameters:


        Returns:

        """
        ...

    def unmaximize(self) -> None:
        """
        Asks to unmaximize @window.

        Note that you shouldn’t assume the window is definitely unmaximized
        afterward, because other entities (e.g. the user or window manager)
        maximize it again, and not all window managers honor requests to
        unmaximize.

        You can track the result of this operation via the
        [property@Gdk.Toplevel:state] property, or by listening to
        notifications on the [property@Gtk.Window:maximized] property.

        Parameters:


        Returns:

        """
        ...

    def unminimize(self) -> None:
        """
        Asks to unminimize the specified @window.

        Note that you shouldn’t assume the window is definitely unminimized
        afterward, because the windowing system might not support this
        functionality; other entities (e.g. the user or the window manager)
        could minimize it again, or there may not be a window manager in
        which case minimization isn’t possible, etc.

        You can track result of this operation via the
        [property@Gdk.Toplevel:state] property.

        Parameters:


        Returns:

        """
        ...

class WindowClass(GObject.GPointer):
    """
    :Constructors:

    ::

        WindowClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...
    activate_focus: Callable[[Window], None] = ...
    activate_default: Callable[[Window], None] = ...
    keys_changed: Callable[[Window], None] = ...
    enable_debugging: Callable[[Window, bool], bool] = ...
    close_request: Callable[[Window], bool] = ...
    padding: list[None] = ...

class WindowControls(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkWindowControls` shows window frame controls.

    Typical window frame controls are minimize, maximize and close buttons,
    and the window icon.

    ![An example GtkWindowControls](windowcontrols.png)

    `GtkWindowControls` only displays start or end side of the controls (see
    [property@Gtk.WindowControls:side]), so it's intended to be always used
    in pair with another `GtkWindowControls` for the opposite side, for example:

    ```xml
    <object class=\"GtkBox\">
    <child>
    <object class=\"GtkWindowControls\">
    <property name=\"side\">start</property>
    </object>
    </child>

    ...

    <child>
    <object class=\"GtkWindowControls\">
    <property name=\"side\">end</property>
    </object>
    </child>
    </object>
    ```

    # CSS nodes

    ```
    windowcontrols
    ├── [image.icon]
    ├── [button.minimize]
    ├── [button.maximize]
    ╰── [button.close]
    ```

    A `GtkWindowControls`' CSS node is called windowcontrols. It contains
    subnodes corresponding to each title button. Which of the title buttons
    exist and where they are placed exactly depends on the desktop environment
    and [property@Gtk.WindowControls:decoration-layout] value.

    When [property@Gtk.WindowControls:empty] is %TRUE, it gets the .empty
    style class.

    # Accessibility

    `GtkWindowControls` uses the %GTK_ACCESSIBLE_ROLE_GROUP role.

    :Constructors:

    ::

        WindowControls(**properties)
        new(side:Gtk.PackType) -> Gtk.Widget

    Object GtkWindowControls

    Properties from GtkWindowControls:
      side -> GtkPackType: side
      decoration-layout -> gchararray: decoration-layout
      empty -> gboolean: empty

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        decoration_layout: Optional[str]
        """
        The decoration layout for window buttons.

        If this property is not set, the
        [property@Gtk.Settings:gtk-decoration-layout] setting is used.
        """
        empty: bool
        """
        Whether the widget has any window buttons.
        """
        side: PackType
        """
        Whether the widget shows start or end side of the decoration layout.

        See [property@Gtk.WindowControls:decoration_layout].
        """

    props: Props = ...
    def __init__(
        self,
        decoration_layout: Optional[str] = ...,
        side: PackType = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_decoration_layout(self) -> Optional[str]:
        """
        Gets the decoration layout of this `GtkWindowControls`.

        Parameters:


        Returns:
            Optional[str]: the decoration layout or %NULL if it is unset

        """
        ...

    def get_empty(self) -> bool:
        """
        Gets whether the widget has any window buttons.

        Parameters:


        Returns:
            bool: %TRUE if the widget has window buttons, otherwise %FALSE

        """
        ...

    def get_side(self) -> PackType:
        """
        Gets the side to which this `GtkWindowControls` instance belongs.

        Parameters:


        Returns:
            PackType: the side

        """
        ...

    @classmethod
    def new(cls, side: PackType) -> WindowControls:
        """
        Creates a new `GtkWindowControls`.

        Parameters:
            side: the side

        Returns:
            Widget: a new `GtkWindowControls`.

        """
        ...

    def set_decoration_layout(self, layout: Optional[str] = None) -> None:
        """
        Sets the decoration layout for the title buttons.

        This overrides the [property@Gtk.Settings:gtk-decoration-layout]
        setting.

        The format of the string is button names, separated by commas.
        A colon separates the buttons that should appear on the left
        from those on the right. Recognized button names are minimize,
        maximize, close and icon (the window icon).

        For example, “icon:minimize,maximize,close” specifies a icon
        on the left, and minimize, maximize and close buttons on the right.

        If [property@Gtk.WindowControls:side] value is @GTK_PACK_START, @self
        will display the part before the colon, otherwise after that.

        Parameters:
            layout: a decoration layout, or %NULL to unset the layout

        Returns:

        """
        ...

    def set_side(self, side: PackType) -> None:
        """
        Determines which part of decoration layout the `GtkWindowControls` uses.

        See [property@Gtk.WindowControls:decoration-layout].

        Parameters:
            side: a side

        Returns:

        """
        ...

class WindowControlsClass(GObject.GPointer):
    """
    :Constructors:

    ::

        WindowControlsClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class WindowGroup(GObject.Object):
    """
    `GtkWindowGroup` makes group of windows behave like separate applications.

    It achieves this by limiting the effect of GTK grabs and modality
    to windows in the same group.

    A window can be a member in at most one window group at a time.
    Windows that have not been explicitly assigned to a group are
    implicitly treated like windows of the default window group.

    `GtkWindowGroup` objects are referenced by each window in the group,
    so once you have added all windows to a `GtkWindowGroup`, you can drop
    the initial reference to the window group with g_object_unref(). If the
    windows in the window group are subsequently destroyed, then they will
    be removed from the window group and drop their references on the window
    group; when all window have been removed, the window group will be
    freed.

    :Constructors:

    ::

        WindowGroup(**properties)
        new() -> Gtk.WindowGroup

    Object GtkWindowGroup

    Signals from GObject:
      notify (GParam)
    """

    class Props(GObject.Object.Props): ...
    parent_instance: GObject.Object = ...
    priv: WindowGroupPrivate = ...
    def add_window(self, window: Window) -> None:
        """
        Adds a window to a `GtkWindowGroup`.

        Parameters:
            window: the `GtkWindow` to add

        Returns:

        """
        ...

    def list_windows(self) -> list[Window]:
        """
        Returns a list of the `GtkWindows` that belong to @window_group.

        Parameters:


        Returns:
            list[Window]: A
        newly-allocated list of windows inside the group.

        """
        ...

    @classmethod
    def new(cls) -> WindowGroup:
        """
        Creates a new `GtkWindowGroup` object.

        Modality of windows only affects windows
        within the same `GtkWindowGroup`.

        Parameters:


        Returns:
            WindowGroup: a new `GtkWindowGroup`.

        """
        ...

    def remove_window(self, window: Window) -> None:
        """
        Removes a window from a `GtkWindowGroup`.

        Parameters:
            window: the `GtkWindow` to remove

        Returns:

        """
        ...

class WindowGroupClass(GObject.GPointer):
    """
    :Constructors:

    ::

        WindowGroupClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: GObject.ObjectClass = ...
    _gtk_reserved1: None = ...
    _gtk_reserved2: None = ...
    _gtk_reserved3: None = ...
    _gtk_reserved4: None = ...

class WindowGroupPrivate(GObject.GPointer):
    class Props(GObject.GPointer.Props): ...

class WindowHandle(Widget, Accessible, Buildable, ConstraintTarget):
    """
    `GtkWindowHandle` is a titlebar area widget.

    When added into a window, it can be dragged to move the window, and handles
    right click, double click and middle click as expected of a titlebar.

    # CSS nodes

    `GtkWindowHandle` has a single CSS node with the name `windowhandle`.

    # Accessibility

    Until GTK 4.10, `GtkWindowHandle` used the `GTK_ACCESSIBLE_ROLE_GROUP` role.

    Starting from GTK 4.12, `GtkWindowHandle` uses the `GTK_ACCESSIBLE_ROLE_GENERIC` role.

    :Constructors:

    ::

        WindowHandle(**properties)
        new() -> Gtk.Widget

    Object GtkWindowHandle

    Properties from GtkWindowHandle:
      child -> GtkWidget: child

    Signals from GtkWidget:
      direction-changed (GtkTextDirection)
      destroy ()
      show ()
      hide ()
      map ()
      unmap ()
      realize ()
      unrealize ()
      state-flags-changed (GtkStateFlags)
      mnemonic-activate (gboolean) -> gboolean
      move-focus (GtkDirectionType)
      keynav-failed (GtkDirectionType) -> gboolean
      query-tooltip (gint, gint, gboolean, GtkTooltip) -> gboolean

    Properties from GtkWidget:
      name -> gchararray: name
      parent -> GtkWidget: parent
      root -> GtkRoot: root
      width-request -> gint: width-request
      height-request -> gint: height-request
      visible -> gboolean: visible
      sensitive -> gboolean: sensitive
      can-focus -> gboolean: can-focus
      has-focus -> gboolean: has-focus
      can-target -> gboolean: can-target
      focus-on-click -> gboolean: focus-on-click
      focusable -> gboolean: focusable
      has-default -> gboolean: has-default
      receives-default -> gboolean: receives-default
      cursor -> GdkCursor: cursor
      has-tooltip -> gboolean: has-tooltip
      tooltip-markup -> gchararray: tooltip-markup
      tooltip-text -> gchararray: tooltip-text
      opacity -> gdouble: opacity
      overflow -> GtkOverflow: overflow
      halign -> GtkAlign: halign
      valign -> GtkAlign: valign
      margin-start -> gint: margin-start
      margin-end -> gint: margin-end
      margin-top -> gint: margin-top
      margin-bottom -> gint: margin-bottom
      hexpand -> gboolean: hexpand
      vexpand -> gboolean: vexpand
      hexpand-set -> gboolean: hexpand-set
      vexpand-set -> gboolean: vexpand-set
      scale-factor -> gint: scale-factor
      css-name -> gchararray: css-name
      css-classes -> GStrv: css-classes
      layout-manager -> GtkLayoutManager: layout-manager

    Signals from GObject:
      notify (GParam)
    """

    class Props(
        Widget.Props, Accessible.Props, Buildable.Props, ConstraintTarget.Props
    ):
        child: Optional[Widget]
        """
        The child widget.
        """

    props: Props = ...
    def __init__(
        self,
        child: Optional[Widget] = ...,
        can_focus: bool = ...,
        can_target: bool = ...,
        css_classes: Sequence[str] = ...,
        css_name: str = ...,
        cursor: Optional[Gdk.Cursor] = ...,
        focus_on_click: bool = ...,
        focusable: bool = ...,
        halign: Align = ...,
        has_tooltip: bool = ...,
        height_request: int = ...,
        hexpand: bool = ...,
        hexpand_set: bool = ...,
        layout_manager: Optional[LayoutManager] = ...,
        margin_bottom: int = ...,
        margin_end: int = ...,
        margin_start: int = ...,
        margin_top: int = ...,
        name: str = ...,
        opacity: float = ...,
        overflow: Overflow = ...,
        receives_default: bool = ...,
        sensitive: bool = ...,
        tooltip_markup: Optional[str] = ...,
        tooltip_text: Optional[str] = ...,
        valign: Align = ...,
        vexpand: bool = ...,
        vexpand_set: bool = ...,
        visible: bool = ...,
        width_request: int = ...,
        accessible_role: AccessibleRole = ...,
    ): ...
    def get_child(self) -> Optional[Widget]:
        """
        Gets the child widget of @self.

        Parameters:


        Returns:
            Optional[Widget]: the child widget of @self

        """
        ...

    @classmethod
    def new(cls) -> WindowHandle:
        """
        Creates a new `GtkWindowHandle`.

        Parameters:


        Returns:
            Widget: a new `GtkWindowHandle`.

        """
        ...

    def set_child(self, child: Optional[Widget] = None) -> None:
        """
        Sets the child widget of @self.

        Parameters:
            child: the child widget

        Returns:

        """
        ...

class WindowHandleClass(GObject.GPointer):
    """
    :Constructors:

    ::

        WindowHandleClass()
    """

    class Props(GObject.GPointer.Props): ...
    parent_class: WidgetClass = ...

class ApplicationInhibitFlags(GObject.GFlags):
    """
    Types of user actions that may be blocked by `GtkApplication`.

    See [method@Gtk.Application.inhibit].
    """

    IDLE = 8
    """
    Inhibit the session being
    marked as idle (and possibly locked)
    """
    LOGOUT = 1
    """
    Inhibit ending the user session
    by logging out or by shutting down the computer
    """
    SUSPEND = 4
    """
    Inhibit suspending the
    session or computer
    """
    SWITCH = 2
    """
    Inhibit user switching
    """

class BuilderClosureFlags(GObject.GFlags):
    """
    The list of flags that can be passed to gtk_builder_create_closure().

    New values may be added in the future for new features, so external
    implementations of [iface@Gtk.BuilderScope] should test the flags
    for unknown values and raise a %GTK_BUILDER_ERROR_INVALID_ATTRIBUTE error
    when they encounter one.
    """

    SWAPPED = 1
    """
    The closure should be created swapped. See
    g_cclosure_new_swap() for details.
    """

class CellRendererState(GObject.GFlags):
    """
    Tells how a cell is to be rendered.
    """

    EXPANDABLE = 32
    """
    The cell is in a row that can be expanded
    """
    EXPANDED = 64
    """
    The cell is in a row that is expanded
    """
    FOCUSED = 16
    """
    The cell is in the focus row.
    """
    INSENSITIVE = 4
    """
    The cell is drawn in an insensitive manner
    """
    PRELIT = 2
    """
    The mouse is hovering over the cell.
    """
    SELECTED = 1
    """
    The cell is currently selected, and
    probably has a selection colored background to render to.
    """
    SORTED = 8
    """
    The cell is in a sorted row
    """

class DebugFlags(GObject.GFlags):
    """
    Flags to use with gtk_set_debug_flags().

    Settings these flags causes GTK to print out different
    types of debugging information. Some of these flags are
    only available when GTK has been configured with `-Ddebug=true`.
    """

    A11Y = 131072
    """
    Information about accessibility state changes
    """
    ACTIONS = 4096
    """
    Information about actions and menu models
    """
    BUILDER = 128
    """
    Trace GtkBuilder operation
    """
    BUILDER_OBJECTS = 65536
    """
    Log unused GtkBuilder objects
    """
    CONSTRAINTS = 32768
    """
    Information from the constraints solver
    """
    GEOMETRY = 16
    """
    Information about size allocation
    """
    ICONFALLBACK = 262144
    """
    Information about icon fallback. Since: 4.2
    """
    ICONTHEME = 32
    """
    Information about icon themes
    """
    INTERACTIVE = 1024
    """
    Open the GTK inspector
    """
    INVERT_TEXT_DIR = 524288
    KEYBINDINGS = 4
    """
    Information about keyboard shortcuts
    """
    LAYOUT = 8192
    """
    Information from layout managers
    """
    MODULES = 8
    """
    Information about modules and extensions
    """
    NO_CSS_CACHE = 512
    """
    Disable the style property cache
    """
    PRINTING = 64
    """
    Information about printing
    """
    SIZE_REQUEST = 256
    """
    Information about size requests
    """
    SNAPSHOT = 16384
    """
    Include debug render nodes in the generated snapshots
    """
    TEXT = 1
    """
    Information about GtkTextView
    """
    TREE = 2
    """
    Information about GtkTreeView
    """

class DialogFlags(GObject.GFlags):
    """
    Flags used to influence dialog construction.
    """

    DESTROY_WITH_PARENT = 2
    """
    Destroy the dialog when its parent is destroyed
    """
    MODAL = 1
    """
    Make the constructed dialog modal
    """
    USE_HEADER_BAR = 4
    """
    Create dialog with actions in header
    bar instead of action area
    """

class EventControllerScrollFlags(GObject.GFlags):
    """
    Describes the behavior of a `GtkEventControllerScroll`.
    """

    BOTH_AXES = 3
    """
    Emit scroll on both axes.
    """
    DISCRETE = 4
    """
    Only emit deltas that are multiples of 1.
    """
    HORIZONTAL = 2
    """
    Emit scroll with horizontal deltas.
    """
    KINETIC = 8
    """
    Emit ::decelerate after continuous scroll finishes.
    """
    NONE = 0
    """
    Don't emit scroll.
    """
    VERTICAL = 1
    """
    Emit scroll with vertical deltas.
    """

class FontChooserLevel(GObject.GFlags):
    """
    Specifies the granularity of font selection
    that is desired in a `GtkFontChooser`.

    This enumeration may be extended in the future; applications should
    ignore unknown values.
    """

    FAMILY = 0
    """
    Allow selecting a font family
    """
    FEATURES = 8
    """
    Allow selecting specific OpenType font features
    """
    SIZE = 2
    """
    Allow selecting a specific font size
    """
    STYLE = 1
    """
    Allow selecting a specific font face
    """
    VARIATIONS = 4
    """
    Allow changing OpenType font variation axes
    """

class IconLookupFlags(GObject.GFlags):
    """
    Used to specify options for gtk_icon_theme_lookup_icon().
    """

    FORCE_REGULAR = 1
    """
    Try to always load regular icons, even
    when symbolic icon names are given
    """
    FORCE_SYMBOLIC = 2
    """
    Try to always load symbolic icons, even
    when regular icon names are given
    """
    PRELOAD = 4
    """
    Starts loading the texture in the background
    so it is ready when later needed.
    """

class InputHints(GObject.GFlags):
    """
    Describes hints that might be taken into account by input methods
    or applications.

    Note that input methods may already tailor their behaviour according
    to the [enum@InputPurpose] of the entry.

    Some common sense is expected when using these flags - mixing
    %GTK_INPUT_HINT_LOWERCASE with any of the uppercase hints makes no sense.

    This enumeration may be extended in the future; input methods should
    ignore unknown values.
    """

    EMOJI = 512
    """
    Suggest offering Emoji support
    """
    INHIBIT_OSK = 128
    """
    Suggest to not show an onscreen keyboard
    (e.g for a calculator that already has all the keys).
    """
    LOWERCASE = 8
    """
    Suggest to convert all text to lowercase
    """
    NONE = 0
    """
    No special behaviour suggested
    """
    NO_EMOJI = 1024
    """
    Suggest not offering Emoji support
    """
    NO_SPELLCHECK = 2
    """
    Suggest not checking for typos
    """
    PRIVATE = 2048
    """
    Request that the input method should not
    update personalized data (like typing history)
    """
    SPELLCHECK = 1
    """
    Suggest checking for typos
    """
    UPPERCASE_CHARS = 16
    """
    Suggest to capitalize all text
    """
    UPPERCASE_SENTENCES = 64
    """
    Suggest to capitalize the
    first word of each sentence
    """
    UPPERCASE_WORDS = 32
    """
    Suggest to capitalize the first
    character of each word
    """
    VERTICAL_WRITING = 256
    """
    The text is vertical
    """
    WORD_COMPLETION = 4
    """
    Suggest word completion
    """

class ListScrollFlags(GObject.GFlags):
    """
    List of actions to perform when scrolling to items in
    a list widget.
    """

    FOCUS = 1
    """
    Focus the target item
    """
    NONE = 0
    """
    Don't do anything extra
    """
    SELECT = 2
    """
    Select the target item and
    unselect all other items.
    """

class PickFlags(GObject.GFlags):
    """
    Flags that influence the behavior of [method@Widget.pick].
    """

    DEFAULT = 0
    """
    The default behavior, include widgets that are receiving events
    """
    INSENSITIVE = 1
    """
    Include widgets that are insensitive
    """
    NON_TARGETABLE = 2
    """
    Include widgets that are marked as non-targetable. See [property@Widget:can-target]
    """

class PopoverMenuFlags(GObject.GFlags):
    """
    Flags that affect how popover menus are created from
    a menu model.
    """

    NESTED = 1
    """
    Create submenus as nested
    popovers. Without this flag, submenus are created as
    sliding pages that replace the main menu.
    """

class PrintCapabilities(GObject.GFlags):
    """
    Specifies which features the print dialog should offer.

    If neither %GTK_PRINT_CAPABILITY_GENERATE_PDF nor
    %GTK_PRINT_CAPABILITY_GENERATE_PS is specified, GTK assumes that all
    formats are supported.
    """

    COLLATE = 4
    """
    Print dialog will allow to collate multiple copies.
    """
    COPIES = 2
    """
    Print dialog will allow to print multiple copies.
    """
    GENERATE_PDF = 32
    """
    The program will send the document to
    the printer in PDF format
    """
    GENERATE_PS = 64
    """
    The program will send the document to
    the printer in Postscript format
    """
    NUMBER_UP = 256
    """
    Print dialog will offer printing multiple
    pages per sheet
    """
    NUMBER_UP_LAYOUT = 512
    """
    Print dialog will allow to rearrange
    pages when printing multiple pages per sheet
    """
    PAGE_SET = 1
    """
    Print dialog will offer printing even/odd pages.
    """
    PREVIEW = 128
    """
    Print dialog will offer a preview
    """
    REVERSE = 8
    """
    Print dialog will allow to print pages in reverse order.
    """
    SCALE = 16
    """
    Print dialog will allow to scale the output.
    """

class ShortcutActionFlags(GObject.GFlags):
    """
    List of flags that can be passed to action activation.

    More flags may be added in the future.
    """

    EXCLUSIVE = 1
    """
    The action is the only
    action that can be activated. If this flag is not set,
    a future activation may select a different action.
    """

class StateFlags(GObject.GFlags):
    """
    Describes a widget state.

    Widget states are used to match the widget against CSS pseudo-classes.
    Note that GTK extends the regular CSS classes and sometimes uses
    different names.
    """

    ACTIVE = 1
    """
    Widget is active
    """
    BACKDROP = 64
    """
    Widget is in a background toplevel window
    """
    CHECKED = 2048
    """
    Widget is checked
    """
    DIR_LTR = 128
    """
    Widget is in left-to-right text direction
    """
    DIR_RTL = 256
    """
    Widget is in right-to-left text direction
    """
    DROP_ACTIVE = 4096
    """
    Widget is highlighted as a drop target for DND
    """
    FOCUSED = 32
    """
    Widget has the keyboard focus
    """
    FOCUS_VISIBLE = 8192
    """
    Widget has the visible focus
    """
    FOCUS_WITHIN = 16384
    """
    Widget contains the keyboard focus
    """
    INCONSISTENT = 16
    """
    Widget is inconsistent
    """
    INSENSITIVE = 8
    """
    Widget is insensitive
    """
    LINK = 512
    """
    Widget is a link
    """
    NORMAL = 0
    """
    State during normal operation
    """
    PRELIGHT = 2
    """
    Widget has a mouse pointer over it
    """
    SELECTED = 4
    """
    Widget is selected
    """
    VISITED = 1024
    """
    The location the widget points to has already been visited
    """

class StyleContextPrintFlags(GObject.GFlags):
    """
    Flags that modify the behavior of gtk_style_context_to_string().

    New values may be added to this enumeration.
    """

    NONE = 0
    """
    Default value.
    """
    RECURSE = 1
    """
    Print the entire tree of
    CSS nodes starting at the style context's node
    """
    SHOW_CHANGE = 4
    """
    Show information about
    what changes affect the styles
    """
    SHOW_STYLE = 2
    """
    Show the values of the
    CSS properties for each node
    """

class TextSearchFlags(GObject.GFlags):
    """
    Flags affecting how a search is done.

    If neither %GTK_TEXT_SEARCH_VISIBLE_ONLY nor %GTK_TEXT_SEARCH_TEXT_ONLY are
    enabled, the match must be exact; the special 0xFFFC character will match
    embedded paintables or child widgets.
    """

    CASE_INSENSITIVE = 4
    """
    The text will be matched regardless of
    what case it is in.
    """
    TEXT_ONLY = 2
    """
    Search only text. A match may have paintables or
    child widgets mixed inside the matched range.
    """
    VISIBLE_ONLY = 1
    """
    Search only visible data. A search match may
    have invisible text interspersed.
    """

class TreeModelFlags(GObject.GFlags):
    """
    These flags indicate various properties of a `GtkTreeModel`.

    They are returned by [method@Gtk.TreeModel.get_flags], and must be
    static for the lifetime of the object. A more complete description
    of %GTK_TREE_MODEL_ITERS_PERSIST can be found in the overview of
    this section.
    """

    ITERS_PERSIST = 1
    """
    iterators survive all signals
    emitted by the tree
    """
    LIST_ONLY = 2
    """
    the model is a list only, and never
    has children
    """

class AccessibleAutocomplete(GObject.GEnum):
    """
    The possible values for the %GTK_ACCESSIBLE_PROPERTY_AUTOCOMPLETE
    accessible property.
    """

    BOTH = 3
    """
    When a user is providing input, an element
    containing a collection of values that could complete the provided input
    may be displayed. If displayed, one value in the collection is automatically
    selected, and the text needed to complete the automatically selected value
    appears after the caret in the input.
    """
    INLINE = 1
    """
    When a user is providing input, text
    suggesting one way to complete the provided input may be dynamically
    inserted after the caret.
    """
    LIST = 2
    """
    When a user is providing input, an element
    containing a collection of values that could complete the provided input
    may be displayed.
    """
    NONE = 0
    """
    Automatic suggestions are not displayed.
    """

class AccessibleInvalidState(GObject.GEnum):
    """
    The possible values for the %GTK_ACCESSIBLE_STATE_INVALID
    accessible state.

    Note that the %GTK_ACCESSIBLE_INVALID_FALSE and
    %GTK_ACCESSIBLE_INVALID_TRUE have the same values
    as %FALSE and %TRUE.
    """

    FALSE = 0
    """
    There are no detected errors in the value
    """
    GRAMMAR = 2
    """
    A grammatical error was detected
    """
    SPELLING = 3
    """
    A spelling error was detected
    """
    TRUE = 1
    """
    The value entered by the user has failed validation
    """

class AccessiblePlatformState(GObject.GEnum):
    """
    The various platform states which can be queried
    using [method@Gtk.Accessible.get_platform_state].
    """

    ACTIVE = 2
    """
    whether the accessible is active
    """
    FOCUSABLE = 0
    """
    whether the accessible can be focused
    """
    FOCUSED = 1
    """
    whether the accessible has focus
    """

class AccessibleProperty(GObject.GEnum):
    """
    The possible accessible properties of a [iface@Accessible].
    """

    AUTOCOMPLETE = 0
    """
    Indicates whether inputting text
    could trigger display of one or more predictions of the user's intended
    value for a combobox, searchbox, or textbox and specifies how predictions
    would be presented if they were made. Value type: [enum@AccessibleAutocomplete]
    """
    DESCRIPTION = 1
    """
    Defines a string value that describes
    or annotates the current element. Value type: string
    """
    HAS_POPUP = 2
    """
    Indicates the availability and type of
    interactive popup element, such as menu or dialog, that can be triggered
    by an element.
    """
    KEY_SHORTCUTS = 3
    """
    Indicates keyboard shortcuts that an
    author has implemented to activate or give focus to an element. Value type:
    string
    """
    LABEL = 4
    """
    Defines a string value that labels the current
    element. Value type: string
    """
    LEVEL = 5
    """
    Defines the hierarchical level of an element
    within a structure. Value type: integer
    """
    MODAL = 6
    """
    Indicates whether an element is modal when
    displayed. Value type: boolean
    """
    MULTI_LINE = 7
    """
    Indicates whether a text box accepts
    multiple lines of input or only a single line. Value type: boolean
    """
    MULTI_SELECTABLE = 8
    """
    Indicates that the user may select
    more than one item from the current selectable descendants. Value type:
    boolean
    """
    ORIENTATION = 9
    """
    Indicates whether the element's
    orientation is horizontal, vertical, or unknown/ambiguous. Value type:
    [enum@Orientation]
    """
    PLACEHOLDER = 10
    """
    Defines a short hint (a word or short
    phrase) intended to aid the user with data entry when the control has no
    value. A hint could be a sample value or a brief description of the expected
    format. Value type: string
    """
    READ_ONLY = 11
    """
    Indicates that the element is not editable,
    but is otherwise operable. Value type: boolean
    """
    REQUIRED = 12
    """
    Indicates that user input is required on
    the element before a form may be submitted. Value type: boolean
    """
    ROLE_DESCRIPTION = 13
    """
    Defines a human-readable,
    author-localized description for the role of an element. Value type: string
    """
    SORT = 14
    """
    Indicates if items in a table or grid are
    sorted in ascending or descending order. Value type: [enum@AccessibleSort]
    """
    VALUE_MAX = 15
    """
    Defines the maximum allowed value for a
    range widget. Value type: double
    """
    VALUE_MIN = 16
    """
    Defines the minimum allowed value for a
    range widget. Value type: double
    """
    VALUE_NOW = 17
    """
    Defines the current value for a range widget.
    Value type: double
    """
    VALUE_TEXT = 18
    """
    Defines the human readable text alternative
    of aria-valuenow for a range widget. Value type: string
    """
    @staticmethod
    def init_value(property: AccessibleProperty, value: Any) -> None:
        """
        The possible accessible properties of a [iface@Accessible].

        Parameters:
            property:
            value:

        Returns:

        """
        ...

class AccessibleRelation(GObject.GEnum):
    """
    The possible accessible relations of a [iface@Accessible].

    Accessible relations can be references to other widgets,
    integers or strings.
    """

    ACTIVE_DESCENDANT = 0
    """
    Identifies the currently active
    element when focus is on a composite widget, combobox, textbox, group,
    or application. Value type: reference
    """
    COL_COUNT = 1
    """
    Defines the total number of columns
    in a table, grid, or treegrid. Value type: integer
    """
    COL_INDEX = 2
    """
    Defines an element's column index or
    position with respect to the total number of columns within a table,
    grid, or treegrid. Value type: integer
    """
    COL_INDEX_TEXT = 3
    """
    Defines a human readable text
    alternative of %GTK_ACCESSIBLE_RELATION_COL_INDEX. Value type: string
    """
    COL_SPAN = 4
    """
    Defines the number of columns spanned
    by a cell or gridcell within a table, grid, or treegrid. Value type: integer
    """
    CONTROLS = 5
    """
    Identifies the element (or elements) whose
    contents or presence are controlled by the current element. Value type: reference
    """
    DESCRIBED_BY = 6
    """
    Identifies the element (or elements)
    that describes the object. Value type: reference
    """
    DETAILS = 7
    """
    Identifies the element (or elements) that
    provide additional information related to the object. Value type: reference
    """
    ERROR_MESSAGE = 8
    """
    Identifies the element that provides
    an error message for an object. Value type: reference
    """
    FLOW_TO = 9
    """
    Identifies the next element (or elements)
    in an alternate reading order of content which, at the user's discretion,
    allows assistive technology to override the general default of reading in
    document source order. Value type: reference
    """
    LABELLED_BY = 10
    """
    Identifies the element (or elements)
    that labels the current element. Value type: reference
    """
    OWNS = 11
    """
    Identifies an element (or elements) in order
    to define a visual, functional, or contextual parent/child relationship
    between elements where the widget hierarchy cannot be used to represent
    the relationship. Value type: reference
    """
    POS_IN_SET = 12
    """
    Defines an element's number or position
    in the current set of listitems or treeitems. Value type: integer
    """
    ROW_COUNT = 13
    """
    Defines the total number of rows in a table,
    grid, or treegrid. Value type: integer
    """
    ROW_INDEX = 14
    """
    Defines an element's row index or position
    with respect to the total number of rows within a table, grid, or treegrid.
    Value type: integer
    """
    ROW_INDEX_TEXT = 15
    """
    Defines a human readable text
    alternative of aria-rowindex. Value type: string
    """
    ROW_SPAN = 16
    """
    Defines the number of rows spanned by a
    cell or gridcell within a table, grid, or treegrid. Value type: integer
    """
    SET_SIZE = 17
    """
    Defines the number of items in the current
    set of listitems or treeitems. Value type: integer
    """
    @staticmethod
    def init_value(relation: AccessibleRelation, value: Any) -> None:
        """
        The possible accessible relations of a [iface@Accessible].

        Accessible relations can be references to other widgets,
        integers or strings.

        Parameters:
            relation:
            value:

        Returns:

        """
        ...

class AccessibleRole(GObject.GEnum):
    """
    The accessible role for a [iface@Accessible] implementation.

    Abstract roles are only used as part of the ontology; application
    developers must not use abstract roles in their code.
    """

    ALERT = 0
    """
    An element with important, and usually
    time-sensitive, information
    """
    ALERT_DIALOG = 1
    """
    A type of dialog that contains an
    alert message
    """
    APPLICATION = 79
    """
    A toplevel element of a graphical user interface.
    This is the role that GTK uses by default for windows.
    Since: 4.12
    """
    BANNER = 2
    """
    Unused
    """
    BUTTON = 3
    """
    An input element that allows for
    user-triggered actions when clicked or pressed
    """
    CAPTION = 4
    """
    Unused
    """
    CELL = 5
    """
    Unused
    """
    CHECKBOX = 6
    """
    A checkable input element that has
    three possible values: `true`, `false`, or `mixed`
    """
    COLUMN_HEADER = 7
    """
    A header in a columned list.
    """
    COMBO_BOX = 8
    """
    An input that controls another element,
    such as a list or a grid, that can dynamically pop up to help the user
    set the value of the input
    """
    COMMAND = 9
    """
    Abstract role.
    """
    COMPOSITE = 10
    """
    Abstract role.
    """
    DIALOG = 11
    """
    A dialog is a window that is designed to interrupt
    the current processing of an application in order to prompt the user to enter
    information or require a response.
    """
    DOCUMENT = 12
    """
    Content that assistive technology users may want to
    browse in a reading mode.
    """
    FEED = 13
    """
    Unused
    """
    FORM = 14
    """
    Unused
    """
    GENERIC = 15
    """
    A nameless container that has no semantic meaning
    of its own. This is the role that GTK uses by default for widgets.
    """
    GRID = 16
    """
    A grid of items.
    """
    GRID_CELL = 17
    """
    An item in a grid or tree grid.
    """
    GROUP = 18
    """
    An element that groups multiple related widgets. GTK uses
    this role for various containers, like [class@Gtk.HeaderBar] or [class@Gtk.Notebook].
    """
    HEADING = 19
    """
    Unused
    """
    IMG = 20
    """
    An image.
    """
    INPUT = 21
    """
    Abstract role.
    """
    LABEL = 22
    """
    A visible name or caption for a user interface component.
    """
    LANDMARK = 23
    """
    Abstract role.
    """
    LEGEND = 24
    """
    Unused
    """
    LINK = 25
    """
    A clickable link.
    """
    LIST = 26
    """
    A list of items.
    """
    LIST_BOX = 27
    """
    Unused.
    """
    LIST_ITEM = 28
    """
    An item in a list.
    """
    LOG = 29
    """
    Unused
    """
    MAIN = 30
    """
    Unused
    """
    MARQUEE = 31
    """
    Unused
    """
    MATH = 32
    """
    Unused
    """
    MENU = 34
    """
    A menu.
    """
    MENU_BAR = 35
    """
    A menubar.
    """
    MENU_ITEM = 36
    """
    An item in a menu.
    """
    MENU_ITEM_CHECKBOX = 37
    """
    A check item in a menu.
    """
    MENU_ITEM_RADIO = 38
    """
    A radio item in a menu.
    """
    METER = 33
    """
    An element that represents a value within a known range.
    """
    NAVIGATION = 39
    """
    Unused
    """
    NONE = 40
    """
    An element that is not represented to accessibility technologies.
    This role is synonymous to @GTK_ACCESSIBLE_ROLE_PRESENTATION.
    """
    NOTE = 41
    """
    Unused
    """
    OPTION = 42
    """
    Unused
    """
    PRESENTATION = 43
    """
    An element that is not represented to accessibility technologies.
    This role is synonymous to @GTK_ACCESSIBLE_ROLE_NONE.
    """
    PROGRESS_BAR = 44
    """
    An element that displays the progress
    status for tasks that take a long time.
    """
    RADIO = 45
    """
    A checkable input in a group of radio roles,
    only one of which can be checked at a time.
    """
    RADIO_GROUP = 46
    """
    Unused
    """
    RANGE = 47
    """
    Abstract role.
    """
    REGION = 48
    """
    Unused
    """
    ROW = 49
    """
    A row in a columned list.
    """
    ROW_GROUP = 50
    """
    Unused
    """
    ROW_HEADER = 51
    """
    Unused
    """
    SCROLLBAR = 52
    """
    A graphical object that controls the scrolling
    of content within a viewing area, regardless of whether the content is fully
    displayed within the viewing area.
    """
    SEARCH = 53
    """
    Unused
    """
    SEARCH_BOX = 54
    """
    A type of textbox intended for specifying
    search criteria.
    """
    SECTION = 55
    """
    Abstract role.
    """
    SECTION_HEAD = 56
    """
    Abstract role.
    """
    SELECT = 57
    """
    Abstract role.
    """
    SEPARATOR = 58
    """
    A divider that separates and distinguishes
    sections of content or groups of menuitems.
    """
    SLIDER = 59
    """
    A user input where the user selects a value
    from within a given range.
    """
    SPIN_BUTTON = 60
    """
    A form of range that expects the user to
    select from among discrete choices.
    """
    STATUS = 61
    """
    Unused
    """
    STRUCTURE = 62
    """
    Abstract role.
    """
    SWITCH = 63
    """
    A type of checkbox that represents on/off values,
    as opposed to checked/unchecked values.
    """
    TAB = 64
    """
    An item in a list of tab used for switching pages.
    """
    TABLE = 65
    """
    Unused
    """
    TAB_LIST = 66
    """
    A list of tabs for switching pages.
    """
    TAB_PANEL = 67
    """
    A page in a notebook or stack.
    """
    TEXT_BOX = 68
    """
    A type of input that allows free-form text
    as its value.
    """
    TIME = 69
    """
    Unused
    """
    TIMER = 70
    """
    Unused
    """
    TOGGLE_BUTTON = 78
    """
    A type of push button
    which stays pressed until depressed by a second activation.
    Since: 4.10
    """
    TOOLBAR = 71
    """
    Unused
    """
    TOOLTIP = 72
    """
    Unused
    """
    TREE = 73
    """
    Unused
    """
    TREE_GRID = 74
    """
    A treeview-like, columned list.
    """
    TREE_ITEM = 75
    """
    Unused
    """
    WIDGET = 76
    """
    Abstract role for interactive components of a
    graphical user interface
    """
    WINDOW = 77
    """
    Abstract role for windows.
    """

class AccessibleSort(GObject.GEnum):
    """
    The possible values for the %GTK_ACCESSIBLE_PROPERTY_SORT
    accessible property.
    """

    ASCENDING = 1
    """
    Items are sorted in ascending order by this column.
    """
    DESCENDING = 2
    """
    Items are sorted in descending order by this column.
    """
    NONE = 0
    """
    There is no defined sort applied to the column.
    """
    OTHER = 3
    """
    A sort algorithm other than ascending or
    descending has been applied.
    """

class AccessibleState(GObject.GEnum):
    """
    The possible accessible states of a [iface@Accessible].
    """

    BUSY = 0
    """
    A “busy” state. This state has boolean values
    """
    CHECKED = 1
    """
    A “checked” state; indicates the current
    state of a [class@CheckButton]. Value type: [enum@AccessibleTristate]
    """
    DISABLED = 2
    """
    A “disabled” state; corresponds to the
    [property@Widget:sensitive] property. It indicates a UI element
    that is perceivable, but not editable or operable. Value type: boolean
    """
    EXPANDED = 3
    """
    An “expanded” state; corresponds to the
    [property@Expander:expanded] property. Value type: boolean
    or undefined
    """
    HIDDEN = 4
    """
    A “hidden” state; corresponds to the
    [property@Widget:visible] property. You can use this state
    explicitly on UI elements that should not be exposed to an assistive
    technology. Value type: boolean
    See also: %GTK_ACCESSIBLE_STATE_DISABLED
    """
    INVALID = 5
    """
    An “invalid” state; set when a widget
    is showing an error. Value type: [enum@AccessibleInvalidState]
    """
    PRESSED = 6
    """
    A “pressed” state; indicates the current
    state of a [class@ToggleButton]. Value type: [enum@AccessibleTristate]
    enumeration
    """
    SELECTED = 7
    """
    A “selected” state; set when a widget
    is selected. Value type: boolean or undefined
    """
    VISITED = 8
    """
    Indicates that a widget with the
    GTK_ACCESSIBLE_ROLE_LINK has been visited. Value type: boolean.
    Since: 4.12
    """
    @staticmethod
    def init_value(state: AccessibleState, value: Any) -> None:
        """
        The possible accessible states of a [iface@Accessible].

        Parameters:
            state:
            value:

        Returns:

        """
        ...

class AccessibleTristate(GObject.GEnum):
    """
    The possible values for the %GTK_ACCESSIBLE_STATE_PRESSED
    accessible state.

    Note that the %GTK_ACCESSIBLE_TRISTATE_FALSE and
    %GTK_ACCESSIBLE_TRISTATE_TRUE have the same values
    as %FALSE and %TRUE.
    """

    FALSE = 0
    """
    The state is `false`
    """
    MIXED = 2
    """
    The state is `mixed`
    """
    TRUE = 1
    """
    The state is `true`
    """

class Align(GObject.GEnum):
    """
    Controls how a widget deals with extra space in a single dimension.

    Alignment only matters if the widget receives a “too large” allocation,
    for example if you packed the widget with the [property@Gtk.Widget:hexpand]
    property inside a [class@Box], then the widget might get extra space.
    If you have for example a 16x16 icon inside a 32x32 space, the icon
    could be scaled and stretched, it could be centered, or it could be
    positioned to one side of the space.

    Note that in horizontal context `GTK_ALIGN_START` and `GTK_ALIGN_END`
    are interpreted relative to text direction.

    Baseline support is optional for containers and widgets, and is only available
    for vertical alignment. `GTK_ALIGN_BASELINE_CENTER and `GTK_ALIGN_BASELINE_FILL`
    are treated similar to `GTK_ALIGN_CENTER` and `GTK_ALIGN_FILL`, except that it
    positions the widget to line up the baselines, where that is supported.
    """

    BASELINE = 4
    """
    align the widget according to the baseline.
    See [class@Gtk.Widget]. Deprecated: 4.12: Use `GTK_ALIGN_BASELINE_FILL` instead
    """
    BASELINE_CENTER = 5
    """
    stretch to fill all space, but align the baseline. Since 4.12
    """
    BASELINE_FILL = 4
    """
    a different name for `GTK_ALIGN_BASELINE`. Since 4.12
    """
    CENTER = 3
    """
    center natural width of widget inside the allocation
    """
    END = 2
    """
    snap to right or bottom side, leaving space on left or top
    """
    FILL = 0
    """
    stretch to fill all space if possible, center if
    no meaningful way to stretch
    """
    START = 1
    """
    snap to left or top side, leaving space on right or bottom
    """

class ArrowType(GObject.GEnum):
    """
    Used to indicate the direction in which an arrow should point.
    """

    DOWN = 1
    """
    Represents a downward pointing arrow.
    """
    LEFT = 2
    """
    Represents a left pointing arrow.
    """
    NONE = 4
    """
    No arrow.
    """
    RIGHT = 3
    """
    Represents a right pointing arrow.
    """
    UP = 0
    """
    Represents an upward pointing arrow.
    """

class AssistantPageType(GObject.GEnum):
    """
    Determines the page role inside a `GtkAssistant`.

    The role is used to handle buttons sensitivity and visibility.

    Note that an assistant needs to end its page flow with a page of type
    %GTK_ASSISTANT_PAGE_CONFIRM, %GTK_ASSISTANT_PAGE_SUMMARY or
    %GTK_ASSISTANT_PAGE_PROGRESS to be correct.

    The Cancel button will only be shown if the page isn’t “committed”.
    See gtk_assistant_commit() for details.
    """

    CONFIRM = 2
    """
    The page lets the user confirm or deny the
    changes. The Back and Apply buttons will be shown.
    """
    CONTENT = 0
    """
    The page has regular contents. Both the
    Back and forward buttons will be shown.
    """
    CUSTOM = 5
    """
    Used for when other page types are not
    appropriate. No buttons will be shown, and the application must
    add its own buttons through gtk_assistant_add_action_widget().
    """
    INTRO = 1
    """
    The page contains an introduction to the
    assistant task. Only the Forward button will be shown if there is a
    next page.
    """
    PROGRESS = 4
    """
    Used for tasks that take a long time to
    complete, blocks the assistant until the page is marked as complete.
    Only the back button will be shown.
    """
    SUMMARY = 3
    """
    The page informs the user of the changes
    done. Only the Close button will be shown.
    """

class BaselinePosition(GObject.GEnum):
    """
    Baseline position in a row of widgets.

    Whenever a container has some form of natural row it may align
    children in that row along a common typographical baseline. If
    the amount of vertical space in the row is taller than the total
    requested height of the baseline-aligned children then it can use a
    `GtkBaselinePosition` to select where to put the baseline inside the
    extra available space.
    """

    BOTTOM = 2
    """
    Align the baseline at the bottom
    """
    CENTER = 1
    """
    Center the baseline
    """
    TOP = 0
    """
    Align the baseline at the top
    """

class BorderStyle(GObject.GEnum):
    """
    Describes how the border of a UI element should be rendered.
    """

    DASHED = 6
    """
    A series of square-ended dashes
    """
    DOTTED = 5
    """
    A series of round dots
    """
    DOUBLE = 7
    """
    Two parallel lines with some space between them
    """
    GROOVE = 8
    """
    Looks as if it were carved in the canvas
    """
    HIDDEN = 1
    """
    Same as %GTK_BORDER_STYLE_NONE
    """
    INSET = 3
    """
    Looks as if the content is sunken into the canvas
    """
    NONE = 0
    """
    No visible border
    """
    OUTSET = 4
    """
    Looks as if the content is coming out of the canvas
    """
    RIDGE = 9
    """
    Looks as if it were coming out of the canvas
    """
    SOLID = 2
    """
    A single line segment
    """

class BuilderError(GObject.GEnum):
    """
    Error codes that identify various errors that can occur while using
    `GtkBuilder`.
    """

    DUPLICATE_ID = 8
    """
    An object id occurred twice.
    """
    INVALID_ATTRIBUTE = 3
    """
    `GtkBuilder` found an attribute that
    it doesn’t understand.
    """
    INVALID_FUNCTION = 14
    """
    A function could not be found. This often happens
    when symbols are set to be kept private. Compiling code with -rdynamic or using the
    `gmodule-export-2.0` pkgconfig module can fix this problem.
    """
    INVALID_ID = 13
    """
    An object id is unknown.
    """
    INVALID_PROPERTY = 11
    """
    The specified property is unknown for the object class.
    """
    INVALID_SIGNAL = 12
    """
    The specified signal is unknown for the object class.
    """
    INVALID_TAG = 4
    """
    `GtkBuilder` found a tag that
    it doesn’t understand.
    """
    INVALID_TYPE_FUNCTION = 0
    """
    A type-func attribute didn’t name
    a function that returns a `GType`.
    """
    INVALID_VALUE = 6
    """
    `GtkBuilder` couldn’t parse
    some attribute value.
    """
    MISSING_ATTRIBUTE = 2
    """
    An attribute that is required by
    `GtkBuilder` was missing.
    """
    MISSING_PROPERTY_VALUE = 5
    """
    A required property value was
    missing.
    """
    OBJECT_TYPE_REFUSED = 9
    """
    A specified object type is of the same type or
    derived from the type of the composite class being extended with builder XML.
    """
    TEMPLATE_MISMATCH = 10
    """
    The wrong type was specified in a composite class’s template XML
    """
    UNHANDLED_TAG = 1
    """
    The input contained a tag that `GtkBuilder`
    can’t handle.
    """
    VERSION_MISMATCH = 7
    """
    The input file requires a newer version
    of GTK.
    """
    @staticmethod
    def quark() -> int:
        """
        Error codes that identify various errors that can occur while using
        `GtkBuilder`.

        Parameters:


        Returns:
            int: Not documented

        """
        ...

class ButtonsType(GObject.GEnum):
    """
    Prebuilt sets of buttons for `GtkDialog`.

    If none of these choices are appropriate, simply use
    %GTK_BUTTONS_NONE and call [method@Gtk.Dialog.add_buttons].

    > Please note that %GTK_BUTTONS_OK, %GTK_BUTTONS_YES_NO
    > and %GTK_BUTTONS_OK_CANCEL are discouraged by the
    > [GNOME Human Interface Guidelines](http://library.gnome.org/devel/hig-book/stable/).
    """

    CANCEL = 3
    """
    a Cancel button
    """
    CLOSE = 2
    """
    a Close button
    """
    NONE = 0
    """
    no buttons at all
    """
    OK = 1
    """
    an OK button
    """
    OK_CANCEL = 5
    """
    OK and Cancel buttons
    """
    YES_NO = 4
    """
    Yes and No buttons
    """

class CellRendererAccelMode(GObject.GEnum):
    """
    The available modes for [property@Gtk.CellRendererAccel:accel-mode].
    """

    GTK = 0
    """
    GTK accelerators mode
    """
    OTHER = 1
    """
    Other accelerator mode
    """

class CellRendererMode(GObject.GEnum):
    """
    Identifies how the user can interact with a particular cell.
    """

    ACTIVATABLE = 1
    """
    The cell can be clicked.
    """
    EDITABLE = 2
    """
    The cell can be edited or otherwise modified.
    """
    INERT = 0
    """
    The cell is just for display
    and cannot be interacted with. Note that this doesn’t mean that eg. the
    row being drawn can’t be selected -- just that a particular element of
    it cannot be individually modified.
    """

class Collation(GObject.GEnum):
    """
    Describes how a [class@Gtk.StringSorter] turns strings into sort keys to
    compare them.

    Note that the result of sorting will in general depend on the current locale
    unless the mode is @GTK_COLLATION_NONE.
    """

    FILENAME = 2
    """
    Use [func@GLib.utf8_collate_key_for_filename]
    """
    NONE = 0
    """
    Don't do any collation
    """
    UNICODE = 1
    """
    Use [func@GLib.utf8_collate_key]
    """

class ConstraintAttribute(GObject.GEnum):
    """
    The widget attributes that can be used when creating a [class@Constraint].
    """

    BASELINE = 11
    """
    The baseline of a widget
    """
    BOTTOM = 4
    """
    The bottom edge of a widget
    """
    CENTER_X = 9
    """
    The center of a widget, on the
    horizontal axis
    """
    CENTER_Y = 10
    """
    The center of a widget, on the
    vertical axis
    """
    END = 6
    """
    The trailing edge of a widget, depending
    on text direction; equivalent to %GTK_CONSTRAINT_ATTRIBUTE_RIGHT for LTR
    languages, and %GTK_CONSTRAINT_ATTRIBUTE_LEFT for RTL ones
    """
    HEIGHT = 8
    """
    The height of a widget
    """
    LEFT = 1
    """
    The left edge of a widget, regardless of
    text direction
    """
    NONE = 0
    """
    No attribute, used for constant
    relations
    """
    RIGHT = 2
    """
    The right edge of a widget, regardless
    of text direction
    """
    START = 5
    """
    The leading edge of a widget, depending
    on text direction; equivalent to %GTK_CONSTRAINT_ATTRIBUTE_LEFT for LTR
    languages, and %GTK_CONSTRAINT_ATTRIBUTE_RIGHT for RTL ones
    """
    TOP = 3
    """
    The top edge of a widget
    """
    WIDTH = 7
    """
    The width of a widget
    """

class ConstraintRelation(GObject.GEnum):
    """
    The relation between two terms of a constraint.
    """

    EQ = 0
    """
    Equal
    """
    GE = 1
    """
    Greater than, or equal
    """
    LE = -1
    """
    Less than, or equal
    """

class ConstraintStrength(GObject.GEnum):
    """
    The strength of a constraint, expressed as a symbolic constant.

    The strength of a [class@Constraint] can be expressed with any positive
    integer; the values of this enumeration can be used for readability.
    """

    MEDIUM = 1000
    """
    A medium constraint
    """
    REQUIRED = 1001001000
    """
    The constraint is required towards solving the layout
    """
    STRONG = 1000000000
    """
    A strong constraint
    """
    WEAK = 1
    """
    A weak constraint
    """

class ConstraintVflParserError(GObject.GEnum):
    """
    Domain for VFL parsing errors.
    """

    ATTRIBUTE = 1
    """
    Invalid or unknown attribute
    """
    METRIC = 3
    """
    Invalid or unknown metric
    """
    PRIORITY = 4
    """
    Invalid or unknown priority
    """
    RELATION = 5
    """
    Invalid or unknown relation
    """
    SYMBOL = 0
    """
    Invalid or unknown symbol
    """
    VIEW = 2
    """
    Invalid or unknown view
    """
    @staticmethod
    def quark() -> int:
        """
        Domain for VFL parsing errors.

        Parameters:


        Returns:
            int: Not documented

        """
        ...

class ContentFit(GObject.GEnum):
    """
    Controls how a content should be made to fit inside an allocation.
    """

    CONTAIN = 1
    """
    Scale the content to fit the allocation,
    while taking its aspect ratio in consideration. The resulting
    content will appear as letterboxed if its aspect ratio is different
    from the allocation aspect ratio.
    """
    COVER = 2
    """
    Cover the entire allocation, while taking
    the content aspect ratio in consideration. The resulting content
    will appear as clipped if its aspect ratio is different from the
    allocation aspect ratio.
    """
    FILL = 0
    """
    Make the content fill the entire allocation,
    without taking its aspect ratio in consideration. The resulting
    content will appear as stretched if its aspect ratio is different
    from the allocation aspect ratio.
    """
    SCALE_DOWN = 3
    """
    The content is scaled down to fit the
    allocation, if needed, otherwise its original size is used.
    """

class CornerType(GObject.GEnum):
    """
    Specifies which corner a child widget should be placed in when packed into
    a `GtkScrolledWindow.`

    This is effectively the opposite of where the scroll bars are placed.
    """

    BOTTOM_LEFT = 1
    """
    Place the scrollbars on the top and right of the
    widget.
    """
    BOTTOM_RIGHT = 3
    """
    Place the scrollbars on the top and left of the
    widget.
    """
    TOP_LEFT = 0
    """
    Place the scrollbars on the right and bottom of the
    widget (default behaviour).
    """
    TOP_RIGHT = 2
    """
    Place the scrollbars on the left and bottom of the
    widget.
    """

class CssParserError(GObject.GEnum):
    """
    Errors that can occur while parsing CSS.

    These errors are unexpected and will cause parts of the given CSS
    to be ignored.
    """

    FAILED = 0
    """
    Unknown failure.
    """
    IMPORT = 2
    """
    Failed to import a resource
    """
    NAME = 3
    """
    The given name has not been defined
    """
    SYNTAX = 1
    """
    The given text does not form valid syntax
    """
    UNKNOWN_VALUE = 4
    """
    The given value is not correct
    """

class CssParserWarning(GObject.GEnum):
    """
    Warnings that can occur while parsing CSS.

    Unlike `GtkCssParserError`s, warnings do not cause the parser to
    skip any input, but they indicate issues that should be fixed.
    """

    DEPRECATED = 0
    """
    The given construct is
    deprecated and will be removed in a future version
    """
    SYNTAX = 1
    """
    A syntax construct was used
    that should be avoided
    """
    UNIMPLEMENTED = 2
    """
    A feature is not implemented
    """

class DeleteType(GObject.GEnum):
    """
    Passed to various keybinding signals for deleting text.
    """

    CHARS = 0
    """
    Delete characters.
    """
    DISPLAY_LINES = 3
    """
    Delete display-lines. Display-lines
    refers to the visible lines, with respect to the current line
    breaks. As opposed to paragraphs, which are defined by line
    breaks in the input.
    """
    DISPLAY_LINE_ENDS = 4
    """
    Delete only the portion of the
    display-line to the left/right of cursor.
    """
    PARAGRAPHS = 6
    """
    Delete entire line. Like C-k in pico.
    """
    PARAGRAPH_ENDS = 5
    """
    Delete to the end of the
    paragraph. Like C-k in Emacs (or its reverse).
    """
    WHITESPACE = 7
    """
    Delete only whitespace. Like M-\ in Emacs.
    """
    WORDS = 2
    """
    Delete words.
    """
    WORD_ENDS = 1
    """
    Delete only the portion of the word to the
    left/right of cursor if we’re in the middle of a word.
    """

class DialogError(GObject.GEnum):
    """
    Error codes in the `GTK_DIALOG_ERROR` domain that can be returned
    by async dialog functions.
    """

    CANCELLED = 1
    """
    The async function call was cancelled
    via its `GCancellable`
    """
    DISMISSED = 2
    """
    The operation was cancelled
    by the user (via a Cancel or Close button)
    """
    FAILED = 0
    """
    Generic error condition for when
    an operation fails and no more specific code is applicable
    """
    @staticmethod
    def quark() -> int:
        """
        Error codes in the `GTK_DIALOG_ERROR` domain that can be returned
        by async dialog functions.

        Parameters:


        Returns:
            int: Not documented

        """
        ...

class DirectionType(GObject.GEnum):
    """
    Focus movement types.
    """

    DOWN = 3
    """
    Move down.
    """
    LEFT = 4
    """
    Move left.
    """
    RIGHT = 5
    """
    Move right.
    """
    TAB_BACKWARD = 1
    """
    Move backward.
    """
    TAB_FORWARD = 0
    """
    Move forward.
    """
    UP = 2
    """
    Move up.
    """

class EditableProperties(GObject.GEnum):
    """
    The identifiers for [iface@Gtk.Editable] properties.

    See [func@Gtk.Editable.install_properties] for details on how to
    implement the `GtkEditable` interface.
    """

    NUM_PROPERTIES = 8
    """
    the number of properties
    """
    PROP_CURSOR_POSITION = 1
    """
    the property id for [property@Gtk.Editable:cursor-position]
    """
    PROP_EDITABLE = 3
    """
    the property id for [property@Gtk.Editable:editable]
    """
    PROP_ENABLE_UNDO = 7
    """
    the property id for [property@Gtk.Editable:enable-undo]
    """
    PROP_MAX_WIDTH_CHARS = 5
    """
    the property id for [property@Gtk.Editable:max-width-chars]
    """
    PROP_SELECTION_BOUND = 2
    """
    the property id for [property@Gtk.Editable:selection-bound]
    """
    PROP_TEXT = 0
    """
    the property id for [property@Gtk.Editable:text]
    """
    PROP_WIDTH_CHARS = 4
    """
    the property id for [property@Gtk.Editable:width-chars]
    """
    PROP_XALIGN = 6
    """
    the property id for [property@Gtk.Editable:xalign]
    """

class EntryIconPosition(GObject.GEnum):
    """
    Specifies the side of the entry at which an icon is placed.
    """

    PRIMARY = 0
    """
    At the beginning of the entry (depending on the text direction).
    """
    SECONDARY = 1
    """
    At the end of the entry (depending on the text direction).
    """

class EventSequenceState(GObject.GEnum):
    """
    Describes the state of a [struct@Gdk.EventSequence] in a [class@Gesture].
    """

    CLAIMED = 1
    """
    The sequence is handled and grabbed.
    """
    DENIED = 2
    """
    The sequence is denied.
    """
    NONE = 0
    """
    The sequence is handled, but not grabbed.
    """

class FileChooserAction(GObject.GEnum):
    """
    Describes whether a `GtkFileChooser` is being used to open existing files
    or to save to a possibly new file.
    """

    OPEN = 0
    """
    Indicates open mode. The file chooser
    will only let the user pick an existing file.
    """
    SAVE = 1
    """
    Indicates save mode. The file chooser
    will let the user pick an existing file, or type in a new
    filename.
    """
    SELECT_FOLDER = 2
    """
    Indicates an Open mode for
    selecting folders. The file chooser will let the user pick an
    existing folder.
    """

class FileChooserError(GObject.GEnum):
    """
    These identify the various errors that can occur while calling
    `GtkFileChooser` functions.
    """

    ALREADY_EXISTS = 2
    """
    Indicates a duplicate path (e.g. when
    adding a bookmark).
    """
    BAD_FILENAME = 1
    """
    Indicates a malformed filename.
    """
    INCOMPLETE_HOSTNAME = 3
    """
    Indicates an incomplete hostname
    (e.g. \"http://foo\" without a slash after that).
    """
    NONEXISTENT = 0
    """
    Indicates that a file does not exist.
    """
    @staticmethod
    def quark() -> int:
        """
        These identify the various errors that can occur while calling
        `GtkFileChooser` functions.

        Parameters:


        Returns:
            int: Not documented

        """
        ...

class FilterChange(GObject.GEnum):
    """
    Describes changes in a filter in more detail and allows objects
    using the filter to optimize refiltering items.

    If you are writing an implementation and are not sure which
    value to pass, %GTK_FILTER_CHANGE_DIFFERENT is always a correct
    choice.
    """

    DIFFERENT = 0
    """
    The filter change cannot be
    described with any of the other enumeration values.
    """
    LESS_STRICT = 1
    """
    The filter is less strict than
    it was before: All items that it used to return %TRUE for
    still return %TRUE, others now may, too.
    """
    MORE_STRICT = 2
    """
    The filter is more strict than
    it was before: All items that it used to return %FALSE for
    still return %FALSE, others now may, too.
    """

class FilterMatch(GObject.GEnum):
    """
    Describes the known strictness of a filter.

    Note that for filters where the strictness is not known,
    %GTK_FILTER_MATCH_SOME is always an acceptable value,
    even if a filter does match all or no items.
    """

    ALL = 2
    """
    The filter matches all items,
    gtk_filter_match() will alays return %TRUE.
    """
    NONE = 1
    """
    The filter does not match any item,
    gtk_filter_match() will always return %FALSE.
    """
    SOME = 0
    """
    The filter matches some items,
    gtk_filter_match() may return %TRUE or %FALSE
    """

class FontLevel(GObject.GEnum):
    """
    The level of granularity for the font selection.

    Depending on this value, the `PangoFontDescription` that
    is returned by [method@Gtk.FontDialogButton.get_font_desc]
    will have more or less fields set.
    """

    FACE = 1
    """
    Select a font face (i.e. a family and a style)
    """
    FAMILY = 0
    """
    Select a font family
    """
    FEATURES = 3
    """
    Select a font and font features
    """
    FONT = 2
    """
    Select a font (i.e. a face with a size, and possibly font variations)
    """

class IconSize(GObject.GEnum):
    """
    Built-in icon sizes.

    Icon sizes default to being inherited. Where they cannot be
    inherited, text size is the default.

    All widgets which use `GtkIconSize` set the normal-icons or
    large-icons style classes correspondingly, and let themes
    determine the actual size to be used with the
    `-gtk-icon-size` CSS property.
    """

    INHERIT = 0
    """
    Keep the size of the parent element
    """
    LARGE = 2
    """
    Large size, for example in an icon view
    """
    NORMAL = 1
    """
    Size similar to text size
    """

class IconThemeError(GObject.GEnum):
    """
    Error codes for `GtkIconTheme` operations.
    """

    FAILED = 1
    """
    An unspecified error occurred.
    """
    NOT_FOUND = 0
    """
    The icon specified does not exist in the theme
    """
    @staticmethod
    def quark() -> int:
        """
        Error codes for `GtkIconTheme` operations.

        Parameters:


        Returns:
            int: Not documented

        """
        ...

class IconViewDropPosition(GObject.GEnum):
    """
    An enum for determining where a dropped item goes.
    """

    DROP_ABOVE = 4
    """
    dropped item is inserted above
    """
    DROP_BELOW = 5
    """
    dropped item is inserted below
    """
    DROP_INTO = 1
    """
    dropped item replaces the item
    """
    DROP_LEFT = 2
    """
    dropped item is inserted to the left
    """
    DROP_RIGHT = 3
    """
    dropped item is inserted to the right
    """
    NO_DROP = 0
    """
    no drop possible
    """

class ImageType(GObject.GEnum):
    """
    Describes the image data representation used by a [class@Gtk.Image].

    If you want to get the image from the widget, you can only get the
    currently-stored representation; for instance, if the gtk_image_get_storage_type()
    returns %GTK_IMAGE_PAINTABLE, then you can call gtk_image_get_paintable().

    For empty images, you can request any storage type (call any of the \"get\"
    functions), but they will all return %NULL values.
    """

    EMPTY = 0
    """
    there is no image displayed by the widget
    """
    GICON = 2
    """
    the widget contains a `GIcon`
    """
    ICON_NAME = 1
    """
    the widget contains a named icon
    """
    PAINTABLE = 3
    """
    the widget contains a `GdkPaintable`
    """

class InputPurpose(GObject.GEnum):
    """
    Describes primary purpose of the input widget.

    This information is useful for on-screen keyboards and similar input
    methods to decide which keys should be presented to the user.

    Note that the purpose is not meant to impose a totally strict rule
    about allowed characters, and does not replace input validation.
    It is fine for an on-screen keyboard to let the user override the
    character set restriction that is expressed by the purpose. The
    application is expected to validate the entry contents, even if
    it specified a purpose.

    The difference between %GTK_INPUT_PURPOSE_DIGITS and
    %GTK_INPUT_PURPOSE_NUMBER is that the former accepts only digits
    while the latter also some punctuation (like commas or points, plus,
    minus) and “e” or “E” as in 3.14E+000.

    This enumeration may be extended in the future; input methods should
    interpret unknown values as “free form”.
    """

    ALPHA = 1
    """
    Allow only alphabetic characters
    """
    DIGITS = 2
    """
    Allow only digits
    """
    EMAIL = 6
    """
    Edited field expects email address
    """
    FREE_FORM = 0
    """
    Allow any character
    """
    NAME = 7
    """
    Edited field expects the name of a person
    """
    NUMBER = 3
    """
    Edited field expects numbers
    """
    PASSWORD = 8
    """
    Like %GTK_INPUT_PURPOSE_FREE_FORM, but characters are hidden
    """
    PHONE = 4
    """
    Edited field expects phone number
    """
    PIN = 9
    """
    Like %GTK_INPUT_PURPOSE_DIGITS, but characters are hidden
    """
    TERMINAL = 10
    """
    Allow any character, in addition to control codes
    """
    URL = 5
    """
    Edited field expects URL
    """

class InscriptionOverflow(GObject.GEnum):
    """
    The different methods to handle text in #GtkInscription when it doesn't
    fit the available space.
    """

    CLIP = 0
    """
    Clip the remaining text
    """
    ELLIPSIZE_END = 3
    """
    Omit characters at the end of the text
    """
    ELLIPSIZE_MIDDLE = 2
    """
    Omit characters at the middle of the text
    """
    ELLIPSIZE_START = 1
    """
    Omit characters at the start of the text
    """

class Justification(GObject.GEnum):
    """
    Used for justifying the text inside a [class@Label] widget.
    """

    CENTER = 2
    """
    The text is placed in the center of the label.
    """
    FILL = 3
    """
    The text is placed is distributed across the label.
    """
    LEFT = 0
    """
    The text is placed at the left edge of the label.
    """
    RIGHT = 1
    """
    The text is placed at the right edge of the label.
    """

class LevelBarMode(GObject.GEnum):
    """
    Describes how [class@LevelBar] contents should be rendered.

    Note that this enumeration could be extended with additional modes
    in the future.
    """

    CONTINUOUS = 0
    """
    the bar has a continuous mode
    """
    DISCRETE = 1
    """
    the bar has a discrete mode
    """

class License(GObject.GEnum):
    """
    The type of license for an application.

    This enumeration can be expanded at later date.
    """

    AGPL_3_0 = 13
    """
    The GNU Affero General Public License, version 3.0 or later
    """
    AGPL_3_0_ONLY = 14
    """
    The GNU Affero General Public License, version 3.0 only
    """
    APACHE_2_0 = 16
    """
    The Apache License, version 2.0
    """
    ARTISTIC = 8
    """
    The Artistic License, version 2.0
    """
    BSD = 6
    """
    The BSD standard license
    """
    BSD_3 = 15
    """
    The 3-clause BSD licence
    """
    CUSTOM = 1
    """
    A license text is going to be specified by the
    developer
    """
    GPL_2_0 = 2
    """
    The GNU General Public License, version 2.0 or later
    """
    GPL_2_0_ONLY = 9
    """
    The GNU General Public License, version 2.0 only
    """
    GPL_3_0 = 3
    """
    The GNU General Public License, version 3.0 or later
    """
    GPL_3_0_ONLY = 10
    """
    The GNU General Public License, version 3.0 only
    """
    LGPL_2_1 = 4
    """
    The GNU Lesser General Public License, version 2.1 or later
    """
    LGPL_2_1_ONLY = 11
    """
    The GNU Lesser General Public License, version 2.1 only
    """
    LGPL_3_0 = 5
    """
    The GNU Lesser General Public License, version 3.0 or later
    """
    LGPL_3_0_ONLY = 12
    """
    The GNU Lesser General Public License, version 3.0 only
    """
    MIT_X11 = 7
    """
    The MIT/X11 standard license
    """
    MPL_2_0 = 17
    """
    The Mozilla Public License, version 2.0
    """
    UNKNOWN = 0
    """
    No license specified
    """

class ListTabBehavior(GObject.GEnum):
    """
    Used to configure the focus behavior in the `GTK_DIR_TAB_FORWARD`
    and `GTK_DIR_TAB_BACKWARD` direction, like the <kbd>Tab</kbd> key
    in a [class@Gtk.ListView].
    """

    ALL = 0
    """
    Cycle through all focusable items of the list
    """
    CELL = 2
    """
    Cycle only through a single cell, then
    move focus out of the list. Moving focus between cells needs to
    be done with the arrow keys. This is only relevant for
    cell-based widgets like #GtkColumnView, otherwise it behaves
    like `GTK_LIST_TAB_ITEM`.
    """
    ITEM = 1
    """
    Cycle through a single list element, then move
    focus out of the list. Moving focus between items needs to be
    done with the arrow keys.
    """

class MessageType(GObject.GEnum):
    """
    The type of message being displayed in a [class@MessageDialog].
    """

    ERROR = 3
    """
    Fatal error message
    """
    INFO = 0
    """
    Informational message
    """
    OTHER = 4
    """
    None of the above
    """
    QUESTION = 2
    """
    Question requiring a choice
    """
    WARNING = 1
    """
    Non-fatal warning message
    """

class MovementStep(GObject.GEnum):
    """
    Passed as argument to various keybinding signals for moving the
    cursor position.
    """

    BUFFER_ENDS = 8
    """
    Move to ends of the buffer
    """
    DISPLAY_LINES = 3
    """
    Move up or down lines (wrapped lines)
    """
    DISPLAY_LINE_ENDS = 4
    """
    Move to either end of a line
    """
    HORIZONTAL_PAGES = 9
    """
    Move horizontally by pages
    """
    LOGICAL_POSITIONS = 0
    """
    Move forward or back by graphemes
    """
    PAGES = 7
    """
    Move by pages
    """
    PARAGRAPHS = 5
    """
    Move up or down paragraphs (newline-ended lines)
    """
    PARAGRAPH_ENDS = 6
    """
    Move to either end of a paragraph
    """
    VISUAL_POSITIONS = 1
    """
    Move left or right by graphemes
    """
    WORDS = 2
    """
    Move forward or back by words
    """

class NaturalWrapMode(GObject.GEnum):
    """
    Options for selecting a different wrap mode for natural size
    requests.

    See for example the [property@Gtk.Label:natural-wrap-mode] property.
    """

    INHERIT = 0
    """
    Inherit the minimum size request.
    In particular, this should be used with %PANGO_WRAP_CHAR.
    """
    NONE = 1
    """
    Try not to wrap the text. This mode is the
    closest to GTK3's behavior but can lead to a wide label leaving
    lots of empty space below the text.
    """
    WORD = 2
    """
    Attempt to wrap at word boundaries. This
    is useful in particular when using %PANGO_WRAP_WORD_CHAR as the
    wrap mode.
    """

class NotebookTab(GObject.GEnum):
    """
    The parameter used in the action signals of `GtkNotebook`.
    """

    FIRST = 0
    """
    the first tab in the notebook
    """
    LAST = 1
    """
    the last tab in the notebook
    """

class NumberUpLayout(GObject.GEnum):
    """
    Used to determine the layout of pages on a sheet when printing
    multiple pages per sheet.
    """

    BTLR = 6
    """
    ![](layout-btlr.png)
    """
    BTRL = 7
    """
    ![](layout-btrl.png)
    """
    LRBT = 1
    """
    ![](layout-lrbt.png)
    """
    LRTB = 0
    """
    ![](layout-lrtb.png)
    """
    RLBT = 3
    """
    ![](layout-rlbt.png)
    """
    RLTB = 2
    """
    ![](layout-rltb.png)
    """
    TBLR = 4
    """
    ![](layout-tblr.png)
    """
    TBRL = 5
    """
    ![](layout-tbrl.png)
    """

class Ordering(GObject.GEnum):
    """
    Describes the way two values can be compared.

    These values can be used with a [callback@GLib.CompareFunc]. However,
    a `GCompareFunc` is allowed to return any integer values.
    For converting such a value to a `GtkOrdering` value, use
    [func@Gtk.Ordering.from_cmpfunc].
    """

    EQUAL = 0
    """
    the two values are equal
    """
    LARGER = 1
    """
    the first value is larger than the second
    """
    SMALLER = -1
    """
    the first value is smaller than the second
    """

class Orientation(GObject.GEnum):
    """
    Represents the orientation of widgets and other objects.

    Typical examples are [class@Box] or [class@GesturePan].
    """

    HORIZONTAL = 0
    """
    The element is in horizontal orientation.
    """
    VERTICAL = 1
    """
    The element is in vertical orientation.
    """

class Overflow(GObject.GEnum):
    """
    Defines how content overflowing a given area should be handled.

    This is used in [method@Gtk.Widget.set_overflow]. The
    [property@Gtk.Widget:overflow] property is modeled after the
    CSS overflow property, but implements it only partially.
    """

    HIDDEN = 1
    """
    Content is clipped to the bounds of the area. Content
    outside the area is not drawn and cannot be interacted with.
    """
    VISIBLE = 0
    """
    No change is applied. Content is drawn at the specified
    position.
    """

class PackType(GObject.GEnum):
    """
    Represents the packing location of a children in its parent.

    See [class@WindowControls] for example.
    """

    END = 1
    """
    The child is packed into the end of the widget
    """
    START = 0
    """
    The child is packed into the start of the widget
    """

class PadActionType(GObject.GEnum):
    """
    The type of a pad action.
    """

    BUTTON = 0
    """
    Action is triggered by a pad button
    """
    RING = 1
    """
    Action is triggered by a pad ring
    """
    STRIP = 2
    """
    Action is triggered by a pad strip
    """

class PageOrientation(GObject.GEnum):
    """
    See also gtk_print_settings_set_orientation().
    """

    LANDSCAPE = 1
    """
    Landscape mode.
    """
    PORTRAIT = 0
    """
    Portrait mode.
    """
    REVERSE_LANDSCAPE = 3
    """
    Reverse landscape mode.
    """
    REVERSE_PORTRAIT = 2
    """
    Reverse portrait mode.
    """

class PageSet(GObject.GEnum):
    """
    See also gtk_print_job_set_page_set().
    """

    ALL = 0
    """
    All pages.
    """
    EVEN = 1
    """
    Even pages.
    """
    ODD = 2
    """
    Odd pages.
    """

class PanDirection(GObject.GEnum):
    """
    Describes the panning direction of a [class@GesturePan].
    """

    DOWN = 3
    """
    panned downwards
    """
    LEFT = 0
    """
    panned towards the left
    """
    RIGHT = 1
    """
    panned towards the right
    """
    UP = 2
    """
    panned upwards
    """

class PolicyType(GObject.GEnum):
    """
    Determines how the size should be computed to achieve the one of the
    visibility mode for the scrollbars.
    """

    ALWAYS = 0
    """
    The scrollbar is always visible. The view size is
    independent of the content.
    """
    AUTOMATIC = 1
    """
    The scrollbar will appear and disappear as necessary.
    For example, when all of a `GtkTreeView` can not be seen.
    """
    EXTERNAL = 3
    """
    Don't show a scrollbar, but don't force the
    size to follow the content. This can be used e.g. to make multiple
    scrolled windows share a scrollbar.
    """
    NEVER = 2
    """
    The scrollbar should never appear. In this mode the
    content determines the size.
    """

class PositionType(GObject.GEnum):
    """
    Describes which edge of a widget a certain feature is positioned at.

    For examples, see the tabs of a [class@Notebook], or the label
    of a [class@Scale].
    """

    BOTTOM = 3
    """
    The feature is at the bottom edge.
    """
    LEFT = 0
    """
    The feature is at the left edge.
    """
    RIGHT = 1
    """
    The feature is at the right edge.
    """
    TOP = 2
    """
    The feature is at the top edge.
    """

class PrintDuplex(GObject.GEnum):
    """
    See also gtk_print_settings_set_duplex().
    """

    HORIZONTAL = 1
    """
    Horizontal duplex.
    """
    SIMPLEX = 0
    """
    No duplex.
    """
    VERTICAL = 2
    """
    Vertical duplex.
    """

class PrintError(GObject.GEnum):
    """
    Error codes that identify various errors that can occur while
    using the GTK printing support.
    """

    GENERAL = 0
    """
    An unspecified error occurred.
    """
    INTERNAL_ERROR = 1
    """
    An internal error occurred.
    """
    INVALID_FILE = 3
    """
    An error occurred while loading a page setup
    or paper size from a key file.
    """
    NOMEM = 2
    """
    A memory allocation failed.
    """
    @staticmethod
    def quark() -> int:
        """
        Error codes that identify various errors that can occur while
        using the GTK printing support.

        Parameters:


        Returns:
            int: Not documented

        """
        ...

class PrintOperationAction(GObject.GEnum):
    """
    Determines what action the print operation should perform.

    A parameter of this typs is passed to [method@Gtk.PrintOperation.run].
    """

    EXPORT = 3
    """
    Export to a file. This requires
    the export-filename property to be set.
    """
    PREVIEW = 2
    """
    Show the print preview.
    """
    PRINT = 1
    """
    Start to print without showing
    the print dialog, based on the current print settings.
    """
    PRINT_DIALOG = 0
    """
    Show the print dialog.
    """

class PrintOperationResult(GObject.GEnum):
    """
    The result of a print operation.

    A value of this type is returned by [method@Gtk.PrintOperation.run].
    """

    APPLY = 1
    """
    The print settings should be stored.
    """
    CANCEL = 2
    """
    The print operation has been canceled,
    the print settings should not be stored.
    """
    ERROR = 0
    """
    An error has occurred.
    """
    IN_PROGRESS = 3
    """
    The print operation is not complete
    yet. This value will only be returned when running asynchronously.
    """

class PrintPages(GObject.GEnum):
    """
    See also gtk_print_job_set_pages()
    """

    ALL = 0
    """
    All pages.
    """
    CURRENT = 1
    """
    Current page.
    """
    RANGES = 2
    """
    Range of pages.
    """
    SELECTION = 3
    """
    Selected pages.
    """

class PrintQuality(GObject.GEnum):
    """
    See also gtk_print_settings_set_quality().
    """

    DRAFT = 3
    """
    Draft quality.
    """
    HIGH = 2
    """
    High quality.
    """
    LOW = 0
    """
    Low quality.
    """
    NORMAL = 1
    """
    Normal quality.
    """

class PrintStatus(GObject.GEnum):
    """
    The status gives a rough indication of the completion of a running
    print operation.
    """

    FINISHED = 7
    """
    The printing has been completed successfully.
    """
    FINISHED_ABORTED = 8
    """
    The printing has been aborted.
    """
    GENERATING_DATA = 2
    """
    This status is set while the
    pages are being rendered.
    """
    INITIAL = 0
    """
    The printing has not started yet; this
    status is set initially, and while the print dialog is shown.
    """
    PENDING = 4
    """
    The print job has been sent to the printer,
    but is not printed for some reason, e.g. the printer may be stopped.
    """
    PENDING_ISSUE = 5
    """
    Some problem has occurred during
    printing, e.g. a paper jam.
    """
    PREPARING = 1
    """
    This status is set while the begin-print
    signal is emitted and during pagination.
    """
    PRINTING = 6
    """
    The printer is processing the print job.
    """
    SENDING_DATA = 3
    """
    The print job is being sent off to the
    printer.
    """

class PropagationLimit(GObject.GEnum):
    """
    Describes limits of a [class@EventController] for handling events
    targeting other widgets.
    """

    NONE = 0
    """
    Events are handled regardless of what their
    target is.
    """
    SAME_NATIVE = 1
    """
    Events are only handled if their target
    is in the same [iface@Native] as the event controllers widget. Note
    that some event types have two targets (origin and destination).
    """

class PropagationPhase(GObject.GEnum):
    """
    Describes the stage at which events are fed into a [class@EventController].
    """

    BUBBLE = 2
    """
    Events are delivered in the bubble phase. The bubble
    phase happens after the capture phase, and before the default handlers
    are run. This phase runs from the event widget, up to the toplevel.
    """
    CAPTURE = 1
    """
    Events are delivered in the capture phase. The
    capture phase happens before the bubble phase, runs from the toplevel down
    to the event widget. This option should only be used on containers that
    might possibly handle events before their children do.
    """
    NONE = 0
    """
    Events are not delivered.
    """
    TARGET = 3
    """
    Events are delivered in the default widget event handlers,
    note that widget implementations must chain up on button, motion, touch and
    grab broken handlers for controllers in this phase to be run.
    """

class RecentManagerError(GObject.GEnum):
    """
    Error codes for `GtkRecentManager` operations
    """

    INVALID_ENCODING = 2
    """
    the supplied string is not
    UTF-8 encoded.
    """
    INVALID_URI = 1
    """
    the URI specified is not valid.
    """
    NOT_FOUND = 0
    """
    the URI specified does not exists in
    the recently used resources list.
    """
    NOT_REGISTERED = 3
    """
    no application has registered
    the specified item.
    """
    READ = 4
    """
    failure while reading the recently used
    resources file.
    """
    UNKNOWN = 6
    """
    unspecified error.
    """
    WRITE = 5
    """
    failure while writing the recently used
    resources file.
    """
    @staticmethod
    def quark() -> int:
        """
        Error codes for `GtkRecentManager` operations

        Parameters:


        Returns:
            int: Not documented

        """
        ...

class ResponseType(GObject.GEnum):
    """
    Predefined values for use as response ids in gtk_dialog_add_button().

    All predefined values are negative; GTK leaves values of 0 or greater for
    application-defined response ids.
    """

    ACCEPT = -3
    """
    Generic response id, not used by GTK dialogs
    """
    APPLY = -10
    """
    Returned by Apply buttons in GTK dialogs
    """
    CANCEL = -6
    """
    Returned by Cancel buttons in GTK dialogs
    """
    CLOSE = -7
    """
    Returned by Close buttons in GTK dialogs
    """
    DELETE_EVENT = -4
    """
    Returned if the dialog is deleted
    """
    HELP = -11
    """
    Returned by Help buttons in GTK dialogs
    """
    NO = -9
    """
    Returned by No buttons in GTK dialogs
    """
    NONE = -1
    """
    Returned if an action widget has no response id,
    or if the dialog gets programmatically hidden or destroyed
    """
    OK = -5
    """
    Returned by OK buttons in GTK dialogs
    """
    REJECT = -2
    """
    Generic response id, not used by GTK dialogs
    """
    YES = -8
    """
    Returned by Yes buttons in GTK dialogs
    """

class RevealerTransitionType(GObject.GEnum):
    """
    These enumeration values describe the possible transitions
    when the child of a `GtkRevealer` widget is shown or hidden.
    """

    CROSSFADE = 1
    """
    Fade in
    """
    NONE = 0
    """
    No transition
    """
    SLIDE_DOWN = 5
    """
    Slide in from the top
    """
    SLIDE_LEFT = 3
    """
    Slide in from the right
    """
    SLIDE_RIGHT = 2
    """
    Slide in from the left
    """
    SLIDE_UP = 4
    """
    Slide in from the bottom
    """
    SWING_DOWN = 9
    """
    Floop in from the top
    """
    SWING_LEFT = 7
    """
    Floop in from the right
    """
    SWING_RIGHT = 6
    """
    Floop in from the left
    """
    SWING_UP = 8
    """
    Floop in from the bottom
    """

class ScrollStep(GObject.GEnum):
    """
    Passed as argument to various keybinding signals.
    """

    ENDS = 2
    """
    Scroll to ends.
    """
    HORIZONTAL_ENDS = 5
    """
    Scroll to the horizontal ends.
    """
    HORIZONTAL_PAGES = 4
    """
    Scroll by horizontal pages.
    """
    HORIZONTAL_STEPS = 3
    """
    Scroll in horizontal steps.
    """
    PAGES = 1
    """
    Scroll by pages.
    """
    STEPS = 0
    """
    Scroll in steps.
    """

class ScrollType(GObject.GEnum):
    """
    Scrolling types.
    """

    END = 15
    """
    Scroll to end.
    """
    JUMP = 1
    """
    Jump to new location.
    """
    NONE = 0
    """
    No scrolling.
    """
    PAGE_BACKWARD = 4
    """
    Page backward.
    """
    PAGE_DOWN = 9
    """
    Page down.
    """
    PAGE_FORWARD = 5
    """
    Page forward.
    """
    PAGE_LEFT = 12
    """
    Page to the left.
    """
    PAGE_RIGHT = 13
    """
    Page to the right.
    """
    PAGE_UP = 8
    """
    Page up.
    """
    START = 14
    """
    Scroll to start.
    """
    STEP_BACKWARD = 2
    """
    Step backward.
    """
    STEP_DOWN = 7
    """
    Step down.
    """
    STEP_FORWARD = 3
    """
    Step forward.
    """
    STEP_LEFT = 10
    """
    Step to the left.
    """
    STEP_RIGHT = 11
    """
    Step to the right.
    """
    STEP_UP = 6
    """
    Step up.
    """

class ScrollablePolicy(GObject.GEnum):
    """
    Defines the policy to be used in a scrollable widget when updating
    the scrolled window adjustments in a given orientation.
    """

    MINIMUM = 0
    """
    Scrollable adjustments are based on the minimum size
    """
    NATURAL = 1
    """
    Scrollable adjustments are based on the natural size
    """

class SelectionMode(GObject.GEnum):
    """
    Used to control what selections users are allowed to make.
    """

    BROWSE = 2
    """
    Exactly one element is selected.
    In some circumstances, such as initially or during a search
    operation, it’s possible for no element to be selected with
    %GTK_SELECTION_BROWSE. What is really enforced is that the user
    can’t deselect a currently selected element except by selecting
    another element.
    """
    MULTIPLE = 3
    """
    Any number of elements may be selected.
    The Ctrl key may be used to enlarge the selection, and Shift
    key to select between the focus and the child pointed to.
    Some widgets may also allow Click-drag to select a range of elements.
    """
    NONE = 0
    """
    No selection is possible.
    """
    SINGLE = 1
    """
    Zero or one element may be selected.
    """

class SensitivityType(GObject.GEnum):
    """
    Determines how GTK handles the sensitivity of various controls,
    such as combo box buttons.
    """

    AUTO = 0
    """
    The control is made insensitive if no
    action can be triggered
    """
    OFF = 2
    """
    The control is always insensitive
    """
    ON = 1
    """
    The control is always sensitive
    """

class ShortcutScope(GObject.GEnum):
    """
    Describes where [class@Shortcut]s added to a
    [class@ShortcutController] get handled.
    """

    GLOBAL = 2
    """
    Shortcuts are handled by
    the root widget.
    """
    LOCAL = 0
    """
    Shortcuts are handled inside
    the widget the controller belongs to.
    """
    MANAGED = 1
    """
    Shortcuts are handled by
    the first ancestor that is a [iface@ShortcutManager]
    """

class ShortcutType(GObject.GEnum):
    """
    GtkShortcutType specifies the kind of shortcut that is being described.

    More values may be added to this enumeration over time.
    """

    ACCELERATOR = 0
    """
    The shortcut is a keyboard accelerator. The GtkShortcutsShortcut:accelerator
    property will be used.
    """
    GESTURE = 7
    """
    The shortcut is a gesture. The GtkShortcutsShortcut:icon property will be
    used.
    """
    GESTURE_PINCH = 1
    """
    The shortcut is a pinch gesture. GTK provides an icon and subtitle.
    """
    GESTURE_ROTATE_CLOCKWISE = 3
    """
    The shortcut is a clockwise rotation gesture. GTK provides an icon and subtitle.
    """
    GESTURE_ROTATE_COUNTERCLOCKWISE = 4
    """
    The shortcut is a counterclockwise rotation gesture. GTK provides an icon and subtitle.
    """
    GESTURE_STRETCH = 2
    """
    The shortcut is a stretch gesture. GTK provides an icon and subtitle.
    """
    GESTURE_SWIPE_LEFT = 8
    """
    The shortcut is a swipe gesture. GTK provides an icon and subtitle.
    """
    GESTURE_SWIPE_RIGHT = 9
    """
    The shortcut is a swipe gesture. GTK provides an icon and subtitle.
    """
    GESTURE_TWO_FINGER_SWIPE_LEFT = 5
    """
    The shortcut is a two-finger swipe gesture. GTK provides an icon and subtitle.
    """
    GESTURE_TWO_FINGER_SWIPE_RIGHT = 6
    """
    The shortcut is a two-finger swipe gesture. GTK provides an icon and subtitle.
    """

class SizeGroupMode(GObject.GEnum):
    """
    The mode of the size group determines the directions in which the size
    group affects the requested sizes of its component widgets.
    """

    BOTH = 3
    """
    group affects both horizontal and vertical requisition
    """
    HORIZONTAL = 1
    """
    group affects horizontal requisition
    """
    NONE = 0
    """
    group has no effect
    """
    VERTICAL = 2
    """
    group affects vertical requisition
    """

class SizeRequestMode(GObject.GEnum):
    """
    Specifies a preference for height-for-width or
    width-for-height geometry management.
    """

    CONSTANT_SIZE = 2
    """
    Don’t trade height-for-width or width-for-height
    """
    HEIGHT_FOR_WIDTH = 0
    """
    Prefer height-for-width geometry management
    """
    WIDTH_FOR_HEIGHT = 1
    """
    Prefer width-for-height geometry management
    """

class SortType(GObject.GEnum):
    """
    Determines the direction of a sort.
    """

    ASCENDING = 0
    """
    Sorting is in ascending order.
    """
    DESCENDING = 1
    """
    Sorting is in descending order.
    """

class SorterChange(GObject.GEnum):
    """
    Describes changes in a sorter in more detail and allows users
    to optimize resorting.
    """

    DIFFERENT = 0
    """
    The sorter change cannot be described
    by any of the other enumeration values
    """
    INVERTED = 1
    """
    The sort order was inverted. Comparisons
    that returned %GTK_ORDERING_SMALLER now return %GTK_ORDERING_LARGER
    and vice versa. Other comparisons return the same values as before.
    """
    LESS_STRICT = 2
    """
    The sorter is less strict: Comparisons
    may now return %GTK_ORDERING_EQUAL that did not do so before.
    """
    MORE_STRICT = 3
    """
    The sorter is more strict: Comparisons
    that did return %GTK_ORDERING_EQUAL may not do so anymore.
    """

class SorterOrder(GObject.GEnum):
    """
    Describes the type of order that a `GtkSorter` may produce.
    """

    NONE = 1
    """
    No order, all elements are considered equal.
    gtk_sorter_compare() will only return %GTK_ORDERING_EQUAL.
    """
    PARTIAL = 0
    """
    A partial order. Any `GtkOrdering` is possible.
    """
    TOTAL = 2
    """
    A total order. gtk_sorter_compare() will only
    return %GTK_ORDERING_EQUAL if an item is compared with itself. Two
    different items will never cause this value to be returned.
    """

class SpinButtonUpdatePolicy(GObject.GEnum):
    """
    Determines whether the spin button displays values outside the adjustment
    bounds.

    See [method@Gtk.SpinButton.set_update_policy].
    """

    ALWAYS = 0
    """
    When refreshing your `GtkSpinButton`, the value is
    always displayed
    """
    IF_VALID = 1
    """
    When refreshing your `GtkSpinButton`, the value is
    only displayed if it is valid within the bounds of the spin button's
    adjustment
    """

class SpinType(GObject.GEnum):
    """
    The values of the GtkSpinType enumeration are used to specify the
    change to make in gtk_spin_button_spin().
    """

    END = 5
    """
    Go to the adjustments upper bound.
    """
    HOME = 4
    """
    Go to the adjustments lower bound.
    """
    PAGE_BACKWARD = 3
    """
    Decrement by the adjustments page increment.
    """
    PAGE_FORWARD = 2
    """
    Increment by the adjustments page increment.
    """
    STEP_BACKWARD = 1
    """
    Decrement by the adjustments step increment.
    """
    STEP_FORWARD = 0
    """
    Increment by the adjustments step increment.
    """
    USER_DEFINED = 6
    """
    Change by a specified amount.
    """

class StackTransitionType(GObject.GEnum):
    """
    Possible transitions between pages in a `GtkStack` widget.

    New values may be added to this enumeration over time.
    """

    CROSSFADE = 1
    """
    A cross-fade
    """
    NONE = 0
    """
    No transition
    """
    OVER_DOWN = 9
    """
    Cover the old page by sliding down
    """
    OVER_DOWN_UP = 17
    """
    Cover the old page sliding down or uncover the new page sliding up, according to order
    """
    OVER_LEFT = 10
    """
    Cover the old page by sliding to the left
    """
    OVER_LEFT_RIGHT = 18
    """
    Cover the old page sliding left or uncover the new page sliding right, according to order
    """
    OVER_RIGHT = 11
    """
    Cover the old page by sliding to the right
    """
    OVER_RIGHT_LEFT = 19
    """
    Cover the old page sliding right or uncover the new page sliding left, according to order
    """
    OVER_UP = 8
    """
    Cover the old page by sliding up
    """
    OVER_UP_DOWN = 16
    """
    Cover the old page sliding up or uncover the new page sliding down, according to order
    """
    ROTATE_LEFT = 20
    """
    Pretend the pages are sides of a cube and rotate that cube to the left
    """
    ROTATE_LEFT_RIGHT = 22
    """
    Pretend the pages are sides of a cube and rotate that cube to the left or right according to the children order
    """
    ROTATE_RIGHT = 21
    """
    Pretend the pages are sides of a cube and rotate that cube to the right
    """
    SLIDE_DOWN = 5
    """
    Slide from top down
    """
    SLIDE_LEFT = 3
    """
    Slide from right to left
    """
    SLIDE_LEFT_RIGHT = 6
    """
    Slide from left or right according to the children order
    """
    SLIDE_RIGHT = 2
    """
    Slide from left to right
    """
    SLIDE_UP = 4
    """
    Slide from bottom up
    """
    SLIDE_UP_DOWN = 7
    """
    Slide from top down or bottom up according to the order
    """
    UNDER_DOWN = 13
    """
    Uncover the new page by sliding down
    """
    UNDER_LEFT = 14
    """
    Uncover the new page by sliding to the left
    """
    UNDER_RIGHT = 15
    """
    Uncover the new page by sliding to the right
    """
    UNDER_UP = 12
    """
    Uncover the new page by sliding up
    """

class StringFilterMatchMode(GObject.GEnum):
    """
    Specifies how search strings are matched inside text.
    """

    EXACT = 0
    """
    The search string and
    text must match exactly.
    """
    PREFIX = 2
    """
    The text must begin
    with the search string.
    """
    SUBSTRING = 1
    """
    The search string
    must be contained as a substring inside the text.
    """

class SymbolicColor(GObject.GEnum):
    """
    The indexes of colors passed to symbolic color rendering, such as
    [vfunc@Gtk.SymbolicPaintable.snapshot_symbolic].

    More values may be added over time.
    """

    ERROR = 1
    """
    Indication color for errors
    """
    FOREGROUND = 0
    """
    The default foreground color
    """
    SUCCESS = 3
    """
    Indication color for success
    """
    WARNING = 2
    """
    Indication color for warnings
    """

class SystemSetting(GObject.GEnum):
    """
    Values that can be passed to the [vfunc@Gtk.Widget.system_setting_changed]
    vfunc.

    The values indicate which system setting has changed.
    Widgets may need to drop caches, or react otherwise.

    Most of the values correspond to [class@Settings] properties.

    More values may be added over time.
    """

    DISPLAY = 3
    """
    The display has changed
    """
    DPI = 0
    """
    the [property@Gtk.Settings:gtk-xft-dpi] setting has changed
    """
    FONT_CONFIG = 2
    """
    The font configuration has changed in a way that
    requires text to be redrawn. This can be any of the
    [property@Gtk.Settings:gtk-xft-antialias],
    [property@Gtk.Settings:gtk-xft-hinting],
    [property@Gtk.Settings:gtk-xft-hintstyle],
    [property@Gtk.Settings:gtk-xft-rgba] or
    [property@Gtk.Settings:gtk-fontconfig-timestamp] settings
    """
    FONT_NAME = 1
    """
    The [property@Gtk.Settings:gtk-font-name] setting has changed
    """
    ICON_THEME = 4
    """
    The icon theme has changed in a way that requires
    icons to be looked up again
    """

class TextDirection(GObject.GEnum):
    """
    Reading directions for text.
    """

    LTR = 1
    """
    Left to right text direction.
    """
    NONE = 0
    """
    No direction.
    """
    RTL = 2
    """
    Right to left text direction.
    """

class TextExtendSelection(GObject.GEnum):
    """
    Granularity types that extend the text selection. Use the
    `GtkTextView::extend-selection` signal to customize the selection.
    """

    LINE = 1
    """
    Selects the current line. It is triggered by
    a triple-click for example.
    """
    WORD = 0
    """
    Selects the current word. It is triggered by
    a double-click for example.
    """

class TextViewLayer(GObject.GEnum):
    """
    Used to reference the layers of `GtkTextView` for the purpose of customized
    drawing with the ::snapshot_layer vfunc.
    """

    ABOVE_TEXT = 1
    """
    The layer rendered above the text.
    """
    BELOW_TEXT = 0
    """
    The layer rendered below the text (but above the background).
    """

class TextWindowType(GObject.GEnum):
    """
    Used to reference the parts of `GtkTextView`.
    """

    BOTTOM = 6
    """
    Bottom border window.
    """
    LEFT = 3
    """
    Left side border window.
    """
    RIGHT = 4
    """
    Right side border window.
    """
    TEXT = 2
    """
    Scrollable text window.
    """
    TOP = 5
    """
    Top border window.
    """
    WIDGET = 1
    """
    Window that floats over scrolling areas.
    """

class TreeViewColumnSizing(GObject.GEnum):
    """
    The sizing method the column uses to determine its width. Please note
    that %GTK_TREE_VIEW_COLUMN_AUTOSIZE are inefficient for large views, and
    can make columns appear choppy.
    """

    AUTOSIZE = 1
    """
    Columns resize to be the optimal size every time the model changes.
    """
    FIXED = 2
    """
    Columns are a fixed numbers of pixels wide.
    """
    GROW_ONLY = 0
    """
    Columns only get bigger in reaction to changes in the model
    """

class TreeViewDropPosition(GObject.GEnum):
    """
    An enum for determining where a dropped row goes.
    """

    AFTER = 1
    """
    dropped row is inserted after
    """
    BEFORE = 0
    """
    dropped row is inserted before
    """
    INTO_OR_AFTER = 3
    """
    dropped row becomes a child or is inserted after
    """
    INTO_OR_BEFORE = 2
    """
    dropped row becomes a child or is inserted before
    """

class TreeViewGridLines(GObject.GEnum):
    """
    Used to indicate which grid lines to draw in a tree view.
    """

    BOTH = 3
    """
    Horizontal and vertical grid lines.
    """
    HORIZONTAL = 1
    """
    Horizontal grid lines.
    """
    NONE = 0
    """
    No grid lines.
    """
    VERTICAL = 2
    """
    Vertical grid lines.
    """

class Unit(GObject.GEnum):
    """
    See also gtk_print_settings_set_paper_width().
    """

    INCH = 2
    """
    Dimensions in inches.
    """
    MM = 3
    """
    Dimensions in millimeters
    """
    NONE = 0
    """
    No units.
    """
    POINTS = 1
    """
    Dimensions in points.
    """

class WrapMode(GObject.GEnum):
    """
    Describes a type of line wrapping.
    """

    CHAR = 1
    """
    wrap text, breaking lines anywhere the cursor can
    appear (between characters, usually - if you want to be technical,
    between graphemes, see pango_get_log_attrs())
    """
    NONE = 0
    """
    do not wrap lines; just make the text area wider
    """
    WORD = 2
    """
    wrap text, breaking lines in between words
    """
    WORD_CHAR = 3
    """
    wrap text, breaking lines in between words, or if
    that is not enough, also between graphemes
    """
