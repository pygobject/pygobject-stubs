from gi.repository import Gtk

_namespace: str = ...
_version: str = ...

def encoding_get_all(*args, **kwargs): ...
def encoding_get_current(*args, **kwargs): ...
def encoding_get_default_candidates(*args, **kwargs): ...
def encoding_get_from_charset(*args, **kwargs): ...
def encoding_get_utf8(*args, **kwargs): ...
def file_loader_error_quark(*args, **kwargs): ...
def file_saver_error_quark(*args, **kwargs): ...
def finalize(*args, **kwargs): ...
def init(*args, **kwargs): ...
def scheduler_add(*args, **kwargs): ...
def scheduler_add_full(*args, **kwargs): ...
def scheduler_remove(*args, **kwargs): ...
def utils_escape_search_text(*args, **kwargs): ...
def utils_unescape_search_text(*args, **kwargs): ...

class Buffer(Gtk.TextBuffer):
    def backward_iter_to_source_mark(*args, **kwargs): ...
    def change_case(*args, **kwargs): ...
    def create_source_mark(*args, **kwargs): ...
    def ensure_highlight(*args, **kwargs): ...
    def forward_iter_to_source_mark(*args, **kwargs): ...
    def get_context_classes_at_iter(*args, **kwargs): ...
    def get_highlight_matching_brackets(*args, **kwargs): ...
    def get_highlight_syntax(*args, **kwargs): ...
    def get_implicit_trailing_newline(*args, **kwargs): ...
    def get_language(*args, **kwargs): ...
    def get_source_marks_at_iter(*args, **kwargs): ...
    def get_source_marks_at_line(*args, **kwargs): ...
    def get_style_scheme(*args, **kwargs): ...
    def iter_backward_to_context_class_toggle(*args, **kwargs): ...
    def iter_forward_to_context_class_toggle(*args, **kwargs): ...
    def iter_has_context_class(*args, **kwargs): ...
    def join_lines(*args, **kwargs): ...
    def new_with_language(*args, **kwargs): ...
    def remove_source_marks(*args, **kwargs): ...
    def set_highlight_matching_brackets(*args, **kwargs): ...
    def set_highlight_syntax(*args, **kwargs): ...
    def set_implicit_trailing_newline(*args, **kwargs): ...
    def set_language(self, language: Language) -> None: ...
    def set_style_scheme(self, scheme: StyleScheme) -> None: ...
    def sort_lines(*args, **kwargs): ...
    def do_bracket_matched(self, *args, **kwargs): ...

class Completion:
    def add_provider(*args, **kwargs): ...
    def block_interactive(*args, **kwargs): ...
    def fuzzy_highlight(*args, **kwargs): ...
    def fuzzy_match(*args, **kwargs): ...
    def get_buffer(*args, **kwargs): ...
    def get_page_size(*args, **kwargs): ...
    def get_view(*args, **kwargs): ...
    def hide(*args, **kwargs): ...
    def remove_provider(*args, **kwargs): ...
    def set_page_size(*args, **kwargs): ...
    def show(*args, **kwargs): ...
    def unblock_interactive(*args, **kwargs): ...

class CompletionCell:
    def get_column(*args, **kwargs): ...
    def get_widget(*args, **kwargs): ...
    def set_gicon(*args, **kwargs): ...
    def set_icon_name(*args, **kwargs): ...
    def set_markup(*args, **kwargs): ...
    def set_paintable(*args, **kwargs): ...
    def set_text(*args, **kwargs): ...
    def set_text_with_attributes(*args, **kwargs): ...
    def set_widget(*args, **kwargs): ...

class CompletionContext:
    def get_activation(*args, **kwargs): ...
    def get_bounds(*args, **kwargs): ...
    def get_buffer(*args, **kwargs): ...
    def get_busy(*args, **kwargs): ...
    def get_completion(*args, **kwargs): ...
    def get_empty(*args, **kwargs): ...
    def get_language(*args, **kwargs): ...
    def get_proposals_for_provider(*args, **kwargs): ...
    def get_view(*args, **kwargs): ...
    def get_word(*args, **kwargs): ...
    def list_providers(*args, **kwargs): ...
    def set_proposals_for_provider(*args, **kwargs): ...

class CompletionProposal:
    def get_typed_text(*args, **kwargs): ...

class CompletionProposalInterface:
    get_typed_text = ...
    parent_iface = ...

class CompletionProvider:
    def activate(*args, **kwargs): ...
    def display(*args, **kwargs): ...
    def get_priority(*args, **kwargs): ...
    def get_title(*args, **kwargs): ...
    def is_trigger(*args, **kwargs): ...
    def key_activates(*args, **kwargs): ...
    def list_alternates(*args, **kwargs): ...
    def populate_async(*args, **kwargs): ...
    def populate_finish(*args, **kwargs): ...
    def refilter(*args, **kwargs): ...

class CompletionProviderInterface:
    activate = ...
    display = ...
    get_priority = ...
    get_title = ...
    is_trigger = ...
    key_activates = ...
    list_alternates = ...
    parent_iface = ...
    populate = ...
    populate_async = ...
    populate_finish = ...
    refilter = ...

class CompletionSnippets:
    parent_instance = ...

    def new(*args, **kwargs): ...

class CompletionWords:
    parent_instance = ...

    def new(*args, **kwargs): ...
    def register(*args, **kwargs): ...
    def unregister(*args, **kwargs): ...

class Encoding:
    def free(*args, **kwargs): ...
    def get_all(*args, **kwargs): ...
    def get_charset(*args, **kwargs): ...
    def get_current(*args, **kwargs): ...
    def get_default_candidates(*args, **kwargs): ...
    def get_from_charset(*args, **kwargs): ...
    def get_name(*args, **kwargs): ...
    def get_utf8(*args, **kwargs): ...
    def to_string(*args, **kwargs): ...

class File:
    parent_instance = ...

    def check_file_on_disk(*args, **kwargs): ...
    def get_compression_type(*args, **kwargs): ...
    def get_encoding(*args, **kwargs): ...
    def get_location(*args, **kwargs): ...
    def get_newline_type(*args, **kwargs): ...
    def is_deleted(*args, **kwargs): ...
    def is_externally_modified(*args, **kwargs): ...
    def is_local(*args, **kwargs): ...
    def is_readonly(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_location(*args, **kwargs): ...

class FileLoader:
    def get_buffer(*args, **kwargs): ...
    def get_compression_type(*args, **kwargs): ...
    def get_encoding(*args, **kwargs): ...
    def get_file(*args, **kwargs): ...
    def get_input_stream(*args, **kwargs): ...
    def get_location(*args, **kwargs): ...
    def get_newline_type(*args, **kwargs): ...
    def load_async(*args, **kwargs): ...
    def load_finish(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_from_stream(*args, **kwargs): ...
    def set_candidate_encodings(*args, **kwargs): ...

class FileSaver:
    def get_buffer(*args, **kwargs): ...
    def get_compression_type(*args, **kwargs): ...
    def get_encoding(*args, **kwargs): ...
    def get_file(*args, **kwargs): ...
    def get_flags(*args, **kwargs): ...
    def get_location(*args, **kwargs): ...
    def get_newline_type(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_with_target(*args, **kwargs): ...
    def save_async(*args, **kwargs): ...
    def save_finish(*args, **kwargs): ...
    def set_compression_type(*args, **kwargs): ...
    def set_encoding(*args, **kwargs): ...
    def set_flags(*args, **kwargs): ...
    def set_newline_type(*args, **kwargs): ...

class Gutter:
    def get_view(*args, **kwargs): ...
    def insert(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def reorder(*args, **kwargs): ...

class GutterLines:
    def add_class(*args, **kwargs): ...
    def add_qclass(*args, **kwargs): ...
    def get_buffer(*args, **kwargs): ...
    def get_first(*args, **kwargs): ...
    def get_iter_at_line(*args, **kwargs): ...
    def get_last(*args, **kwargs): ...
    def get_line_yrange(*args, **kwargs): ...
    def get_view(*args, **kwargs): ...
    def has_any_class(*args, **kwargs): ...
    def has_class(*args, **kwargs): ...
    def has_qclass(*args, **kwargs): ...
    def is_cursor(*args, **kwargs): ...
    def is_prelit(*args, **kwargs): ...
    def is_selected(*args, **kwargs): ...
    def remove_class(*args, **kwargs): ...
    def remove_qclass(*args, **kwargs): ...

class GutterRenderer:
    def align_cell(*args, **kwargs): ...
    def get_alignment_mode(*args, **kwargs): ...
    def get_buffer(*args, **kwargs): ...
    def get_view(*args, **kwargs): ...
    def get_xalign(*args, **kwargs): ...
    def get_xpad(*args, **kwargs): ...
    def get_yalign(*args, **kwargs): ...
    def get_ypad(*args, **kwargs): ...
    def query_activatable(*args, **kwargs): ...
    def set_alignment_mode(*args, **kwargs): ...
    def set_xalign(*args, **kwargs): ...
    def set_xpad(*args, **kwargs): ...
    def set_yalign(*args, **kwargs): ...
    def set_ypad(*args, **kwargs): ...
    def do_activate(self, *args, **kwargs): ...
    def do_begin(self, *args, **kwargs): ...
    def do_change_buffer(self, *args, **kwargs): ...
    def do_change_view(self, *args, **kwargs): ...
    def do_end(self, *args, **kwargs): ...
    def do_query_activatable(self, *args, **kwargs): ...
    def do_query_data(self, *args, **kwargs): ...
    def do_snapshot_line(self, *args, **kwargs): ...

class GutterRendererPixbuf:
    def get_gicon(*args, **kwargs): ...
    def get_icon_name(*args, **kwargs): ...
    def get_paintable(*args, **kwargs): ...
    def get_pixbuf(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def overlay_paintable(*args, **kwargs): ...
    def set_gicon(*args, **kwargs): ...
    def set_icon_name(*args, **kwargs): ...
    def set_paintable(*args, **kwargs): ...
    def set_pixbuf(*args, **kwargs): ...

class GutterRendererText:
    def measure_markup(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_markup(*args, **kwargs): ...
    def set_text(*args, **kwargs): ...

class Hover:
    def add_provider(*args, **kwargs): ...
    def remove_provider(*args, **kwargs): ...

class HoverContext:
    def get_bounds(*args, **kwargs): ...
    def get_buffer(*args, **kwargs): ...
    def get_iter(*args, **kwargs): ...
    def get_view(*args, **kwargs): ...

class HoverDisplay:
    def append(*args, **kwargs): ...
    def prepend(*args, **kwargs): ...
    def remove(*args, **kwargs): ...

class HoverProvider:
    def populate_async(*args, **kwargs): ...
    def populate_finish(*args, **kwargs): ...

class HoverProviderInterface:
    parent_iface = ...
    populate = ...
    populate_async = ...
    populate_finish = ...

class Indenter:
    def indent(*args, **kwargs): ...
    def is_trigger(*args, **kwargs): ...

class IndenterInterface:
    indent = ...
    is_trigger = ...
    parent_iface = ...

class Language:
    def get_globs(*args, **kwargs): ...
    def get_hidden(*args, **kwargs): ...
    def get_id(*args, **kwargs): ...
    def get_metadata(*args, **kwargs): ...
    def get_mime_types(*args, **kwargs): ...
    def get_name(*args, **kwargs): ...
    def get_section(*args, **kwargs): ...
    def get_style_fallback(*args, **kwargs): ...
    def get_style_ids(*args, **kwargs): ...
    def get_style_name(*args, **kwargs): ...

class LanguageManager:
    def append_search_path(*args, **kwargs): ...
    @classmethod
    def get_default(cls) -> LanguageManager: ...
    def get_language(self, language_id: str) -> Language: ...
    def get_language_ids(*args, **kwargs): ...
    def get_search_path(*args, **kwargs): ...
    def guess_language(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def prepend_search_path(*args, **kwargs): ...
    def set_search_path(*args, **kwargs): ...

class Map:
    def get_view(*args, **kwargs): ...
    def set_view(*args, **kwargs): ...

class Mark:
    def get_category(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def prev(*args, **kwargs): ...

class MarkAttributes:
    def get_background(*args, **kwargs): ...
    def get_gicon(*args, **kwargs): ...
    def get_icon_name(*args, **kwargs): ...
    def get_pixbuf(*args, **kwargs): ...
    def get_tooltip_markup(*args, **kwargs): ...
    def get_tooltip_text(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def render_icon(*args, **kwargs): ...
    def set_background(*args, **kwargs): ...
    def set_gicon(*args, **kwargs): ...
    def set_icon_name(*args, **kwargs): ...
    def set_pixbuf(*args, **kwargs): ...

class PrintCompositor:
    parent_instance = ...

    def draw_page(*args, **kwargs): ...
    def get_body_font_name(*args, **kwargs): ...
    def get_bottom_margin(*args, **kwargs): ...
    def get_buffer(*args, **kwargs): ...
    def get_footer_font_name(*args, **kwargs): ...
    def get_header_font_name(*args, **kwargs): ...
    def get_highlight_syntax(*args, **kwargs): ...
    def get_left_margin(*args, **kwargs): ...
    def get_line_numbers_font_name(*args, **kwargs): ...
    def get_n_pages(*args, **kwargs): ...
    def get_pagination_progress(*args, **kwargs): ...
    def get_print_footer(*args, **kwargs): ...
    def get_print_header(*args, **kwargs): ...
    def get_print_line_numbers(*args, **kwargs): ...
    def get_right_margin(*args, **kwargs): ...
    def get_tab_width(*args, **kwargs): ...
    def get_top_margin(*args, **kwargs): ...
    def get_wrap_mode(*args, **kwargs): ...
    def ignore_tag(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_from_view(*args, **kwargs): ...
    def paginate(*args, **kwargs): ...
    def set_body_font_name(*args, **kwargs): ...
    def set_bottom_margin(*args, **kwargs): ...
    def set_footer_font_name(*args, **kwargs): ...
    def set_footer_format(*args, **kwargs): ...
    def set_header_font_name(*args, **kwargs): ...
    def set_header_format(*args, **kwargs): ...
    def set_highlight_syntax(*args, **kwargs): ...
    def set_left_margin(*args, **kwargs): ...
    def set_line_numbers_font_name(*args, **kwargs): ...
    def set_print_footer(*args, **kwargs): ...
    def set_print_header(*args, **kwargs): ...
    def set_print_line_numbers(*args, **kwargs): ...
    def set_right_margin(*args, **kwargs): ...
    def set_tab_width(*args, **kwargs): ...
    def set_top_margin(*args, **kwargs): ...
    def set_wrap_mode(*args, **kwargs): ...

class Region:
    parent_instance = ...

    def add_region(*args, **kwargs): ...
    def add_subregion(*args, **kwargs): ...
    def get_bounds(*args, **kwargs): ...
    def get_buffer(*args, **kwargs): ...
    def get_start_region_iter(*args, **kwargs): ...
    def intersect_region(*args, **kwargs): ...
    def intersect_subregion(*args, **kwargs): ...
    def is_empty(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def subtract_region(*args, **kwargs): ...
    def subtract_subregion(*args, **kwargs): ...
    def to_string(*args, **kwargs): ...

class RegionIter:
    dummy1 = ...
    dummy2 = ...
    dummy3 = ...

    def get_subregion(*args, **kwargs): ...
    def is_end(*args, **kwargs): ...
    def next(*args, **kwargs): ...

class SearchContext:
    def backward(*args, **kwargs): ...
    def backward_async(*args, **kwargs): ...
    def backward_finish(*args, **kwargs): ...
    def forward(*args, **kwargs): ...
    def forward_async(*args, **kwargs): ...
    def forward_finish(*args, **kwargs): ...
    def get_buffer(*args, **kwargs): ...
    def get_highlight(*args, **kwargs): ...
    def get_match_style(*args, **kwargs): ...
    def get_occurrence_position(*args, **kwargs): ...
    def get_occurrences_count(*args, **kwargs): ...
    def get_regex_error(*args, **kwargs): ...
    def get_settings(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def replace_all(*args, **kwargs): ...
    def set_highlight(*args, **kwargs): ...
    def set_match_style(*args, **kwargs): ...

class SearchSettings:
    parent_instance = ...

    def get_at_word_boundaries(*args, **kwargs): ...
    def get_case_sensitive(*args, **kwargs): ...
    def get_regex_enabled(*args, **kwargs): ...
    def get_search_text(*args, **kwargs): ...
    def get_wrap_around(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_at_word_boundaries(*args, **kwargs): ...
    def set_case_sensitive(*args, **kwargs): ...
    def set_regex_enabled(*args, **kwargs): ...
    def set_search_text(*args, **kwargs): ...
    def set_wrap_around(*args, **kwargs): ...

class Snippet:
    def add_chunk(*args, **kwargs): ...
    def copy(*args, **kwargs): ...
    def get_context(*args, **kwargs): ...
    def get_description(*args, **kwargs): ...
    def get_focus_position(*args, **kwargs): ...
    def get_language_id(*args, **kwargs): ...
    def get_n_chunks(*args, **kwargs): ...
    def get_name(*args, **kwargs): ...
    def get_nth_chunk(*args, **kwargs): ...
    def get_trigger(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def new_parsed(*args, **kwargs): ...
    def set_description(*args, **kwargs): ...
    def set_language_id(*args, **kwargs): ...
    def set_name(*args, **kwargs): ...
    def set_trigger(*args, **kwargs): ...

class SnippetChunk:
    def copy(*args, **kwargs): ...
    def get_context(*args, **kwargs): ...
    def get_focus_position(*args, **kwargs): ...
    def get_spec(*args, **kwargs): ...
    def get_text(*args, **kwargs): ...
    def get_text_set(*args, **kwargs): ...
    def get_tooltip_text(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_context(*args, **kwargs): ...
    def set_focus_position(*args, **kwargs): ...
    def set_spec(*args, **kwargs): ...
    def set_text(*args, **kwargs): ...
    def set_text_set(*args, **kwargs): ...
    def set_tooltip_text(*args, **kwargs): ...

class SnippetContext:
    def clear_variables(*args, **kwargs): ...
    def expand(*args, **kwargs): ...
    def get_variable(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_constant(*args, **kwargs): ...
    def set_line_prefix(*args, **kwargs): ...
    def set_tab_width(*args, **kwargs): ...
    def set_use_spaces(*args, **kwargs): ...
    def set_variable(*args, **kwargs): ...

class SnippetManager:
    def get_default(*args, **kwargs): ...
    def get_search_path(*args, **kwargs): ...
    def get_snippet(*args, **kwargs): ...
    def list_all(*args, **kwargs): ...
    def list_groups(*args, **kwargs): ...
    def list_matching(*args, **kwargs): ...
    def set_search_path(*args, **kwargs): ...

class SpaceDrawer:
    def bind_matrix_setting(*args, **kwargs): ...
    def get_enable_matrix(*args, **kwargs): ...
    def get_matrix(*args, **kwargs): ...
    def get_types_for_locations(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_enable_matrix(*args, **kwargs): ...
    def set_matrix(*args, **kwargs): ...
    def set_types_for_locations(*args, **kwargs): ...

class Style:
    def apply(*args, **kwargs): ...
    def copy(*args, **kwargs): ...

class StyleScheme:
    def get_authors(*args, **kwargs): ...
    def get_description(*args, **kwargs): ...
    def get_filename(*args, **kwargs): ...
    def get_id(*args, **kwargs): ...
    def get_metadata(*args, **kwargs): ...
    def get_name(*args, **kwargs): ...
    def get_style(*args, **kwargs): ...

class StyleSchemeChooser:
    def get_style_scheme(*args, **kwargs): ...
    def set_style_scheme(*args, **kwargs): ...

class StyleSchemeChooserButton: ...

class StyleSchemeChooserInterface:
    _reserved = ...
    base_interface = ...
    get_style_scheme = ...
    set_style_scheme = ...

class StyleSchemeChooserWidget:
    def new(*args, **kwargs): ...

class StyleSchemeManager:
    def append_search_path(*args, **kwargs): ...
    def force_rescan(*args, **kwargs): ...
    @classmethod
    def get_default(cls) -> StyleSchemeManager: ...
    def get_scheme(self, scheme_id: str) -> StyleScheme: ...
    def get_scheme_ids(*args, **kwargs): ...
    def get_search_path(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def prepend_search_path(*args, **kwargs): ...
    def set_search_path(*args, **kwargs): ...

class StyleSchemePreview:
    def get_scheme(*args, **kwargs): ...
    def get_selected(*args, **kwargs): ...
    def new(*args, **kwargs): ...
    def set_selected(*args, **kwargs): ...

class Tag: ...

class View(Gtk.TextView):
    def get_auto_indent(*args, **kwargs): ...
    def get_background_pattern(*args, **kwargs): ...
    def get_buffer(self) -> Buffer: ...
    def get_completion(*args, **kwargs): ...
    def get_enable_snippets(*args, **kwargs): ...
    def get_highlight_current_line(*args, **kwargs): ...
    def get_hover(*args, **kwargs): ...
    def get_indent_on_tab(*args, **kwargs): ...
    def get_indent_width(*args, **kwargs): ...
    def get_indenter(*args, **kwargs): ...
    def get_insert_spaces_instead_of_tabs(*args, **kwargs): ...
    def get_mark_attributes(*args, **kwargs): ...
    def get_right_margin_position(*args, **kwargs): ...
    def get_show_line_marks(*args, **kwargs): ...
    def get_show_line_numbers(*args, **kwargs): ...
    def get_show_right_margin(*args, **kwargs): ...
    def get_smart_backspace(*args, **kwargs): ...
    def get_smart_home_end(*args, **kwargs): ...
    def get_space_drawer(*args, **kwargs): ...
    def get_tab_width(*args, **kwargs): ...
    def get_visual_column(*args, **kwargs): ...
    def indent_lines(*args, **kwargs): ...
    def push_snippet(*args, **kwargs): ...
    def set_auto_indent(*args, **kwargs): ...
    def set_background_pattern(*args, **kwargs): ...
    def set_enable_snippets(*args, **kwargs): ...
    def set_highlight_current_line(*args, **kwargs): ...
    def set_indent_on_tab(*args, **kwargs): ...
    def set_indent_width(*args, **kwargs): ...
    def set_indenter(*args, **kwargs): ...
    def set_insert_spaces_instead_of_tabs(*args, **kwargs): ...
    def set_mark_attributes(*args, **kwargs): ...
    def set_right_margin_position(*args, **kwargs): ...
    def set_show_line_marks(*args, **kwargs): ...
    def set_show_line_numbers(*args, **kwargs): ...
    def set_show_right_margin(*args, **kwargs): ...
    def set_smart_backspace(*args, **kwargs): ...
    def set_smart_home_end(*args, **kwargs): ...
    def set_tab_width(*args, **kwargs): ...
    def unindent_lines(*args, **kwargs): ...
    def do_line_mark_activated(self, *args, **kwargs): ...
    def do_move_lines(self, *args, **kwargs): ...
    def do_move_words(self, *args, **kwargs): ...
    def do_push_snippet(self, *args, **kwargs): ...
    def do_show_completion(self, *args, **kwargs): ...

class VimIMContext:
    def execute_command(*args, **kwargs): ...
    def get_command_bar_text(*args, **kwargs): ...
    def get_command_text(*args, **kwargs): ...
    def new(*args, **kwargs): ...

class FileSaverFlags(GObject.GFlags):
    CREATE_BACKUP = ...
    IGNORE_INVALID_CHARS = ...
    IGNORE_MODIFICATION_TIME = ...
    NONE = ...

class SortFlags(GObject.GFlags):
    CASE_SENSITIVE = ...
    NONE = ...
    REMOVE_DUPLICATES = ...
    REVERSE_ORDER = ...

class SpaceLocationFlags(GObject.GFlags):
    ALL = ...
    INSIDE_TEXT = ...
    LEADING = ...
    NONE = ...
    TRAILING = ...

class SpaceTypeFlags(GObject.GFlags):
    ALL = ...
    NBSP = ...
    NEWLINE = ...
    NONE = ...
    SPACE = ...
    TAB = ...

class BackgroundPatternType(GObject.GEnum):
    GRID = ...
    NONE = ...

class BracketMatchType(GObject.GEnum):
    FOUND = ...
    NONE = ...
    NOT_FOUND = ...
    OUT_OF_RANGE = ...

class ChangeCaseType(GObject.GEnum):
    LOWER = ...
    TITLE = ...
    TOGGLE = ...
    UPPER = ...

class CompletionActivation(GObject.GEnum):
    INTERACTIVE = ...
    NONE = ...
    USER_REQUESTED = ...

class CompletionColumn(GObject.GEnum):
    AFTER = ...
    BEFORE = ...
    COMMENT = ...
    DETAILS = ...
    ICON = ...
    TYPED_TEXT = ...

class CompressionType(GObject.GEnum):
    GZIP = ...
    NONE = ...

class FileLoaderError(GObject.GEnum):
    CONVERSION_FALLBACK = ...
    ENCODING_AUTO_DETECTION_FAILED = ...
    TOO_BIG = ...
    quark = ...

class FileSaverError(GObject.GEnum):
    EXTERNALLY_MODIFIED = ...
    INVALID_CHARS = ...
    quark = ...

class GutterRendererAlignmentMode(GObject.GEnum):
    CELL = ...
    FIRST = ...
    LAST = ...

class NewlineType(GObject.GEnum):
    CR = ...
    CR_LF = ...
    LF = ...

class SmartHomeEndType(GObject.GEnum):
    AFTER = ...
    ALWAYS = ...
    BEFORE = ...
    DISABLED = ...

class ViewGutterPosition(GObject.GEnum):
    LINES = ...
    MARKS = ...
